<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DRF</title>
      <link href="/2022/06/23/DRF/"/>
      <url>/2022/06/23/DRF/</url>
      
        <content type="html"><![CDATA[<h2 id="一、开发模式和RESTful"><a href="#一、开发模式和RESTful" class="headerlink" title="一、开发模式和RESTful"></a>一、开发模式和RESTful</h2><h3 id="1、web应用开发模式"><a href="#1、web应用开发模式" class="headerlink" title="1、web应用开发模式"></a>1、web应用开发模式</h3><h4 id="1-1、前后端不分离"><a href="#1-1、前后端不分离" class="headerlink" title="1.1、前后端不分离"></a>1.1、前后端不分离</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前后端混合开发（前后端不分离）：返回的是html的内容，需要写模板</span></span><br><span class="line"><span class="comment"># java---》jsp</span></span><br><span class="line">https://www.pearvideo.com/category_loading.jsp</span><br><span class="line"><span class="comment">#php写的</span></span><br><span class="line">http://www.aa7a.cn/user.php</span><br><span class="line"><span class="comment"># python写的</span></span><br><span class="line">http://www.aa7a.cn/user.html</span><br></pre></td></tr></table></figure><h4 id="1-2、前后端分离"><a href="#1-2、前后端分离" class="headerlink" title="1.2、前后端分离"></a>1.2、前后端分离</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前后端分离：只专注于写后端接口，返回json，xml格式数据</span></span><br><span class="line"><span class="comment"># xml格式</span></span><br><span class="line">&lt;xml&gt;</span><br><span class="line">&lt;name&gt;Tom&lt;/name&gt;</span><br><span class="line">&lt;/xml&gt;</span><br><span class="line"><span class="comment"># json</span></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Tom&quot;</span>&#125;</span><br><span class="line"><span class="comment">#什么是动态页面（查数据库的），什么是静态页面（静止的html）</span></span><br></pre></td></tr></table></figure><h3 id="2、RESTful介绍"><a href="#2、RESTful介绍" class="headerlink" title="2、RESTful介绍"></a>2、RESTful介绍</h3><p> RESTful是目前最流行的API设计风格 ， REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。 </p><h4 id="2-1、RESTFUL特点："><a href="#2-1、RESTFUL特点：" class="headerlink" title="2.1、RESTFUL特点："></a>2.1、RESTFUL特点：</h4><ul><li><h6 id="1、每一个URI代表1种资源；"><a href="#1、每一个URI代表1种资源；" class="headerlink" title="1、每一个URI代表1种资源；"></a>1、每一个URI代表1种资源；</h6></li><li><h6 id="2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作："><a href="#2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：" class="headerlink" title="2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作："></a>2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：</h6><ul><li><h6 id="GET-用来获取资源"><a href="#GET-用来获取资源" class="headerlink" title="GET 用来获取资源"></a>GET 用来获取资源</h6></li><li><h6 id="POST-用来新建资源"><a href="#POST-用来新建资源" class="headerlink" title="POST 用来新建资源"></a>POST 用来新建资源</h6></li><li><h6 id="PUT-用来更新资源"><a href="#PUT-用来更新资源" class="headerlink" title="PUT 用来更新资源"></a>PUT 用来更新资源</h6></li><li><h6 id="DELETE-用来删除资源"><a href="#DELETE-用来删除资源" class="headerlink" title="DELETE 用来删除资源"></a>DELETE 用来删除资源</h6></li></ul></li><li><h6 id="3、通过操作资源的表现形式来操作资源；"><a href="#3、通过操作资源的表现形式来操作资源；" class="headerlink" title="3、通过操作资源的表现形式来操作资源；"></a>3、通过操作资源的表现形式来操作资源；</h6></li><li><h6 id="4、资源的形式是XML或者json；"><a href="#4、资源的形式是XML或者json；" class="headerlink" title="4、资源的形式是XML或者json；"></a>4、资源的形式是XML或者json；</h6></li><li><h6 id="5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。"><a href="#5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。" class="headerlink" title="5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。"></a>5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。</h6></li></ul><h3 id="3、RESTful-API设计风格"><a href="#3、RESTful-API设计风格" class="headerlink" title="3、RESTful API设计风格"></a>3、RESTful API设计风格</h3><h4 id="1、HTTP动词"><a href="#1、HTTP动词" class="headerlink" title="1、HTTP动词"></a>1、HTTP动词</h4><p>对于资源的具体操作类型，由HTTP动词表示。常用的HTTP动词有下面四个（括号里是对应的SQL命令）。</p><ul><li><h6 id="GET（SELECT）：从服务器取出资源（一项或多项）。"><a href="#GET（SELECT）：从服务器取出资源（一项或多项）。" class="headerlink" title="GET（SELECT）：从服务器取出资源（一项或多项）。"></a>GET（SELECT）：从服务器取出资源（一项或多项）。</h6></li><li><h6 id="POST（CREATE）：在服务器新建一个资源。"><a href="#POST（CREATE）：在服务器新建一个资源。" class="headerlink" title="POST（CREATE）：在服务器新建一个资源。"></a>POST（CREATE）：在服务器新建一个资源。</h6></li><li><h6 id="PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。"><a href="#PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。" class="headerlink" title="PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。"></a>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</h6></li><li><h6 id="DELETE（DELETE）：从服务器删除资源。"><a href="#DELETE（DELETE）：从服务器删除资源。" class="headerlink" title="DELETE（DELETE）：从服务器删除资源。"></a>DELETE（DELETE）：从服务器删除资源。</h6></li></ul><h4 id="2、url路径"><a href="#2、url路径" class="headerlink" title="2、url路径"></a>2、url路径</h4><ul><li><h5 id="url路径尽量用名词表示-而不用动词"><a href="#url路径尽量用名词表示-而不用动词" class="headerlink" title="url路径尽量用名词表示,而不用动词"></a>url路径尽量用名词表示,而不用动词</h5><ul><li><h6 id="不推荐："><a href="#不推荐：" class="headerlink" title="不推荐："></a>不推荐：</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://api.lemonban.com/getProjects</span><br><span class="line">http://api.lemonban.com/deleteEnvs</span><br></pre></td></tr></table></figure></li><li><h6 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:/api.lemonban.com/Projects</span><br><span class="line">http:/api.lemonban.com/Envs</span><br></pre></td></tr></table></figure><p>路径中的project表示操作的资源</p></li></ul></li><li><h5 id="不管是单一资源，还是所有资源，路径中名词尽量用复数"><a href="#不管是单一资源，还是所有资源，路径中名词尽量用复数" class="headerlink" title="不管是单一资源，还是所有资源，路径中名词尽量用复数"></a>不管是单一资源，还是所有资源，路径中名词尽量用复数</h5><ul><li><h6 id="推荐-1"><a href="#推荐-1" class="headerlink" title="推荐"></a>推荐</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取单个数据：</span><br><span class="line">GET方法： http://api.lemonban.comapi.lemonban.com/Env/1</span><br><span class="line"># 获取所有数据:</span><br><span class="line">GET方法： http://api.lemonban.com/rest/allEnvs</span><br></pre></td></tr></table></figure></li><li><h6 id="不推荐"><a href="#不推荐" class="headerlink" title="不推荐"></a>不推荐</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取单个数据：</span><br><span class="line">GET方法： http://api.lemonban.comapi.lemonban.com/Envs/1</span><br><span class="line"># 获取所有数据:</span><br><span class="line">GET方法： http://api.lemonban.com/rest/Envs</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3、过滤参数"><a href="#3、过滤参数" class="headerlink" title="3、过滤参数"></a>3、过滤参数</h4><p> 如果接口需要通过条件过滤返回结果 ，那么过滤的条件参数，应作为查询字符串参数传递。</p><ul><li><h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?limit=<span class="number">10</span>：指定返回记录的数量</span><br><span class="line">?offset=<span class="number">10</span>：指定返回记录的开始位置。</span><br><span class="line">?page=<span class="number">2</span>&amp;per_page=<span class="number">100</span>：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br></pre></td></tr></table></figure></li></ul><h4 id="4、返回状态码"><a href="#4、返回状态码" class="headerlink" title="4、返回状态码"></a>4、返回状态码</h4><p>客户端的每一次请求，服务器都必须给出回应。回应包括 HTTP 状态码和数据两部分。</p><p>HTTP 状态码就是一个三位数，分成五个类别。</p><blockquote><ul><li><code>1xx</code>：相关信息</li><li><code>2xx</code>：操作成功</li><li><code>3xx</code>：重定向</li><li><code>4xx</code>：客户端错误</li><li><code>5xx</code>：服务器错误</li></ul></blockquote><p>这五大类总共包含<a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">100多种</a>状态码，覆盖了绝大部分可能遇到的情况。每一种状态码都有标准的（或者约定的）解释，客户端只需查看状态码，就可以判断出发生了什么情况，所以服务器应该返回尽可能精确的状态码。</p><p>API 不需要<code>1xx</code>状态码，下面介绍其他四类状态码的精确含义。</p><h5 id="1-、2XX状态码"><a href="#1-、2XX状态码" class="headerlink" title="1)、2XX状态码"></a>1)、2XX状态码</h5><p><code>200</code>状态码表示操作成功，restful Api设计风格中，不同的方法可以返回更精确的状态码。</p><blockquote><ul><li>GET: 200 OK</li><li>POST: 201 Created</li><li>PUT: 200 OK</li><li>PATCH: 200 OK</li><li>DELETE: 204 No Content</li></ul></blockquote><p>上面代码中，<code>POST</code>返回<code>201</code>状态码，表示生成了新的资源；<code>DELETE</code>返回<code>204</code>状态码，表示资源已经不存在</p><ul><li><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><ul><li><code>202 Accepted</code>状态码表示服务器已经收到请求，但还未进行处理，会在未来再处理，通常用于<strong>异步操作</strong>。</li><li>发生错误时，不应该使用200状态码，</li></ul></li></ul><h5 id="2-、4XX状态码"><a href="#2-、4XX状态码" class="headerlink" title="2)、4XX状态码"></a>2)、4XX状态码</h5><p><code>4xx</code>状态码表示客户端错误，主要有下面几种。</p><blockquote><p><code>400 Bad Request</code>：服务器不理解客户端的请求，未做任何处理。</p><p><code>401 Unauthorized</code>：用户未提供身份验证凭据，或者没有通过身份验证。</p><p><code>403 Forbidden</code>：用户通过了身份验证，但是不具有访问资源所需的权限。</p><p><code>404 Not Found</code>：所请求的资源不存在，或不可用。</p><p><code>405 Method Not Allowed</code>：用户已经通过身份验证，但是所用的 HTTP 方法不在他的权限之内。</p><p><code>410 Gone</code>：所请求的资源已从这个地址转移，不再可用。</p><p><code>415 Unsupported Media Type</code>：客户端要求的返回格式不支持。比如，API 只能返回 JSON 格式，但是客户端要求返回 XML 格式。</p><p><code>422 Unprocessable Entity</code> ：客户端上传的附件无法处理，导致请求失败。</p><p><code>429 Too Many Requests</code>：客户端的请求次数超过限额。</p></blockquote><h5 id="3-、5XX-状态码"><a href="#3-、5XX-状态码" class="headerlink" title="3)、5XX 状态码"></a>3)、5XX 状态码</h5><p><code>5xx</code>状态码表示服务端错误。一般来说，API 不会向用户透露服务器的详细信息，所以只要两个状态码就够了</p><blockquote><p><code>500 Internal Server Error</code>：客户端请求有效，服务器处理时发生了意外。</p><p><code>503 Service Unavailable</code>：服务器无法处理请求，一般用于网站维护状态</p></blockquote><h4 id="5、返回内容"><a href="#5、返回内容" class="headerlink" title="5、返回内容"></a>5、返回内容</h4><p>服务器返回的数据格式，应该尽量使用JSON</p><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><ul><li>GET &#x2F;collection：返回资源对象的列表（数组）</li><li>GET &#x2F;collection&#x2F;1：返回单个资源对象</li><li>POST &#x2F;collection：返回新生成的资源对象</li><li>PUT &#x2F;collection&#x2F;resource：返回完整的资源对象</li><li>DELETE &#x2F;collection&#x2F;resource：返回一个空文档</li></ul><h2 id="二、DRF框架介绍"><a href="#二、DRF框架介绍" class="headerlink" title="二、DRF框架介绍"></a>二、DRF框架介绍</h2><p> Django REST framework 框架是一个用于构建Web API 的强大而又灵活的工具。</p><p>通常简称为DRF框架 或 REST framework。</p><p>DRF框架是建立在Django框架基础之上，由Tom Christie大牛二次开发的开源项目。</p><ul><li><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4></li></ul><blockquote><ul><li>提供了定义序列化器Serializer的方法，可以快速根据 Django ORM 或者其它库自动序列化&#x2F;反序列化；</li><li>提供了丰富的类视图、Mixin扩展类，简化视图的编写；</li><li>丰富的定制层级：函数视图、类视图、视图集合到自动生成 API，满足各种需要；</li><li>多种身份认证和权限认证方式的支持；</li><li>内置了限流系统；</li><li>直观的 API web 界面；</li><li>可扩展性，插件丰富</li></ul></blockquote><p>DRF（Django REST framework ）框架是建立在Django框架基础之上，是一个用于构建Web API 的强大而又灵活的工具，通常简称为DRF框架 或 REST framework。</p><h3 id="1、安装和使用"><a href="#1、安装和使用" class="headerlink" title="1、安装和使用"></a>1、安装和使用</h3><ul><li><h4 id="安装DRF"><a href="#安装DRF" class="headerlink" title="安装DRF"></a>安装DRF</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure><ul><li><h4 id="注册rest-framework应用"><a href="#注册rest-framework应用" class="headerlink" title="注册rest_framework应用"></a>注册rest_framework应用</h4></li></ul><p>我们利用在Django框架学习中创建的demo工程，在<strong>settings.py</strong>的<strong>INSTALLED_APPS</strong>中添加’rest_framework’。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2、Django开发RESTful接口"><a href="#2、Django开发RESTful接口" class="headerlink" title="2、Django开发RESTful接口"></a>2、Django开发RESTful接口</h3><ul><li><h5 id="1、定义模型类"><a href="#1、定义模型类" class="headerlink" title="1、定义模型类"></a>1、定义模型类</h5></li><li><h5 id="2、定义路由"><a href="#2、定义路由" class="headerlink" title="2、定义路由"></a>2、定义路由</h5></li><li><h5 id="3、定义视图"><a href="#3、定义视图" class="headerlink" title="3、定义视图"></a>3、定义视图</h5></li></ul><h3 id="3、DRF开发RESTful接口"><a href="#3、DRF开发RESTful接口" class="headerlink" title="3、DRF开发RESTful接口"></a>3、DRF开发RESTful接口</h3><ul><li><h5 id="1、定义模型类-1"><a href="#1、定义模型类-1" class="headerlink" title="1、定义模型类"></a>1、定义模型类</h5></li><li><h5 id="2、定义序列化器"><a href="#2、定义序列化器" class="headerlink" title="2、定义序列化器"></a>2、定义序列化器</h5></li><li><h5 id="3、定义路由"><a href="#3、定义路由" class="headerlink" title="3、定义路由"></a>3、定义路由</h5></li><li><h5 id="4、定义视图"><a href="#4、定义视图" class="headerlink" title="4、定义视图"></a>4、定义视图</h5></li></ul><h2 id="三、序列化器"><a href="#三、序列化器" class="headerlink" title="三、序列化器"></a>三、序列化器</h2><ul><li><h5 id="序列化器的作用："><a href="#序列化器的作用：" class="headerlink" title="序列化器的作用："></a>序列化器的作用：</h5><ul><li><h6 id="进行数据的校验"><a href="#进行数据的校验" class="headerlink" title="进行数据的校验"></a>进行数据的校验</h6></li><li><h6 id="对数据对象进行转换"><a href="#对数据对象进行转换" class="headerlink" title="对数据对象进行转换"></a>对数据对象进行转换</h6></li></ul></li></ul><h3 id="1、序列化器的定义"><a href="#1、序列化器的定义" class="headerlink" title="1、序列化器的定义"></a>1、序列化器的定义</h3><p>​ Django REST framework中的序列化器通过类来定义，必须继承自rest_framework.serializers.Serializer ，序列化器中的字段和模型类中的字段类型保持一致</p><ul><li><h5 id="模型类如下："><a href="#模型类如下：" class="headerlink" title="模型类如下："></a>模型类如下：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipCourseData</span>(models.Model):</span><br><span class="line">    stu_number = models.CharField(max_length=<span class="number">20</span>, default=<span class="literal">None</span>, verbose_name=<span class="string">&#x27;学习人数&#x27;</span>)</span><br><span class="line">    sum_number = models.CharField(max_length=<span class="number">20</span>, default=<span class="literal">None</span>, verbose_name=<span class="string">&#x27;累计人数&#x27;</span>)</span><br><span class="line">    course_score = models.CharField(max_length=<span class="number">20</span>, default=<span class="literal">None</span>, verbose_name=<span class="string">&#x27;课程评分&#x27;</span>)</span><br><span class="line">    price = models.CharField(max_length=<span class="number">40</span>, default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;课程价格&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h5 id="序列化器的定义"><a href="#序列化器的定义" class="headerlink" title="序列化器的定义"></a>序列化器的定义</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipCourseDataSerializer</span>(serializers.Serializer):</span><br><span class="line">    stu_number = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    sum_number = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    course_score = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    price = serializers.CharField(max_length=<span class="number">40</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、字段类型与选项"><a href="#2、字段类型与选项" class="headerlink" title="2、字段类型与选项"></a>2、字段类型与选项</h3><p><strong>常用字段类型</strong>：</p><table><thead><tr><th>字段</th><th>字段构造方式</th></tr></thead><tbody><tr><td><strong>BooleanField</strong></td><td>BooleanField()</td></tr><tr><td><strong>NullBooleanField</strong></td><td>NullBooleanField()</td></tr><tr><td><strong>CharField</strong></td><td>CharField(max_length&#x3D;None, min_length&#x3D;None, allow_blank&#x3D;False, trim_whitespace&#x3D;True)</td></tr><tr><td><strong>EmailField</strong></td><td>EmailField(max_length&#x3D;None, min_length&#x3D;None, allow_blank&#x3D;False)</td></tr><tr><td><strong>RegexField</strong></td><td>RegexField(regex, max_length&#x3D;None, min_length&#x3D;None, allow_blank&#x3D;False)</td></tr><tr><td><strong>SlugField</strong></td><td>SlugField(max<em>length&#x3D;50, min_length&#x3D;None, allow_blank&#x3D;False) 正则字段，验证正则模式 [a-zA-Z0-9</em>-]+</td></tr><tr><td><strong>URLField</strong></td><td>URLField(max_length&#x3D;200, min_length&#x3D;None, allow_blank&#x3D;False)</td></tr><tr><td><strong>IPAddressField</strong></td><td>IPAddressField(protocol&#x3D;’both’, unpack_ipv4&#x3D;False, **options)</td></tr><tr><td><strong>IntegerField</strong></td><td>IntegerField(max_value&#x3D;None, min_value&#x3D;None)</td></tr><tr><td><strong>FloatField</strong></td><td>FloatField(max_value&#x3D;None, min_value&#x3D;None)</td></tr><tr><td><strong>DecimalField</strong></td><td>DecimalField(max_digits, decimal_places, coerce_to_string&#x3D;None, max_value&#x3D;None, min_value&#x3D;None) max_digits: 最多位数 decimal_palces: 小数点位置</td></tr><tr><td><strong>DateTimeField</strong></td><td>DateTimeField(format&#x3D;api_settings.DATETIME_FORMAT, input_formats&#x3D;None)</td></tr><tr><td><strong>DateField</strong></td><td>DateField(format&#x3D;api_settings.DATE_FORMAT, input_formats&#x3D;None)</td></tr><tr><td><strong>TimeField</strong></td><td>TimeField(format&#x3D;api_settings.TIME_FORMAT, input_formats&#x3D;None)</td></tr><tr><td><strong>DurationField</strong></td><td>DurationField()</td></tr><tr><td><strong>ChoiceField</strong></td><td>ChoiceField(choices) choices与Django的用法相同</td></tr><tr><td><strong>MultipleChoiceField</strong></td><td>MultipleChoiceField(choices)</td></tr><tr><td><strong>FileField</strong></td><td>FileField(max_length&#x3D;None, allow_empty_file&#x3D;False, use_url&#x3D;UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ImageField</strong></td><td>ImageField(max_length&#x3D;None, allow_empty_file&#x3D;False, use_url&#x3D;UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ListField</strong></td><td>ListField(child&#x3D;, min_length&#x3D;None, max_length&#x3D;None)</td></tr><tr><td><strong>DictField</strong></td><td>DictField(child&#x3D;)</td></tr></tbody></table><p><strong>选项参数：</strong></p><table><thead><tr><th>参数名称</th><th>作用</th></tr></thead><tbody><tr><td><strong>max_length</strong></td><td>最大长度</td></tr><tr><td><strong>min_lenght</strong></td><td>最小长度</td></tr><tr><td><strong>allow_blank</strong></td><td>是否允许为空</td></tr><tr><td><strong>trim_whitespace</strong></td><td>是否截断空白字符</td></tr><tr><td><strong>max_value</strong></td><td>最小值</td></tr><tr><td><strong>min_value</strong></td><td>最大值</td></tr></tbody></table><h4 id="通用参数："><a href="#通用参数：" class="headerlink" title="通用参数："></a>通用参数：</h4><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>read_only</strong></td><td>表明该字段仅用于序列化输出，默认False</td></tr><tr><td><strong>write_only</strong></td><td>表明该字段仅用于反序列化输入，默认False</td></tr><tr><td><strong>required</strong></td><td>表明该字段在反序列化时必须输入，默认True</td></tr><tr><td><strong>default</strong></td><td>反序列化时使用的默认值</td></tr><tr><td><strong>allow_null</strong></td><td>表明该字段是否允许传入None，默认False</td></tr><tr><td><strong>validators</strong></td><td>该字段使用的验证器</td></tr><tr><td><strong>error_messages</strong></td><td>包含错误编号与错误信息的字典</td></tr><tr><td><strong>label</strong></td><td>用于HTML展示API页面时，显示的字段名称</td></tr><tr><td><strong>help_text</strong></td><td>用于HTML展示API页面时，显示的字段帮助提示信息</td></tr></tbody></table><h3 id="3、序列化操作"><a href="#3、序列化操作" class="headerlink" title="3、序列化操作"></a>3、序列化操作</h3><ul><li><h4 id="序列化-—-gt-将python对象-转换为json格式数据"><a href="#序列化-—-gt-将python对象-转换为json格式数据" class="headerlink" title="序列化  —&gt; 将python对象  转换为json格式数据"></a>序列化  —&gt; 将python对象  转换为json格式数据</h4></li></ul><p>定义好Serializer类后，如果要通过序列化器类类进行序列化，需要先创建Serializer对象了。</p><p>Serializer的参数为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Serializer(instance=<span class="literal">None</span>, data=empty, **kwarg)</span><br></pre></td></tr></table></figure><p>说明：</p><p>1）用于序列化时，将模型类对象传入<strong>instance</strong>参数</p><p>2）用于反序列化时，将要被反序列化的数据传入<strong>data</strong>参数</p><p>3）除了instance和data参数外，在构造Serializer对象时，还可通过<strong>context</strong>参数额外添加数据，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serializer = AccountSerializer(account, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br></pre></td></tr></table></figure><p><strong>通过context参数附加的数据，可以通过Serializer对象的context属性获取。</strong></p><h4 id="1、视图中的序列化操作"><a href="#1、视图中的序列化操作" class="headerlink" title="1、视图中的序列化操作"></a>1、视图中的序列化操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;查询所有数据&quot;&quot;&quot;</span></span><br><span class="line">    cs = VipCourseData.objects.<span class="built_in">all</span>()</span><br><span class="line">    ser =VipCourseDataSerializer(instance=cs, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(ser.data, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h6 id="对多个数据进行序列化加参数：many-x3D-True"><a href="#对多个数据进行序列化加参数：many-x3D-True" class="headerlink" title="对多个数据进行序列化加参数：many&#x3D;True"></a>对多个数据进行序列化加参数：many&#x3D;True</h6></li></ul><h4 id="2、关联对象嵌套序列化"><a href="#2、关联对象嵌套序列化" class="headerlink" title="2、关联对象嵌套序列化"></a>2、关联对象嵌套序列化</h4><p>​对多个数据进行序列化加参数：many&#x3D;True</p><ul><li><h5 id="1、PrimaryKeyRelatedField"><a href="#1、PrimaryKeyRelatedField" class="headerlink" title="1、PrimaryKeyRelatedField"></a>1、PrimaryKeyRelatedField</h5><ul><li>返回关联字段的id</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">course = serializers.PrimaryKeyRelatedField()</span><br></pre></td></tr></table></figure></li><li><h5 id="2、StringRelatedField"><a href="#2、StringRelatedField" class="headerlink" title="2、StringRelatedField"></a>2、StringRelatedField</h5><ul><li>返回关联字段模型类<code>__str__</code>方法返回的内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">course = serializers.StringRelatedField()</span><br></pre></td></tr></table></figure></li><li><h5 id="3、使用关联对象的序列化器"><a href="#3、使用关联对象的序列化器" class="headerlink" title="3、使用关联对象的序列化器"></a>3、使用关联对象的序列化器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关联模型类的序列化器</span></span><br><span class="line">cuorse = CourseSerializer()</span><br></pre></td></tr></table></figure></li></ul><h3 id="4、反序列化操作"><a href="#4、反序列化操作" class="headerlink" title="4、反序列化操作"></a>4、反序列化操作</h3><ul><li><h4 id="反序列化-—-gt-将json格式数据-转换为python对象"><a href="#反序列化-—-gt-将json格式数据-转换为python对象" class="headerlink" title="反序列化  —&gt; 将json格式数据  转换为python对象"></a>反序列化  —&gt; 将json格式数据  转换为python对象</h4></li></ul><p>在进行反序列化操作是，会先对象数据进行验证，验证通过的情况下再进行保存</p><p>反序列化时，初始化序列化器对象，将要被反序列化的数据传入<strong>data</strong>参数</p><h4 id="1、数据验证"><a href="#1、数据验证" class="headerlink" title="1、数据验证"></a>1、数据验证</h4><ul><li><h5 id="1、校验数据"><a href="#1、校验数据" class="headerlink" title="1、校验数据"></a>1、校验数据</h5><ul><li><h6 id="调用-is-valid-方法进行验证，验证成功返回True，否则返回False"><a href="#调用-is-valid-方法进行验证，验证成功返回True，否则返回False" class="headerlink" title="调用**is_valid()**方法进行验证，验证成功返回True，否则返回False"></a>调用**is_valid()**方法进行验证，验证成功返回True，否则返回False</h6></li><li><h6 id="验证证成功，可以通过序列化器对象的validated-data属性获取数据"><a href="#验证证成功，可以通过序列化器对象的validated-data属性获取数据" class="headerlink" title="验证证成功，可以通过序列化器对象的validated_data属性获取数据"></a>验证证成功，可以通过序列化器对象的<strong>validated_data</strong>属性获取数据</h6></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ser = BookSerializer(data=data)  </span><br><span class="line">ser.is_valid()  </span><br></pre></td></tr></table></figure><ul><li><h6 id="注意：is-valid-会根据序列化器中字段对应的约束来进行校验"><a href="#注意：is-valid-会根据序列化器中字段对应的约束来进行校验" class="headerlink" title="注意：is_valid()会根据序列化器中字段对应的约束来进行校验"></a>注意：is_valid()会根据序列化器中字段对应的约束来进行校验</h6></li></ul></li></ul><h4 id="2、常用字段说明"><a href="#2、常用字段说明" class="headerlink" title="2、常用字段说明"></a>2、常用字段说明</h4><ul><li><h5 id="1、字段长度和是否校验的参数"><a href="#1、字段长度和是否校验的参数" class="headerlink" title="1、字段长度和是否校验的参数"></a>1、字段长度和是否校验的参数</h5><p>字段选项参数前面都列出来了，常用的几个字段</p><blockquote><ul><li><h6 id="max-length-字段的长度校验"><a href="#max-length-字段的长度校验" class="headerlink" title="max_length:字段的长度校验"></a>max_length:字段的长度校验</h6></li><li><h6 id="min-length-字段的长度校验"><a href="#min-length-字段的长度校验" class="headerlink" title="min_length:字段的长度校验"></a>min_length:字段的长度校验</h6></li><li><h6 id="required-x3D-False：不需要校验字段是否为空"><a href="#required-x3D-False：不需要校验字段是否为空" class="headerlink" title="required&#x3D;False：不需要校验字段是否为空"></a>required&#x3D;False：不需要校验字段是否为空</h6></li></ul></blockquote></li><li><h5 id="2、控制序列化和反序列化的字段"><a href="#2、控制序列化和反序列化的字段" class="headerlink" title="2、控制序列化和反序列化的字段"></a>2、控制序列化和反序列化的字段</h5><blockquote><ul><li><h6 id="read-only-x3D-Ture：只参与序列号返回，不参与反序列化校验"><a href="#read-only-x3D-Ture：只参与序列号返回，不参与反序列化校验" class="headerlink" title="read_only &#x3D; Ture：只参与序列号返回，不参与反序列化校验"></a>read_only &#x3D; Ture：只参与序列号返回，不参与反序列化校验</h6></li></ul></blockquote></li></ul><blockquote><ul><li><h6 id="write-only-x3D-True-：只参与反序列化校验，不参与序列号返回"><a href="#write-only-x3D-True-：只参与反序列化校验，不参与序列号返回" class="headerlink" title="write_only &#x3D; True ：只参与反序列化校验，不参与序列号返回"></a>write_only &#x3D; True ：只参与反序列化校验，不参与序列号返回</h6></li></ul></blockquote><p>​         </p><h4 id="3、自定义验证方法"><a href="#3、自定义验证方法" class="headerlink" title="3、自定义验证方法"></a>3、自定义验证方法</h4><ul><li><h5 id="对单一字段进行验证"><a href="#对单一字段进行验证" class="headerlink" title="对单一字段进行验证"></a>对单一字段进行验证</h5><ul><li><h6 id="验证方法名的规范：validate-字段名"><a href="#验证方法名的规范：validate-字段名" class="headerlink" title="验证方法名的规范：validate_字段名"></a>验证方法名的规范：validate_字段名</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">validate_title</span>(<span class="params">self,value</span>):               </span><br><span class="line">:params value : 字段值                </span><br><span class="line">验证处理逻辑  </span><br></pre></td></tr></table></figure></li><li><h5 id="对多个字段进行验证"><a href="#对多个字段进行验证" class="headerlink" title="对多个字段进行验证"></a>对多个字段进行验证</h5><ul><li><h6 id="验证方法名-validate"><a href="#验证方法名-validate" class="headerlink" title="验证方法名:validate"></a>验证方法名:validate</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self,attrs</span>):                </span><br><span class="line">    :params attrs : 包含所有字段的值的（类似字典）                   </span><br><span class="line">    验证处理逻辑</span><br></pre></td></tr></table></figure></li><li><h4 id="通过validators字段指定验证方法"><a href="#通过validators字段指定验证方法" class="headerlink" title="通过validators字段指定验证方法"></a>通过validators字段指定验证方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">length_validate</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span>(<span class="number">10</span>&lt;<span class="built_in">len</span>(value)&lt;<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;字段的长度不在10-20之间&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.Serializer):</span><br><span class="line">    stu_number = serializers.CharField(max_length=<span class="number">20</span>,validators=[])</span><br><span class="line">    sum_number = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    course_score = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    price = serializers.CharField(max_length=<span class="number">40</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="4、保存数据：save方法"><a href="#4、保存数据：save方法" class="headerlink" title="4、保存数据：save方法"></a>4、保存数据：save方法</h4><p>验证通过后，如需保存数据，直接调用序列化器对象的save方法即可，save方法会自动触发序列化器中对应的方法来保存数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line">ser = BookSerializer(data=data)   </span><br><span class="line"><span class="comment"># 校验数据</span></span><br><span class="line">ser.is_valid()   </span><br><span class="line"><span class="comment"># 保存数据</span></span><br><span class="line">ser.save() </span><br></pre></td></tr></table></figure><ul><li><h5 id="注意点：-1"><a href="#注意点：-1" class="headerlink" title="注意点："></a>注意点：</h5><ul><li><h6 id="保存：sava会调用序列化器中定义create方法"><a href="#保存：sava会调用序列化器中定义create方法" class="headerlink" title="保存：sava会调用序列化器中定义create方法"></a>保存：sava会调用序列化器中定义create方法</h6></li><li><h6 id="更新：sava会调用序列化器中定义update方"><a href="#更新：sava会调用序列化器中定义update方" class="headerlink" title="更新：sava会调用序列化器中定义update方"></a>更新：sava会调用序列化器中定义update方</h6></li></ul></li></ul><h3 id="5、模型序列化器"><a href="#5、模型序列化器" class="headerlink" title="5、模型序列化器"></a>5、模型序列化器</h3><p>为了方便我们定义序列化器，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。</p><p>ModelSerializer与常规的Serializer相同，但提供了：</p><ul><li>基于模型类自动生成一系列字段</li><li>基于模型类自动为Serializer生成validators，比如unique_together</li><li>包含默认的create()和update()的实现</li></ul><h4 id="1、模型序列化器的使用"><a href="#1、模型序列化器的使用" class="headerlink" title="1、模型序列化器的使用"></a>1、模型序列化器的使用</h4><ul><li><h6 id="定义模型序列化器类，直接继承于serializers-ModelSerializer即可"><a href="#定义模型序列化器类，直接继承于serializers-ModelSerializer即可" class="headerlink" title="定义模型序列化器类，直接继承于serializers.ModelSerializer即可"></a>定义模型序列化器类，直接继承于serializers.ModelSerializer即可</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><h5 id="指定模型类和需要序列化得字段"><a href="#指定模型类和需要序列化得字段" class="headerlink" title="指定模型类和需要序列化得字段"></a>指定模型类和需要序列化得字段</h5><ul><li><h6 id="model-指明参照哪个模型类"><a href="#model-指明参照哪个模型类" class="headerlink" title="model 指明参照哪个模型类"></a>model 指明参照哪个模型类</h6></li><li><h6 id="fields-指明为模型类的哪些字段生成"><a href="#fields-指明为模型类的哪些字段生成" class="headerlink" title="fields 指明为模型类的哪些字段生成"></a>fields 指明为模型类的哪些字段生成</h6></li></ul></li></ul><h4 id="2、指定字段"><a href="#2、指定字段" class="headerlink" title="2、指定字段"></a>2、指定字段</h4><h5 id="1、fields"><a href="#1、fields" class="headerlink" title="1、fields"></a>1、fields</h5><ul><li><h6 id="fields-x3D-all-代表模型类中得所有字段都进行序列化"><a href="#fields-x3D-all-代表模型类中得所有字段都进行序列化" class="headerlink" title="fields &#x3D; __all__代表模型类中得所有字段都进行序列化"></a>fields &#x3D; <code>__all__</code>代表模型类中得所有字段都进行序列化</h6></li><li><h6 id="也可以通过fields指定具体字段"><a href="#也可以通过fields指定具体字段" class="headerlink" title="也可以通过fields指定具体字段"></a>也可以通过fields指定具体字段</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line"> <span class="comment"># fields = &#x27;__all__&#x27;   # 所有字段</span></span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;tu_number&#x27;</span>,<span class="string">&#x27;sum_number&#x27;</span>)  <span class="comment"># 指定序列化得字段</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="2、exclude"><a href="#2、exclude" class="headerlink" title="2、exclude"></a>2、exclude</h5><ul><li><h6 id="使用exclude可以明确排除掉哪些字段"><a href="#使用exclude可以明确排除掉哪些字段" class="headerlink" title="使用exclude可以明确排除掉哪些字段"></a>使用exclude可以明确排除掉哪些字段</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line">        exclude = (<span class="string">&#x27;id&#x27;</span>,)  <span class="comment"># id字段不参与序列化</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="3、-read-only-fields"><a href="#3、-read-only-fields" class="headerlink" title="3、 read_only_fields"></a>3、 read_only_fields</h5><ul><li><h6 id="通过read-only-fields可以指明只读的字段"><a href="#通过read-only-fields可以指明只读的字段" class="headerlink" title="通过read_only_fields可以指明只读的字段"></a>通过read_only_fields可以指明只读的字段</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span>  </span><br><span class="line">        read_only_fields = (<span class="string">&#x27;id&#x27;</span>,) </span><br></pre></td></tr></table></figure></li></ul><h4 id="3、修改字段的参数选项"><a href="#3、修改字段的参数选项" class="headerlink" title="3、修改字段的参数选项"></a>3、修改字段的参数选项</h4><ul><li><h6 id="使用extra-kwargs参数为ModelSerializer添加或修改原有的选项参数"><a href="#使用extra-kwargs参数为ModelSerializer添加或修改原有的选项参数" class="headerlink" title="使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数"></a>使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数</h6><ul><li>通过字段名指定字段对应的参数和值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line"> <span class="comment"># fields = &#x27;__all__&#x27;   </span></span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;tu_number&#x27;</span>,<span class="string">&#x27;sum_number&#x27;</span>)  </span><br><span class="line">extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;tu_numbe&#x27;</span>: &#123;<span class="string">&#x27;min_value&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;sum_number&#x27;</span>: &#123;<span class="string">&#x27;min_value&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、视图"><a href="#四、视图" class="headerlink" title="四、视图"></a>四、视图</h2><h3 id="1、Request对象"><a href="#1、Request对象" class="headerlink" title="1、Request对象"></a>1、Request对象</h3><p>​REST framework 传入视图的request对象不再是Django默认的HttpRequest对象，而是REST framework提供的扩展了HttpRequest类的Request类的对象。无论前端发送的哪种格式的数据，我们都可以以统一的方式读取数据。</p><h4 id="1、data属性"><a href="#1、data属性" class="headerlink" title="1、data属性"></a>1、data属性</h4><p>request.data 获取请求体数据。</p><ul><li>不仅支持表单类型数据，也支持JSON数据，还支持文件数据的获取</li></ul><h4 id="2、query-params"><a href="#2、query-params" class="headerlink" title="2、query_params"></a>2、query_params</h4><p>request.query_params获取查询字符串参数的，Django的<code>request.GET</code>的作用一样</p><h3 id="2、Response对象"><a href="#2、Response对象" class="headerlink" title="2、Response对象"></a>2、Response对象</h3><p>rest_framework.response.Response</p><p>REST framework提供了一个响应类<code>Response</code>，使用该类构造响应对象时，响应的具体数据内容会被转换（render渲染）成符合前端需求的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response(data, status=<span class="literal">None</span>, template_name=<span class="literal">None</span>, headers=<span class="literal">None</span>, content_type=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><code>data</code>不能是复杂结构的数据，如Django的模型类对象，对于这样的数据我们可以使用<code>Serializer</code>序列化器序列化处理后（转为了Python字典类型）再传递给<code>data</code>参数。</p><h4 id="1、Response参数说明"><a href="#1、Response参数说明" class="headerlink" title="1、Response参数说明:"></a>1、Response参数说明:</h4><ul><li><code>data</code>: 为响应准备的序列化处理后的数据；</li><li><code>status</code>: 状态码，默认200；</li><li><code>template_name</code>: 模板名称，如果使用<code>HTMLRenderer</code> 时需指明；</li><li><code>headers</code>: 用于存放响应头信息的字典；</li><li><code>content_type</code>: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数</li></ul><h3 id="3、APIView"><a href="#3、APIView" class="headerlink" title="3、APIView"></a>3、APIView</h3><p> rest_framework.views.APIView 继承django的View ，在View的基础上做了更多的功能扩展。</p><h4 id="1、APIView与View的区别："><a href="#1、APIView与View的区别：" class="headerlink" title="1、APIView与View的区别："></a>1、<code>APIView</code>与<code>View</code>的区别：</h4><ul><li><h6 id="传入到视图方法中的是REST-framework的Request对象"><a href="#传入到视图方法中的是REST-framework的Request对象" class="headerlink" title="传入到视图方法中的是REST framework的Request对象"></a>传入到视图方法中的是REST framework的<code>Request</code>对象</h6></li><li><h6 id="视图方法可以返回REST-framework的Response对象"><a href="#视图方法可以返回REST-framework的Response对象" class="headerlink" title="视图方法可以返回REST framework的Response对象"></a>视图方法可以返回REST framework的<code>Response</code>对象</h6></li><li><h6 id="任何APIException异常都会被捕获到，并且处理成合适的响应信息；"><a href="#任何APIException异常都会被捕获到，并且处理成合适的响应信息；" class="headerlink" title="任何APIException异常都会被捕获到，并且处理成合适的响应信息；"></a>任何<code>APIException</code>异常都会被捕获到，并且处理成合适的响应信息；</h6></li><li><h6 id="扩展了身份认证、权限检查、流量控制这三个功能"><a href="#扩展了身份认证、权限检查、流量控制这三个功能" class="headerlink" title="扩展了身份认证、权限检查、流量控制这三个功能"></a>扩展了身份认证、权限检查、流量控制这三个功能</h6></li></ul><h4 id="2、扩展的功能（后面讲）："><a href="#2、扩展的功能（后面讲）：" class="headerlink" title="2、扩展的功能（后面讲）："></a>2、扩展的功能（后面讲）：</h4><ul><li><h6 id="authentication-classes-：身份认证"><a href="#authentication-classes-：身份认证" class="headerlink" title="authentication_classes  ：身份认证"></a><strong>authentication_classes</strong>  ：身份认证</h6></li><li><h6 id="permissoin-classes-：权限检查"><a href="#permissoin-classes-：权限检查" class="headerlink" title="permissoin_classes ：权限检查"></a><strong>permissoin_classes</strong> ：权限检查</h6></li><li><h6 id="throttle-classes-：-限流"><a href="#throttle-classes-：-限流" class="headerlink" title="throttle_classes ： 限流"></a><strong>throttle_classes</strong> ： 限流</h6></li></ul><h3 id="4、GenericAPIView"><a href="#4、GenericAPIView" class="headerlink" title="4、GenericAPIView"></a>4、GenericAPIView</h3><p>rest_framework.generics.GenericAPIView 继承自<code>APIVIew</code>，增加了对于列表视图和详情视图可能用到的通用支持方法。</p><h4 id="1、扩展的类属性："><a href="#1、扩展的类属性：" class="headerlink" title="1、扩展的类属性："></a>1、扩展的类属性：</h4><ul><li><h6 id="queryset：-指定当前类视图使用的查询集"><a href="#queryset：-指定当前类视图使用的查询集" class="headerlink" title="queryset： 指定当前类视图使用的查询集"></a>queryset： 指定当前类视图使用的查询集</h6></li><li><h6 id="serializer-class-：类视图使用的序列化器"><a href="#serializer-class-：类视图使用的序列化器" class="headerlink" title="serializer_class  ：类视图使用的序列化器"></a>serializer_class  ：类视图使用的序列化器</h6></li></ul><h4 id="2、扩展的方法："><a href="#2、扩展的方法：" class="headerlink" title="2、扩展的方法："></a>2、扩展的方法：</h4><ul><li><h6 id="self-queryset-获取查询集"><a href="#self-queryset-获取查询集" class="headerlink" title="self.queryset():获取查询集"></a>self.queryset():获取查询集</h6></li><li><h6 id="self-serializer-获取序列化器"><a href="#self-serializer-获取序列化器" class="headerlink" title="self.serializer():获取序列化器"></a>self.serializer():获取序列化器</h6></li><li><h6 id="self-get-object-获取指定的单一对象"><a href="#self-get-object-获取指定的单一对象" class="headerlink" title="self.get_object():获取指定的单一对象"></a>self.get_object():获取指定的单一对象</h6></li></ul><h4 id="3、扩展功能（后面讲）："><a href="#3、扩展功能（后面讲）：" class="headerlink" title="3、扩展功能（后面讲）："></a>3、扩展功能（后面讲）：</h4><ul><li><h6 id="pagination-class-：数据分页"><a href="#pagination-class-：数据分页" class="headerlink" title="pagination_class ：数据分页"></a>pagination_class ：数据分页</h6></li><li><h6 id="filter-backends：数据过滤-amp-排序"><a href="#filter-backends：数据过滤-amp-排序" class="headerlink" title="filter_backends：数据过滤&amp;排序"></a>filter_backends：数据过滤&amp;排序</h6></li><li><p>指定单一数据获取的参数字段：</p><ul><li><strong>lookup_field</strong> 查询单一数据库对象时使用的条件字段，默认为’<code>pk</code>‘</li><li><strong>lookup_url_kwarg</strong> 查询单一数据时URL中的参数关键字名称，默认与<strong>look_field</strong>相同</li></ul></li></ul><h3 id="5、视图扩展类"><a href="#5、视图扩展类" class="headerlink" title="5、视图扩展类"></a>5、视图扩展类</h3><h4 id="1、基本扩展类"><a href="#1、基本扩展类" class="headerlink" title="1、基本扩展类"></a>1、基本扩展类</h4><ul><li><h5 id="ListModelMixin："><a href="#ListModelMixin：" class="headerlink" title="ListModelMixin："></a>ListModelMixin：</h5><ul><li><h6 id="列表视图扩展类，提供-96-list方法快速实现列表视图"><a href="#列表视图扩展类，提供-96-list方法快速实现列表视图" class="headerlink" title="列表视图扩展类，提供&#96;list方法快速实现列表视图"></a>列表视图扩展类，提供&#96;list方法快速实现列表视图</h6></li><li><h6 id="返回200状态码"><a href="#返回200状态码" class="headerlink" title="返回200状态码"></a>返回200状态码</h6></li></ul></li><li><h5 id="CreateModelMixin-："><a href="#CreateModelMixin-：" class="headerlink" title="CreateModelMixin ："></a>CreateModelMixin ：</h5><ul><li><h6 id="创建视图扩展类，提供create方法快速实现创建资源的视图"><a href="#创建视图扩展类，提供create方法快速实现创建资源的视图" class="headerlink" title="创建视图扩展类，提供create方法快速实现创建资源的视图"></a>创建视图扩展类，提供create方法快速实现创建资源的视图</h6></li><li><h6 id="成功返回201状态码，如果序列化器对前端发送的数据验证失败，返回400错误"><a href="#成功返回201状态码，如果序列化器对前端发送的数据验证失败，返回400错误" class="headerlink" title="成功返回201状态码，如果序列化器对前端发送的数据验证失败，返回400错误"></a>成功返回201状态码，如果序列化器对前端发送的数据验证失败，返回400错误</h6></li></ul></li><li><h5 id="RetrieveModelMixin：获取单一数据"><a href="#RetrieveModelMixin：获取单一数据" class="headerlink" title="RetrieveModelMixin：获取单一数据"></a>RetrieveModelMixin：获取单一数据</h5><ul><li><h6 id="详情视图扩展类，提供retrieve方法，可以快速实现返回一个存在的数据对象。"><a href="#详情视图扩展类，提供retrieve方法，可以快速实现返回一个存在的数据对象。" class="headerlink" title="详情视图扩展类，提供retrieve方法，可以快速实现返回一个存在的数据对象。"></a>详情视图扩展类，提供retrieve方法，可以快速实现返回一个存在的数据对象。</h6></li><li><h6 id="如果成功，返回200，-否则返回404。"><a href="#如果成功，返回200，-否则返回404。" class="headerlink" title="如果成功，返回200， 否则返回404。"></a>如果成功，返回200， 否则返回404。</h6></li></ul></li><li><h5 id="UpdateModelMixin：更新数据"><a href="#UpdateModelMixin：更新数据" class="headerlink" title="UpdateModelMixin：更新数据"></a>UpdateModelMixin：更新数据</h5><ul><li><h6 id="更新视图扩展类，提供update方法和partial-update方法，可以快速实现更新一个存在的数据对象。"><a href="#更新视图扩展类，提供update方法和partial-update方法，可以快速实现更新一个存在的数据对象。" class="headerlink" title="更新视图扩展类，提供update方法和partial_update方法，可以快速实现更新一个存在的数据对象。"></a>更新视图扩展类，提供update方法和partial_update方法，可以快速实现更新一个存在的数据对象。</h6></li><li><h6 id="成功返回200，序列化器校验数据失败时，返回400错误。"><a href="#成功返回200，序列化器校验数据失败时，返回400错误。" class="headerlink" title="成功返回200，序列化器校验数据失败时，返回400错误。"></a>成功返回200，序列化器校验数据失败时，返回400错误。</h6></li></ul></li><li><h5 id="DestroyModelMixin："><a href="#DestroyModelMixin：" class="headerlink" title="DestroyModelMixin："></a>DestroyModelMixin：</h5><ul><li><h6 id="删除视图扩展类，提供destroy方法，可以快速实现删除一个存在的数据对象。"><a href="#删除视图扩展类，提供destroy方法，可以快速实现删除一个存在的数据对象。" class="headerlink" title="删除视图扩展类，提供destroy方法，可以快速实现删除一个存在的数据对象。"></a>删除视图扩展类，提供destroy方法，可以快速实现删除一个存在的数据对象。</h6></li><li><h6 id="成功返回204，不存在返回404。"><a href="#成功返回204，不存在返回404。" class="headerlink" title="成功返回204，不存在返回404。"></a>成功返回204，不存在返回404。</h6></li></ul></li></ul><h4 id="2、视图扩展类"><a href="#2、视图扩展类" class="headerlink" title="2、视图扩展类"></a>2、视图扩展类</h4><ul><li><h5 id="1、CreateAPIView"><a href="#1、CreateAPIView" class="headerlink" title="1、CreateAPIView"></a>1、CreateAPIView</h5><ul><li><h6 id="继承自：-GenericAPIView、CreateModelMixin"><a href="#继承自：-GenericAPIView、CreateModelMixin" class="headerlink" title="继承自： GenericAPIView、CreateModelMixin"></a>继承自： GenericAPIView、CreateModelMixin</h6></li><li><h6 id="提供-post-方法"><a href="#提供-post-方法" class="headerlink" title="提供 post 方法"></a>提供 post 方法</h6></li></ul></li><li><h5 id="2、ListAPIView"><a href="#2、ListAPIView" class="headerlink" title="2、ListAPIView"></a>2、ListAPIView</h5><ul><li><h6 id="继承自：GenericAPIView、ListModelMixin"><a href="#继承自：GenericAPIView、ListModelMixin" class="headerlink" title="继承自：GenericAPIView、ListModelMixin"></a>继承自：GenericAPIView、ListModelMixin</h6></li><li><h6 id="提供-get-方法"><a href="#提供-get-方法" class="headerlink" title="提供 get 方法"></a>提供 get 方法</h6></li></ul></li><li><h5 id="3、RetireveAPIView"><a href="#3、RetireveAPIView" class="headerlink" title="3、RetireveAPIView"></a>3、RetireveAPIView</h5><ul><li><h6 id="继承自-GenericAPIView、RetrieveModelMixin"><a href="#继承自-GenericAPIView、RetrieveModelMixin" class="headerlink" title="继承自: GenericAPIView、RetrieveModelMixin"></a>继承自: GenericAPIView、RetrieveModelMixin</h6></li><li><h6 id="提供-get-方法-1"><a href="#提供-get-方法-1" class="headerlink" title="提供 get 方法"></a>提供 get 方法</h6></li></ul></li><li><h5 id="4、DestoryAPIView"><a href="#4、DestoryAPIView" class="headerlink" title="4、DestoryAPIView"></a>4、DestoryAPIView</h5><ul><li><h6 id="继承自：GenericAPIView、DestoryModelMixin"><a href="#继承自：GenericAPIView、DestoryModelMixin" class="headerlink" title="继承自：GenericAPIView、DestoryModelMixin"></a>继承自：GenericAPIView、DestoryModelMixin</h6></li><li><h6 id="提供-delete-方法"><a href="#提供-delete-方法" class="headerlink" title="提供 delete 方法"></a>提供 delete 方法</h6></li></ul></li><li><h5 id="5、UpdateAPIView"><a href="#5、UpdateAPIView" class="headerlink" title="5、UpdateAPIView"></a>5、UpdateAPIView</h5><ul><li><h6 id="继承自：GenericAPIView、UpdateModelMixin"><a href="#继承自：GenericAPIView、UpdateModelMixin" class="headerlink" title="继承自：GenericAPIView、UpdateModelMixin"></a>继承自：GenericAPIView、UpdateModelMixin</h6></li><li><h6 id="提供-put-和-patch-方法"><a href="#提供-put-和-patch-方法" class="headerlink" title="提供 put 和 patch 方法"></a>提供 put 和 patch 方法</h6></li></ul></li><li><h5 id="6、RetrieveUpdateAPIView"><a href="#6、RetrieveUpdateAPIView" class="headerlink" title="6、RetrieveUpdateAPIView"></a>6、RetrieveUpdateAPIView</h5><ul><li><h6 id="继承自：-GenericAPIView、RetrieveModelMixin、UpdateModelMixin"><a href="#继承自：-GenericAPIView、RetrieveModelMixin、UpdateModelMixin" class="headerlink" title="继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin"></a>继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin</h6></li><li><h6 id="提供-get、put、patch方法"><a href="#提供-get、put、patch方法" class="headerlink" title="提供 get、put、patch方法"></a>提供 get、put、patch方法</h6></li></ul></li><li><h5 id="7、RetrieveUpdateDestoryAPIView"><a href="#7、RetrieveUpdateDestoryAPIView" class="headerlink" title="7、RetrieveUpdateDestoryAPIView"></a>7、RetrieveUpdateDestoryAPIView</h5><ul><li><h6 id="继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin"><a href="#继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin" class="headerlink" title="继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin"></a>继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin</h6></li><li><h6 id="提供-get、put、patch、delete方法"><a href="#提供-get、put、patch、delete方法" class="headerlink" title="提供 get、put、patch、delete方法"></a>提供 get、put、patch、delete方法</h6></li></ul></li></ul><h3 id="6、视图集"><a href="#6、视图集" class="headerlink" title="6、视图集"></a>6、视图集</h3><h4 id="1、视图集的使用"><a href="#1、视图集的使用" class="headerlink" title="1、视图集的使用"></a>1、视图集的使用</h4><p>ViewSet视图集类不再实现get()、post()等方法，而是实现动作 <strong>action</strong> 如 list() 、create() 等。将一系列逻辑相关的动作放到一个类中：</p><ul><li><h6 id="list-提供一组数据"><a href="#list-提供一组数据" class="headerlink" title="list() 提供一组数据"></a>list() 提供一组数据</h6></li><li><h6 id="retrieve-提供单个数据"><a href="#retrieve-提供单个数据" class="headerlink" title="retrieve() 提供单个数据"></a>retrieve() 提供单个数据</h6></li><li><h6 id="create-创建数据"><a href="#create-创建数据" class="headerlink" title="create() 创建数据"></a>create() 创建数据</h6></li><li><h6 id="update-保存数据"><a href="#update-保存数据" class="headerlink" title="update() 保存数据"></a>update() 保存数据</h6></li><li><h6 id="destory-删除数据"><a href="#destory-删除数据" class="headerlink" title="destory() 删除数据"></a>destory() 删除数据</h6></li></ul><h5 id="注意点：-2"><a href="#注意点：-2" class="headerlink" title="注意点："></a>注意点：</h5><p>在使用视图集的时候，在配置路由的时候，用自行指定请求方法和处理的视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^books/$&#x27;</span>, XXViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;list&#x27;</span>&#125;),</span><br><span class="line">    url(<span class="string">r&#x27;^books/(?P&lt;pk&gt;\d+)/$&#x27;</span>, XXXnfoViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span>&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="2、action属性"><a href="#2、action属性" class="headerlink" title="2、action属性"></a>2、action属性</h4><p>视图集只在使用as_view()方法的时候，才会将<strong>action</strong>动作与具体请求方式对应上。</p><h4 id="3、常用视图集类"><a href="#3、常用视图集类" class="headerlink" title="3、常用视图集类"></a>3、常用视图集类</h4><h5 id="1）-ViewSet"><a href="#1）-ViewSet" class="headerlink" title="1） ViewSet"></a>1） ViewSet</h5><p>继承自<code>APIView</code>，作用也与APIView基本类似，提供了身份认证、权限校验、流量管理等。</p><p>在ViewSet中，没有提供任何动作action方法，需要我们自己实现action方法。</p><h5 id="2）GenericViewSet"><a href="#2）GenericViewSet" class="headerlink" title="2）GenericViewSet"></a>2）GenericViewSet</h5><p>继承自<code>GenericAPIView</code>，作用也与GenericAPIVIew类似，提供了get_object、get_queryset等方法便于列表视图与详情信息视图的开发。</p><h5 id="3）ModelViewSet"><a href="#3）ModelViewSet" class="headerlink" title="3）ModelViewSet"></a>3）ModelViewSet</h5><p>继承自<code>GenericAPIVIew</code>，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。</p><h5 id="4）ReadOnlyModelViewSet"><a href="#4）ReadOnlyModelViewSet" class="headerlink" title="4）ReadOnlyModelViewSet"></a>4）ReadOnlyModelViewSet</h5><p>继承自<code>GenericAPIVIew</code>，同时包括了ListModelMixin、RetrieveModelMixin。</p><h3 id="7、路由"><a href="#7、路由" class="headerlink" title="7、路由"></a>7、路由</h3><p>对于视图集ViewSet，我们除了可以自己手动指明请求方式与动作action之间的对应关系外，还可以使用Routers来帮助我们快速实现路由信息。</p><p>REST framework提供了两个router</p><ul><li><h6 id="SimpleRouter（推荐）"><a href="#SimpleRouter（推荐）" class="headerlink" title="SimpleRouter（推荐）"></a>SimpleRouter（推荐）</h6></li><li><h6 id="DefaultRouter（不推荐）"><a href="#DefaultRouter（不推荐）" class="headerlink" title="DefaultRouter（不推荐）"></a>DefaultRouter（不推荐）</h6></li><li><h6 id="DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图"><a href="#DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图" class="headerlink" title="DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图"></a>DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图</h6></li></ul><h4 id="1、-创建router对象并注册"><a href="#1、-创建router对象并注册" class="headerlink" title="1、 创建router对象并注册"></a>1、 创建router对象并注册</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import routers</span><br><span class="line"></span><br><span class="line">router = routers.SimpleRouter()</span><br><span class="line">router.register(r&#x27;vips&#x27;, BookInfoViewSet)</span><br></pre></td></tr></table></figure><ul><li><h5 id="register-prefix-viewset-base-name"><a href="#register-prefix-viewset-base-name" class="headerlink" title="register(prefix, viewset, base_name)"></a>register(prefix, viewset, base_name)</h5><ul><li><h6 id="prefix-该视图集的路由前缀"><a href="#prefix-该视图集的路由前缀" class="headerlink" title="prefix 该视图集的路由前缀"></a>prefix 该视图集的路由前缀</h6></li><li><h6 id="viewset-视图集"><a href="#viewset-视图集" class="headerlink" title="viewset 视图集"></a>viewset 视图集</h6></li><li><h6 id="base-name-路由名称的前缀"><a href="#base-name-路由名称的前缀" class="headerlink" title="base_name 路由名称的前缀"></a>base_name 路由名称的前缀</h6></li></ul></li></ul><p>如上述代码会形成的路由如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^vips/$    </span><br><span class="line">^vip/&#123;pk&#125;/$  </span><br></pre></td></tr></table></figure><h4 id="2、添加路由数据"><a href="#2、添加路由数据" class="headerlink" title="2、添加路由数据"></a>2、添加路由数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure><h2 id="五、其他功能"><a href="#五、其他功能" class="headerlink" title="五、其他功能"></a>五、其他功能</h2><h3 id="1、认证-amp-权限"><a href="#1、认证-amp-权限" class="headerlink" title="1、认证&amp;权限"></a>1、认证&amp;权限</h3><h4 id="1、认证"><a href="#1、认证" class="headerlink" title="1、认证"></a>1、认证</h4><h5 id="1）、全局配置"><a href="#1）、全局配置" class="headerlink" title="1）、全局配置"></a>1）、全局配置</h5><ul><li><p>在配置文件中配置全局默认的认证方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    &#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;: (</span><br><span class="line">        &#x27;rest_framework.authentication.BasicAuthentication&#x27;,   # Basic认证</span><br><span class="line">        &#x27;rest_framework.authentication.SessionAuthentication&#x27;,  # session认证</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2）、单个视图配置"><a href="#2）、单个视图配置" class="headerlink" title="2）、单个视图配置"></a>2）、单个视图配置</h5><p>在视图中通过设置authentication_classess属性来设置视图的认证方案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication, BasicAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIPView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 指定认证的方式</span></span><br><span class="line">    authentication_classes = (SessionAuthentication, BasicAuthentication)</span><br></pre></td></tr></table></figure><p>认证失败会有两种可能的返回值：</p><ul><li>401 Unauthorized 未认证</li><li>403 Permission Denied 权限被禁止</li></ul><h4 id="2、权限"><a href="#2、权限" class="headerlink" title="2、权限"></a>2、权限</h4><p>权限控制可以限制用户对于视图的访问和对于具体数据对象的访问。</p><ul><li>在执行视图的dispatch()方法前，会先进行视图访问权限的判断</li><li>在通过get_object()获取具体对象时，会进行对象访问权限的判断</li></ul><h5 id="1-、全局权限管理"><a href="#1-、全局权限管理" class="headerlink" title="1)、全局权限管理"></a>1)、全局权限管理</h5><p>在配置文件中设置默认的权限管理类，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.permissions.IsAuthenticated&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果未指明，默认采用如下默认配置（所有用户均可访问）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (</span><br><span class="line">   <span class="string">&#x27;rest_framework.permissions.AllowAny&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="2-、单个视图权限"><a href="#2-、单个视图权限" class="headerlink" title="2)、单个视图权限"></a>2)、单个视图权限</h5><p>在视图中通过permission_classes属性来设置权限，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIPView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    permission_classes = (IsAuthenticated,)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h5 id="3-、权限选项"><a href="#3-、权限选项" class="headerlink" title="3)、权限选项"></a>3)、权限选项</h5><ul><li><h6 id="AllowAny-允许所有用户"><a href="#AllowAny-允许所有用户" class="headerlink" title="AllowAny 允许所有用户"></a>AllowAny 允许所有用户</h6></li><li><h6 id="IsAuthenticated-仅通过认证的用户"><a href="#IsAuthenticated-仅通过认证的用户" class="headerlink" title="IsAuthenticated 仅通过认证的用户"></a>IsAuthenticated 仅通过认证的用户</h6></li><li><h6 id="IsAdminUser-仅管理员用户"><a href="#IsAdminUser-仅管理员用户" class="headerlink" title="IsAdminUser 仅管理员用户"></a>IsAdminUser 仅管理员用户</h6></li><li><h6 id="IsAuthenticatedOrReadOnly-认证的用户可以完全操作，否则只能get读取"><a href="#IsAuthenticatedOrReadOnly-认证的用户可以完全操作，否则只能get读取" class="headerlink" title="IsAuthenticatedOrReadOnly 认证的用户可以完全操作，否则只能get读取"></a>IsAuthenticatedOrReadOnly 认证的用户可以完全操作，否则只能get读取</h6></li></ul><h3 id="2、限流"><a href="#2、限流" class="headerlink" title="2、限流"></a>2、限流</h3><p>对接口访问的频次进行限制，以减轻服务器压力(反爬虫的一种手段)。</p><h4 id="1、限流类型"><a href="#1、限流类型" class="headerlink" title="1、限流类型"></a>1、限流类型</h4><ul><li><h5 id="AnonRateThrottle"><a href="#AnonRateThrottle" class="headerlink" title="AnonRateThrottle"></a>AnonRateThrottle</h5><ul><li><h6 id="限制所有匿名未认证用户，使用IP区分用户。"><a href="#限制所有匿名未认证用户，使用IP区分用户。" class="headerlink" title="限制所有匿名未认证用户，使用IP区分用户。"></a>限制所有匿名未认证用户，使用IP区分用户。</h6></li><li><h6 id="使用DEFAULT-THROTTLE-RATES-‘anon’-来设置频次"><a href="#使用DEFAULT-THROTTLE-RATES-‘anon’-来设置频次" class="headerlink" title="使用DEFAULT_THROTTLE_RATES[‘anon’] 来设置频次"></a>使用DEFAULT_THROTTLE_RATES[‘anon’] 来设置频次</h6></li></ul></li><li><h5 id="UserRateThrottle"><a href="#UserRateThrottle" class="headerlink" title="UserRateThrottle"></a>UserRateThrottle</h5><ul><li><h6 id="限制认证用户，使用User-id-来区分。"><a href="#限制认证用户，使用User-id-来区分。" class="headerlink" title="限制认证用户，使用User id 来区分。"></a>限制认证用户，使用User id 来区分。</h6></li><li><h6 id="使用DEFAULT-THROTTLE-RATES-‘user’-来设置频次"><a href="#使用DEFAULT-THROTTLE-RATES-‘user’-来设置频次" class="headerlink" title="使用DEFAULT_THROTTLE_RATES[‘user’]来设置频次"></a>使用DEFAULT_THROTTLE_RATES[‘user’]来设置频次</h6></li></ul></li><li><h5 id="ScopedRateThrottle"><a href="#ScopedRateThrottle" class="headerlink" title="ScopedRateThrottle"></a>ScopedRateThrottle</h5><ul><li><h6 id="限制用户对于具体视图的访问频次，通过ip或user-id。"><a href="#限制用户对于具体视图的访问频次，通过ip或user-id。" class="headerlink" title="限制用户对于具体视图的访问频次，通过ip或user id。"></a>限制用户对于具体视图的访问频次，通过ip或user id。</h6></li><li><h6 id="视图中使用throttle-scope-指定频次"><a href="#视图中使用throttle-scope-指定频次" class="headerlink" title="视图中使用throttle_scope 指定频次"></a>视图中使用throttle_scope 指定频次</h6></li></ul></li></ul><h4 id="2、全局配置"><a href="#2、全局配置" class="headerlink" title="2、全局配置"></a>2、全局配置</h4><ul><li><h6 id="DEFAULT-THROTTLE-CLASSES-设置限流类型"><a href="#DEFAULT-THROTTLE-CLASSES-设置限流类型" class="headerlink" title="DEFAULT_THROTTLE_CLASSES:设置限流类型"></a>DEFAULT_THROTTLE_CLASSES:设置限流类型</h6></li><li><h6 id="DEFAULT-THROTTLE-RATES：设置限制的频次"><a href="#DEFAULT-THROTTLE-RATES：设置限制的频次" class="headerlink" title="DEFAULT_THROTTLE_RATES：设置限制的频次"></a>DEFAULT_THROTTLE_RATES：设置限制的频次</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;100/day&#x27;</span>,  <span class="comment"># 未认证的用户，每天100次</span></span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;1000/day&#x27;</span>  <span class="comment"># 认证的用户，每天100次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="频率周期"><a href="#频率周期" class="headerlink" title="频率周期"></a>频率周期</h5><ul><li><h6 id="second：每秒"><a href="#second：每秒" class="headerlink" title="second：每秒"></a>second：每秒</h6></li><li><h6 id="minute：每分钟"><a href="#minute：每分钟" class="headerlink" title="minute：每分钟"></a>minute：每分钟</h6></li><li><h6 id="hour：每小时"><a href="#hour：每小时" class="headerlink" title="hour：每小时"></a>hour：每小时</h6></li><li><h6 id="day：每天"><a href="#day：每天" class="headerlink" title="day：每天"></a>day：每天</h6></li></ul></li></ul><h4 id="3、局部配置"><a href="#3、局部配置" class="headerlink" title="3、局部配置"></a>3、局部配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;10/day&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在具体视图中通过throttle_classess属性来指定限流的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 类视图中指定限流类型</span></span><br><span class="line">    throttle_classes = (UserRateThrottle,)</span><br></pre></td></tr></table></figure><h3 id="3、过滤"><a href="#3、过滤" class="headerlink" title="3、过滤"></a>3、过滤</h3><p>对于列表数据可能需要根据字段进行过滤，我们可以通过添加django-fitlter扩展来增强支持。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-filter</span><br></pre></td></tr></table></figure><p>在配置文件中增加过滤后端的设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 注册应用，</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;django_filters&#x27;</span>, </span><br><span class="line">]</span><br><span class="line"><span class="comment"># 指定过滤器</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: (<span class="string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>,)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在视图中添加filter_fields属性，指定可以过滤的字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentView</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    queryset = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line">    filter_fields = (<span class="string">&#x27;age&#x27;</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 127.0.0.1:8000/students/?age=18</span></span><br></pre></td></tr></table></figure><h3 id="4、排序"><a href="#4、排序" class="headerlink" title="4、排序"></a>4、排序</h3><p>对于列表数据，REST framework提供了OrderingFilter过滤器来帮助我们快速指明数据按照指定字段进行排序。</p><ul><li><h6 id="filter-backends-指定排序过滤器"><a href="#filter-backends-指定排序过滤器" class="headerlink" title="filter_backends:指定排序过滤器"></a>filter_backends:指定排序过滤器</h6></li><li><h6 id="ordering-fields：指定排序的可选字段"><a href="#ordering-fields：指定排序的可选字段" class="headerlink" title="ordering_fields：指定排序的可选字段"></a>ordering_fields：指定排序的可选字段</h6><p>REST framework会在请求的查询字符串参数中检查是否包含了ordering参数，如果包含了ordering参数，则按照ordering参数指明的排序字段对数据集进行排序。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> OrderingFilter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentView</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    queryset = Student.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = StudentSerializer</span><br><span class="line">    filter_backends = [OrderingFilter] <span class="comment"># 指定排序的过滤器</span></span><br><span class="line">    ordering_fields = (<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;id&#x27;</span> ) <span class="comment"># 指定排序的字段</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># url 指明通过age字段排序</span></span><br><span class="line"><span class="comment"># 127.0.0.1:8000/students/?ordering=age  </span></span><br><span class="line"><span class="comment"># url 指明通过id字段排序</span></span><br><span class="line"><span class="comment"># 127.0.0.1:8000/students/?ordering=id</span></span><br></pre></td></tr></table></figure><h3 id="5、分页"><a href="#5、分页" class="headerlink" title="5、分页"></a>5、分页</h3><p>REST framework提供了分页的支持。</p><h4 id="1、全局配置"><a href="#1、全局配置" class="headerlink" title="1、全局配置"></a>1、全局配置</h4><p>在配置文件中设置全局的分页方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>:  <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">10</span>  <span class="comment"># 每页数据量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、局部配置"><a href="#2、局部配置" class="headerlink" title="2、局部配置"></a>2、局部配置</h4><p>​在不同的视图中可以通过pagination_clas属性来指定不同的分页器</p><ul><li><h5 id="自定义分页器"><a href="#自定义分页器" class="headerlink" title="自定义分页器"></a>自定义分页器</h5><p>定义一个继承PageNumberPagination的类型，在子类中通过属性定义分页器的数据：</p><ul><li><h6 id="page-size-每页默认的数据条数"><a href="#page-size-每页默认的数据条数" class="headerlink" title="page_size 每页默认的数据条数"></a>page_size 每页默认的数据条数</h6></li><li><h6 id="page-query-param-前端发送的页数关键字名，默认为”page”"><a href="#page-query-param-前端发送的页数关键字名，默认为”page”" class="headerlink" title="page_query_param 前端发送的页数关键字名，默认为”page”"></a>page_query_param 前端发送的页数关键字名，默认为”page”</h6></li><li><h6 id="page-size-query-param-前端发送的每页数目关键字名，默认为None"><a href="#page-size-query-param-前端发送的每页数目关键字名，默认为None" class="headerlink" title="page_size_query_param 前端发送的每页数目关键字名，默认为None"></a>page_size_query_param 前端发送的每页数目关键字名，默认为None</h6></li><li><h6 id="max-page-size-每页最多的数据条数"><a href="#max-page-size-每页最多的数据条数" class="headerlink" title="max_page_size 每页最多的数据条数"></a>max_page_size 每页最多的数据条数</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StuPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    <span class="comment"># 默认每页数据量</span></span><br><span class="line">    page_size = <span class="number">20</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;page_size&#x27;</span></span><br><span class="line">    <span class="comment"># 每页的数据量的最大值</span></span><br><span class="line">    max_page_size = <span class="number">10000</span></span><br></pre></td></tr></table></figure></li><li><h5 id="使用分页器"><a href="#使用分页器" class="headerlink" title="使用分页器"></a>使用分页器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StuView</span>(<span class="title class_ inherited__">RetrieveAPIView</span>):</span><br><span class="line">    queryset = Students.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = StudentsSerializer</span><br><span class="line">    pagination_class = StuPagination</span><br></pre></td></tr></table></figure></li><li><h5 id="关闭分页功能"><a href="#关闭分页功能" class="headerlink" title="关闭分页功能"></a>关闭分页功能</h5><p>如果在视图内关闭分页功能，只需在视图内设置**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pagination_class = None</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、分页器类型"><a href="#3、分页器类型" class="headerlink" title="3、分页器类型"></a>3、分页器类型</h4><h5 id="1）-PageNumberPagination"><a href="#1）-PageNumberPagination" class="headerlink" title="1） PageNumberPagination"></a>1） PageNumberPagination</h5><ul><li><h5 id="前端访问网址形式："><a href="#前端访问网址形式：" class="headerlink" title="前端访问网址形式："></a>前端访问网址形式：</h5></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/students/?page=4</span><br></pre></td></tr></table></figure><ul><li><h5 id="子类中定义的属性："><a href="#子类中定义的属性：" class="headerlink" title="子类中定义的属性："></a>子类中定义的属性：</h5><ul><li><h6 id="page-size-每页数目"><a href="#page-size-每页数目" class="headerlink" title="page_size 每页数目"></a>page_size 每页数目</h6></li><li><h6 id="page-query-param-前端发送的页数关键字名，默认为”page”-1"><a href="#page-query-param-前端发送的页数关键字名，默认为”page”-1" class="headerlink" title="page_query_param 前端发送的页数关键字名，默认为”page”"></a>page_query_param 前端发送的页数关键字名，默认为”page”</h6></li><li><h6 id="page-size-query-param-前端发送的每页数目关键字名，默认为None-1"><a href="#page-size-query-param-前端发送的每页数目关键字名，默认为None-1" class="headerlink" title="page_size_query_param 前端发送的每页数目关键字名，默认为None"></a>page_size_query_param 前端发送的每页数目关键字名，默认为None</h6></li><li><h6 id="max-page-size-前端最多能设置的每页数量"><a href="#max-page-size-前端最多能设置的每页数量" class="headerlink" title="max_page_size 前端最多能设置的每页数量"></a>max_page_size 前端最多能设置的每页数量</h6></li></ul></li></ul><h5 id="2）LimitOffsetPagination"><a href="#2）LimitOffsetPagination" class="headerlink" title="2）LimitOffsetPagination"></a>2）LimitOffsetPagination</h5><ul><li><h5 id="前端访问网址形式：-1"><a href="#前端访问网址形式：-1" class="headerlink" title="前端访问网址形式："></a>前端访问网址形式：</h5></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/students/?limit=100&amp;offset=400</span><br></pre></td></tr></table></figure><ul><li><h5 id="可以在子类中定义的属性："><a href="#可以在子类中定义的属性：" class="headerlink" title="可以在子类中定义的属性："></a>可以在子类中定义的属性：</h5><ul><li><h6 id="default-limit-默认限制，默认值与PAGE-SIZE设置一直"><a href="#default-limit-默认限制，默认值与PAGE-SIZE设置一直" class="headerlink" title="default_limit 默认限制，默认值与PAGE_SIZE设置一直"></a>default_limit 默认限制，默认值与PAGE_SIZE设置一直</h6></li><li><h6 id="limit-query-param-limit参数名，默认’limit’"><a href="#limit-query-param-limit参数名，默认’limit’" class="headerlink" title="limit_query_param limit参数名，默认’limit’"></a>limit_query_param limit参数名，默认’limit’</h6></li><li><h6 id="offset-query-param-offset参数名，默认’offset’"><a href="#offset-query-param-offset参数名，默认’offset’" class="headerlink" title="offset_query_param offset参数名，默认’offset’"></a>offset_query_param offset参数名，默认’offset’</h6></li><li><h6 id="max-limit-最大limit限制，默认None"><a href="#max-limit-最大limit限制，默认None" class="headerlink" title="max_limit 最大limit限制，默认None"></a>max_limit 最大limit限制，默认None</h6></li></ul></li></ul><h3 id="6、异常处理"><a href="#6、异常处理" class="headerlink" title="6、异常处理"></a>6、异常处理</h3><p>REST framework提供了异常处理，如果没有自定义默认会采用默认的处理方法方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># REST framework中默认的异常处理方法</span></span><br><span class="line">    <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;rest_framework.views.exception_handler&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1、自定义异常处理的方法"><a href="#1、自定义异常处理的方法" class="headerlink" title="1、自定义异常处理的方法"></a>1、自定义异常处理的方法</h4><ul><li><h5 id="1、定义异常处理的方法"><a href="#1、定义异常处理的方法" class="headerlink" title="1、定义异常处理的方法"></a>1、定义异常处理的方法</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_exception_handler</span>(<span class="params">exc, context</span>):</span><br><span class="line">    <span class="comment"># Call REST framework&#x27;s default exception handler first,</span></span><br><span class="line">    <span class="comment"># to get the standard error response.</span></span><br><span class="line">    response = exception_handler(exc, context)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now add the HTTP status code to the response.</span></span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        response.data[<span class="string">&#x27;status_code&#x27;</span>] = response.status_code</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="2、在配置文件中指定自定义的异常处理"><a href="#2、在配置文件中指定自定义的异常处理" class="headerlink" title="2、在配置文件中指定自定义的异常处理"></a>2、在配置文件中指定自定义的异常处理</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;project.app.except_handle.exception_handle&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、REST-framework定义的异常"><a href="#2、REST-framework定义的异常" class="headerlink" title="2、REST framework定义的异常"></a>2、REST framework定义的异常</h4><ul><li>APIException 所有异常的父类</li><li>ParseError 解析错误</li><li>AuthenticationFailed 认证失败</li><li>NotAuthenticated 尚未认证</li><li>PermissionDenied 权限决绝</li><li>NotFound 未找到</li><li>MethodNotAllowed 请求方式不支持</li><li>NotAcceptable 要获取的数据格式不支持</li><li>Throttled 超过限流次数</li><li>ValidationError 校验失败</li></ul><h3 id="7、文件上传"><a href="#7、文件上传" class="headerlink" title="7、文件上传"></a>7、文件上传</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadFile</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;文件上传&quot;&quot;&quot;</span></span><br><span class="line">    file = models.FileField()</span><br><span class="line">    path = models.CharField(max_length=<span class="number">200</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;upload_file&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&quot;文件上传&quot;</span></span><br><span class="line"><span class="comment"># 序列化器        </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadFileSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;文件上传&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = UploadFile</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UpFileAPIView</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;文件上传&quot;&quot;&quot;</span></span><br><span class="line">    serializer_class = UploadFileSerializer</span><br><span class="line">    queryset = UploadFile.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        res = <span class="built_in">super</span>().create(request, *args, **kwargs)</span><br><span class="line">        obj = UploadFile.objects.get(<span class="built_in">id</span>=res.data[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">        obj.path = obj.file.name</span><br><span class="line">        obj.save()</span><br><span class="line">        res.data[<span class="string">&#x27;path&#x27;</span>] = obj.name</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">destroy</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;文件删除&quot;&quot;&quot;</span></span><br><span class="line">        res = <span class="built_in">super</span>().destroy(request, *args, **kwargs)</span><br><span class="line">        <span class="comment"># 删除保存的文件</span></span><br><span class="line">        os.remove(<span class="string">&#x27;files/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.get_object().name))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8、接口文档"><a href="#8、接口文档" class="headerlink" title="8、接口文档"></a>8、接口文档</h3><p>REST framework通过第三方库可以自动帮助我们生成网页版的接口文档，自动接口文档能生成的是继承自<code>APIView</code>及其子类的视图。</p><h4 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h4><p>REST framewrok生成接口文档需要<code>coreapi</code>库的支持。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install coreapi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、设置接口文档访问路径"><a href="#2、设置接口文档访问路径" class="headerlink" title="2、设置接口文档访问路径"></a>2、设置接口文档访问路径</h4><ul><li>在项目路由中添加接口文档的路由，配置如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^docs/&#x27;</span>, include_docs_urls(title=<span class="string">&#x27;接口文档&#x27;</span>))</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="浏览器访问-127-0-0-1-8000-x2F-docs-x2F-，即可看到自动生成的接口文档。"><a href="#浏览器访问-127-0-0-1-8000-x2F-docs-x2F-，即可看到自动生成的接口文档。" class="headerlink" title="浏览器访问 127.0.0.1:8000&#x2F;docs&#x2F;，即可看到自动生成的接口文档。"></a>浏览器访问 127.0.0.1:8000&#x2F;docs&#x2F;，即可看到自动生成的接口文档。</h5></li></ul><p>加上配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    # 接口文档配置</span><br><span class="line">    &#x27;DEFAULT_SCHEMA_CLASS&#x27;: &#x27;rest_framework.schemas.coreapi.AutoSchema&#x27;,</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、文档接口说明"><a href="#3、文档接口说明" class="headerlink" title="3、文档接口说明"></a>3、文档接口说明</h4><ul><li><h5 id="1）-单一方法的视图，可直接使用类视图的文档字符串"><a href="#1）-单一方法的视图，可直接使用类视图的文档字符串" class="headerlink" title="1） 单一方法的视图，可直接使用类视图的文档字符串"></a>1） 单一方法的视图，可直接使用类视图的文档字符串</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentsView</span>(generics.ListAPIView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回所有学生信息.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义"><a href="#2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义" class="headerlink" title="2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义"></a>2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentsListCreateView</span>(generics.ListCreateAPIView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    get:</span></span><br><span class="line"><span class="string">    返回所有学生信息.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    post:</span></span><br><span class="line"><span class="string">    添加学生</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="3）对于视图集ViewSet，仍在类视图的文档字符串中分开定义"><a href="#3）对于视图集ViewSet，仍在类视图的文档字符串中分开定义" class="headerlink" title="3）对于视图集ViewSet，仍在类视图的文档字符串中分开定义"></a>3）对于视图集ViewSet，仍在类视图的文档字符串中分开定义</h5><h6 id="注意点：-视图集ViewSet中的retrieve名称，在接口文档网站中叫做read"><a href="#注意点：-视图集ViewSet中的retrieve名称，在接口文档网站中叫做read" class="headerlink" title="注意点： 视图集ViewSet中的retrieve名称，在接口文档网站中叫做read"></a>注意点： 视图集ViewSet中的retrieve名称，在接口文档网站中叫做read</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoViewSet</span>(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">    获取所有学生数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    retrieve:</span></span><br><span class="line"><span class="string">    获取一个学生</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4、添加参数描述信息"><a href="#4、添加参数描述信息" class="headerlink" title="4、添加参数描述信息"></a>4、添加参数描述信息</h4><p>参数的描述需要在模型类或序列化器类的字段中以help_text选项定义，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">XXX</span>(models.Model):</span><br><span class="line">    age = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;年龄&#x27;</span>, help_text=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六、ajax跨域"><a href="#六、ajax跨域" class="headerlink" title="六、ajax跨域"></a>六、ajax跨域</h2><p>针对于前后端分离的项目，前端和后台是分开部署的，因此服务端要支持<code>CORS(跨域源资源共享)</code>策略，需要在响应头中加上Access-Control-Allow-Origin: *&#96;。</p><table><thead><tr><th>位置</th><th>域名</th></tr></thead><tbody><tr><td>前端服务</td><td>127.0.0.1:8080</td></tr><tr><td>后端服务</td><td>127.0.0.1:8000</td></tr></tbody></table><p>前端与后端分别是不同的端口，这就涉及到跨域访问数据的问题，因为浏览器的同源策略，默认是不支持两个不同域名间相互访问数据，而我们需要在两个域名间相互传递数据，这时我们就要为后端添加跨域访问的支持。**</p><h3 id="1、django-cors-headers"><a href="#1、django-cors-headers" class="headerlink" title="1、django-cors-headers"></a>1、django-cors-headers</h3><ul><li><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cors-headers</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h4 id="添加应用"><a href="#添加应用" class="headerlink" title="添加应用"></a>添加应用</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="中间键设置"><a href="#中间键设置" class="headerlink" title="中间键设置"></a>中间键设置</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="添加白名单"><a href="#添加白名单" class="headerlink" title="添加白名单"></a>添加白名单</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CORS</span></span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    <span class="string">&#x27;127.0.0.1:8080&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;localhost:8080&#x27;</span>,</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span>  <span class="comment"># 允许携带cookie</span></span><br><span class="line"><span class="comment"># 凡是出现在白名单中的域名，都可以访问后端接口</span></span><br><span class="line"><span class="comment"># CORS_ALLOW_CREDENTIALS 指明在跨域访问中，后端是否支持对cookie的操作。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="注意点：-3"><a href="#注意点：-3" class="headerlink" title="注意点："></a>注意点：</h5><ul><li><h6 id="1、浏览器会第一次先发送options请求询问后端是否允许跨域"><a href="#1、浏览器会第一次先发送options请求询问后端是否允许跨域" class="headerlink" title="1、浏览器会第一次先发送options请求询问后端是否允许跨域"></a>1、浏览器会第一次先发送options请求询问后端是否允许跨域</h6></li><li><h6 id="2、后端在响应结果中告知浏览器允许跨域，允许的情况下浏览器再发送跨域请求"><a href="#2、后端在响应结果中告知浏览器允许跨域，允许的情况下浏览器再发送跨域请求" class="headerlink" title="2、后端在响应结果中告知浏览器允许跨域，允许的情况下浏览器再发送跨域请求"></a>2、后端在响应结果中告知浏览器允许跨域，允许的情况下浏览器再发送跨域请求</h6></li></ul></li></ul><h2 id="七、DRF-JWT"><a href="#七、DRF-JWT" class="headerlink" title="七、DRF JWT"></a>七、DRF JWT</h2><h3 id="1、token鉴权和JWT介绍"><a href="#1、token鉴权和JWT介绍" class="headerlink" title="1、token鉴权和JWT介绍"></a>1、token鉴权和JWT介绍</h3><pre><code>   针对前后端分离的项目，ajax跨域请求时，不会自动携带cookie信息，我们不再使用Session认证机制，而使用JWT(Json Web Token)认证机制，JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。今天给大家介绍JWT的原理和用法</code></pre><h4 id="1、token鉴权机制"><a href="#1、token鉴权机制" class="headerlink" title="1、token鉴权机制"></a>1、token鉴权机制</h4><p><img src="/2022/06/23/DRF/课件\images\1559723672450.png" alt="1559723672450"> </p><h4 id="2、JWT的构成"><a href="#2、JWT的构成" class="headerlink" title="2、JWT的构成"></a>2、JWT的构成</h4><p>一个JWT是由三个部分来组成的，头部（header),载荷（payload)，签名（signature).</p><p>下面是一个JWT </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo2LCJ1c2VybmFtZSI6Im11c2VuMDAxIiwiZXhwIjoxNjEwMDg3OTM0LCJlbWFpbCI6Im11c2VuMDAyQHFxLmNvbSJ9.A0rsMrRgiY9_c1lm6_P15Hbx9F95XExmGQhhOzjLytQ</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-、header"><a href="#1-、header" class="headerlink" title="1)、header"></a>1)、header</h5><p>在头部中一般包含两部分信息：一部分是类型，一部分是加密算法 这里是jwt</p><ul><li><h5 id="头部数据"><a href="#头部数据" class="headerlink" title="头部数据"></a>头部数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;typ&#x27;</span>: <span class="string">&#x27;JWT&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;alg&#x27;</span>: <span class="string">&#x27;HS256</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure></li></ul><p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分</p><ul><li><h5 id="加密后的头部"><a href="#加密后的头部" class="headerlink" title="加密后的头部"></a>加密后的头部</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-、payload"><a href="#2-、payload" class="headerlink" title="2)、payload"></a>2)、payload</h5><p>​载荷是 JSON Web Token 的主体内容部分，里面存放一些有效信息，JSON Web Token 标准定义了几个标准字段：</p><ul><li><h6 id="iss-该JWT的签发者"><a href="#iss-该JWT的签发者" class="headerlink" title="iss: 该JWT的签发者"></a>iss: 该JWT的签发者</h6></li><li><h6 id="sub-该JWT所面向的用户"><a href="#sub-该JWT所面向的用户" class="headerlink" title="sub: 该JWT所面向的用户"></a>sub: 该JWT所面向的用户</h6></li><li><h6 id="aud-接收该JWT的一方"><a href="#aud-接收该JWT的一方" class="headerlink" title="aud: 接收该JWT的一方"></a>aud: 接收该JWT的一方</h6></li><li><h6 id="exp-什么时候过期，这里是一个Unix时间戳"><a href="#exp-什么时候过期，这里是一个Unix时间戳" class="headerlink" title="exp: 什么时候过期，这里是一个Unix时间戳"></a>exp: 什么时候过期，这里是一个Unix时间戳</h6></li><li><h6 id="at-在什么时候签发的"><a href="#at-在什么时候签发的" class="headerlink" title="at: 在什么时候签发的"></a>at: 在什么时候签发的</h6></li></ul><p> 除了标准定义中的字段外，我们还可以自定义字段，比如在 JWT 中，我们的载荷信息可能如下 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;lemonban01&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;musen&quot;</span>,</span><br><span class="line">  <span class="string">&quot;admin&quot;</span>: true,</span><br><span class="line">  <span class="string">&quot;exp:&quot;</span>:<span class="number">12132323423423</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后将其进行base64加密，得到JWT的第二部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-、signature"><a href="#3-、signature" class="headerlink" title="3)、signature"></a>3)、signature</h5><p>签名是 JSON Web Token 中比较重要的一部分，前面两部分都是使用 Base64 进行编码的，signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名，签名的作用是保证 JWT 没有被篡改过。 </p><p>JWT的第三部分签证信息由三部分组成：</p><ul><li><h6 id="header-base64后的"><a href="#header-base64后的" class="headerlink" title="header :(base64后的)"></a>header :(base64后的)</h6></li><li><h6 id="payload-base64后的"><a href="#payload-base64后的" class="headerlink" title="payload :(base64后的)"></a>payload :(base64后的)</h6></li><li><h6 id="secret-私钥"><a href="#secret-私钥" class="headerlink" title="secret: 私钥"></a>secret: 私钥</h6></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">加密后的header +加密后的payload   结合私钥secret，用加密算法加密，得到最后的签名</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、RESTframework-JWT"><a href="#2、RESTframework-JWT" class="headerlink" title="2、RESTframework JWT"></a>2、RESTframework JWT</h3><p>关于签发和核验JWT，我们可以使用Django REST framework JWT扩展来完成。</p><ul><li><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework-jwt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h4 id="settings配置"><a href="#settings配置" class="headerlink" title="settings配置"></a>settings配置</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="comment"># 指明token的有效期</span></span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、账号登录"><a href="#3、账号登录" class="headerlink" title="3、账号登录"></a>3、账号登录</h4><h5 id="1-业务说明"><a href="#1-业务说明" class="headerlink" title="1. 业务说明"></a>1. 业务说明</h5><p>验证用户名和密码，验证成功后，为用户签发JWT，前端将签发的JWT保存下来。</p><h5 id="2-后端接口设计"><a href="#2-后端接口设计" class="headerlink" title="2. 后端接口设计"></a>2. 后端接口设计</h5><p><strong>请求方式</strong>： POST &#x2F;login&#x2F;</p><p><strong>请求参数</strong>： JSON 或 表单</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>username</td><td>str</td><td>是</td><td>用户名</td></tr><tr><td>password</td><td>str</td><td>是</td><td>密码</td></tr></tbody></table><p><strong>返回数据</strong>： JSON</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo5LCJ1c2VybmFtZSI6InB5dGhvbjgiLCJleHAiOjE1MjgxODI2MzQsImVtYWlsIjoiIn0.ejjVvEWxrBvbp18QIjQbL1TFE0c0ejQgizui_AROlAU&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>返回值</th><th>类型</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>username</td><td>str</td><td>是</td><td>用户名</td></tr><tr><td>id</td><td>int</td><td>是</td><td>用户id</td></tr><tr><td>token</td><td>str</td><td>是</td><td>身份认证凭据</td></tr></tbody></table><h3 id="3-后端实现"><a href="#3-后端实现" class="headerlink" title="3. 后端实现"></a>3. 后端实现</h3><p>Django REST framework JWT提供了登录签发JWT的视图，可以直接使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^login/$&#x27;</span>, obtain_jwt_token),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是默认的返回值仅有token，我们还需在返回值中增加username和user_id。</p><p>通过修改该视图的返回值可以完成我们的需求。</p><p>在项目中自定义一个模块，创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">jwt_response_data</span>(<span class="params">token, user=<span class="literal">None</span>, request=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义jwt认证成功返回数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: user.<span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: user.username</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JWT配置</span></span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">    <span class="string">&#x27;JWT_RESPONSE_PAYLOAD_HANDLER&#x27;</span>: <span class="string">&#x27;自定义认证类模块路径.jwt_response_data&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-增加支持管理员用户登录账号"><a href="#4-增加支持管理员用户登录账号" class="headerlink" title="4. 增加支持管理员用户登录账号"></a>4. 增加支持管理员用户登录账号</h3><p>JWT扩展的登录视图，在收到用户名与密码时，也是调用Django的认证系统中提供的**authenticate()**来检查用户名与密码是否正确。</p><p>我们可以通过修改Django认证系统的认证后端（主要是authenticate方法）来支持登录账号既可以是用户名也可以是手机号。</p><p><strong>修改Django认证系统的认证后端需要继承<code>django.contrib.auth.backends.ModelBackend</code>，并重写authenticate方法。</strong></p><p><code>authenticate(self, request, username=None, password=None, **kwargs)</code>方法的参数说明：</p><ul><li>request 本次认证的请求对象</li><li>username 本次认证提供的用户账号</li><li>password 本次认证提供的密码</li></ul><p><strong>我们想要让管理员用户才能登录我们的admin后台,这时我们就要修改django原有的用户验证方法。</strong></p><p>重写authenticate方法的思路：</p><ol><li>根据username参数查找用户User对象，在查询条件中在加上is_staff&#x3D;True的条件</li><li>若查找到User对象，调用User对象的check_password方法检查密码是否正确</li></ol><p>在utils&#x2F;authenticate.py中编写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> users.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MusenModelBackend</span>(<span class="title class_ inherited__">ModelBackend</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request, username=<span class="literal">None</span>, password=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 判断是否通过vue组件发送请求</span></span><br><span class="line">        <span class="keyword">if</span> request <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                user = User.objects.get(username=username, is_staff=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 判断密码</span></span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                user = User.objects.get(username=username)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    user = User.objects.get(mobile=username)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断密码</span></span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在settings.py文件中告知Django使用我们自定义的认证后端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AUTHENTICATION_BACKENDS = [</span><br><span class="line">    <span class="string">&#x27;自定义认证类模块路径.MusenModelBackend&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="前端保存token"><a href="#前端保存token" class="headerlink" title="前端保存token"></a>前端保存token</h4><p>前端可以将JWT保存在浏览器的本地存储里，浏览器的本地存储提供了sessionStorage 和 localStorage 两种：</p><ul><li><strong>sessionStorage</strong> 浏览器关闭即失效</li><li><strong>localStorage</strong> 长期有效</li></ul>]]></content>
      
      
      <categories>
          
          <category> DRF框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django中auth组件的使用</title>
      <link href="/2022/06/13/Django%E4%B8%ADauth%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/06/13/Django%E4%B8%ADauth%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Auth模块"><a href="#Auth模块" class="headerlink" title="Auth模块"></a>Auth模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">其实在创建好一个django项目之后,直接执行数据库迁移命令会自动生成很多表</span></span><br><span class="line"><span class="string">django_session</span></span><br><span class="line"><span class="string">auth_user</span></span><br><span class="line"><span class="string">django在启动之后就可以直接访问admin路由，需要输入用户名和密码，数据参考的就是auth_user表,并且还必须是管理员用户才能进入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建超级用户(管理员)</span></span><br><span class="line"><span class="string">python3 manage.py createsuperuser</span></span><br><span class="line"><span class="string">依赖于auth_user表完成用户相关的所有功能</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.比对用户名和密码是否正确</span></span><br><span class="line">user_obj = auth.authenticate(request,username=username,password=password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 括号内必须同时传入用户名和密码</span></span><br><span class="line"><span class="built_in">print</span>(user_obj)  <span class="comment"># 用户对象  jason   数据不符合则返回None</span></span><br><span class="line"><span class="built_in">print</span>(user_obj.username)  <span class="comment"># jason</span></span><br><span class="line"><span class="built_in">print</span>(user_obj.password)  <span class="comment"># 密文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.保存用户状态</span></span><br><span class="line">auth.login(request,user_obj)  <span class="comment"># 类似于request.session[key] = user_obj</span></span><br><span class="line"><span class="comment"># 主要执行了该方法 你就可以在任何地方通过request.user获取到当前登陆的用户对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.判断当前用户是否登陆</span></span><br><span class="line">request.user.is_authenticated()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取当前登陆用户</span></span><br><span class="line">request.user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.校验用户是否登陆装饰器</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="comment"># 局部配置</span></span><br><span class="line"><span class="meta">@login_required(<span class="params">login_url=<span class="string">&#x27;/login/&#x27;</span></span>) </span></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">LOGIN_URL = <span class="string">&#x27;/login/&#x27;</span></span><br><span class="line"><span class="number">1.</span>如果局部和全局都有 该听谁的?</span><br><span class="line">    局部 &gt; 全局</span><br><span class="line"><span class="number">2.</span>局部和全局哪个好呢?全局的好处在于无需重复写代码 但是跳转的页面却很单一</span><br><span class="line">    局部的好处在于不同的视图函数在用户没有登陆的情况下可以跳转到不同的页面</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.比对原密码</span></span><br><span class="line">request.user.check_password(old_password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.修改密码</span></span><br><span class="line">request.user.set_password(new_password)  <span class="comment"># 仅仅是在修改对象的属性</span></span><br><span class="line">request.user.save()  <span class="comment"># 这一步才是真正的操作数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.注销</span></span><br><span class="line">auth.logout(request) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.注册</span></span><br><span class="line"><span class="comment"># 操作auth_user表写入数据</span></span><br><span class="line">User.objects.create(username=username,password=password)  <span class="comment"># 写入数据  不能用create 密码没有加密处理</span></span><br><span class="line"><span class="comment"># 创建普通用户</span></span><br><span class="line">User.objects.create_user(username=username,password=password)</span><br><span class="line"><span class="comment"># 创建超级用户(了解):使用代码创建超级用户 邮箱是必填的 而用命令创建则可以不填</span></span><br><span class="line">User.objects.create_superuser(username=username,email=<span class="string">&#x27;123@qq.com&#x27;</span>,password=password)</span><br></pre></td></tr></table></figure><h3 id="如何扩展auth-user表"><a href="#如何扩展auth-user表" class="headerlink" title="如何扩展auth_user表"></a>如何扩展auth_user表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User,AbstractUser</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一种:一对一关系  不推荐</span></span><br><span class="line"><span class="comment"># class UserDetail(models.Model):</span></span><br><span class="line"><span class="comment">#     phone = models.BigIntegerField()</span></span><br><span class="line"><span class="comment">#     user = models.OneToOneField(to=&#x27;User&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种:面向对象的继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    phone = models.BigIntegerField()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    如果继承了AbstractUser</span></span><br><span class="line"><span class="string">    那么在执行数据库迁移命令的时候auth_user表就不会再创建出来了</span></span><br><span class="line"><span class="string">    而UserInfo表中会出现auth_user所有的字段外加自己扩展的字段</span></span><br><span class="line"><span class="string">    这么做的好处在于你能够直接点击你自己的表更加快速的完成操作及扩展</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    前提:</span></span><br><span class="line"><span class="string">        1.在继承之前没有执行过数据库迁移命令</span></span><br><span class="line"><span class="string">            auth_user没有被创建，如果当前库已经创建了那么你就重新换一个库</span></span><br><span class="line"><span class="string">        2.继承的类里面不要覆盖AbstractUser里面的字段名</span></span><br><span class="line"><span class="string">            表里面有的字段都不要动，只扩展额外字段即可</span></span><br><span class="line"><span class="string">        3.需要在配置文件中告诉django你要用UserInfo替代auth_user(******)</span></span><br><span class="line"><span class="string">            AUTH_USER_MODEL = &#x27;app01.UserInfo&#x27;  &#x27;应用名.表名&#x27;</span></span><br><span class="line"><span class="string">你如果自己写表替代了auth_user那么</span></span><br><span class="line"><span class="string">auth模块的功能还是照常使用，参考的表页由原来的auth_user变成了UserInfo</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django中间件及思想</title>
      <link href="/2022/06/12/Django%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E6%80%9D%E6%83%B3/"/>
      <url>/2022/06/12/Django%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="django中间件"><a href="#django中间件" class="headerlink" title="django中间件"></a>django中间件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">django中间件是django的门户</span><br><span class="line"><span class="number">1.</span>请求来的时候需要先经过中间件才能到达真正的django后端</span><br><span class="line"><span class="number">2.</span>响应走的时候最后也需要经过中间件才能发送出去</span><br><span class="line">django自带七个中间件</span><br><span class="line">研究django中间件代码规律</span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SessionMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)</span><br><span class="line">        request.session = self.SessionStore(session_key)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CsrfViewMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        csrf_token = self._get_token(request)</span><br><span class="line">        <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># Use same token next time.</span></span><br><span class="line">            request.META[<span class="string">&#x27;CSRF_COOKIE&#x27;</span>] = csrf_token</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, callback, callback_args, callback_kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> self._accept(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthenticationMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        request.user = SimpleLazyObject(<span class="keyword">lambda</span>: get_user(request))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">django支持程序员自定义中间件并且暴露五个可以自定义的方法</span></span><br><span class="line"><span class="string">1.必须掌握</span></span><br><span class="line"><span class="string">process_request</span></span><br><span class="line"><span class="string">process_response</span></span><br><span class="line"><span class="string">2.了解即可</span></span><br><span class="line"><span class="string">process_view</span></span><br><span class="line"><span class="string">process_template_response</span></span><br><span class="line"><span class="string">process_exception</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="如何自定义中间件"><a href="#如何自定义中间件" class="headerlink" title="如何自定义中间件"></a>如何自定义中间件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.在项目名或者应用名下创建一个任意名称的文件夹</span></span><br><span class="line"><span class="string">2.在该文件夹内创建一个任意名称的py文件</span></span><br><span class="line"><span class="string">3.在该py文件内需要书写类(这个类必须继承MiddlewareMixin)</span></span><br><span class="line"><span class="string">然后在这个类里面就可以自定义五个方法了</span></span><br><span class="line"><span class="string">4.需要将类的路径以字符串的形式注册到配置文件中才能生效</span></span><br><span class="line"><span class="string">MIDDLEWARE = [</span></span><br><span class="line"><span class="string">    &#x27;django.middleware.security.SecurityMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.middleware.common.CommonMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;你自己写的中间件的路径1&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;你自己写的中间件的路径2&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;你自己写的中间件的路径3&#x27;,</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">1.必须掌握</span></span><br><span class="line"><span class="string">process_request </span></span><br><span class="line"><span class="string">1.请求来的时候需要经过每一个中间件里面的process_request方法</span></span><br><span class="line"><span class="string">结果的顺序是按照配置文件中注册的中间件从上往下的顺序依次执行</span></span><br><span class="line"><span class="string">2.如果中间件里面没有定义该方法，那么直接跳过执行下一个中间件</span></span><br><span class="line"><span class="string">3.如果该方法返回了HttpResponse对象，那么请求将不再继续往后执行</span></span><br><span class="line"><span class="string">而是直接原路返回(校验失败不允许访问...)</span></span><br><span class="line"><span class="string">process_request方法就是用来做全局相关的所有限制功能</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">process_response</span></span><br><span class="line"><span class="string">1.响应走的时候需要结果每一个中间件里面的process_response方法</span></span><br><span class="line"><span class="string">该方法有两个额外的参数request,response</span></span><br><span class="line"><span class="string">2.该方法必须返回一个HttpResponse对象</span></span><br><span class="line"><span class="string">1.默认返回的就是形参response</span></span><br><span class="line"><span class="string">2.你也可以自己返回自己的</span></span><br><span class="line"><span class="string">3.顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">如果你没有定义的话 直接跳过执行下一个</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">研究如果在第一个process_request方法就已经返回了HttpResponse对象，那么响应走的时候是经过所有的中间件里面的process_response还是有其他情况</span></span><br><span class="line"><span class="string">是其他情况</span></span><br><span class="line"><span class="string">就是会直接走同级别（自定义中间件类）的process_reponse返回</span></span><br><span class="line"><span class="string">2.了解即可</span></span><br><span class="line"><span class="string">process_view</span></span><br><span class="line"><span class="string">路由匹配成功之后执行视图函数之前，会自动执行中间件里面的该放法</span></span><br><span class="line"><span class="string">顺序是按照配置文件中注册的中间件从上往下的顺序依次执行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">process_template_response</span></span><br><span class="line"><span class="string">返回的HttpResponse对象有render属性的时候才会触发</span></span><br><span class="line"><span class="string">顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">process_exception</span></span><br><span class="line"><span class="string">当视图函数中出现异常的情况下触发</span></span><br><span class="line"><span class="string">顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="csrf跨站请求伪造"><a href="#csrf跨站请求伪造" class="headerlink" title="csrf跨站请求伪造"></a>csrf跨站请求伪造</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">钓鱼网站</span></span><br><span class="line"><span class="string">我搭建一个跟正规网站一模一样的界面(中国银行)</span></span><br><span class="line"><span class="string">用户不小心进入到了我们的网站，用户给某个人打钱</span></span><br><span class="line"><span class="string">打钱的操作确确实实是提交给了中国银行的系统，用户的钱也确确实实减少了</span></span><br><span class="line"><span class="string">但是唯一不同的是打钱的账户不是用户想要打的账户变成了一个莫名其妙的账户</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">内部本质</span></span><br><span class="line"><span class="string">我们在钓鱼网站的页面 针对对方账户 只给用户提供一个没有name属性的普通input框</span></span><br><span class="line"><span class="string">然后我们在内部隐藏一个已经写好name和value的input框</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">规避上述问题:csrf跨站请求伪造校验</span></span><br><span class="line"><span class="string">网站在给用户返回一个具有提交数据功能页面的时候会给这个页面加一个唯一标识</span></span><br><span class="line"><span class="string">当这个页面朝后端发送post请求的时候 我的后端会先校验唯一标识，如果唯一标识不对直接拒绝(403forbbiden)如果成功则正常执行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="如何符合校验"><a href="#如何符合校验" class="headerlink" title="如何符合校验"></a>如何符合校验</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># form表单如何符合校验</span></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;p&gt;username:&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;target_user:&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;target_user&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;money:&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;money&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ajax如何符合校验</span></span><br><span class="line">// 第一种 利用标签查找获取页面上的随机字符串</span><br><span class="line">&#123;<span class="comment">#data:&#123;&quot;username&quot;:&#x27;jason&#x27;,&#x27;csrfmiddlewaretoken&#x27;:$(&#x27;[name=csrfmiddlewaretoken]&#x27;).val()&#125;,#&#125;</span></span><br><span class="line">// 第二种 利用模版语法提供的快捷书写</span><br><span class="line">&#123;<span class="comment">#data:&#123;&quot;username&quot;:&#x27;jason&#x27;,&#x27;csrfmiddlewaretoken&#x27;:&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;&#125;,#&#125;</span></span><br><span class="line">// 第三种 通用方式直接拷贝js代码并应用到自己的html页面上即可</span><br><span class="line">data:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&#x27;jason&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> cookieValue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">cookie</span> &amp;&amp; <span class="variable language_">document</span>.<span class="property">cookie</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookies = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cookies.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> cookie = jQuery.<span class="title function_">trim</span>(cookies[i]);</span><br><span class="line">            <span class="comment">// Does this cookie string begin with the name we want?</span></span><br><span class="line">            <span class="keyword">if</span> (cookie.<span class="title function_">substring</span>(<span class="number">0</span>, name.<span class="property">length</span> + <span class="number">1</span>) === (name + <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line">                cookieValue = <span class="built_in">decodeURIComponent</span>(cookie.<span class="title function_">substring</span>(name.<span class="property">length</span> + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> csrftoken = <span class="title function_">getCookie</span>(<span class="string">&#x27;csrftoken&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">csrfSafeMethod</span>(<span class="params">method</span>) &#123;</span><br><span class="line">  <span class="comment">// these HTTP methods do not require CSRF protection</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="regexp">/^(GET|HEAD|OPTIONS|TRACE)$/</span>.<span class="title function_">test</span>(method));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajaxSetup</span>(&#123;</span><br><span class="line">  <span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params">xhr, settings</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">csrfSafeMethod</span>(settings.<span class="property">type</span>) &amp;&amp; !<span class="variable language_">this</span>.<span class="property">crossDomain</span>) &#123;</span><br><span class="line">      xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;X-CSRFToken&quot;</span>, csrftoken);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="csrf相关装饰器"><a href="#csrf相关装饰器" class="headerlink" title="csrf相关装饰器"></a>csrf相关装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.网站整体都不校验csrf，就单单几个视图函数需要校验</span></span><br><span class="line"><span class="string">2.网站整体都校验csrf，就单单几个视图函数不校验</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_protect,csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">csrf_protect  需要校验</span></span><br><span class="line"><span class="string">    针对csrf_protect符合我们之前所学的装饰器的三种玩法</span></span><br><span class="line"><span class="string">csrf_exempt   忽视校验</span></span><br><span class="line"><span class="string">    针对csrf_exempt只能给dispatch方法加才有效</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># @csrf_exempt</span></span><br><span class="line"><span class="comment"># @csrf_protect</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transfer</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        target_user = request.POST.get(<span class="string">&#x27;target_user&#x27;</span>)</span><br><span class="line">        money = request.POST.get(<span class="string">&#x27;money&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s给%s转了%s元&#x27;</span>%(username,target_user,money))</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;transfer.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment"># @method_decorator(csrf_protect,name=&#x27;post&#x27;)  # 针对csrf_protect 第二种方式可以</span></span><br><span class="line"><span class="comment"># @method_decorator(csrf_exempt,name=&#x27;post&#x27;)  # 针对csrf_exempt 第二种方式不可以</span></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">csrf_exempt,name=<span class="string">&#x27;dispatch&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCsrfToken</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="comment"># @method_decorator(csrf_protect)  # 针对csrf_protect 第三种方式可以</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_exempt)  # 针对csrf_exempt 第三种方式可以</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(MyCsrfToken, self).dispatch(request,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_protect)  # 针对csrf_protect 第一种方式可以</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_exempt)  # 针对csrf_exempt 第一种方式不可以</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块:importlib</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">res = <span class="string">&#x27;myfile.b&#x27;</span></span><br><span class="line">ret = importlib.import_module(res)  <span class="comment"># from myfile import b</span></span><br><span class="line"><span class="comment"># 该方法最小只能到py文件名</span></span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure><h3 id="重要思想"><a href="#重要思想" class="headerlink" title="重要思想"></a>重要思想</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings文件</span></span><br><span class="line">NOTIFY_LIST = [</span><br><span class="line">    <span class="string">&#x27;notify.email.Email&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;notify.wechat.Wechat&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;notify.qq.QQ&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># wechat.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechat</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信通知:%s&#x27;</span> % content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__init__文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_all</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">for</span> path_str <span class="keyword">in</span> settings.NOTIFY_LIST:  <span class="comment">#&#x27;notify.email.Email&#x27;</span></span><br><span class="line">        module_path,class_name = path_str.rsplit(<span class="string">&#x27;.&#x27;</span>,maxsplit=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># module_path = &#x27;notify.email&#x27;  class_name = &#x27;Email&#x27;</span></span><br><span class="line">        <span class="comment"># 1 利用字符串导入模块</span></span><br><span class="line">        module = importlib.import_module(module_path)  <span class="comment"># from notify import email</span></span><br><span class="line">        <span class="comment"># 2 利用反射获取类名</span></span><br><span class="line">        cls = <span class="built_in">getattr</span>(module,class_name)  <span class="comment"># Email、QQ、Wechat</span></span><br><span class="line">        <span class="comment"># 3 生成类的对象</span></span><br><span class="line">        obj = cls()</span><br><span class="line">        <span class="comment"># 4 利用鸭子类型直接调用send方法</span></span><br><span class="line">        obj.send(content)</span><br><span class="line">通过注释或者启用哪个类实现django的中间件思想       </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django之cookie与session</title>
      <link href="/2022/06/10/Django%E4%B9%8Bcookie%E4%B8%8Esession/"/>
      <url>/2022/06/10/Django%E4%B9%8Bcookie%E4%B8%8Esession/</url>
      
        <content type="html"><![CDATA[<h3 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">发展史</span></span><br><span class="line"><span class="string">1.网站都没有保存用户功能的需求 所有用户访问返回的结果都是一样的</span></span><br><span class="line"><span class="string">eg:新闻、博客、文章</span></span><br><span class="line"><span class="string">2.出现了一些需要保存用户信息的网站</span></span><br><span class="line"><span class="string">eg:淘宝、支付宝、京东</span></span><br><span class="line"><span class="string">以登陆功能为例:如果不保存用户登陆状态 也就意味着用户每次访问网站都需要重复的输入用户名和密码(你觉得这样的网站你还想用吗？)</span></span><br><span class="line"><span class="string">当用户第一次登陆成功之后 将用户的用户名密码返回给用户浏览器 让用户浏览器保存在本地，之后访问网站的时候浏览器自动将保存在浏览器上的用户名和密码发送给服务端，服务端获取之后自动验证</span></span><br><span class="line"><span class="string">早期这种方式具有非常大的安全隐患</span></span><br><span class="line"><span class="string">优化:</span></span><br><span class="line"><span class="string">当用户登陆成功之后，服务端产生一个随机字符串(在服务端保存数据,用kv键值对的形式)，交由客户端浏览器保存</span></span><br><span class="line"><span class="string">随机字符串1:用户1相关信息</span></span><br><span class="line"><span class="string">随机字符串2:用户2相关信息</span></span><br><span class="line"><span class="string">随机字符串3:用户3相关信息</span></span><br><span class="line"><span class="string">之后访问服务端的时候，都带着该随机字符串，服务端去数据库中比对是否有对应的随机字符串从而获取到对应的用户信息</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">但是如果你截获到了该随机字符串，那么你就可以冒充当前用户 其实还是有安全隐患的</span></span><br><span class="line"><span class="string">web领域没有绝对的安全也没有绝对的不安全</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">cookie</span><br><span class="line">服务端保存在客户端浏览器上的信息都可以称之为cookie</span><br><span class="line">    它的表现形式一般都是k:v键值对(可以有多个)</span><br><span class="line">session</span><br><span class="line">数据是保存在服务端的并且它的表现形式一般也是k:v键值对(可以有多个)</span><br><span class="line">token</span><br><span class="line">session虽然数据是保存在服务端的 但是禁不住数据量大</span><br><span class="line">  服务端不再保存数据</span><br><span class="line">  登陆成功之后 将一段用户信息进行加密处理(加密算法)</span><br><span class="line">    将加密之后的结果拼接在信息后面 整体返回给浏览器保存 </span><br><span class="line">    浏览器下次访问的时候带着该信息 服务端自动切去前面一段信息再次使用自己的加密算法</span><br><span class="line">    跟浏览器尾部的密文进行比对</span><br><span class="line">jwt认证：三段信息 （先提一嘴后续DRF再续前缘）</span><br><span class="line">总结:</span><br><span class="line">  <span class="number">1.</span>cookie就是保存在客户端浏览器上的信息</span><br><span class="line">    <span class="number">2.</span>session就是保存在服务端上的信息</span><br><span class="line">    <span class="number">3.</span>session是基于cookie工作的(其实大部分的保存用户状态的操作都需要使用到cookie)</span><br></pre></td></tr></table></figure><h3 id="Cookie操作"><a href="#Cookie操作" class="headerlink" title="Cookie操作"></a>Cookie操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虽然cookie是服务端告诉客户端浏览器需要保存内容</span></span><br><span class="line"><span class="comment"># 但是客户端浏览器可以选择拒绝保存 如果禁止了 那么只要是需要记录用户状态的网站登陆功能都无法使用了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图函数的返回值</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse()</span><br><span class="line"><span class="keyword">return</span> render()</span><br><span class="line"><span class="keyword">return</span> redirect()</span><br><span class="line"></span><br><span class="line">obj1 = HttpResponse()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj1</span><br><span class="line"></span><br><span class="line">obj2 = render()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj2</span><br><span class="line"></span><br><span class="line">obj3 = redirect()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj3</span><br><span class="line"><span class="comment"># 如果你想要操作cookie，你就不得不利用obj对象</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">设置cookie</span></span><br><span class="line"><span class="string">obj.set_cookie(key,value)</span></span><br><span class="line"><span class="string">获取cookie</span></span><br><span class="line"><span class="string">request.COOKIES.get(key)</span></span><br><span class="line"><span class="string">在设置cookie的时候可以添加一个超时时间</span></span><br><span class="line"><span class="string">obj.set_cookie(&#x27;username&#x27;, &#x27;jason666&#x27;,max_age=3,expires=3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">max_age</span></span><br><span class="line"><span class="string">expires</span></span><br><span class="line"><span class="string">两者都是设置超时时间的 并且都是以秒为单位</span></span><br><span class="line"><span class="string">需要注意的是 针对IE浏览器需要使用expires</span></span><br><span class="line"><span class="string">主动删除cookie(注销功能)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 我们完成一个真正的登陆功能</span></span><br><span class="line"><span class="comment"># 校验用户是否登陆的装饰器</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用户如果在没有登陆的情况下想访问一个需要登陆的页面</span></span><br><span class="line"><span class="string">那么先跳转到登陆页面 当用户输入正确的用户名和密码之后</span></span><br><span class="line"><span class="string">应该跳转到用户之前想要访问的页面去 而不是直接写死</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_auth</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">request,*args,**kwargs</span>):</span><br><span class="line">        <span class="comment"># print(request.path_info)</span></span><br><span class="line">        <span class="comment"># print(request.get_full_path())  # 能够获取到用户上一次想要访问的url</span></span><br><span class="line">        target_url = request.get_full_path()</span><br><span class="line">        <span class="keyword">if</span> request.COOKIES.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request,*args,**kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/?next=%s&#x27;</span>%target_url)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取用户上一次想要访问的url</span></span><br><span class="line">            target_url = request.GET.get(<span class="string">&#x27;next&#x27;</span>)  <span class="comment"># 这个结果可能是None</span></span><br><span class="line">            <span class="keyword">if</span> target_url:</span><br><span class="line">                obj = redirect(target_url)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 保存用户登陆状态</span></span><br><span class="line">                obj = redirect(<span class="string">&#x27;/home/&#x27;</span>)</span><br><span class="line">            <span class="comment"># 让浏览器记录cookie数据</span></span><br><span class="line">            obj.set_cookie(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;jason666&#x27;</span>)</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            浏览器不单单会帮你存</span></span><br><span class="line"><span class="string">            而且后面每次访问你的时候还会带着它过来</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 跳转到一个需要用户登陆之后才能看的页面</span></span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_auth</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 获取cookie信息 判断你有没有</span></span><br><span class="line">    <span class="comment"># if request.COOKIES.get(&#x27;username&#x27;) == &#x27;jason666&#x27;:</span></span><br><span class="line">    <span class="comment">#     return HttpResponse(&quot;我是home页面，只有登陆的用户才能进来哟~&quot;)</span></span><br><span class="line">    <span class="comment"># # 没有登陆应该跳转到登陆页面</span></span><br><span class="line">    <span class="comment"># return redirect(&#x27;/login/&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;我是home页面，只有登陆的用户才能进来哟~&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="session操作"><a href="#session操作" class="headerlink" title="session操作"></a>session操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">session数据是保存在服务端的，给客户端返回的是一个随机字符串</span></span><br><span class="line"><span class="string">sessionid:随机字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.在默认情况下操作session的时候需要django默认的一张django_session表</span></span><br><span class="line"><span class="string">数据库迁移命令</span></span><br><span class="line"><span class="string">django会自己创建很多表django_session就是其中的一张</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django默认session的过期时间是14天 但是你也可以人为的修改它</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">设置session：request.session[&#x27;key&#x27;] = value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">获取session：request.session.get(&#x27;key&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">设置过期时间：request.session.set_expiry()</span></span><br><span class="line"><span class="string">括号内可以放四种类型的参数</span></span><br><span class="line"><span class="string">1.整数多少秒</span></span><br><span class="line"><span class="string">2.日期对象      到指定日期就失效</span></span><br><span class="line"><span class="string">3.0  一旦当前浏览器窗口关闭立刻失效</span></span><br><span class="line"><span class="string">4.不写 失效时间就取决于django内部全局session默认的失效时间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">清除session</span></span><br><span class="line"><span class="string">request.session.delete()  # 只删服务端的 客户端的不删</span></span><br><span class="line"><span class="string">request.session.flush()  # 浏览器和服务端都清空(推荐使用)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session是保存在服务端的 但是session的保存位置可以有多种选择</span></span><br><span class="line"><span class="string">1.MySQL</span></span><br><span class="line"><span class="string">2.文件</span></span><br><span class="line"><span class="string">3.redis</span></span><br><span class="line"><span class="string">4.memcache</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django_session表中的数据条数是取决于浏览器的</span></span><br><span class="line"><span class="string">同一个计算机上(IP地址)同一个浏览器只会有一条数据生效</span></span><br><span class="line"><span class="string">(当session过期的时候可能会出现多条数据对应一个浏览器，但是该现象不会持续很久，内部会自动识别过期的数据清除 你也可以通过代码清除)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">request.session[<span class="string">&#x27;hobby&#x27;</span>] = <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    内部发送了那些事</span></span><br><span class="line"><span class="string">        1.django内部会自动帮你生成一个随机字符串</span></span><br><span class="line"><span class="string">        2.django内部自动将随机字符串和对应的数据存储到django_session表中</span></span><br><span class="line"><span class="string">            2.1先在内存中产生操作数据的缓存</span></span><br><span class="line"><span class="string">            2.2在响应结果django中间件的时候才真正的操作数据库</span></span><br><span class="line"><span class="string">        3.将产生的随机字符串返回给客户端浏览器保存</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">request.session.get(<span class="string">&#x27;hobby&#x27;</span>)</span><br><span class="line"></span><br><span class="line">内部发生了什么事</span><br><span class="line">      <span class="number">1.</span>自动从浏览器请求中获取sessionid对应的随机字符串</span><br><span class="line">      <span class="number">2.</span>拿着该随机字符串去django_session表中查找对应的数据</span><br><span class="line">      <span class="number">3.</span> 如果比对上了 则将对应的数据取出并以字典的形式封装到request.session中</span><br><span class="line">         如果比对不上 则request.session.get()返回的是<span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django的forms组件</title>
      <link href="/2022/06/09/Django%E7%9A%84forms%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/06/09/Django%E7%9A%84forms%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">写一个注册功能</span></span><br><span class="line"><span class="string">获取用户名和密码 利用form表单提交数据</span></span><br><span class="line"><span class="string">在后端判断用户名和密码是否符合一定的条件</span></span><br><span class="line"><span class="string">用户名中不能含有草</span></span><br><span class="line"><span class="string">密码不能少于三位</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如何符合条件需要你将提示信息展示到前端页面</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_form</span>(<span class="params">request</span>):</span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;草&#x27;</span> <span class="keyword">in</span> username:</span><br><span class="line">            back_dic[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;不符合社会主义核心价值观&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(password) &lt; <span class="number">3</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;password&#x27;</span>] = <span class="string">&#x27;不能太短 不安全!&#x27;</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    无论是post请求还是get请求</span></span><br><span class="line"><span class="string">    页面都能够获取到字典 只不过get请求来的时候 字典值都是空的</span></span><br><span class="line"><span class="string">    而post请求来之后 字典可能有值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;ab_form.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;username:</span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color: red&quot;</span>&gt;&#123;&#123; back_dic.username &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;password:</span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color: red&quot;</span>&gt;&#123;&#123; back_dic.password &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.手动书写前端获取用户数据的html代码 渲染html代码</span></span><br><span class="line"><span class="string">2.后端对用户数据进行校验校验数据</span></span><br><span class="line"><span class="string">3.对不符合要求的数据进行前端提示  展示提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">forms组件</span></span><br><span class="line"><span class="string">能够完成的事情</span></span><br><span class="line"><span class="string">1.渲染html代码</span></span><br><span class="line"><span class="string">2.校验数据</span></span><br><span class="line"><span class="string">3.展示提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span>(forms.Form):</span><br><span class="line">    <span class="comment"># username字符串类型最小3位最大8位</span></span><br><span class="line">    username = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># password字符串类型最小3位最大8位</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># email字段必须符合邮箱格式  xxx@xx.com</span></span><br><span class="line">    email = forms.EmailField()</span><br></pre></td></tr></table></figure><h3 id="校验数据"><a href="#校验数据" class="headerlink" title="校验数据"></a>校验数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="comment"># 1 将带校验的数据组织成字典的形式传入即可</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 2 判断数据是否合法注意该方法只有在所有的数据全部合法的情况下才会返回True</span></span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="comment"># 3 查看所有校验通过的数据</span></span><br><span class="line">form_obj.cleaned_data</span><br><span class="line">&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 4 查看所有不符合校验规则以及不符合的原因</span></span><br><span class="line">form_obj.errors</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;email&#x27;</span>: [<span class="string">&#x27;Enter a valid email address.&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 5 校验数据只校验类中出现的字段 多传不影响 多传的字段直接忽略</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="string">&#x27;hobby&#x27;</span>:<span class="string">&#x27;study&#x27;</span>&#125;)</span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 6 校验数据 默认情况下 类里面所有的字段都必须传值</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;)</span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">也就意味着校验数据的时候 默认情况下数据可以多传但是绝不可能少传</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="渲染标签"><a href="#渲染标签" class="headerlink" title="渲染标签"></a>渲染标签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">forms组件只会自动帮你渲染获取用户输入的标签(input select radio checkbox)</span></span><br><span class="line"><span class="string">不能帮你渲染提交按钮</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 1 先产生一个空对象</span></span><br><span class="line">    form_obj = MyForm()</span><br><span class="line">    <span class="comment"># 2 直接将该空对象传递给html页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端利用空对象做操作</span></span><br><span class="line">    &lt;p&gt;第一种渲染方式:代码书写极少，封装程度太高 不便于后续的扩展 一般情况下只在本地测试使用&lt;/p&gt;</span><br><span class="line">    &#123;&#123; form_obj.as_p &#125;&#125;</span><br><span class="line">    &#123;&#123; form_obj.as_ul &#125;&#125;</span><br><span class="line">    &#123;&#123; form_obj.as_table &#125;&#125;</span><br><span class="line">    &lt;p&gt;第二种渲染方式:可扩展性很强 但是需要书写的代码太多  一般情况下不用&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.username.label &#125;&#125;:&#123;&#123; form_obj.username &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.password.label &#125;&#125;:&#123;&#123; form_obj.password &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.email.label &#125;&#125;:&#123;&#123; form_obj.email &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;第三种渲染方式(推荐使用):代码书写简单 并且扩展性也高&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> form <span class="keyword">in</span> form_obj %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; form.label &#125;&#125;:&#123;&#123; form &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">label属性默认展示的是类中定义的字段首字母大写的形式</span></span><br><span class="line"><span class="string">也可以自己修改 直接给字段对象加label属性即可</span></span><br><span class="line"><span class="string">username = forms.CharField(min_length=3,max_length=8,label=&#x27;用户名&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="展示提示信息"><a href="#展示提示信息" class="headerlink" title="展示提示信息"></a>展示提示信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">浏览器会自动帮你校验数据 但是前端的校验弱不禁风</span></span><br><span class="line"><span class="string">如何让浏览器不做校验</span></span><br><span class="line"><span class="string">&lt;form action=&quot;&quot; method=&quot;post&quot; novalidate&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 1 先产生一个空对象</span></span><br><span class="line">    form_obj = MyForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 2.获取用户数据并且校验</span></span><br><span class="line">        form_obj = MyForm(request.POST)</span><br><span class="line">        <span class="comment"># 3.判断数据是否合法</span></span><br><span class="line">        <span class="keyword">if</span> form_obj.is_valid():</span><br><span class="line">            <span class="comment"># 4.如果合法 操作数据库存储数据</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">        <span class="comment"># 5.不合法 有错误</span></span><br><span class="line">    <span class="comment"># 2 直接将该空对象传递给html页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> form <span class="keyword">in</span> form_obj %&#125;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &#123;&#123; form.label &#125;&#125;:&#123;&#123; form &#125;&#125;</span><br><span class="line">            &lt;span style=<span class="string">&quot;color: red&quot;</span>&gt;&#123;&#123; form.errors<span class="number">.0</span> &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对错误的提示信息还可以自己自定制</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span>(forms.Form):</span><br><span class="line">    <span class="comment"># username字符串类型最小3位最大8位</span></span><br><span class="line">    username = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">                               error_messages=&#123;</span><br><span class="line">                                   <span class="string">&#x27;min_length&#x27;</span>:<span class="string">&#x27;用户名最少3位&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;max_length&#x27;</span>:<span class="string">&#x27;用户名最大8位&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;required&#x27;</span>:<span class="string">&quot;用户名不能为空&quot;</span></span><br><span class="line">                               &#125;</span><br><span class="line">                               )</span><br><span class="line">    <span class="comment"># password字符串类型最小3位最大8位</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">                               error_messages=&#123;</span><br><span class="line">                                   <span class="string">&#x27;min_length&#x27;</span>: <span class="string">&#x27;密码最少3位&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;密码最大8位&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;required&#x27;</span>: <span class="string">&quot;密码不能为空&quot;</span></span><br><span class="line">                               &#125;</span><br><span class="line">                               )</span><br><span class="line">    <span class="comment"># email字段必须符合邮箱格式  xxx@xx.com</span></span><br><span class="line">    email = forms.EmailField(label=<span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">                             error_messages=&#123;</span><br><span class="line">                                 <span class="string">&#x27;invalid&#x27;</span>:<span class="string">&#x27;邮箱格式不正确&#x27;</span>,</span><br><span class="line">                                 <span class="string">&#x27;required&#x27;</span>: <span class="string">&quot;邮箱不能为空&quot;</span></span><br><span class="line">                             &#125;</span><br><span class="line">                             )</span><br></pre></td></tr></table></figure><h3 id="钩子函数-HOOK"><a href="#钩子函数-HOOK" class="headerlink" title="钩子函数(HOOK)"></a>钩子函数(HOOK)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在特定的节点自动触发完成响应操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">钩子函数在forms组件中就类似于第二道关卡，能够让我们自定义校验规则</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在forms组件中有两类钩子</span></span><br><span class="line"><span class="string">1.局部钩子</span></span><br><span class="line"><span class="string">当你需要给单个字段增加校验规则的时候可以使用</span></span><br><span class="line"><span class="string">2.全局钩子</span></span><br><span class="line"><span class="string">  当你需要给多个字段增加校验规则的时候可以使用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 实际案例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.校验用户名中不能含有666只是校验username字段  局部钩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.校验密码和确认密码是否一致password confirm两个字段全局钩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 钩子函数  在类里面书写方法即可</span></span><br><span class="line">    <span class="comment"># 局部钩子</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_username</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取到用户名</span></span><br><span class="line">        username = self.cleaned_data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;666&#x27;</span> <span class="keyword">in</span> username:</span><br><span class="line">            <span class="comment"># 提示前端展示错误信息</span></span><br><span class="line">            self.add_error(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;光喊666是不行滴～&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将钩子函数钩去出来数据再放回去</span></span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局钩子</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean</span>(<span class="params">self</span>):</span><br><span class="line">        password = self.cleaned_data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        confirm_password = self.cleaned_data.get(<span class="string">&#x27;confirm_password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> confirm_password == password:</span><br><span class="line">            self.add_error(<span class="string">&#x27;confirm_password&#x27;</span>,<span class="string">&#x27;两次密码不一致&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将钩子函数钩出来数据再放回去</span></span><br><span class="line">        <span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure><h3 id="forms组件其他参数及补充知识点"><a href="#forms组件其他参数及补充知识点" class="headerlink" title="forms组件其他参数及补充知识点"></a>forms组件其他参数及补充知识点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">label字段名</span><br><span class="line">error_messages  自定义报错信息</span><br><span class="line">initial  默认值</span><br><span class="line">required  控制字段是否必填</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.字段没有样式</span></span><br><span class="line"><span class="string">2.针对不同类型的input如何修改</span></span><br><span class="line"><span class="string">text</span></span><br><span class="line"><span class="string">password</span></span><br><span class="line"><span class="string">date</span></span><br><span class="line"><span class="string">radio</span></span><br><span class="line"><span class="string">checkbox</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">widget=forms.widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;form-control c1 c2&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 多个属性值的话 直接空格隔开即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一道关卡里面还支持正则校验</span></span><br><span class="line">validators=[</span><br><span class="line">            RegexValidator(<span class="string">r&#x27;^[0-9]+$&#x27;</span>, <span class="string">&#x27;请输入数字&#x27;</span>),</span><br><span class="line">            RegexValidator(<span class="string">r&#x27;^159[0-9]+$&#x27;</span>, <span class="string">&#x27;数字必须以159开头&#x27;</span>)</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>其他类型渲染</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># radio</span></span><br><span class="line">    gender = forms.ChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">&quot;男&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;女&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;保密&quot;</span>)),</span><br><span class="line">        label=<span class="string">&quot;性别&quot;</span>,</span><br><span class="line">        initial=<span class="number">3</span>,</span><br><span class="line">        widget=forms.widgets.RadioSelect()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># select</span></span><br><span class="line">    hobby = forms.ChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">&quot;篮球&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;足球&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;双色球&quot;</span>),),</span><br><span class="line">        label=<span class="string">&quot;爱好&quot;</span>,</span><br><span class="line">        initial=<span class="number">3</span>,</span><br><span class="line">        widget=forms.widgets.Select()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 多选</span></span><br><span class="line">    hobby1 = forms.MultipleChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">&quot;篮球&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;足球&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;双色球&quot;</span>),),</span><br><span class="line">        label=<span class="string">&quot;爱好&quot;</span>,</span><br><span class="line">        initial=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">        widget=forms.widgets.SelectMultiple()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 单选checkbox</span></span><br><span class="line">    keep = forms.ChoiceField(</span><br><span class="line">        label=<span class="string">&quot;是否记住密码&quot;</span>,</span><br><span class="line">        initial=<span class="string">&quot;checked&quot;</span>,</span><br><span class="line">        widget=forms.widgets.CheckboxInput()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 多选checkbox</span></span><br><span class="line">    hobby2 = forms.MultipleChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">&quot;篮球&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;足球&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;双色球&quot;</span>),),</span><br><span class="line">        label=<span class="string">&quot;爱好&quot;</span>,</span><br><span class="line">        initial=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">        widget=forms.widgets.CheckboxSelectMultiple()</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="forms组件源码"><a href="#forms组件源码" class="headerlink" title="forms组件源码"></a>forms组件源码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">切入点:</span></span><br><span class="line"><span class="string">form_obj.is_valid()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">self</span>):</span><br><span class="line">        </span><br><span class="line">   <span class="keyword">return</span> self.is_bound <span class="keyword">and</span> <span class="keyword">not</span> self.errors</span><br><span class="line">   <span class="comment"># 如果is_valid要返回True的话 那么self.is_bound要为True self.errors要为Flase</span></span><br><span class="line">  </span><br><span class="line">self.is_bound = data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> files <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>  <span class="comment"># 只要你传值了肯定为True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">errors</span>(<span class="params">self</span>):       </span><br><span class="line">        <span class="keyword">if</span> self._errors <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.full_clean()</span><br><span class="line">        <span class="keyword">return</span> self._errors</span><br><span class="line"></span><br><span class="line"><span class="comment"># forms组件所有的功能基本都出自于该方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">full_clean</span>(<span class="params">self</span>):</span><br><span class="line">  self._clean_fields()  <span class="comment"># 校验字段 + 局部钩子</span></span><br><span class="line">    self._clean_form()  <span class="comment"># 全局钩子</span></span><br><span class="line">    self._post_clean()  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django自定义分页器与批量插入</title>
      <link href="/2022/06/06/Django%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5%E5%99%A8%E4%B8%8E%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/"/>
      <url>/2022/06/06/Django%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5%E5%99%A8%E4%B8%8E%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="分页器简单逻辑"><a href="#分页器简单逻辑" class="headerlink" title="分页器简单逻辑"></a>分页器简单逻辑</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">per_page_num = 10</span></span><br><span class="line"><span class="string">current_page    start_page  end_page</span></span><br><span class="line"><span class="string">1                0          10</span></span><br><span class="line"><span class="string">2                10          20</span></span><br><span class="line"><span class="string">起始页，终止页与数量的关系</span></span><br><span class="line"><span class="string">start_page = (current_page-1)*per_page_num</span></span><br><span class="line"><span class="string">end_page = current_page*per_page_num</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pagination</span>(<span class="params">request</span>):</span><br><span class="line">    book_list = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 想访问哪一页</span></span><br><span class="line">    current_page = request.GET.get(<span class="string">&#x27;page&#x27;</span>,<span class="number">1</span>)  <span class="comment"># 如果获取不到当前页码 就展示第一页</span></span><br><span class="line">    <span class="comment"># 数据类型转换</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        current_page = <span class="built_in">int</span>(current_page)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        current_page = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 每页展示多少条</span></span><br><span class="line">    per_page_num = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 起始位置</span></span><br><span class="line">    start_page = (current_page - <span class="number">1</span>) * per_page_num</span><br><span class="line">    <span class="comment"># 终止位置</span></span><br><span class="line">    end_page = current_page * per_page_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算出到底需要多少页</span></span><br><span class="line">    all_count = book_list.count()</span><br><span class="line"></span><br><span class="line">    page_count, more = <span class="built_in">divmod</span>(all_count, per_page_num)</span><br><span class="line">    <span class="keyword">if</span> more:</span><br><span class="line">        page_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    page_html = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    xxx = current_page</span><br><span class="line">    <span class="keyword">if</span> current_page &lt; <span class="number">6</span>:</span><br><span class="line">        current_page = <span class="number">6</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(current_page-<span class="number">5</span>,current_page+<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> xxx == i:</span><br><span class="line">            page_html += <span class="string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span>%(i,i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            page_html += <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span>%(i,i)</span><br><span class="line">    book_queryset = book_list[start_page:end_page]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;ab_batch.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h3 id="自定义分页器封装"><a href="#自定义分页器封装" class="headerlink" title="自定义分页器封装"></a>自定义分页器封装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pagination</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, current_page, all_count, per_page_num=<span class="number">6</span>, pager_count=<span class="number">11</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        封装分页相关数据</span></span><br><span class="line"><span class="string">        :param current_page: 当前页</span></span><br><span class="line"><span class="string">        :param all_count:    数据库中的数据总条数</span></span><br><span class="line"><span class="string">        :param per_page_num: 每页显示的数据条数</span></span><br><span class="line"><span class="string">        :param pager_count:  最多显示的页码个数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            current_page = <span class="built_in">int</span>(current_page)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            current_page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current_page &lt; <span class="number">1</span>:</span><br><span class="line">            current_page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.current_page = current_page</span><br><span class="line"></span><br><span class="line">        self.all_count = all_count</span><br><span class="line">        self.per_page_num = per_page_num</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 总页码</span></span><br><span class="line">        all_pager, tmp = <span class="built_in">divmod</span>(all_count, per_page_num)</span><br><span class="line">        <span class="keyword">if</span> tmp:</span><br><span class="line">            all_pager += <span class="number">1</span></span><br><span class="line">        self.all_pager = all_pager</span><br><span class="line"></span><br><span class="line">        self.pager_count = pager_count</span><br><span class="line">        self.pager_count_half = <span class="built_in">int</span>((pager_count - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将方法伪装成属性，不用加括号也可以运行</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.current_page - <span class="number">1</span>) * self.per_page_num</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.current_page * self.per_page_num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 如果总页码 &lt; 11个：</span></span><br><span class="line">        <span class="keyword">if</span> self.all_pager &lt;= self.pager_count:</span><br><span class="line">            pager_start = <span class="number">1</span></span><br><span class="line">            pager_end = self.all_pager + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 总页码  &gt; 11</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 当前页如果&lt;=11/2(页面上最多显示11/2个页码)</span></span><br><span class="line">            <span class="keyword">if</span> self.current_page &lt;= self.pager_count_half:</span><br><span class="line">                pager_start = <span class="number">1</span></span><br><span class="line">                pager_end = self.pager_count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前页大于5</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 页码翻到最后 如果当前页加页码个数一半大于总页数则  起始页=总页数-页码数+1</span></span><br><span class="line">                <span class="keyword">if</span> (self.current_page + self.pager_count_half) &gt; self.all_pager:</span><br><span class="line">                    pager_end = self.all_pager + <span class="number">1</span></span><br><span class="line">                    pager_start = self.all_pager - self.pager_count + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pager_start = self.current_page - self.pager_count_half</span><br><span class="line">                    pager_end = self.current_page + self.pager_count_half + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        page_html_list = []</span><br><span class="line">        <span class="comment"># 添加前面的nav和ul标签</span></span><br><span class="line">        page_html_list.append(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                    &lt;nav aria-label=&#x27;Page navigation&gt;&#x27;</span></span><br><span class="line"><span class="string">                    &lt;ul class=&#x27;pagination&#x27;&gt;</span></span><br><span class="line"><span class="string">                &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        first_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (<span class="number">1</span>)</span><br><span class="line">        page_html_list.append(first_page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.current_page &lt;= <span class="number">1</span>:</span><br><span class="line">            prev_page = <span class="string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.current_page - <span class="number">1</span>,)</span><br><span class="line"></span><br><span class="line">        page_html_list.append(prev_page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pager_start, pager_end):</span><br><span class="line">            <span class="keyword">if</span> i == self.current_page:</span><br><span class="line">                temp = <span class="string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (i, i,)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (i, i,)</span><br><span class="line">            page_html_list.append(temp)</span><br><span class="line">        <span class="comment"># 判断是否还有下一页</span></span><br><span class="line">        <span class="keyword">if</span> self.current_page &gt;= self.all_pager:</span><br><span class="line">            next_page = <span class="string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            next_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.current_page + <span class="number">1</span>,)</span><br><span class="line">        page_html_list.append(next_page)</span><br><span class="line"></span><br><span class="line">        last_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.all_pager,)</span><br><span class="line">        page_html_list.append(last_page)</span><br><span class="line">        <span class="comment"># 尾部添加标签</span></span><br><span class="line">        page_html_list.append(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                                           &lt;/nav&gt;</span></span><br><span class="line"><span class="string">                                           &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                                       &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(page_html_list)</span><br></pre></td></tr></table></figure><h3 id="自定义分页器的拷贝及使用"><a href="#自定义分页器的拷贝及使用" class="headerlink" title="自定义分页器的拷贝及使用"></a>自定义分页器的拷贝及使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">自定义的分页器是基于bootstrap样式来的 所以需要提前导入bootstrap,jquery</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_pagination</span>(<span class="params">request</span>):</span><br><span class="line">    book_queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    current_page = request.GET.get(<span class="string">&#x27;page&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    all_count = book_queryset.count()</span><br><span class="line">    <span class="comment"># 1 传值生成对象</span></span><br><span class="line">    page_obj = Pagination(current_page=current_page,all_count=all_count)</span><br><span class="line">    <span class="comment"># 2 直接对总数据进行切片操作</span></span><br><span class="line">    page_queryset = book_queryset[page_obj.start:page_obj.end]</span><br><span class="line">    <span class="comment"># 3 将page_queryset传递到页面 替换之前的book_queryset</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;pagination.html&#x27;</span>, <span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&#123;% <span class="keyword">for</span> book_obj <span class="keyword">in</span> page_queryset %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; book_obj.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;<span class="comment">#利用自定义分页器直接显示分页器样式#&#125;</span></span><br><span class="line">&#123;&#123; page_obj.page_html|safe &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ab_batch</span>(<span class="params">request</span>):</span><br><span class="line">    book_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="comment"># models.Book.objects.create(title=f&#x27;第&#123;i&#125;本书&#x27;)</span></span><br><span class="line">        book_list.append(models.Book(title=<span class="string">f&#x27;第<span class="subst">&#123;i&#125;</span>本书&#x27;</span>))</span><br><span class="line">    <span class="comment"># 一次性插入减少数据库资源消耗</span></span><br><span class="line">    models.Book.objects.bulk_create(book_list)</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      <categories>
          
          <category> Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django之Ajax操作</title>
      <link href="/2022/06/04/Django%E4%B9%8BAjax%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/06/04/Django%E4%B9%8BAjax%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">异步提交</span></span><br><span class="line"><span class="string">局部刷新</span></span><br><span class="line"><span class="string">例子:github注册,动态获取用户名实时的跟后端确认并实时展示的前端(局部刷新)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">朝后端发送请求的方式</span></span><br><span class="line"><span class="string">1.浏览器地址栏直接输入url回车    GET请求</span></span><br><span class="line"><span class="string">2.a标签href属性  GET请求</span></span><br><span class="line"><span class="string">3.form表单  GET请求/POST请求</span></span><br><span class="line"><span class="string">    4.ajax       GET请求/POST请求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。（这一特点给用户的感受是在不知不觉中完成请求和响应过程）Ajax我们只使用jQuery封装之后的版本</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="小栗子"><a href="#小栗子" class="headerlink" title="小栗子"></a>小栗子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">页面上有三个input框</span></span><br><span class="line"><span class="string">在前两个框中输入数字 点击按钮 朝后端发送ajax请求</span></span><br><span class="line"><span class="string">后端计算出结果 再返回给前端动态展示的到第三个input框中</span></span><br><span class="line"><span class="string">(整个过程页面不准有刷新,也不能在前端计算)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">$(<span class="string">&#x27;#btn&#x27;</span>).click(function () &#123;</span><br><span class="line">        // 朝后端发送ajax请求</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            // <span class="number">1.</span>指定朝哪个后端发送ajax请求</span><br><span class="line">            url:<span class="string">&#x27;&#x27;</span>, // 不写就是朝当前地址提交</span><br><span class="line">            // <span class="number">2.</span>请求方式</span><br><span class="line">            <span class="built_in">type</span>:<span class="string">&#x27;post&#x27;</span>,  // 不指定默认就是get 都是小写</span><br><span class="line">            // <span class="number">3.</span>数据</span><br><span class="line">            &#123;<span class="comment">#data:&#123;&#x27;username&#x27;:&#x27;jason&#x27;,&#x27;password&#x27;:123&#125;,#&#125;</span></span><br><span class="line">            data:&#123;<span class="string">&#x27;i1&#x27;</span>:$(<span class="string">&#x27;#d1&#x27;</span>).val(),<span class="string">&#x27;i2&#x27;</span>:$(<span class="string">&#x27;#d2&#x27;</span>).val()&#125;,</span><br><span class="line">            // <span class="number">4.</span>回调函数:当后端给你返回结果的时候会自动触发 args接受后端的返回结果</span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">                &#123;<span class="comment">#alert(args)  // 通过DOM操作动态渲染到第三个input里面#&#125;</span></span><br><span class="line">                &#123;<span class="comment">#$(&#x27;#d3&#x27;).val(args)#&#125;</span></span><br><span class="line">                console.log(typeof args)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">                        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">针对后端如果是用HttpResponse返回的数据 回调函数不会自动帮你反序列化</span></span><br><span class="line"><span class="string">如果后端直接用的是JsonResponse返回的数据 回调函数会自动帮你反序列化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">HttpResponse解决方式</span></span><br><span class="line"><span class="string">1.自己在前端利用JSON.parse()</span></span><br><span class="line"><span class="string">2.在ajax里面配置一个参数 dataType:&#x27;JSON&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="前后端传输数据的编码格式-contentType"><a href="#前后端传输数据的编码格式-contentType" class="headerlink" title="前后端传输数据的编码格式(contentType)"></a>前后端传输数据的编码格式(contentType)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们主要研究post请求数据的编码格式</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">get请求数据就是直接放在url后面的</span></span><br><span class="line"><span class="string">url?username=jason&amp;password=123</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 可以朝后端发送post请求的方式</span></span><br><span class="line"><span class="string">1.form表单</span></span><br><span class="line"><span class="string">2.ajax请求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">前后端传输数据的编码格式</span></span><br><span class="line"><span class="string">urlencoded</span></span><br><span class="line"><span class="string">formdata</span></span><br><span class="line"><span class="string">json</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 研究form表单</span></span><br><span class="line">默认的数据编码格式是urlencoded</span><br><span class="line">  数据格式:username=jason&amp;password=<span class="number">123</span></span><br><span class="line">  django后端针对符合urlencoded编码格式的数据都会自动帮你解析封装到request.POST中</span><br><span class="line">  username=jason&amp;password=<span class="number">123</span>&gt;&gt;&gt; request.POST</span><br><span class="line">  </span><br><span class="line">如果把编码格式改成formdata，那么针对普通的键值对还是解析到request.POST中将文件解析到request.FILES中</span><br><span class="line">form表单是没有办法发送json格式数据的</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 研究ajax</span></span><br><span class="line">默认的编码格式也是urlencoded 数据格式:username=jason&amp;age=<span class="number">20</span></span><br><span class="line">django后端针对符合urlencoded编码格式的数据都会自动帮你解析封装到request.POST中</span><br><span class="line">username=jason&amp;age=<span class="number">20</span>&gt;&gt;&gt; request.POST</span><br></pre></td></tr></table></figure><h3 id="ajax发送json格式数据"><a href="#ajax发送json格式数据" class="headerlink" title="ajax发送json格式数据"></a>ajax发送json格式数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">前后端传输数据的时候一定要确保编码格式跟数据真正的格式是一致的</span></span><br><span class="line"><span class="string">&#123;&quot;username&quot;:&quot;jason&quot;,&quot;age&quot;:25&#125;  </span></span><br><span class="line"><span class="string">在request.POST里面肯定找不到；django针对json格式的数据 不会做任何的处理 </span></span><br><span class="line"><span class="string">request对象方法补充</span></span><br><span class="line"><span class="string">request.is_ajax()</span></span><br><span class="line"><span class="string">判断当前请求是否是ajax请求 返回布尔值</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&#x27;#d1&#x27;</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="built_in">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            data:JSON.stringify(&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">25</span>&#125;),</span><br><span class="line">            contentType:<span class="string">&#x27;application/json&#x27;</span>,  // 指定编码格式</span><br><span class="line">            success:function () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        json_bytes = request.body</span><br><span class="line">        json_str = json_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        json_dict = json.loads(json_str)</span><br><span class="line">        <span class="comment"># json.loads括号内如果传入了一个二进制格式的数据那么内部自动解码再反序列化</span></span><br><span class="line">        json_dict = json.loads(json_bytes)</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ajax发送json格式数据需要注意点</span></span><br><span class="line"><span class="string">1.contentType参数指定成:application/json</span></span><br><span class="line"><span class="string">2.数据是真正的json格式数据</span></span><br><span class="line"><span class="string">3.django后端不会帮你处理json格式数据需要你自己去request.body获取并处理</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ajax发送文件"><a href="#ajax发送文件" class="headerlink" title="ajax发送文件"></a>ajax发送文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ajax发送文件需要借助于js内置对象FormData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 点击按钮朝后端发送普通键值对和文件数据</span><br><span class="line">    $(<span class="string">&#x27;#d4&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>,function () &#123;</span><br><span class="line">        // <span class="number">1</span> 需要先利用FormData内置对象</span><br><span class="line">        let formDateObj = new FormData();</span><br><span class="line">        // <span class="number">2</span> 添加普通的键值对</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;username&#x27;</span>,$(<span class="string">&#x27;#d1&#x27;</span>).val());</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;password&#x27;</span>,$(<span class="string">&#x27;#d2&#x27;</span>).val());</span><br><span class="line">        // <span class="number">3</span> 添加文件对象</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;myfile&#x27;</span>,$(<span class="string">&#x27;#d3&#x27;</span>)[<span class="number">0</span>].files[<span class="number">0</span>])</span><br><span class="line">        // <span class="number">4</span> 将对象基于ajax发送给后端</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="built_in">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            data:formDateObj,  // 直接将对象放在data后面即可</span><br><span class="line">            // ajax发送文件必须要指定的两个参数</span><br><span class="line">            contentType:false,  // 不需使用任何编码 django后端能够自动识别formdata对象</span><br><span class="line">            processData:false,  // 告诉你的浏览器不要对你的数据进行任何处理</span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_file</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(request.POST)</span><br><span class="line">            <span class="built_in">print</span>(request.FILES)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;ab_file.html&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">总结:</span><br><span class="line"><span class="number">1.</span>需要利用内置对象FormData</span><br><span class="line">// <span class="number">2</span> 添加普通的键值对</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;username&#x27;</span>,$(<span class="string">&#x27;#d1&#x27;</span>).val());</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;password&#x27;</span>,$(<span class="string">&#x27;#d2&#x27;</span>).val());</span><br><span class="line">        // <span class="number">3</span> 添加文件对象</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;myfile&#x27;</span>,$(<span class="string">&#x27;#d3&#x27;</span>)[<span class="number">0</span>].files[<span class="number">0</span>])</span><br><span class="line"><span class="number">2.</span>需要指定两个关键性的参数</span><br><span class="line">contentType:false,  // 不需使用任何编码 django后端能够自动识别formdata对象</span><br><span class="line">        processData:false,  // 告诉你的浏览器不要对你的数据进行任何处理</span><br><span class="line"><span class="number">3.</span>django后端能够直接识别到formdata对象并且能够将内部的普通键值自动解析并封装到request.POST中 文件数据自动解析并封装到request.FILES中</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="django自带的序列化组件-drf做铺垫"><a href="#django自带的序列化组件-drf做铺垫" class="headerlink" title="django自带的序列化组件(drf做铺垫)"></a>django自带的序列化组件(drf做铺垫)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需求:在前端给我获取到后端用户表里面所有的数据 并且要是列表套字典</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_ser</span>(<span class="params">request</span>):</span><br><span class="line">    user_queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    user_list = []</span><br><span class="line">    <span class="comment"># 数据格式[&#123;&#125;,&#123;&#125;,&#123;&#125;……]</span></span><br><span class="line">    <span class="keyword">for</span> user_obj <span class="keyword">in</span> user_queryset:</span><br><span class="line">        tmp = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: user_obj.<span class="built_in">id</span>,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: user_obj.name,</span><br><span class="line">            <span class="string">&#x27;age&#x27;</span>: user_obj.age,</span><br><span class="line">            <span class="string">&#x27;gender&#x27;</span>:user_obj.get_gender_display()</span><br><span class="line">        &#125;</span><br><span class="line">        user_list.append(tmp)</span><br><span class="line">    <span class="comment"># 默认只能序列化字典 序列化其他需要加safe参数</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(user_list, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 序列化</span></span><br><span class="line">    res = serializers.serialize(<span class="string">&#x27;json&#x27;</span>,user_queryset)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;会自动帮你将数据变成json格式的字符串 并且内部非常的全面&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string"> &#123;&quot;pk&quot;: 1, &quot;username&quot;: &quot;jason&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;male&quot;&#125;, </span></span><br><span class="line"><span class="string"> &#123;&quot;pk&quot;: 2, &quot;username&quot;: &quot;egon&quot;, &quot;age&quot;: 31, &quot;gender&quot;: &quot;female&quot;&#125;,</span></span><br><span class="line"><span class="string"> &#123;&quot;pk&quot;: 3, &quot;username&quot;: &quot;kevin&quot;, &quot;age&quot;: 32, &quot;gender&quot;: &quot;others&quot;&#125;, </span></span><br><span class="line"><span class="string"> &#123;&quot;pk&quot;: 4, &quot;username&quot;: &quot;tank&quot;, &quot;age&quot;: 40, &quot;gender&quot;: 4&#125;</span></span><br><span class="line"><span class="string"> ]</span></span><br><span class="line"><span class="string">              </span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">&#123;   &quot;model&quot;: &quot;app01.user&quot;, </span></span><br><span class="line"><span class="string">    &quot;pk&quot;: 1, </span></span><br><span class="line"><span class="string">    &quot;fields&quot;: &#123;&quot;username&quot;: &quot;jason&quot;, &quot;age&quot;: 25, &quot;gender&quot;: 1&#125;&#125;, </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#123;   &quot;model&quot;: &quot;app01.user&quot;, </span></span><br><span class="line"><span class="string">    &quot;pk&quot;: 2, </span></span><br><span class="line"><span class="string">    &quot;fields&quot;: &#123;&quot;username&quot;: &quot;egon&quot;, &quot;age&quot;: 31, &quot;gender&quot;: 2&#125;&#125;, </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#123;   &quot;model&quot;: &quot;app01.user&quot;, </span></span><br><span class="line"><span class="string">    &quot;pk&quot;: 3, </span></span><br><span class="line"><span class="string">    &quot;fields&quot;: &#123;&quot;username&quot;: &quot;kevin&quot;, &quot;age&quot;: 32, &quot;gender&quot;: 3&#125;&#125;,</span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">&#123;   &quot;model&quot;: &quot;app01.user&quot;, </span></span><br><span class="line"><span class="string">    &quot;pk&quot;: 4, </span></span><br><span class="line"><span class="string">    &quot;fields&quot;: &#123;&quot;username&quot;: &quot;tank&quot;, &quot;age&quot;: 40, &quot;gender&quot;: 4&#125;&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ajax结合layer实现删除弹窗"><a href="#ajax结合layer实现删除弹窗" class="headerlink" title="ajax结合layer实现删除弹窗"></a>ajax结合layer实现删除弹窗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">userlist</span>(<span class="params">request</span>):</span><br><span class="line">    user_queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    back_dict = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="built_in">id</span> = request.POST.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        models.User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="built_in">id</span>).delete()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dict)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;userlist.html&#x27;</span>, <span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">        &lt;table <span class="keyword">class</span>=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;name&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;age&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;gender&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">            &#123;% <span class="keyword">for</span> user_obj <span class="keyword">in</span> user_queryset %&#125;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; user_obj.<span class="built_in">id</span> &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; user_obj.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; user_obj.age &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; user_obj.gender &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;a href=<span class="string">&quot;javascript:;&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;btn btn-danger del&quot;</span> del_id=<span class="string">&quot;&#123;&#123; user_obj.id &#125;&#125;&quot;</span></span><br><span class="line">                           <span class="built_in">id</span>=<span class="string">&quot;del_&#123;&#123; user_obj.id &#125;&#125;&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ajax</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&#x27;.del&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> id = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;del_id&#x27;</span>)</span><br><span class="line">        <span class="keyword">var</span> currentBtn = $(<span class="variable language_">this</span>)</span><br><span class="line">        <span class="comment">// alert(id)</span></span><br><span class="line">        layer.<span class="title function_">confirm</span>(<span class="string">&#x27;您确定要删除吗？&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">btn</span>: [<span class="string">&#x27;确定&#x27;</span>, <span class="string">&#x27;取消&#x27;</span>] <span class="comment">//按钮</span></span><br><span class="line">        &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: &#123;<span class="string">&#x27;id&#x27;</span>: id&#125;,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (args.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="comment">// layer.msg(args.msg, &#123;icon: 1&#125;, function () &#123;</span></span><br><span class="line">                            <span class="comment">// location.reload()</span></span><br><span class="line">                        <span class="comment">// &#125;)</span></span><br><span class="line">                        <span class="comment">// 2.利用DOM操作 动态刷新tr标签</span></span><br><span class="line">                        layer.<span class="title function_">msg</span>(args.<span class="property">msg</span>,&#123;<span class="attr">icon</span>:<span class="number">1</span>&#125;)</span><br><span class="line">                        <span class="comment">// $(this).parent().parent().remove()此时this指向当前函数</span></span><br><span class="line">                        currentBtn.<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">remove</span>()</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        layer.<span class="title function_">msg</span>(args.<span class="property">msg</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            layer.<span class="title function_">msg</span>(<span class="string">&#x27;取消删除&#x27;</span>, &#123;</span><br><span class="line">                <span class="comment">// time: 20000, //20s后自动关闭</span></span><br><span class="line">                <span class="comment">// btn: [&#x27;明白了&#x27;, &#x27;知道了&#x27;]</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>刷新页面 location.reload()</span><br><span class="line"><span class="number">2.</span>利用DOM操作 动态刷新tr标签 currentBtn.parent().parent().remove()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORM案例及多对多关系创建</title>
      <link href="/2022/06/04/Django%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/"/>
      <url>/2022/06/04/Django%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/</url>
      
        <content type="html"><![CDATA[<h3 id="图书管理的增删改查"><a href="#图书管理的增删改查" class="headerlink" title="图书管理的增删改查"></a>图书管理的增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect,HttpResponse</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># 首页</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;home.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先查询出所有的书籍信息 传递给html页面</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_list</span>(<span class="params">request</span>):</span><br><span class="line">    book_queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;book_list.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 获取前端提交过来的所有数据</span></span><br><span class="line">        title = request.POST.get(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">        price = request.POST.get(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">        publish_date = request.POST.get(<span class="string">&quot;publish_date&quot;</span>)</span><br><span class="line">        publish_id = request.POST.get(<span class="string">&quot;publish&quot;</span>)</span><br><span class="line">        authors_list = request.POST.getlist(<span class="string">&quot;authors&quot;</span>)  <span class="comment"># [1,2,3,4,]</span></span><br><span class="line">        <span class="comment"># 操作数据库存储数据</span></span><br><span class="line">        book_obj = models.Book.objects.create(title=title,price=price,publish_date=publish_date,publish_id=publish_id)</span><br><span class="line">        <span class="comment"># 书籍与作者的关系表</span></span><br><span class="line">        book_obj.authors.add(*authors_list)</span><br><span class="line">        <span class="comment"># 跳转到书籍的展示页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;book_list&#x27;</span>)</span><br><span class="line">    <span class="comment"># 先获取当前系统中所有的出版社信息和作者信息</span></span><br><span class="line">    publish_queryset = models.Publish.objects.<span class="built_in">all</span>()</span><br><span class="line">    author_queryset = models.Author.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;book_add.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_edit</span>(<span class="params">request,edit_id</span>):</span><br><span class="line">    <span class="comment"># 获取当前用户想要编辑的书籍对象 展示给用户看</span></span><br><span class="line">    edit_obj = models.Book.objects.<span class="built_in">filter</span>(pk=edit_id).first()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.POST.get(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">        price = request.POST.get(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">        publish_date = request.POST.get(<span class="string">&quot;publish_date&quot;</span>)</span><br><span class="line">        publish_id = request.POST.get(<span class="string">&quot;publish&quot;</span>)</span><br><span class="line">        authors_list = request.POST.getlist(<span class="string">&quot;authors&quot;</span>)  <span class="comment"># [1,2,3,4,]</span></span><br><span class="line">        models.Book.objects.<span class="built_in">filter</span>(pk=edit_id).update(title=title,price=price,</span><br><span class="line">        publish_date=publish_date,publish_id=publish_id)</span><br><span class="line">        <span class="comment"># 该第三张关系表</span></span><br><span class="line">        edit_obj.authors.<span class="built_in">set</span>(authors_list)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;book_list&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    publish_queryset = models.Publish.objects.<span class="built_in">all</span>()</span><br><span class="line">    author_queryset = models.Author.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;book_edit.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_delete</span>(<span class="params">request,delete_id</span>):</span><br><span class="line">    <span class="comment"># 简单粗暴 直接删除</span></span><br><span class="line">    models.Book.objects.<span class="built_in">filter</span>(pk=delete_id).delete()</span><br><span class="line">    <span class="comment"># 直接跳转到展示页</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;book_list&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="choices参数-数据库字段设计常见"><a href="#choices参数-数据库字段设计常见" class="headerlink" title="choices参数(数据库字段设计常见)"></a>choices参数(数据库字段设计常见)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 针对某个可以列举完全的可能性字段，我们应该如何存储</span></span><br><span class="line"><span class="comment"># 只要某个字段的可能性是可以列举完全的，那么一般情况下都会采用choices参数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    <span class="comment"># 性别</span></span><br><span class="line">    gender_choices = (</span><br><span class="line">        (<span class="number">1</span>,<span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>,<span class="string">&#x27;其他&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    gender = models.IntegerField(choices=gender_choices)</span><br><span class="line">    </span><br><span class="line">    score_choices = (</span><br><span class="line">        (<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;优秀&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;良好&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;及格&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;不合格&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 保证字段类型跟列举出来的元祖第一个数据类型一致即可</span></span><br><span class="line">    score = models.CharField(choices=score_choices,null=<span class="literal">True</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.gender字段存的数字不在上述元祖列举的范围内容</span></span><br><span class="line"><span class="string">    2.如果在 如何获取对应的中文信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">    <span class="comment"># models.User.objects.create(username=&#x27;jason&#x27;,age=18,gender=1)</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username=&#x27;egon&#x27;,age=85,gender=2)</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username=&#x27;tank&#x27;,age=40,gender=3)</span></span><br><span class="line">    <span class="comment"># 存的时候 没有列举出来的数字也能存（范围还是按照字段类型决定）</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username=&#x27;tony&#x27;,age=45,gender=4)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># print(user_obj.gender)</span></span><br><span class="line">    <span class="comment"># 只要是choices参数的字段 如果你想要获取对应信息 固定写法 get_字段名_display()</span></span><br><span class="line">    <span class="comment"># print(user_obj.get_gender_display())</span></span><br><span class="line"></span><br><span class="line">    user_obj = models.User.objects.<span class="built_in">filter</span>(pk=<span class="number">4</span>).first()</span><br><span class="line">    <span class="comment"># 如果没有对应关系 那么字段是什么还是展示什么</span></span><br><span class="line">    <span class="built_in">print</span>(user_obj.get_gender_display())  <span class="comment"># 4</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="MTV与MVC模型"><a href="#MTV与MVC模型" class="headerlink" title="MTV与MVC模型"></a>MTV与MVC模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MTV:Django号称是MTV模型</span></span><br><span class="line">M:models</span><br><span class="line">T:templates</span><br><span class="line">V:views</span><br><span class="line">    </span><br><span class="line"><span class="comment"># MVC:其实django本质也是MVC</span></span><br><span class="line">M:models</span><br><span class="line">V:views</span><br><span class="line">C:controller</span><br><span class="line">  </span><br><span class="line"><span class="comment"># vue框架:MVVM模型</span></span><br></pre></td></tr></table></figure><h3 id="多对多三种创建方式"><a href="#多对多三种创建方式" class="headerlink" title="多对多三种创建方式"></a>多对多三种创建方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全自动:利用orm自动帮我们创建第三张关系表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">优点:代码不需要你写 非常的方便 还支持orm提供操作第三张关系表的方法...</span></span><br><span class="line"><span class="string">不足之处:第三张关系表的扩展性极差(没有办法额外添加字段...)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 纯手动</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Book2Author</span>(models.Model):</span><br><span class="line">    book_id = models.ForeignKey(to=<span class="string">&#x27;Book&#x27;</span>)</span><br><span class="line">    author_id = models.ForeignKey(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  优点:第三张表完全取决于你自己进行额外的扩展</span></span><br><span class="line"><span class="string">  不足之处:需要写的代码较多，不能够再使用orm提供的简单的方法;不建议</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 半自动</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>,</span><br><span class="line">                                     through=<span class="string">&#x27;Book2Author&#x27;</span>,</span><br><span class="line">                                     through_fields=(<span class="string">&#x27;book&#x27;</span>,<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">                                     )</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># books = models.ManyToManyField(to=&#x27;Book&#x27;,</span></span><br><span class="line">    <span class="comment">#                                  through=&#x27;Book2Author&#x27;,</span></span><br><span class="line">    <span class="comment">#                                  through_fields=(&#x27;author&#x27;,&#x27;book&#x27;)</span></span><br><span class="line">    <span class="comment">#                                  )</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book2Author</span>(models.Model):</span><br><span class="line">    book = models.ForeignKey(to=<span class="string">&#x27;Book&#x27;</span>)</span><br><span class="line">    author = models.ForeignKey(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">through_fields字段先后顺序</span></span><br><span class="line"><span class="string">    判断的本质：</span></span><br><span class="line"><span class="string">        通过第三张表查询对应的表 需要用到哪个字段就把哪个字段放前面</span></span><br><span class="line"><span class="string">    你也可以简化判断</span></span><br><span class="line"><span class="string">        当前表是谁 就把对应的关联字段放前面</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">半自动:可以使用orm的正反向查询 但是没法使用add,set,remove,clear这四个方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 总结:你需要掌握的是全自动和半自动 为了扩展性更高 一般我们都会采用半自动(写代码要给自己留一条后路)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django模型层</title>
      <link href="/2022/06/03/Django%E6%A8%A1%E5%9E%8B%E5%B1%82/"/>
      <url>/2022/06/03/Django%E6%A8%A1%E5%9E%8B%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="单表查询与外键操作"><a href="#单表查询与外键操作" class="headerlink" title="单表查询与外键操作"></a>单表查询与外键操作</h2><h3 id="单表操作"><a href="#单表操作" class="headerlink" title="单表操作"></a>单表操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django自带的sqlite3数据库对日期格式不是很敏感 处理的时候容易出错</span></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.create(name=&#x27;jason&#x27;,age=18,register_time=&#x27;2002-1-21&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># import datetime</span></span><br><span class="line">    <span class="comment"># ctime = datetime.datetime.now()</span></span><br><span class="line">    <span class="comment"># user_obj = models.User(name=&#x27;keven&#x27;,age=84,register_time=ctime)</span></span><br><span class="line">    <span class="comment"># user_obj.save()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=2).delete()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    pk会自动查找到当前表的主键字段 指代的就是当前表的主键字段</span></span><br><span class="line"><span class="string">    用了pk之后 你就不需要指代当前表的主键字段到底叫什么了</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># user_obj.delete()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># models.User.objects.filter(pk=4).update(name=&#x27;egonDSB&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.get(pk=4)</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=6)</span></span><br><span class="line">    <span class="comment"># get方法返回的直接就是当前数据对象但是该方法不推荐使用 一旦数据不存在该方法会直接报错而filter则不会</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># user_obj.name = &#x27;PPP&#x27;</span></span><br><span class="line">    <span class="comment"># user_obj.save()</span></span><br></pre></td></tr></table></figure><h3 id="必知必会13条"><a href="#必知必会13条" class="headerlink" title="必知必会13条"></a>必知必会13条</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必知必会13条</span></span><br><span class="line">    <span class="comment"># 1.all()  查询所有数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.filter()     带有过滤条件的查询</span></span><br><span class="line">    <span class="comment"># 3.get()        直接拿数据对象 但是条件不存在直接报错</span></span><br><span class="line">    <span class="comment"># 4.first()      拿queryset里面第一个元素</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all().first()</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># 5.last()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all().last()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 6.values()  可以指定获取的数据字段  select name,age from ...     列表套字典</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values(&#x27;name&#x27;,&#x27;age&#x27;)  # &lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;jason&#x27;, &#x27;age&#x27;: 18&#125;, &#123;&#x27;name&#x27;: &#x27;egonPPP&#x27;, &#x27;age&#x27;: 84&#125;]&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7.values_list()  列表套元祖</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values_list(&#x27;name&#x27;,&#x27;age&#x27;)  # &lt;QuerySet [(&#x27;jason&#x27;, 18), (&#x27;egonPPP&#x27;, 84)]&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#  # 查看内部封装的sql语句</span></span><br><span class="line">    <span class="comment">#  上述查看sql语句的方式  只能用于queryset对象</span></span><br><span class="line">    <span class="comment">#  只有queryset对象才能够点击query查看内部的sql语句</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8.distinct()  去重</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values(&#x27;name&#x27;,&#x27;age&#x27;).distinct()</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    去重一定要是一模一样的数据</span></span><br><span class="line"><span class="string">    如果带有主键那么肯定不一样 你在往后的查询中一定不要忽略主键</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 9.order_by()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.order_by(&#x27;age&#x27;)  # 默认升序</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.order_by(&#x27;-age&#x27;)  # 降序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 10.reverse()  反转的前提是 数据已经排过序了  order_by()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all()</span></span><br><span class="line">    <span class="comment"># res1 = models.User.objects.order_by(&#x27;age&#x27;).reverse()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 11.count()  统计当前数据的个数</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.count()</span></span><br><span class="line">    <span class="comment"># 12.exclude()  排除在外</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.exclude(name=&#x27;jason&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 13.exists()  基本用不到因为数据本身就自带布尔值  返回的是布尔值</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=10).exists()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">当你只是想测试django中的某一个py文件内容 那么你可以不用书写前后端交互的形式</span></span><br><span class="line"><span class="string">而是直接写一个测试脚本即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">脚本代码无论是写在应用下的tests.py还是自己单独开设py文件都可以</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 测试环境的准备 去manage.py中拷贝前四行代码 然后自己写两行</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;day64.settings&quot;</span>)</span><br><span class="line">    <span class="keyword">import</span> django</span><br><span class="line">    django.setup()</span><br><span class="line">    <span class="comment"># 在这个代码块的下面就可以测试django里面的单个py文件了</span></span><br></pre></td></tr></table></figure><h3 id="查看内部sql语句的方式"><a href="#查看内部sql语句的方式" class="headerlink" title="查看内部sql语句的方式"></a>查看内部sql语句的方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">res = models.User.objects.values_list(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)  <span class="comment"># &lt;QuerySet [(&#x27;jason&#x27;, 18), (&#x27;egonPPP&#x27;, 84)]&gt;</span></span><br><span class="line"><span class="built_in">print</span>(res.query)</span><br><span class="line">queryset对象才能够点击query查看内部的sql语句</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2:所有的sql语句都能查看</span></span><br><span class="line"><span class="comment"># 去配置文件中配置一下即可</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;django.db.backends&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="神奇的双下划线查询"><a href="#神奇的双下划线查询" class="headerlink" title="神奇的双下划线查询"></a>神奇的双下划线查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 年龄大于35岁的数据</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__gt=35)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 年龄小于35岁的数据</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__lt=35)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大于等于 小于等于</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__gte=32)</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__lte=32)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 年龄是18 或者 32 或者40</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__in=[18,32,40])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 年龄在18到40岁之间的  首尾都要</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__range=[18,40])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询出名字里面含有s的数据  模糊查询</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(name__contains=&#x27;s&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否区分大小写  查询出名字里面含有p的数据  区分大小写</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(name__contains=&#x27;p&#x27;)</span></span><br><span class="line"><span class="comment"># 忽略大小写</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(name__icontains=&#x27;p&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(name__startswith=&#x27;j&#x27;)</span></span><br><span class="line"><span class="comment"># res1 = models.User.objects.filter(name__endswith=&#x27;j&#x27;)</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查询出注册时间是 2020 1月</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(register_time__month=&#x27;1&#x27;)</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(register_time__year=&#x27;2020&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="一对多外键增删改查"><a href="#一对多外键增删改查" class="headerlink" title="一对多外键增删改查"></a>一对多外键增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line"><span class="comment"># 1  直接写实际字段 id</span></span><br><span class="line"><span class="comment"># models.Book.objects.create(title=&#x27;论语&#x27;,price=899.23,publish_id=1)</span></span><br><span class="line"><span class="comment"># models.Book.objects.create(title=&#x27;聊斋&#x27;,price=444.23,publish_id=2)</span></span><br><span class="line"><span class="comment"># models.Book.objects.create(title=&#x27;老子&#x27;,price=333.66,publish_id=1)</span></span><br><span class="line"><span class="comment"># 2  虚拟字段 对象</span></span><br><span class="line"><span class="comment"># publish_obj = models.Publish.objects.filter(pk=2).first()</span></span><br><span class="line"><span class="comment"># models.Book.objects.create(title=&#x27;红楼梦&#x27;,price=666.23,publish=publish_obj)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line"><span class="comment"># models.Publish.objects.filter(pk=1).delete()  # 级联删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line"><span class="comment"># models.Book.objects.filter(pk=1).update(publish_id=2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># publish_obj = models.Publish.objects.filter(pk=1).first()</span></span><br><span class="line"><span class="comment"># models.Book.objects.filter(pk=1).update(publish=publish_obj)</span></span><br></pre></td></tr></table></figure><h3 id="多对多外键增删改查"><a href="#多对多外键增删改查" class="headerlink" title="多对多外键增删改查"></a>多对多外键增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何给书籍添加作者？</span></span><br><span class="line">    book_obj = models.Book.objects.<span class="built_in">filter</span>(pk=<span class="number">1</span>).first()</span><br><span class="line">    <span class="comment"># print(book_obj.authors)  # 就类似于你已经到了第三张关系表了</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(1)  # 书籍id为1的书籍绑定一个主键为1 的作者</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(2,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj2 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj1,author_obj2)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    add给第三张关系表添加数据</span></span><br><span class="line"><span class="string">        括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(2)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(1,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(author_obj,author_obj1)</span></span><br><span class="line">    <span class="comment"># remove方法括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([1,2])  # 括号内必须给一个可迭代对象</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([3])  # 括号内必须给一个可迭代对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># set括号内必须传一个可迭代对象，该对象内既可以数字也可以对象 并且都支持多个</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([author_obj,author_obj1])  # 括号内必须给一个可迭代对象</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 清空 在第三张关系表中清空某个书籍与作者的绑定关系 clear括号内不要加任何参数</span></span><br><span class="line">    book_obj.authors.clear()</span><br></pre></td></tr></table></figure><h3 id="正反向的概念"><a href="#正反向的概念" class="headerlink" title="正反向的概念"></a>正反向的概念</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正向</span></span><br><span class="line"><span class="comment"># 反向</span></span><br><span class="line">外键字段在我手上那么，我查你就是正向;外键字段如果不在手上，我查你就是反向</span><br><span class="line">  book &gt;&gt;&gt;外键字段在书那儿(正向)&gt;&gt;&gt; publish</span><br><span class="line">  publish&gt;&gt;&gt;外键字段在书那儿(反向)&gt;&gt;&gt;book</span><br><span class="line">  一对一和多对多正反向的判断也是如此</span><br><span class="line">  </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">正向查询按字段   当你的结果可能有多个的时候就需要加.all()</span></span><br><span class="line"><span class="string">反向查询按表名小写 加_set</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="子查询-基于对象的跨表查询"><a href="#子查询-基于对象的跨表查询" class="headerlink" title="子查询(基于对象的跨表查询)"></a>子查询(基于对象的跨表查询)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查询书籍主键为1的出版社</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># # 书查出版社 正向</span></span><br><span class="line">    <span class="comment"># res = book_obj.publish</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.查询书籍主键为2的作者</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># # 书查作者 正向</span></span><br><span class="line">    <span class="comment"># # res = book_obj.authors  # app01.Author.None</span></span><br><span class="line">    <span class="comment"># res = book_obj.authors.all()  # &lt;QuerySet [&lt;Author: Author object&gt;, &lt;Author: Author object&gt;]&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.查询作者jason的电话号码</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name=&#x27;jason&#x27;).first()</span></span><br><span class="line">    <span class="comment"># res = author_obj.author_detail</span></span><br><span class="line">    <span class="comment"># print(res.phone)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    正向什么时候需要加.all()</span></span><br><span class="line"><span class="string">        当你的结果可能有多个的时候就需要加.all()</span></span><br><span class="line"><span class="string">        如果是一个则直接拿到数据对象</span></span><br><span class="line"><span class="string">            book_obj.publish</span></span><br><span class="line"><span class="string">            book_obj.authors.all()</span></span><br><span class="line"><span class="string">            author_obj.author_detail</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 4.查询出版社是东方出版社出版的书</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(name=&#x27;东方出版社&#x27;).first()</span></span><br><span class="line">    <span class="comment"># 出版社查书  反向</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set.all()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.查询作者是jason写过的书</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name=&#x27;jason&#x27;).first()</span></span><br><span class="line">    <span class="comment"># 作者查书      反向</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set.all()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6.查询手机号是110的作者姓名</span></span><br><span class="line">    <span class="comment"># author_detail_obj = models.AuthorDetail.objects.filter(phone=110).first()</span></span><br><span class="line">    <span class="comment"># res = author_detail_obj.author</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    基于对象,反向查询的时候:</span></span><br><span class="line"><span class="string">            当你的查询结果可以有多个的时候 就必须加_set.all()</span></span><br><span class="line"><span class="string">            当你的结果只有一个的时候 不需要加_set.all()</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="联表查询-基于双下划线的跨表查询"><a href="#联表查询-基于双下划线的跨表查询" class="headerlink" title="联表查询(基于双下划线的跨表查询)"></a>联表查询(基于双下划线的跨表查询)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于双下划线的跨表查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.查询jason的手机号和作者姓名</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(name=&#x27;jason&#x27;).values(&#x27;author_detail__phone&#x27;,&#x27;name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.AuthorDetail.objects.filter(author__name=&#x27;jason&#x27;).values(&#x27;phone&#x27;,&#x27;author__name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.查询书籍主键为1的出版社名称和书的名称</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values(&#x27;title&#x27;,&#x27;publish__name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.Publish.objects.filter(book__id=1).values(&#x27;name&#x27;,&#x27;book__title&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.查询书籍主键为1的作者姓名</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values(&#x27;authors__name&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(book__id=1).values(&#x27;name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询书籍主键是1的作者的手机号</span></span><br><span class="line">    <span class="comment"># book author authordetail</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values(&#x27;authors__author_detail__phone&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="ORM中的其他方法及参数"><a href="#ORM中的其他方法及参数" class="headerlink" title="ORM中的其他方法及参数"></a>ORM中的其他方法及参数</h2><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 聚合查询      aggregate</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    聚合查询通常情况下都是配合分组一起使用的</span></span><br><span class="line"><span class="string">    只要是跟数据库相关的模块 </span></span><br><span class="line"><span class="string">        基本上都在django.db.models里面</span></span><br><span class="line"><span class="string">        如果上述没有那么应该在django.db里面</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max,Min,Sum,Count,Avg</span><br><span class="line">    <span class="comment"># 1 所有书的平均价格</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.aggregate(Avg(&#x27;price&#x27;))</span></span><br><span class="line">    <span class="comment"># 2.上述方法一次性使用</span></span><br><span class="line">    res = models.Book.objects.aggregate(Max(<span class="string">&#x27;price&#x27;</span>),Min(<span class="string">&#x27;price&#x27;</span>),Sum(<span class="string">&#x27;price&#x27;</span>),Count(<span class="string">&#x27;pk&#x27;</span>),Avg(<span class="string">&#x27;price&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分组查询  annotate</span></span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max, Min, Sum, Count, Avg</span><br><span class="line">    <span class="comment"># 1.统计每一本书的作者个数</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate()  # models后面点什么 就是按什么分组</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate(author_num=Count(&#x27;authors&#x27;)).values(&#x27;title&#x27;,&#x27;author_num&#x27;)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    author_num是我们自己定义的字段 用来存储统计出来的每本书对应的作者个数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># res1 = models.Book.objects.annotate(author_num=Count(&#x27;authors__id&#x27;)).values(&#x27;title&#x27;,&#x27;author_num&#x27;)</span></span><br><span class="line">    <span class="comment"># print(res,res1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.统计每个出版社卖的最便宜的书的价格(作业:复习原生SQL语句 写出来)</span></span><br><span class="line">    <span class="comment"># res = models.Publish.objects.annotate(min_price=Min(&#x27;book__price&#x27;)).values(&#x27;name&#x27;,&#x27;min_price&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.统计不止一个作者的图书</span></span><br><span class="line">        <span class="comment"># 1.先按照图书分组 求每一本书对应的作者个数</span></span><br><span class="line">        <span class="comment"># 2.过滤出不止一个作者的图书</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate(author_num=Count(&#x27;authors&#x27;)).filter(author_num__gt=1).values(&#x27;title&#x27;,&#x27;author_num&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4.查询每个作者出的书的总价格</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.annotate(sum_price=Sum(&#x27;book__price&#x27;)).values(&#x27;name&#x27;,&#x27;sum_price&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    如果我想按照指定的字段分组该如何处理呢？</span></span><br><span class="line"><span class="string">        models.Book.objects.values(&#x27;price&#x27;).annotate()</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="F与Q查询"><a href="#F与Q查询" class="headerlink" title="F与Q查询"></a>F与Q查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># F查询能够帮助你直接获取到表中某个字段对应的数据</span></span><br><span class="line"><span class="comment"># 1.查询卖出数大于库存数的书籍</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"><span class="comment"># res = models.Book.objects.filter(maichu__gt=F(&#x27;kucun&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.将所有书籍的价格提升500块</span></span><br><span class="line"><span class="comment"># models.Book.objects.update(price=F(&#x27;price&#x27;) + 500)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.将所有书的名称后面加上爆款两个字</span></span><br><span class="line"><span class="comment"># 在操作字符类型的数据的时候 F不能够直接做到字符串的拼接</span></span><br><span class="line"><span class="keyword">from</span> django.db.models.functions <span class="keyword">import</span> Concat</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Value</span><br><span class="line">models.Book.objects.update(title=Concat(F(<span class="string">&#x27;title&#x27;</span>), Value(<span class="string">&#x27;爆款&#x27;</span>)))</span><br><span class="line"><span class="comment"># models.Book.objects.update(title=F(&#x27;title&#x27;) + &#x27;爆款&#x27;)  </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Q查询</span></span><br><span class="line">   <span class="comment"># 1.查询卖出数大于100或者价格小于600的书籍</span></span><br><span class="line">   <span class="comment"># res = models.Book.objects.filter(maichu__gt=100,price__lt=600)</span></span><br><span class="line">   <span class="string">&quot;&quot;&quot;filter括号内多个参数是and关系&quot;&quot;&quot;</span></span><br><span class="line">   <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">   <span class="comment"># res = models.Book.objects.filter(Q(maichu__gt=100),Q(price__lt=600))  # Q包裹逗号分割 还是and关系</span></span><br><span class="line">   <span class="comment"># res = models.Book.objects.filter(Q(maichu__gt=100)|Q(price__lt=600))  # | or关系</span></span><br><span class="line">   <span class="comment"># res = models.Book.objects.filter(~Q(maichu__gt=100)|Q(price__lt=600))  # ~ not关系</span></span><br><span class="line">   <span class="comment"># print(res)  # &lt;QuerySet []&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># Q的高阶用法  能够将查询条件的左边也变成字符串的形式</span></span><br><span class="line">   q = Q()</span><br><span class="line">   q.connector = <span class="string">&#x27;or&#x27;</span></span><br><span class="line">   q.children.append((<span class="string">&#x27;maichu__gt&#x27;</span>,<span class="number">100</span>))</span><br><span class="line">   q.children.append((<span class="string">&#x27;price__lt&#x27;</span>,<span class="number">600</span>))</span><br><span class="line">   res = models.Book.objects.<span class="built_in">filter</span>(q)  <span class="comment"># 默认还是and关系</span></span><br><span class="line">   <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="django中如何开启事务"><a href="#django中如何开启事务" class="headerlink" title="django中如何开启事务"></a>django中如何开启事务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">事务</span></span><br><span class="line"><span class="string">ACID</span></span><br><span class="line"><span class="string">原子性</span></span><br><span class="line"><span class="string">不可分割的最小单位</span></span><br><span class="line"><span class="string">一致性</span></span><br><span class="line"><span class="string">跟原子性是相辅相成</span></span><br><span class="line"><span class="string">隔离性</span></span><br><span class="line"><span class="string">事务之间互相不干扰</span></span><br><span class="line"><span class="string">持久性</span></span><br><span class="line"><span class="string">事务一旦确认永久生效</span></span><br><span class="line"><span class="string">事务的回滚 </span></span><br><span class="line"><span class="string">rollback</span></span><br><span class="line"><span class="string">事务的确认</span></span><br><span class="line"><span class="string">commit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 目前你只需要掌握Django中如何简单的开启事务</span></span><br><span class="line">    <span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">            <span class="comment"># sql1</span></span><br><span class="line">            <span class="comment"># sql2</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="comment"># 在with代码快内书写的所有orm操作都是属于同一个事务</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行其他操作&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="orm中常用字段及参数"><a href="#orm中常用字段及参数" class="headerlink" title="orm中常用字段及参数"></a>orm中常用字段及参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">AutoField</span><br><span class="line">主键字段 primary_key=<span class="literal">True</span></span><br><span class="line">  </span><br><span class="line">CharFieldvarchar</span><br><span class="line">verbose_name字段的注释</span><br><span class="line">max_length长度</span><br><span class="line">  </span><br><span class="line">IntegerField<span class="built_in">int</span></span><br><span class="line">BigIntegerFieldbigint</span><br><span class="line"></span><br><span class="line">DecimalField</span><br><span class="line">max_digits=<span class="number">8</span></span><br><span class="line">    decimal_places=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">EmailFiledvarchar(<span class="number">254</span>)</span><br><span class="line"></span><br><span class="line">DateFielddate</span><br><span class="line">DateTimeFielddatetime</span><br><span class="line"></span><br><span class="line">auto_now:每次修改数据的时候都会自动更新当前时间</span><br><span class="line">auto_now_add:只在创建数据的时候记录创建时间后续不会自动修改了</span><br><span class="line">    </span><br><span class="line">BooleanField(Field)- 布尔值类型</span><br><span class="line">该字段传布尔值(<span class="literal">False</span>/<span class="literal">True</span>) 数据库里面存<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">TextField(Field)- 文本类型</span><br><span class="line">该字段可以用来存大段内容(文章、博客...)  没有字数限制</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FileField(Field)- 字符类型</span><br><span class="line">   upload_to = <span class="string">&quot;/data&quot;</span></span><br><span class="line">  给该字段传一个文件对象，会自动将文件保存到/data目录下然后将文件路径保存到数据库中,例如/data/a.txt</span><br><span class="line"></span><br><span class="line">直接参考博客:https://www.cnblogs.com/Dominic-Ji/p/<span class="number">9203990.</span>html</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># django除了给你提供了很多字段类型之外 还支持你自定义字段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCharField</span>(models.Field):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,max_length,*args,**kwargs</span>):</span><br><span class="line">        self.max_length = max_length</span><br><span class="line">        <span class="comment"># 调用父类的init方法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(max_length=max_length,*args,**kwargs)  <span class="comment"># 一定要是关键字的形式传入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">db_type</span>(<span class="params">self, connection</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        返回真正的数据类型及各种约束条件</span></span><br><span class="line"><span class="string">        :param connection:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;char(%s)&#x27;</span>%self.max_length</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义字段使用</span></span><br><span class="line">myfield = MyCharField(max_length=<span class="number">16</span>,null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 外键字段及参数</span></span><br><span class="line">unique=<span class="literal">True</span></span><br><span class="line">ForeignKey(unique=<span class="literal">True</span>)   ===OneToOneField()</span><br><span class="line">  <span class="comment"># 你在用前面字段创建一对一 orm会有一个提示信息 orm推荐你使用后者但是前者也能用</span></span><br><span class="line">  </span><br><span class="line">db_index</span><br><span class="line">如果db_index=<span class="literal">True</span> 则代表着为此字段设置索引</span><br><span class="line"></span><br><span class="line">to_field</span><br><span class="line">设置要关联的表的字段  默认不写关联的就是另外一张的主键字段</span><br><span class="line"></span><br><span class="line">on_delete</span><br><span class="line">当删除关联表中的数据时，当前表与其关联的行的行为。</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  django2.X及以上版本 需要你自己指定外键字段的级联更新级联删除</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="数据库查询优化"><a href="#数据库查询优化" class="headerlink" title="数据库查询优化"></a>数据库查询优化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">only与defer</span><br><span class="line">select_related与prefetch_related</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">orm语句的特点:</span></span><br><span class="line"><span class="string">惰性查询</span></span><br><span class="line"><span class="string">如果你仅仅只是书写了orm语句 在后面根本没有用到该语句所查询出来的参数</span></span><br><span class="line"><span class="string">那么orm会自动识别 直接不执行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># only与defer</span></span><br><span class="line"><span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># print(res)  # 要用数据了才会走数据库</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 想要获取书籍表中所有数的名字</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.values(&#x27;title&#x27;)</span></span><br><span class="line">    <span class="comment"># for d in res:</span></span><br><span class="line">    <span class="comment">#     print(d.get(&#x27;title&#x27;))</span></span><br><span class="line">    <span class="comment"># 你给我实现获取到的是一个数据对象 然后点title就能够拿到书名 并且没有其他字段</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.only(&#x27;title&#x27;)</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># print(res)  # &lt;QuerySet [&lt;Book: 三国演义爆款&gt;, &lt;Book: 红楼梦爆款&gt;, &lt;Book: 论语爆款&gt;, &lt;Book: 聊斋爆款&gt;, &lt;Book: 老子爆款&gt;]&gt;</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">        <span class="comment"># print(i.title)  # 点击only括号内的字段 不会走数据库</span></span><br><span class="line">        <span class="comment"># print(i.price)  # 点击only括号内没有的字段 会重新走数据库查询而all不需要走了</span></span><br><span class="line"></span><br><span class="line">    res = models.Book.objects.defer(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 对象除了没有title属性之外其他的都有</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(i.price)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    defer与only刚好相反</span></span><br><span class="line"><span class="string">        defer括号内放的字段不在查询出来的对象里面 查询该字段需要重新走数据</span></span><br><span class="line"><span class="string">        而如果查询的是非括号内的字段 则不需要走数据库了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># select_related与prefetch_related</span></span><br><span class="line"><span class="comment"># select_related与prefetch_related  跟跨表操作有关</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">    <span class="comment">#     print(i.publish.name)  # 每循环一次就要走一次数据库查询</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># res = models.Book.objects.select_related(&#x27;authors&#x27;)  # INNER JOIN</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    select_related内部直接先将book与publish连起来 然后一次性将大表里面的所有数据</span></span><br><span class="line"><span class="string">    全部封装给查询出来的对象</span></span><br><span class="line"><span class="string">        这个时候对象无论是点击book表的数据还是publish的数据都无需再走数据库查询了</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    select_related括号内只能放外键字段    一对多 一对一 多对多不行</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">    <span class="comment">#     print(i.publish.name)  # 每循环一次就要走一次数据库查询</span></span><br><span class="line"></span><br><span class="line">    res = models.Book.objects.prefetch_related(<span class="string">&#x27;publish&#x27;</span>)  <span class="comment"># 子查询</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    prefetch_related该方法内部其实就是子查询</span></span><br><span class="line"><span class="string">        将子查询查询出来的所有结果也给你封装到对象中,给你的感觉好像也是一次性搞定的</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(i.publish.name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django模板层</title>
      <link href="/2022/06/01/Django%E6%A8%A1%E6%9D%BF%E5%B1%82/"/>
      <url>/2022/06/01/Django%E6%A8%A1%E6%9D%BF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h3 id="模版语法传值"><a href="#模版语法传值" class="headerlink" title="模版语法传值"></a>模版语法传值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">在模板会经常看到这两个：&#123;&#123;&#125;&#125;:变量相关；&#123;%%&#125;:逻辑相关 django取值是 .取值</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 模版语法可以传递的后端python数据类型</span></span><br><span class="line">    n = <span class="number">123</span></span><br><span class="line">    f = <span class="number">11.11</span></span><br><span class="line">    s = <span class="string">&#x27;我也想睡觉&#x27;</span></span><br><span class="line">    b = <span class="literal">True</span></span><br><span class="line">    l = [<span class="string">&#x27;小红&#x27;</span>,<span class="string">&#x27;姗姗&#x27;</span>,<span class="string">&#x27;花花&#x27;</span>,<span class="string">&#x27;茹茹&#x27;</span>]</span><br><span class="line">    t = (<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>)</span><br><span class="line">    d = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;info&#x27;</span>:<span class="string">&#x27;这个人有点意思&#x27;</span>&#125;</span><br><span class="line">    se = &#123;<span class="string">&#x27;晶晶&#x27;</span>,<span class="string">&#x27;洋洋&#x27;</span>,<span class="string">&#x27;哈哈&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我被执行了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;睡觉了&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_self</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;self&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @staticmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_func</span>():</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;func&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_class</span>(<span class="params">cls</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;cls&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对象被展示到html页面上 就类似于执行了打印操作也会触发__str__方法</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;到底会不会？&#x27;</span>  </span><br><span class="line">        </span><br><span class="line">    obj = MyClass()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return render(request,&#x27;index.html&#x27;,&#123;&#125;)  # 一个个传</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; n &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; f &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; s &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; b &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; l &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; d &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; t &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; se &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;传递函数名会自动加括号调用 但是模版语法不支持给函数传额外的参数:&#123;&#123; func &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;传类名的时候也会自动加括号调用(实例化)&#123;&#123; MyClass &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;内部能够自动判断出当前的变量名是否可以加括号调用 如果可以就会自动执行  针对的是函数名和类名&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_self &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_func &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_class &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># django模版语法的取值 是固定的格式 只能采用“句点符” .</span></span><br><span class="line">&lt;p&gt;&#123;&#123; d.username &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; l<span class="number">.0</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; d.hobby<span class="number">.3</span>.info &#125;&#125;&lt;/p&gt;</span><br><span class="line"><span class="comment"># 即可以点键也可以点索引 还可以两者混用</span></span><br></pre></td></tr></table></figure><h3 id="过滤器-过滤器只能最多有两个参数"><a href="#过滤器-过滤器只能最多有两个参数" class="headerlink" title="过滤器(过滤器只能最多有两个参数)"></a>过滤器(过滤器只能最多有两个参数)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤器就类似于是模版语法内置的 内置方法</span></span><br><span class="line">基本语法：&#123;&#123;数据|过滤器:参数&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义</span></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">|safe</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line">res = mark_safe(<span class="string">&#x27;&lt;h1&gt;新新&lt;/h1&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;过滤器&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;统计长度:&#123;&#123; s|length &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;默认值(第一个参数布尔值是<span class="literal">True</span>就展示第一个参数的值否在展示冒号后面的值):&#123;&#123; b|default:<span class="string">&#x27;啥也不是&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;文件大小:&#123;&#123; file_size|filesizeformat &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;日期格式化:&#123;&#123; current_time|date:<span class="string">&#x27;Y-m-d H:i:s&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切片操作(支持步长):&#123;&#123; l|<span class="built_in">slice</span>:<span class="string">&#x27;0:4:2&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取字符(包含三个点):&#123;&#123; info|truncatechars:<span class="number">9</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取单词(不包含三个点 按照空格切):&#123;&#123; egl|truncatewords:<span class="number">9</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取单词(不包含三个点 按照空格切):&#123;&#123; info|truncatewords:<span class="number">9</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;移除特定的字符:&#123;&#123; msg|cut:<span class="string">&#x27; &#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作:&#123;&#123; l|join:<span class="string">&#x27;$&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作(加法):&#123;&#123; n|add:<span class="number">10</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作(加法):&#123;&#123; s|add:msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; hhh|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; sss|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; res &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for循环</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> l %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; forloop &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;  一个个元素</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">  &#123;<span class="string">&#x27;parentloop&#x27;</span>: &#123;&#125;, <span class="string">&#x27;counter0&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;counter&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;revcounter&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;revcounter0&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;first&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;last&#x27;</span>: <span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># if判断</span></span><br><span class="line">&#123;% <span class="keyword">if</span> b %&#125;</span><br><span class="line">    &lt;p&gt;baby&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">elif</span> s%&#125;</span><br><span class="line">    &lt;p&gt;都来&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;p&gt;哈哈&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for与if混合使用</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> lll %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> forloop.first %&#125;</span><br><span class="line">        &lt;p&gt;这是第一次&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">elif</span> forloop.last %&#125;</span><br><span class="line">        &lt;p&gt;这是最后一次啊&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        &lt;p&gt;<span class="keyword">for</span>循环的可迭代对象内部没有元素 根本没法循环&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理字典其他方法</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.keys %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.values %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.items %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># with起别名</span></span><br><span class="line">&#123;% <span class="keyword">with</span> d.hobby<span class="number">.3</span>.info <span class="keyword">as</span> nb  %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; nb &#125;&#125;&lt;/p&gt;</span><br><span class="line">    在<span class="keyword">with</span>语法内就可以通过<span class="keyword">as</span>后面的别名快速的使用到前面非常复杂获取数据的方式</span><br><span class="line">    &lt;p&gt;&#123;&#123; d.hobby<span class="number">.3</span>.info &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义过滤器、标签、inclusion-tag"><a href="#自定义过滤器、标签、inclusion-tag" class="headerlink" title="自定义过滤器、标签、inclusion_tag"></a>自定义过滤器、标签、inclusion_tag</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">三步走</span></span><br><span class="line"><span class="string">1.在应用下创建一个名字”必须“叫templatetags文件夹</span></span><br><span class="line"><span class="string">2.在该文件夹内创建“任意”名称的py文件 eg:tag_utils.py</span></span><br><span class="line"><span class="string">3.在该py文件内&quot;必须&quot;先书写下面两句话(单词一个都不能错)</span></span><br><span class="line"><span class="string">from django import template</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">register = template.Library()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义过滤器</span></span><br><span class="line"><span class="meta">@register.filter(<span class="params">name=<span class="string">&#x27;baby&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_sum</span>(<span class="params">v1, v2</span>):</span><br><span class="line">    <span class="keyword">return</span> v1 + v2</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">&#123;% load mytag %&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; n|baby:<span class="number">666</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义标签(参数可以有多个)类似于自定义函数</span></span><br><span class="line"><span class="meta">@register.simple_tag(<span class="params">name=<span class="string">&#x27;plus&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">a,b,c,d</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;%s-%s-%s-%s&#x27;</span>%(a,b,c,d)</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">标签多个参数彼此之间空格隔开</span><br><span class="line">&lt;p&gt;&#123;% plus <span class="string">&#x27;jason&#x27;</span> <span class="number">123</span> <span class="number">123</span> <span class="number">123</span> %&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义inclusion_tag</span></span><br><span class="line"><span class="meta">@register.inclusion_tag(<span class="params"><span class="string">&#x27;left_menu.html&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left</span>(<span class="params">n</span>):</span><br><span class="line">    data = [<span class="string">&#x27;第&#123;&#125;项&#x27;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="comment"># 第一种</span></span><br><span class="line">    <span class="comment"># return &#123;&#x27;data&#x27;:data&#125;  # 将data传递给left_menu.html</span></span><br><span class="line">    <span class="comment"># 第二种</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">locals</span>()  <span class="comment"># 将data传递给left_menu.html</span></span><br><span class="line">  </span><br><span class="line">&#123;% left <span class="number">5</span> %&#125;</span><br><span class="line"><span class="comment"># 总结:当html页面某一个地方的页面需要传参数才能够动态的渲染出来，并且在多个页面上都需要使用到该局部 那么就考虑将该局部页面做成inclusion_tag形式</span></span><br></pre></td></tr></table></figure><h3 id="模版的继承"><a href="#模版的继承" class="headerlink" title="模版的继承"></a>模版的继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模版的继承 你自己先选好一个你要想继承的模版页面</span></span><br><span class="line">&#123;% extends <span class="string">&#x27;home.html&#x27;</span> %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承了之后子页面跟模版页面长的是一模一样的 你需要在模版页面上提前划定可以被修改的区域</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">模版内容</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子页面就可以声明想要修改哪块划定了的区域</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">子页面内容</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般情况下模版页面上应该至少有三块可以被修改的区域</span></span><br><span class="line">  <span class="number">1.</span>css区域</span><br><span class="line">  <span class="number">2.</span>html区域</span><br><span class="line">  <span class="number">3.j</span>s区域</span><br><span class="line">    &#123;% block css %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">  </span><br><span class="line">  &#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">  </span><br><span class="line">  &#123;% block js %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">  <span class="comment"># 每一个子页面就都可以有自己独有的css代码 html代码 js代码</span></span><br></pre></td></tr></table></figure><h3 id="模版的导入"><a href="#模版的导入" class="headerlink" title="模版的导入"></a>模版的导入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将页面的某一个局部当成模块的形式哪个地方需要就可以直接导入使用即可</span><br><span class="line">&#123;% include <span class="string">&#x27;wasai.html&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视图层</title>
      <link href="/2022/05/30/Django%E8%A7%86%E5%9B%BE%E5%B1%82/"/>
      <url>/2022/05/30/Django%E8%A7%86%E5%9B%BE%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h3 id="三板斧"><a href="#三板斧" class="headerlink" title="三板斧"></a>三板斧</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">HttpResponse</span></span><br><span class="line"><span class="string">返回字符串类型</span></span><br><span class="line"><span class="string">render</span></span><br><span class="line"><span class="string">返回html页面 并且在返回给浏览器之前还可以给html文件传值</span></span><br><span class="line"><span class="string">redirect</span></span><br><span class="line"><span class="string">重定向</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 视图函数必须要返回一个HttpResponse对象  正确   研究三者的源码即可得处结论</span></span><br><span class="line"><span class="comment"># render简单内部原理</span></span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Template,Context</span><br><span class="line">    res = Template(<span class="string">&#x27;&lt;h1&gt;&#123;&#123; user &#125;&#125;&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">    con = Context(&#123;<span class="string">&#x27;user&#x27;</span>:&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="number">123</span>&#125;&#125;)</span><br><span class="line">    ret = res.render(con)</span><br><span class="line">    <span class="built_in">print</span>(ret)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(ret)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JsonResponse对象"><a href="#JsonResponse对象" class="headerlink" title="JsonResponse对象"></a>JsonResponse对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">json格式的数据有什么用？</span></span><br><span class="line"><span class="string">前后端数据交互需要使用到json作为过渡 实现跨语言传输数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">前端序列化</span></span><br><span class="line"><span class="string">JSON.stringify()json.dumps()</span></span><br><span class="line"><span class="string">JSON.parse()json.loads()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_json</span>(<span class="params">request</span>):</span><br><span class="line">    user_dict = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line">    l = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line">    <span class="comment"># 先转成json格式字符串</span></span><br><span class="line">    <span class="comment"># json_str = json.dumps(user_dict,ensure_ascii=False)</span></span><br><span class="line">    <span class="comment"># 将该字符串返回</span></span><br><span class="line">    <span class="comment"># return HttpResponse(json_str)</span></span><br><span class="line">    <span class="comment"># 读源码掌握用法</span></span><br><span class="line">    <span class="comment"># return JsonResponse(user_dict,json_dumps_params=&#123;&#x27;ensure_ascii&#x27;:False&#125;)</span></span><br><span class="line">   <span class="comment"># In order to allow non-dict objects to be serialized set the safe parameter to False.</span></span><br><span class="line">    <span class="comment"># 默认只能序列化字典 序列化其他需要加safe参数</span></span><br><span class="line">    <span class="comment"># return JsonResponse(l,safe=False)  </span></span><br></pre></td></tr></table></figure><h3 id="form表单上传文件及后端如何操作"><a href="#form表单上传文件及后端如何操作" class="headerlink" title="form表单上传文件及后端如何操作"></a>form表单上传文件及后端如何操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">form表单上传文件类型的数据</span></span><br><span class="line"><span class="string">1.method必须指定成post</span></span><br><span class="line"><span class="string">2.enctype必须换成formdata</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_file</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># print(request.POST)  # 只能获取普通的简直对数据 文件不行</span></span><br><span class="line">        <span class="built_in">print</span>(request.FILES)  <span class="comment"># 获取文件数据</span></span><br><span class="line">        <span class="comment"># &lt;MultiValueDict: &#123;&#x27;file&#x27;: [&lt;InMemoryUploadedFile: u=1288812541,1979816195&amp;fm=26&amp;gp=0.jpg (image/jpeg)&gt;]&#125;&gt;</span></span><br><span class="line">        file_obj = request.FILES.get(<span class="string">&#x27;file&#x27;</span>)  <span class="comment"># 文件对象</span></span><br><span class="line">        <span class="built_in">print</span>(file_obj.name)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_obj.name,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj.chunks():  <span class="comment"># 推荐加上chunks方法</span></span><br><span class="line">                f.write(line)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;form.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="request对象方法"><a href="#request对象方法" class="headerlink" title="request对象方法"></a>request对象方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">request.method</span></span><br><span class="line"><span class="string">request.POST</span></span><br><span class="line"><span class="string">request.GET</span></span><br><span class="line"><span class="string">request.FILES</span></span><br><span class="line"><span class="string">request.body  # 原生的浏览器发过来的二进制数据  </span></span><br><span class="line"><span class="string">request.path </span></span><br><span class="line"><span class="string">request.path_info</span></span><br><span class="line"><span class="string">request.get_full_path()  能过获取完整的url及问号后面的参数 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(request.path)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">    <span class="built_in">print</span>(request.path_info)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">    <span class="built_in">print</span>(request.get_full_path())  <span class="comment"># /app01/ab_file/?username=jason</span></span><br></pre></td></tr></table></figure><h3 id="FBV与CBV"><a href="#FBV与CBV" class="headerlink" title="FBV与CBV"></a>FBV与CBV</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视图函数既可以是函数也可以是类</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CBV</span></span><br><span class="line">    <span class="comment"># CBV路由</span></span><br><span class="line">    url(<span class="string">r&#x27;^login/&#x27;</span>,views.MyLogin.as_view())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLogin</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;form.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post方法&#x27;</span>)</span><br><span class="line">      </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">FBV和CBV各有千秋</span></span><br><span class="line"><span class="string">CBV特点</span></span><br><span class="line"><span class="string">能够直接根据请求方式的不同直接匹配到对应的方法执行</span></span><br><span class="line"><span class="string">内部到底是怎么实现的？</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="CBV源码剖析"><a href="#CBV源码剖析" class="headerlink" title="CBV源码剖析"></a>CBV源码剖析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 突破口在urls.py</span></span><br><span class="line">url(<span class="string">r&#x27;^login/&#x27;</span>,views.MyLogin.as_view())</span><br><span class="line"><span class="comment"># url(r&#x27;^login/&#x27;,views.view)  FBV一模一样</span></span><br><span class="line"><span class="comment"># CBV与FBV在路由匹配上本质是一样的 都是路由 对应 函数内存地址</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">函数名/方法名 加括号执行优先级最高</span></span><br><span class="line"><span class="string">猜测as_view()要么是被@staicmethod修饰的静态方法；要么是被@classmethod修饰的类方法  正确</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    @classonlymethod</span></span><br><span class="line"><span class="string">    def as_view(cls, **initkwargs):</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classonlymethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">as_view</span>(<span class="params">cls, **initkwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        cls就是我们自己写的类 类方法会自动将类传入，</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">            self = cls(**initkwargs)  <span class="comment"># cls是我们自己写的类</span></span><br><span class="line">            <span class="comment"># self = MyLogin(**initkwargs)  产生一个我们自己写的类的对象</span></span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            经常需要看源码 在看python源码的时候 一定要时刻提醒自己面向对象属性方法查找顺序</span></span><br><span class="line"><span class="string">                先从对象自己找--》再去产生对象的类里面找--》之后再去父类找--》</span></span><br><span class="line"><span class="string">            总结:看源码只要看到了self 一定要问你自己当前这个self到底是谁</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 返回的还是内层view方法</span></span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">      </span><br><span class="line">    <span class="comment"># CBV的精髓</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取当前请求的小写格式 然后比对当前请求方式是否合法</span></span><br><span class="line">        <span class="comment"># get请求为例</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = <span class="built_in">getattr</span>(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        反射:通过字符串来操作对象的属性或者方法</span></span><br><span class="line"><span class="string">         handler = getattr(自己写的类产生的对象,&#x27;get&#x27;,当找不到get属性或者方法的时候就会用第三个参数)</span></span><br><span class="line"><span class="string">         handler = 我们自己写的类里面的get方法</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="keyword">return</span> handler(request, *args, **kwargs)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        自动调用get方法</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="CBV如何添加装饰器"><a href="#CBV如何添加装饰器" class="headerlink" title="CBV如何添加装饰器"></a>CBV如何添加装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name=&#x27;get&#x27;)  # 方式2(可以添加多个针对不同的方法加不同的装饰器)</span></span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name=&#x27;post&#x27;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLogin</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line"><span class="meta">    @method_decorator(<span class="params">login_auth</span>)  </span><span class="comment"># 方式3:它会直接作用于当前类里面的所有的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().dispatch(request,*args,**kwargs)</span><br><span class="line">    <span class="comment"># @method_decorator(login_auth)  # 方式1:指名道姓</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;get请求&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post请求&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django路由层</title>
      <link href="/2022/05/29/Django%E8%B7%AF%E7%94%B1%E5%B1%82/"/>
      <url>/2022/05/29/Django%E8%B7%AF%E7%94%B1%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h3 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由匹配</span></span><br><span class="line">url(<span class="string">r&#x27;test&#x27;</span>,views.test),</span><br><span class="line">url(<span class="string">r&#x27;testadd&#x27;</span>,views.testadd)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">url方法第一个参数是正则表达式(1.x)</span></span><br><span class="line"><span class="string">只要第一个参数正则表达式能够匹配到内容 那么就会立刻停止往下匹配直接执行对应的视图函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你在输入url的时候会默认加斜杠</span></span><br><span class="line"><span class="string">django内部帮你做到重定向,一次匹配不行,url后面加斜杠再来一次</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 取消自动加斜杠</span></span><br><span class="line">APPEND_SLASH = <span class="literal">False</span>/<span class="literal">True</span><span class="comment"># 默认是自动加斜杠的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 首页</span></span><br><span class="line">    url(<span class="string">r&#x27;^$&#x27;</span>,views.home),</span><br><span class="line">    <span class="comment"># 路由匹配</span></span><br><span class="line">    url(<span class="string">r&#x27;^test/$&#x27;</span>,views.test),</span><br><span class="line">    url(<span class="string">r&#x27;^testadd/$&#x27;</span>,views.testadd),</span><br><span class="line">    <span class="comment"># 尾页(了解)</span></span><br><span class="line">    url(<span class="string">r&#x27;&#x27;</span>,views.error),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="无名分组"><a href="#无名分组" class="headerlink" title="无名分组"></a>无名分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分组:就是给某一段正则表达式用小括号扩起来</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">url(<span class="string">r&#x27;^test/(\d+)/&#x27;</span>,views.test)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">request,xx</span>):</span><br><span class="line">    <span class="built_in">print</span>(xx)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 无名分组就是将括号内正则表达式匹配到的内容当作位置参数传递给后面的视图函数</span></span><br></pre></td></tr></table></figure><h3 id="有名分组"><a href="#有名分组" class="headerlink" title="有名分组"></a>有名分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可以给正则表达式起一个别名</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">url(<span class="string">r&#x27;^testadd/(?P&lt;year&gt;\d+)&#x27;</span>,views.testadd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testadd</span>(<span class="params">request,year</span>):</span><br><span class="line">    <span class="built_in">print</span>(year)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;testadd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有名分组就是将括号内正则表达式匹配到的内容当作关键字参数传递给后面的视图函数</span></span><br></pre></td></tr></table></figure><h3 id="无名有名是否可以混合使用"><a href="#无名有名是否可以混合使用" class="headerlink" title="无名有名是否可以混合使用"></a>无名有名是否可以混合使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不能混用,但是同一个分组可以使用N多次</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个的分组可以使用多次</span></span><br><span class="line">url(<span class="string">r&#x27;^index/(\d+)/(\d+)/(\d+)/&#x27;</span>,views.index),</span><br><span class="line">url(<span class="string">r&#x27;^index/(?P&lt;year&gt;\d+)/(?P&lt;age&gt;\d+)/(?P&lt;month&gt;\d+)/&#x27;</span>,views.index),</span><br></pre></td></tr></table></figure><h3 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过一些方法得到一个结果 该结果可以直接访问对应的url触发视图函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先给路由与视图函数起一个别名</span></span><br><span class="line">url(<span class="string">r&#x27;^func_kkk/&#x27;</span>,views.func,name=<span class="string">&#x27;ooo&#x27;</span>)</span><br><span class="line"><span class="comment"># 反向解析</span></span><br><span class="line"><span class="comment"># 后端反向解析</span></span><br><span class="line">  <span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse,redirect,reverse</span><br><span class="line">  reverse(<span class="string">&#x27;ooo&#x27;</span>)</span><br><span class="line">  <span class="comment"># 前端反向解析</span></span><br><span class="line">  &lt;a href=<span class="string">&quot;&#123;% url &#x27;ooo&#x27; %&#125;&quot;</span>&gt;这是一个超链接&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="无名有名分组反向解析"><a href="#无名有名分组反向解析" class="headerlink" title="无名有名分组反向解析"></a>无名有名分组反向解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无名分组反向解析</span></span><br><span class="line"><span class="comment"># 路由</span></span><br><span class="line">url(<span class="string">r&#x27;^index/(\d+)/&#x27;</span>,views.index,name=<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&#123;% url <span class="string">&#x27;xxx&#x27;</span> <span class="number">123</span> %&#125;</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">reverse(<span class="string">&#x27;xxx&#x27;</span>, args=(<span class="number">1</span>,))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这个数字写视图代码的时候应该放什么</span></span><br><span class="line"><span class="string">数字一般情况下放的是数据的主键值  数据的编辑和删除</span></span><br><span class="line"><span class="string">url(r&#x27;^edit/(\d+)/&#x27;,views.edit,name=&#x27;xxx&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def edit(request,edit_id):</span></span><br><span class="line"><span class="string">reverse(&#x27;xxx&#x27;,args=(edit_id,))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;%for user_obj in user_queryset%&#125;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;&#123;% url &#x27;xxx&#x27; user_obj.id %&#125;&quot;&gt;编辑&lt;/a&gt;</span></span><br><span class="line"><span class="string">&#123;%endfor%&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 有名分组反向解析</span></span><br><span class="line">   url(<span class="string">r&#x27;^func/(?P&lt;year&gt;\d+)/&#x27;</span>,views.func,name=<span class="string">&#x27;ooo&#x27;</span>)</span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;% url &#x27;ooo&#x27; year=123 %&#125;&quot;</span>&gt;<span class="number">111</span>&lt;/a&gt;  了解</span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;% url &#x27;ooo&#x27; 123 %&#125;&quot;</span>&gt;<span class="number">222</span>&lt;/a&gt;  记忆</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="comment"># 有名分组反向解析 写法1  了解</span></span><br><span class="line">   <span class="built_in">print</span>(reverse(<span class="string">&#x27;ooo&#x27;</span>,kwargs=&#123;<span class="string">&#x27;year&#x27;</span>:<span class="number">123</span>&#125;))</span><br><span class="line">   <span class="comment"># 简便的写法  减少你的脑容量消耗 记跟无名一样的操作即可</span></span><br><span class="line">   <span class="built_in">print</span>(reverse(<span class="string">&#x27;ooo&#x27;</span>,args=(<span class="number">111</span>,)))</span><br><span class="line">    名称空间反向解析需要加上名称空间的名字</span><br></pre></td></tr></table></figure><h3 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">当一个django项目中的url特别多的时候 总路由urls.py代码非常冗余不好维护，这个时候也可以利用路由分发来减轻总路由的压力。利用路由分发之后 总路由不再干路由与视图函数的直接对应关系,而是做一个分发处理识别当前url是属于哪个应用下的 直接分发给对应的应用去处理.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> urls <span class="keyword">as</span> app01_urls</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> urls <span class="keyword">as</span> app02_urls</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 1.路由分发</span></span><br><span class="line">    url(<span class="string">r&#x27;^app01/&#x27;</span>,include(app01_urls)),  <span class="comment"># 只要url前缀是app01开头 全部交给app01处理</span></span><br><span class="line">    url(<span class="string">r&#x27;^app02/&#x27;</span>,include(app02_urls))   <span class="comment"># 只要url前缀是app02开头 全部交给app02处理</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 2.项目写法  推荐使用</span></span><br><span class="line">    url(<span class="string">r&#x27;^app01/&#x27;</span>,include(<span class="string">&#x27;app01.urls&#x27;</span>)),</span><br><span class="line">    url(<span class="string">r&#x27;^app02/&#x27;</span>,include(<span class="string">&#x27;app02.urls&#x27;</span>))</span><br><span class="line">    <span class="comment"># 注意事项:总路由里面的url千万不能加$结尾</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子路由</span></span><br><span class="line"><span class="comment"># app01 urls.py</span></span><br><span class="line">  <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">  <span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">  urlpatterns = [</span><br><span class="line">      url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg)</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment"># app02 urls.py</span></span><br><span class="line">  <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">  <span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">  urlpatterns = [</span><br><span class="line">      url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h3 id="名称空间-了解"><a href="#名称空间-了解" class="headerlink" title="名称空间(了解)"></a>名称空间(了解)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当多个应用出现了相同的别名 我们研究反向解析会不会自动识别应用前缀</span></span><br><span class="line"><span class="comment"># 正常情况下的反向解析是没有办法自动识别前缀的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 名称空间</span></span><br><span class="line"><span class="comment"># 总路由</span></span><br><span class="line">    url(<span class="string">r&#x27;^app01/&#x27;</span>,include(<span class="string">&#x27;app01.urls&#x27;</span>,namespace=<span class="string">&#x27;app01&#x27;</span>)),</span><br><span class="line">    url(<span class="string">r&#x27;^app02/&#x27;</span>,include(<span class="string">&#x27;app02.urls&#x27;</span>,namespace=<span class="string">&#x27;app02&#x27;</span>))</span><br><span class="line">  <span class="comment"># 解析的时候</span></span><br><span class="line">  <span class="comment"># app01</span></span><br><span class="line">  urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg,name=<span class="string">&#x27;reg&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">    <span class="comment"># app02</span></span><br><span class="line">    urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg,name=<span class="string">&#x27;reg&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">    </span><br><span class="line">  reverse(<span class="string">&#x27;app01:reg&#x27;</span>)</span><br><span class="line">    reverse(<span class="string">&#x27;app02:reg&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    &#123;% url <span class="string">&#x27;app01:reg&#x27;</span> %&#125;</span><br><span class="line">    &#123;% url <span class="string">&#x27;app02:reg&#x27;</span> %&#125;</span><br><span class="line"><span class="comment"># 其实只要保证名字不冲突 就没有必要使用名称空间</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一般情况下 有多个app的时候我们在起别名的时候会加上app的前缀</span></span><br><span class="line"><span class="string">这样的话就能够确保多个app之间名字不冲突的问题</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg,name=<span class="string">&#x27;app01_reg&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg,name=<span class="string">&#x27;app02_reg&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="伪静态-了解"><a href="#伪静态-了解" class="headerlink" title="伪静态(了解)"></a>伪静态(了解)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">伪静态</span></span><br><span class="line"><span class="string">将一个动态网页伪装成静态网页</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">为什么要伪装呢？</span></span><br><span class="line"><span class="string">https://www.cnblogs.com/xxxx.html</span></span><br><span class="line"><span class="string">伪装的目的在于增大本网站的seo查询力度并且增加搜索引擎收藏本网上的概率</span></span><br><span class="line"><span class="string">搜索引擎本质上就是一个巨大的爬虫程序</span></span><br><span class="line"><span class="string">总结:</span></span><br><span class="line"><span class="string">无论你怎么优化 怎么处理,始终还是干不过RMB玩家</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg.html&#x27;</span>,views.reg,name=<span class="string">&#x27;app02_reg&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="虚拟环境-了解"><a href="#虚拟环境-了解" class="headerlink" title="虚拟环境(了解)"></a>虚拟环境(了解)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="django版本区别"><a href="#django版本区别" class="headerlink" title="django版本区别"></a>django版本区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在正常开发中 我们会给每一个项目配备一个该项目独有的解释器环境</span></span><br><span class="line"><span class="string">该环境内只有该项目用到的模块 用不到一概不装</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.django1.X路由层使用的是url方法</span></span><br><span class="line"><span class="string">而在django2.Xhe3.X版本中路由层使用的是path方法</span></span><br><span class="line"><span class="string">url()第一个参数支持正则</span></span><br><span class="line"><span class="string">path()第一个参数是不支持正则的 写什么就匹配什么</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果你习惯使用path那么也给你提供了另外一个方法</span></span><br><span class="line"><span class="string">from django.urls import path, re_path</span></span><br><span class="line"><span class="string">from django.conf.urls import url</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">re_path(r&#x27;^index/&#x27;,index),</span></span><br><span class="line"><span class="string">    url(r&#x27;^login/&#x27;,login)</span></span><br><span class="line"><span class="string">  2.X和3.X里面的re_path就等价于1.X里面的url</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">2.虽然path不支持正则 但是它的内部支持五种转换器</span></span><br><span class="line"><span class="string">path(&#x27;index/&lt;int:id&gt;/&#x27;,index)</span></span><br><span class="line"><span class="string"># 将第二个路由里面的内容先转成整型然后以关键字的形式传递给后面的视图函数</span></span><br><span class="line"><span class="string">def index(request,id):</span></span><br><span class="line"><span class="string">        print(id,type(id))</span></span><br><span class="line"><span class="string">        return HttpResponse(&#x27;index&#x27;)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    str,匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式</span></span><br><span class="line"><span class="string">int,匹配正整数，包含0。</span></span><br><span class="line"><span class="string">slug,匹配字母、数字以及横杠、下划线组成的字符串。</span></span><br><span class="line"><span class="string">uuid,匹配格式化的uuid，如 075194d3-6885-417e-a8a8-6c931e272f00。</span></span><br><span class="line"><span class="string">path,匹配任何非空字符串，包含了路径分隔符（/）（不能用？）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.除了有默认的五个转换器之外 还支持自定义转换器(了解)</span></span><br><span class="line"><span class="string">class MonthConverter:</span></span><br><span class="line"><span class="string">    regex=&#x27;\d&#123;2&#125;&#x27; # 属性名必须为regex</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def to_python(self, value):</span></span><br><span class="line"><span class="string">        return int(value)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def to_url(self, value):</span></span><br><span class="line"><span class="string">        return value # 匹配的regex是两个数字，返回的结果也必须是两个数字</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from django.urls import path,register_converter</span></span><br><span class="line"><span class="string">from app01.path_converts import MonthConverter</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 先注册转换器</span></span><br><span class="line"><span class="string">register_converter(MonthConverter,&#x27;mon&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from app01 import views</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">urlpatterns = [</span></span><br><span class="line"><span class="string">    path(&#x27;articles/&lt;int:year&gt;/&lt;mon:month&gt;/&lt;slug:other&gt;/&#x27;, views.article_detail, name=&#x27;aaa&#x27;),</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4.模型层里面1.X外键默认都是级联更新删除的</span></span><br><span class="line"><span class="string">但是到了2.X和3.X中需要你自己手动配置参数</span></span><br><span class="line"><span class="string">models.ForeignKey(to=&#x27;Publish&#x27;)</span></span><br><span class="line"><span class="string">models.ForeignKey(to=&#x27;Publish&#x27;,on_delete=models.CASCADE...)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django初使用</title>
      <link href="/2022/05/25/Django%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/25/Django%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我们将html文件默认都放在templates文件夹下</span></span><br><span class="line"><span class="string">我们将网站所使用的静态文件默认都放在static文件夹下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">静态文件:前端已经写好了的 能够直接调用使用的文件</span></span><br><span class="line"><span class="string">网站写好的js文件</span></span><br><span class="line"><span class="string">网站写好的css文件</span></span><br><span class="line"><span class="string">网站用到的图片文件</span></span><br><span class="line"><span class="string">第三方前端框架</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># django默认是不会自动帮你创建static文件夹 需要你自己手动创建</span></span><br><span class="line">一般情况下我们在static文件夹内还会做进一步的划分处理</span><br><span class="line">-static</span><br><span class="line">  --js</span><br><span class="line">    --css</span><br><span class="line">    --img</span><br><span class="line">    其他第三方文件</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在浏览器中输入url能够看到对应的资源是因为后端提前开设了该资源的接口</span></span><br><span class="line"><span class="string">STATIC_URL = &#x27;/static/&#x27;</span></span><br><span class="line"><span class="string">STATICFILES_DIRS = os.path.join(BASE_DIR, &#x27;static&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://127.0.0.1:8000/static/bootstrap-3.4.1-dist/css/bootstrap.min.css</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 静态文件配置</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">****************************************************************</span></span><br><span class="line"><span class="string">当你在写django项目的时候 可能会出现后端代码修改了但是前端页面没有变化的情况</span></span><br><span class="line"><span class="string">1.你在同一个端口开了好几个django项目 </span></span><br><span class="line"><span class="string">一直在跑的其实是第一个django项目</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.浏览器缓存的问题</span></span><br><span class="line"><span class="string">settings</span></span><br><span class="line"><span class="string">network</span></span><br><span class="line"><span class="string">disable cache 勾选上</span></span><br><span class="line"><span class="string">*****************************************************************</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/ooo/&#x27;</span>  <span class="comment"># 类似于访问静态文件的令牌</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;如果你想要访问静态文件 你就必须以static开头&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">/static/bootstrap-3.4.1-dist/js/bootstrap.min.js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/static/令牌</span></span><br><span class="line"><span class="string">取列表里面从上往下依次查找</span></span><br><span class="line"><span class="string">    bootstrap-3.4.1-dist/js/bootstrap.min.js</span></span><br><span class="line"><span class="string">    都没有才会报错</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 多个静态文件配置</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static&#x27;</span>),</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static1&#x27;</span>),</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static2&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态文件动态解析</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;&#123;% static &#x27;bootstrap-3.4.1-dist/css/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;&#123;% static &#x27;bootstrap-3.4.1-dist/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># form表单默认是get请求数据</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/login/?username=jason&amp;password=<span class="number">123</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">form表单action参数</span></span><br><span class="line"><span class="string">1.不写 默认朝当前所在的url提交数据</span></span><br><span class="line"><span class="string">2.全写 指名道姓</span></span><br><span class="line"><span class="string">3.只写后缀 /login/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在前期我们使用django提交post请求的时候 需要取配置文件中注释掉一行代码</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="request对象方法初识"><a href="#request对象方法初识" class="headerlink" title="request对象方法初识"></a>request对象方法初识</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">request.method <span class="comment"># 返回请求方式 并且是全大写的字符串形式  &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">request.POST  <span class="comment"># 获取用户post请求提交的普通数据不包含文件</span></span><br><span class="line">request.POST.get()  <span class="comment"># 只获取列表最后一个元素</span></span><br><span class="line">request.POST.getlist()  <span class="comment"># 直接将列表取出</span></span><br><span class="line">request.GET  <span class="comment"># 获取用户提交的get请求数据</span></span><br><span class="line">request.GET.get()  <span class="comment"># 只获取列表最后一个元素</span></span><br><span class="line">request.GET.getlist()  <span class="comment"># 直接将列表取出</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">get请求携带的数据是有大小限制的 大概好像只有4KB左右,而post请求则没有限制</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 返回一个登陆界面</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    get请求和post请求应该有不同的处理机制</span></span><br><span class="line"><span class="string">    :param request: 请求相关的数据对象 里面有很多简易的方法</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print(type(request.method))  # 返回请求方式 并且是全大写的字符串形式  &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">    <span class="comment"># if request.method == &#x27;GET&#x27;:</span></span><br><span class="line">    <span class="comment">#     print(&#x27;hello&#x27;)</span></span><br><span class="line">    <span class="comment">#     return render(request,&#x27;login.html&#x27;)</span></span><br><span class="line">    <span class="comment"># elif request.method == &#x27;POST&#x27;:</span></span><br><span class="line">    <span class="comment">#     return HttpResponse(&quot;收到了&quot;)</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;收到了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="django链接数据库-MySQL"><a href="#django链接数据库-MySQL" class="headerlink" title="django链接数据库(MySQL)"></a>django链接数据库(MySQL)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认用的是sqkite3</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># django链接MySQL</span></span><br><span class="line"><span class="number">1.</span>第一步配置文件中配置</span><br><span class="line">  DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;数据库名&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>:<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">        <span class="string">&#x27;CHARSET&#x27;</span>:<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="number">2.</span>代码声明</span><br><span class="line">  django默认用的是mysqldb模块链接MySQL</span><br><span class="line">    但是该模块的兼容性不好 需要手动改为用pymysql链接你需要告诉django不要用默认的mysqldb还是用pymysql</span><br><span class="line">    <span class="comment"># 在项目名下的init或者任意的应用名下的init文件中书写以下代码都可以</span></span><br><span class="line">    <span class="keyword">import</span> pymysql</span><br><span class="line">    pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h3 id="Django-ORM初次体验"><a href="#Django-ORM初次体验" class="headerlink" title="Django ORM初次体验"></a>Django ORM初次体验</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ORM. 对象关系映射</span></span><br><span class="line"><span class="string">作用:能够让一个不用sql语句的小白也能够通过python 面向对象的代码简单快捷的操作数据库</span></span><br><span class="line"><span class="string">不足之处:封装程度太高 有时候sql语句的效率偏低 需要你自己写SQL语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">类表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象   记录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象属性  记录某个字段对应的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">应用下面的models.py文件</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 先去models.py中书写一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="comment"># id int primary_key auto_increment</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField()</span><br><span class="line"></span><br><span class="line">*************************<span class="comment"># 2 数据库迁移命令*************************</span></span><br><span class="line">python3 manage.py makemigrations(操作记录记录在migrations文件夹)</span><br><span class="line"></span><br><span class="line">python3 manage.py migrate  将操作真正的同步到数据库中</span><br><span class="line"><span class="comment"># 只要你修改了models.py中跟数据库相关的代码 就必须重新执行上述的两条命令</span></span><br><span class="line">******************************************************************</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>,verbose_name=<span class="string">&#x27;主键&#x27;</span>)</span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    CharField必须要指定max_length参数 不指定会直接报错</span></span><br><span class="line"><span class="string">    verbose_name该参数是所有字段都有的 就是用来对字段的解释</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    password = models.IntegerField(verbose_name=<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    <span class="comment"># 由于一张表中必须要有一个主键字段 并且一般情况下都叫id字段所以orm当你不定义主键字段的时候 orm会自动帮你创建一个名为id主键字段</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.IntegerField()</span><br></pre></td></tr></table></figure><h3 id="字段的增删改查"><a href="#字段的增删改查" class="headerlink" title="字段的增删改查"></a>字段的增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字段的增加</span></span><br><span class="line">  <span class="number">1.</span>可以在终端内直接给出默认值</span><br><span class="line">  <span class="number">2.</span>该字段可以为空</span><br><span class="line">    info = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">&#x27;个人简介&#x27;</span>,null=<span class="literal">True</span>)</span><br><span class="line">  <span class="number">3.</span>直接给字段设置默认值</span><br><span class="line">    hobby = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">&#x27;兴趣爱好&#x27;</span>,default=<span class="string">&#x27;study&#x27;</span>)</span><br><span class="line"><span class="comment"># 字段的修改</span></span><br><span class="line">直接修改代码然后执行数据库迁移的两条命令即可！</span><br><span class="line"><span class="comment"># 字段的删</span></span><br><span class="line"> 直接注释对应的字段然后执行数据库迁移的两条命令即可！</span><br><span class="line"> 执行完毕之后字段对应的数据也都没有了</span><br><span class="line">  </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在操作models.py的时候一定要细心，千万不要注释一些字段，执行迁移命令之前最好先检查一下自己写的代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="数据的增删改查"><a href="#数据的增删改查" class="headerlink" title="数据的增删改查"></a>数据的增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">res = models.User.objects.<span class="built_in">filter</span>(username=username)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">返回值你先看成是列表套数据对象的格式它也支持索引取值（不推荐） 切片操作 </span></span><br><span class="line"><span class="string">user_obj = models.User.objects.filter(username=username).first()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">filter</span>括号内可以携带多个参数 参数与参数之间默认是<span class="keyword">and</span>关系，可以把<span class="built_in">filter</span>联想成where记忆</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">res = models.User.objects.create(username=username,password=password)</span><br><span class="line"><span class="comment"># 返回值就是当前被创建的对象本身</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种增加</span></span><br><span class="line">user_obj = models.User(username=username,password=password)</span><br><span class="line">user_obj.save()  <span class="comment"># 保存数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先将数据库中的数据全部展示到前端 然后给每一个数据两个按钮 一个编辑一个删除</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">userlist</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 查询出用户表里面所有的数据</span></span><br><span class="line">    <span class="comment"># 方式1</span></span><br><span class="line">    <span class="comment"># data = models.User.objects.filter()</span></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="comment"># 方式2</span></span><br><span class="line">    user_queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># return render(request,&#x27;userlist.html&#x27;,&#123;&#x27;user_queryset&#x27;:user_queryset&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;userlist.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑功能（改）</span></span><br><span class="line"><span class="comment"># 点击编辑按钮朝后端发送编辑数据的请求</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  如何告诉后端用户想要编辑哪条数据?</span></span><br><span class="line"><span class="string">  将编辑按钮所在的那一行数据的主键值发送给后端，利用url问号后面携带参数的方式</span></span><br><span class="line"><span class="string">  &#123;% for user_obj in user_queryset %&#125;</span></span><br><span class="line"><span class="string">           &lt;tr&gt;</span></span><br><span class="line"><span class="string">              &lt;td&gt;&#123;&#123; user_obj.id &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;&lt;a href=&quot;/edit_user/?user_id=&#123;&#123; user_obj.id &#125;&#125;&quot;class=&quot;btn btn-primary btn-xs&quot;&gt;编辑&lt;/a&gt;</span></span><br><span class="line"><span class="string">             &lt;a href=&quot;&quot; class=&quot;btn btn-danger btn-xs&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 后端查询出用户想要编辑的数据对象 展示到前端页面供用户查看和编辑</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">edit_user</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 获取url问号后面的参数</span></span><br><span class="line">    edit_id = request.GET.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 查询当前用户想要编辑的数据对象</span></span><br><span class="line">    edit_obj = models.User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=edit_id).first()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="comment"># 去数据库中修改对应的数据内容</span></span><br><span class="line">        <span class="comment"># 修改数据方式1</span></span><br><span class="line">       models.User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=edit_id).update(username=username,password=password)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            将filter查询出来的列表中所有的对象全部更新            批量更新操作</span></span><br><span class="line"><span class="string">            只修改被修改的字段</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改数据方式2</span></span><br><span class="line">        edit_obj.username = username</span><br><span class="line">        edit_obj.password= password</span><br><span class="line">        edit_obj.save()</span><br><span class="line">     <span class="comment">#上述方法当字段特别多的时候效率会非常低 从头到尾将数据的所有字段全部更新一边 无论该字段是否被修改</span></span><br><span class="line">        <span class="comment"># 跳转到数据的展示页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/userlist/&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将数据对象展示到页面上</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;edit_user.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"><span class="comment"># 删除功能</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">def delete_user(request):</span></span><br><span class="line"><span class="string">    # 获取用户想要删除的数据id值</span></span><br><span class="line"><span class="string">    delete_id = request.GET.get(&#x27;user_id&#x27;)</span></span><br><span class="line"><span class="string">    # 直接去数据库中找到对应的数据删除即可</span></span><br><span class="line"><span class="string">    models.User.objects.filter(id=delete_id).delete()</span></span><br><span class="line"><span class="string">    # 跳转到展示页面</span></span><br><span class="line"><span class="string">    return redirect(&#x27;/userlist/&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 真正的删除功能应该需要二次确认 </span></span><br><span class="line"><span class="comment"># 删除数据内部其实并不是真正的删除 我们会给数据添加一个标识字段用来表示当前数据是否被删除了，如果数据被删了仅仅只是讲字段修改一个状态</span></span><br><span class="line">  username    password    is_delete</span><br><span class="line">  jason<span class="number">123</span><span class="number">0</span></span><br><span class="line">  egon<span class="number">123</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="django-orm中如何创建表关系"><a href="#django-orm中如何创建表关系" class="headerlink" title="django orm中如何创建表关系"></a>django orm中如何创建表关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">表与表之间的关系：一对多，多对多，一对一，没有关系；判断表关系的方法:换位思考</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 例如有以下表:图书表, 出版社表, 作者表, 作者详情表</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">图书和出版社是一对多的关系 外键字段建在多的那一方 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">图书和作者是多对多的关系 需要创建第三张表来专门存储</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">作者与作者详情表是一对一</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表关系  先将基表创建出来 然后再添加外键字段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">8</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 总共八位 小数点后面占两位</span></span><br><span class="line">    <span class="comment"># 图书和出版社是一对多 并且书是多的一方 所以外键字段放在书表里面</span></span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">&#x27;Publish&#x27;</span>)  <span class="comment"># 默认就是与出版社表的主键字段做外键关联</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图书和作者是多对多的关系 外键字段建在任意一方均可 但是推荐你建在查询频率较高的一方</span></span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    authors是一个虚拟字段 主要是用来告诉orm 书籍表和作者表是多对多关系</span></span><br><span class="line"><span class="string">    让orm自动帮你创建第三张关系表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Publish</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作者与作者详情是一对一的关系 外键字段建在任意一方都可以 但是推荐你建在查询频率较高的表中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">&#x27;AuthorDetail&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorDetail</span>(models.Model):</span><br><span class="line">    phone = models.BigIntegerField()  <span class="comment"># 或者直接字符类型</span></span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">orm中如何定义三种关系</span></span><br><span class="line"><span class="string">publish = models.ForeignKey(to=&#x27;Publish&#x27;)  # 默认就是与出版社表的主键字段做外键关联</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">authors = models.ManyToManyField(to=&#x27;Author&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">author_detail = models.OneToOneField(to=&#x27;AuthorDetail&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ForeignKey</span></span><br><span class="line"><span class="string">OneToOneField</span></span><br><span class="line"><span class="string">会自动在字段后面加_id后缀</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在django1.X版本中外键默认都是级联更新删除的,2.x,3.x需要指定on_delete参数</span></span><br><span class="line"><span class="comment"># 多对多的表关系可以有好几种创建方式 这里先介绍一种自动创建</span></span><br><span class="line"><span class="comment"># 针对外键字段里面的其他参数 后续遇到百度一下</span></span><br></pre></td></tr></table></figure><h3 id="django请求生命周期流程图-必会"><a href="#django请求生命周期流程图-必会" class="headerlink" title="django请求生命周期流程图(必会)"></a>django请求生命周期流程图(必会)</h3><p><img src="/2022/05/25/Django%E4%BD%BF%E7%94%A8/1686663111551.png" alt="1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">缓存数据库:提前已经将你想要的数据准备好了 你来直接拿就可以,提高效率和响应时间.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django框架前置知识</title>
      <link href="/2022/05/23/Django%E6%A1%86%E6%9E%B6%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/05/23/Django%E6%A1%86%E6%9E%B6%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Django前置知识"><a href="#Django前置知识" class="headerlink" title="Django前置知识"></a>Django前置知识</h2><h3 id="软件开发架构"><a href="#软件开发架构" class="headerlink" title="软件开发架构"></a>软件开发架构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cs架构</span><br><span class="line">bs架构(本质bs也是cs)</span><br></pre></td></tr></table></figure><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">网络协议</span></span><br><span class="line"><span class="string">    HTTP协议数据传输是明文</span></span><br><span class="line"><span class="string">    HTTPS协议数据传输是密文</span></span><br><span class="line"><span class="string">    websocket协议      数据传输是密文</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">四大特性</span></span><br><span class="line"><span class="string">1.基于请求响应</span></span><br><span class="line"><span class="string">2.基于TCP、IP作用于应用层之上的协议</span></span><br><span class="line"><span class="string">3.无状态</span></span><br><span class="line"><span class="string">4.短/无链接</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">数据格式</span></span><br><span class="line"><span class="string">请求首行</span></span><br><span class="line"><span class="string">请求头</span></span><br><span class="line"><span class="string">此处为/r/n</span></span><br><span class="line"><span class="string">请求体</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">响应状态码</span></span><br><span class="line"><span class="string">1XX</span></span><br><span class="line"><span class="string">2XX200</span></span><br><span class="line"><span class="string">3XX</span></span><br><span class="line"><span class="string">4XX403 404</span></span><br><span class="line"><span class="string">5XX500</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 简单服务端撰写</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, addr = server.accept()</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    data = data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    conn.send(<span class="string">b&#x27;HTTP/1.1 200 ok \r\n\r\n&#x27;</span>)</span><br><span class="line">    current_path = data.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> current_path == <span class="string">&#x27;/index&#x27;</span>:</span><br><span class="line">        conn.send(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> current_path == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        conn.send(<span class="string">b&#x27;login&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        conn.send(<span class="string">b&#x27;hello web&#x27;</span>)</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不足之处</span></span><br><span class="line"><span class="number">1.</span>代码重复(服务端代码所有人都要重复写)</span><br><span class="line"><span class="number">2.</span>手动处理http格式的数据 并且只能拿到url后缀 其他数据获取繁琐(数据格式一样处理的代码其实也大致一样 重复写)</span><br><span class="line"><span class="number">3.</span>并发的问题</span><br></pre></td></tr></table></figure><h3 id="借助于wsgiref模块"><a href="#借助于wsgiref模块" class="headerlink" title="借助于wsgiref模块"></a>借助于wsgiref模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照功能的不同拆分之后 后续添加功能只需要在urls.py书写对应关系然后取views.py书写业务逻辑即可</span></span><br><span class="line">urls.py路由与视图函数对应关系</span><br><span class="line">views.py视图函数(后端业务逻辑)</span><br><span class="line">templates文件夹  专门用来存储html文件</span><br></pre></td></tr></table></figure><h3 id="动静态网页"><a href="#动静态网页" class="headerlink" title="动静态网页"></a>动静态网页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">静态网页</span></span><br><span class="line"><span class="string">页面上的数据是直接写死的 亘古不变</span></span><br><span class="line"><span class="string">动态网页</span></span><br><span class="line"><span class="string">数据是实时获取的</span></span><br><span class="line"><span class="string">eg:</span></span><br><span class="line"><span class="string">1.后端获取当前时间展示到html页面上</span></span><br><span class="line"><span class="string">2.数据是从数据库中获取的展示到html页面上</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态网页制作</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_time</span>(<span class="params">env</span>):</span><br><span class="line">    current_time = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)</span><br><span class="line">    <span class="comment"># 如何将后端获取到的数据&quot;传递&quot;给html文件？</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;templates/get_time.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="comment"># data就是一堆字符串</span></span><br><span class="line">    data = data.replace(<span class="string">&#x27;dwadasdsadsadasdas&#x27;</span>,current_time)   <span class="comment"># 在后端将html页面处理好之后再返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个字典传递给html文件 并且可以在文件上方便快捷的操作字典数据</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dict</span>(<span class="params">env</span>):</span><br><span class="line">    user_dic = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;hobby&#x27;</span>:<span class="string">&#x27;read&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;templates/get_dict.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    tmp = Template(data)</span><br><span class="line">    res = tmp.render(user=user_dic)</span><br><span class="line">    <span class="comment"># 给get_dict.html传递了一个值 页面上通过变量名user就能够拿到user_dict</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端获取数据库中数据展示到前端页面</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模版语法之Jinja2模块"><a href="#模版语法之Jinja2模块" class="headerlink" title="模版语法之Jinja2模块"></a>模版语法之Jinja2模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">安装：pip3 install jinja2</span><br><span class="line"><span class="string">&quot;&quot;&quot;模版语法是在后端起作用的&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模版语法(非常贴近python语法)</span></span><br><span class="line">&#123;&#123; user &#125;&#125;</span><br><span class="line">&#123;&#123; user.get(<span class="string">&#x27;username&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123; user.age &#125;&#125;</span><br><span class="line">&#123;&#123; user[<span class="string">&#x27;hobby&#x27;</span>] &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>循环</span><br><span class="line">&#123;% <span class="keyword">for</span> user_dict <span class="keyword">in</span> user_list %&#125;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.<span class="built_in">id</span>&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.username&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.password&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.hobby&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">&#123;% endfor%&#125;</span><br></pre></td></tr></table></figure><h3 id="基于wsgiref的简易版本web框架请求流程"><a href="#基于wsgiref的简易版本web框架请求流程" class="headerlink" title="基于wsgiref的简易版本web框架请求流程"></a>基于wsgiref的简易版本web框架请求流程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.请求来的时候解析http格式的数据 封装成大字典 env</span></span><br><span class="line"><span class="string">2.响应走的时候给数据打包成符合http格式 再返回给浏览器 response</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="python三大主流web框架"><a href="#python三大主流web框架" class="headerlink" title="python三大主流web框架"></a>python三大主流web框架</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">django</span></span><br><span class="line"><span class="string">特点:大而全 自带的功能特别特别特别的多 类似于航空母舰</span></span><br><span class="line"><span class="string">不足之处:</span></span><br><span class="line"><span class="string">有时候过于笨重</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">flask</span></span><br><span class="line"><span class="string">特点:小而精  自带的功能特别特别特别的少 类似于游骑兵</span></span><br><span class="line"><span class="string">第三方的模块特别特别特别的多，如果将flask第三方的模块加起来完全可以盖过django</span></span><br><span class="line"><span class="string">并且也越来越像django</span></span><br><span class="line"><span class="string">不足之处:</span></span><br><span class="line"><span class="string">比较依赖于第三方的开发者</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tornado</span></span><br><span class="line"><span class="string">特点:异步非阻塞 支持高并发</span></span><br><span class="line"><span class="string">牛逼到甚至可以开发游戏服务器</span></span><br><span class="line"><span class="string">不足之处:</span></span><br><span class="line"><span class="string">暂时你不会</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">A:socket部分</span><br><span class="line">B:路由与视图函数对应关系(路由匹配)</span><br><span class="line">C:模版语法</span><br><span class="line"></span><br><span class="line">django</span><br><span class="line">  A用的是别人的wsgiref模块</span><br><span class="line">  B用的是自己的</span><br><span class="line">  C用的是自己的(dtl没有jinja2好用 但是也很方便)</span><br><span class="line"></span><br><span class="line">flask</span><br><span class="line">  A用的是别人的werkzeug(内部还是wsgiref模块)</span><br><span class="line">  B自己写的</span><br><span class="line">  C用的别人的(jinja2)</span><br><span class="line"></span><br><span class="line">tornado</span><br><span class="line">A，B，C都是自己写的(性能无敌)</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何让你的计算机能够正常的启动django项目</span></span><br><span class="line">  <span class="number">1.</span>计算机的名称不能有中文</span><br><span class="line">  <span class="number">2.</span>一个pycharm窗口只开一个项目</span><br><span class="line">  <span class="number">3.</span>项目里面所有的文件也尽量不要出现中文</span><br><span class="line">  <span class="number">4.</span>python解释器尽量使用<span class="number">3.4</span>~<span class="number">3.6</span>之间的版本</span><br><span class="line">  (如果你的项目报错 你点击最后一个报错信息</span><br><span class="line">    去源码中把逗号删掉)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># django版本问题</span></span><br><span class="line"><span class="number">1.</span>X <span class="number">2.</span>X <span class="number">3.</span>X</span><br><span class="line">    pip3 install django==<span class="number">1.11</span><span class="number">.29</span>(版本视个人而定习惯了url写法，虽然re_path也一样)</span><br><span class="line">    pip3 install django==<span class="number">2.2</span><span class="number">.2</span>  (请一直<span class="number">2</span>下去url变成re_path,支持内置转换器嘎嘎好用)</span><br><span class="line">    pip3 install django==<span class="number">3.2</span><span class="number">.5</span>   (支持异步，性能提升)</span><br><span class="line">  终端输入django-admin look look</span><br></pre></td></tr></table></figure><h3 id="django基本操作"><a href="#django基本操作" class="headerlink" title="django基本操作"></a>django基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行操作</span></span><br><span class="line"><span class="comment"># 1.创建django项目</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  你可以先切换到对应的D盘 然后再创建</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  django-admin startproject mysite</span><br><span class="line">    </span><br><span class="line">    mysite文件夹</span><br><span class="line">      manage.py</span><br><span class="line">      mysite文件夹</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">          urls.py</span><br><span class="line">          wsgi.py</span><br><span class="line"> <span class="comment"># 2.启动django项目</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一定要先切换到项目目录下</span></span><br><span class="line"><span class="string">cd /mysite</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">  python3 manage.py runserver </span><br><span class="line">  后面可加端口号</span><br><span class="line">  例如：python3 manage.py runserver <span class="number">8001</span> </span><br><span class="line">  <span class="comment"># http://127.0.0.1:8000/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.创建应用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Next, start your first app by running python manage.py startapp [app_label].</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">python manage.py startapp firstapp</span><br><span class="line">    应用名应该做到见名知意</span><br><span class="line">      user</span><br><span class="line">      order</span><br><span class="line">      web</span><br><span class="line">      ...</span><br><span class="line">django启动：</span><br><span class="line">    <span class="number">1.</span>pycharm提供的终端直接输入完整命令</span><br><span class="line">    <span class="number">2.</span>pycharm </span><br><span class="line">    tools </span><br><span class="line">    run manage.py task提示(前期别多用 背一下完整命令) </span><br><span class="line">    </span><br><span class="line">django必吃三碗饭    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">HttpResponse</span></span><br><span class="line"><span class="string">返回字符串类型的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">render</span></span><br><span class="line"><span class="string">返回html文件的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">redirect</span></span><br><span class="line"><span class="string">重定向</span></span><br><span class="line"><span class="string">  return redirect(&#x27;https://www.mzitu.com/&#x27;)</span></span><br><span class="line"><span class="string">    return redirect(&#x27;/home/&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>   </span><br></pre></td></tr></table></figure><h3 id="主要文件介绍"><a href="#主要文件介绍" class="headerlink" title="主要文件介绍"></a>主要文件介绍</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-mysite项目文件夹</span><br><span class="line">--mysite文件夹</span><br><span class="line">  ---settings.py配置文件</span><br><span class="line">    ---urls.py路由与视图函数对应关系(路由层)</span><br><span class="line">    ---wsgi.pywsgiref模块(不考虑)</span><br><span class="line">  --manage.pydjango的入口文件</span><br><span class="line">  --db.sqlite3django自带的sqlite3数据库(小型数据库 功能不是很多还有bug)</span><br><span class="line">  --firstapp文件夹</span><br><span class="line">  ---admin.pydjango后台管理</span><br><span class="line">    ---apps.py注册使用</span><br><span class="line">    ---migrations文件夹数据库迁移记录</span><br><span class="line">    ---models.py数据库相关的 模型类(orm)</span><br><span class="line">  ---tests.py测试文件</span><br><span class="line">    ---views.py视图函数(视图层)</span><br></pre></td></tr></table></figure><h3 id="应用-app"><a href="#应用-app" class="headerlink" title="应用(app)"></a>应用(app)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">django是一款专门用来开发app的web框架</span></span><br><span class="line"><span class="string">比如开发淘宝</span></span><br><span class="line"><span class="string">订单相关</span></span><br><span class="line"><span class="string">用户相关</span></span><br><span class="line"><span class="string">投诉相关</span></span><br><span class="line"><span class="string">创建不同的app对应不同的功能</span></span><br><span class="line"><span class="string">一个app就是一个独立的功能模块</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">***********************创建的应用一定要去配置文件中注册**********************</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;firstapp.apps.firstappConfig&#x27;</span>,  <span class="comment"># 全写</span></span><br><span class="line">  <span class="string">&#x27;firstapp&#x27;</span>, <span class="comment"># 简写</span></span><br><span class="line">]</span><br><span class="line">ps:你在用pycharm创建项目的时候 pycharm可以帮你创建一个app并且自动注册</span><br><span class="line">***********************************************************************</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/09/hello-world/"/>
      <url>/2022/05/09/hello-world/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line">$ hexo server</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
