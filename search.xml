<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL调优实践</title>
      <link href="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/"/>
      <url>/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/1.jpg" alt="1"></p><h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h2><p>​提到索引,我们想到的是查询慢了设置索引呗！但是索引为什么起作用？设置了索引为什么还是慢我们其实不是很清楚。在关系数据库中,索引是一种数据结构,他将数据提前按照一定的规则进行排序和组织,能够帮助快速定位到数据记录的数据,加快数据库表中数据的查找和访问速度。像书籍的目录、文件夹、标签 、序列号….  都可以帮助我们快速定位，都可以视为索引。能实现快速定位数据的一种存储结构，其设计思想是以空间换时间。</p><h2 id="索引的种类"><a href="#索引的种类" class="headerlink" title="索引的种类"></a>索引的种类</h2><pre><code>在MySQL中索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。常见的索引分类如下：● 按数据结构分类：B+tree索引、Hash索引、Full-text索引。● 按物理存储分类：聚集索引、非聚集索引。● 按字段特性分类：主键索引(PRIMARY KEY)、唯一索引(UNIQUE)、普通索引(INDEX)、全文索引(FULLTEXT)。● 按字段个数分类：单列索引、联合索引（也叫复合索引、组合索引）。</code></pre><h2 id="常见索引数据结构和区别"><a href="#常见索引数据结构和区别" class="headerlink" title="常见索引数据结构和区别"></a>常见索引数据结构和区别</h2><p>○ 二叉树、红黑树、B树 、B+树<br>○ 区别：树的高度影响获取数据的性能（每一个树节点都是一次磁盘I&#x2F;O)</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>特点：每个节点最多有两个子节,大在右,小在左,数据随机性情况下树杈越明显。</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/2.png" alt="2"><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/3.png" alt="3"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果数据是按顺序依次进入：</span><br><span class="line">树的高度则会很高(相当于一个链表结构),此时元素的查找效率就等于链表查询O(n),数据检索效率将极为低下.</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/4.png" alt="4"><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/5.png" alt="5"></p><p>极端的情况下 就是一个链表结构（如图），此时元素的查找效率就等于链表查询O(n)。</p><h3 id="红黑树-平衡二叉树"><a href="#红黑树-平衡二叉树" class="headerlink" title="红黑树(平衡二叉树)"></a>红黑树(平衡二叉树)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">虽通过自旋平衡，子节点会自动分叉为2个分支，从而减少树的高度，当数据有序插入时比二叉树数据检索性能更佳.     </span><br><span class="line">但是如果数据量过大，节点个数就越多，树高度也会增高（也就是树的深度越深），增加磁盘I/O次数，影响查询效率.</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/6.gif" alt="6"></p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/7.png" alt="7"></p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B树的出现可以解决树高度的问题。之所以是B树,而并不是名称中&quot;xxx二叉树&quot;，就是它不再限制一个父节点中只能有两个子节点,而是允许 M 个子节点（M &gt; 2）。不仅如此，B树的一个节点可以存储多个元素，相比较于前面的那些二叉树数据结构又将整体的树高度降低了。</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/8.png" alt="8"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B 树的节点可以包含有多个子节点，所以 B树是一棵多叉树，它的每一个节点包含的最多子节点数量的称为B树的阶。如下图是一颗3阶的B树。</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/9.gif" alt="9"></p><p><strong>当一颗3阶的B树查找 7这个的元素时的流程是怎么样的？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">先从根节点出发,判断7在4和8之间,根据P2存储指针6的节点,判断7大于6最后指针找到叶子节点.也就找到有匹配7的键值</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/10.gif" alt="10"></p><p>​可以发现一颗3阶的B树在查找叶子节点时,由于树高度只有 3,所以查找过程最多只需要3次的磁盘I&#x2F;O操作.数据量不大时可能不太真切.但当数据量大时，节点也会随着增多;此时如果还是前面的自平衡二叉树的场景下,由于二叉树只能最多2个叶子节点的约束,也只能纵向去的去扩展子节点,树的高度会很高，意味着需要更多的操作磁盘I&#x2F;O次数.而B树则可以通过横向扩展节点从而降低树的高度,所以效率自然要比二叉树效率更高.(直白说就是变矮胖了).</p><p>​看到这,相信你也知道如果B树这么适合,也就没有接下来B+树的什么事了。接着,那为什么不用B树,而用了B+树呢？你看啊,B树其实已经满足了我们最前面所要满足的条件,减少磁盘I&#x2F;O操作,同时支持按区间查找。但注意，虽然B树支持按区间查找,但并不高效。例如上面的例子中，B树能高效的通过等值查询 15 这个值，但不方便查询出一个区间内3 ~ 10区间内所有数的结果。因为当B树做范围查询时需要使用中序遍历，那么父节点和子节点也就需要不断的来回切换涉及了多个节点会给磁盘I&#x2F;O带来很多负担。</p><h3 id="B-树-B-tree"><a href="#B-树-B-tree" class="headerlink" title="B+树(B+tree)"></a>B+树(B+tree)</h3><p><strong>在MySQL中为什么会选用B+tree做索引结构呢？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B+tree 是在B树基础上的一种优化，其更适合做存储索引结构。在 B+tree 中,非叶子节点上仅存储键值，不存储数据；而所有数据记录均存储在叶子节点上，并且数据是按照顺序排列的。此外在 B+tree 中各个数据页之间是通过双向链表连接的。B+tree 的结构图如下：</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/11.png" alt="11"></p><p><strong>B树和B+树的区别，Mysql为什么要选择B+树作为默认索引的数据结构</strong></p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/12.png" alt="12"></p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/13.png" alt="13"></p><p>B+tree 结构实现数据索引具有如下优点：</p><p>​<strong>a. 非叶子节点上可以存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树也就会变得更矮更胖。这样一来我们查找数据进行磁盘I&#x2F;O的次数就会大大减少，数据查询的效率也会更快。</strong></p><p>​<strong>b. 所有数据记录都有序存储在叶子节点上，就会使得范围查找，排序查找，分组查找以及去重查找变得异常简单。</strong></p><p>​<strong>c. 数据页之间、数据记录之间都是通过链表链接的，有了这个结构的支持就可以方便的在数据查询后进行升序或者降序操作。</strong></p><h3 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h3><p>​Hash索引其实用的不多，最主要是因为最常见的存储引擎InnoDB不支持显示地创建Hash索引，只支持自适应Hash索引。虽然可以使用sql语句在InnoDB显示声明Hash索引，但是其实是不生效的。</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/14.png" alt="14"></p><p>对name字段建立Hash索引，但是通过show index from 表名就会发现实际还是B+树</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/15.png" alt="15"></p><p>​在存储引擎中，Memory引擎支持Hash索引;Hash索引其实有点像Java中的HashMap底层的数据结构，他也有很多的槽，存的也是键值对，键值为索引列，值为数据的这条数据的行指针，通过行指针就可以找到数据;假设现在user表用Memory存储引擎，对name字段建立Hash索引，表中插入三条数据:</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/16.png"></p><p>Hash索引会对索引列name的值进行Hash计算，然后找到对应的槽下面，如下图所示:</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/17.png" alt="17"></p><p>​当遇到name字段的Hash值相同时,也就是Hash冲突，就会形成一个链表，比如有name&#x3D;张三有两条数据，就会形成一个链表。之后如果要查name&#x3D;李四的数据，只需要对李四进行Hash计算，找到对应的槽，遍历链表，取出name&#x3D;李四对应的行指针，然后根据行指针去查找对应的数据。</p><p><strong>Hash索引优缺点</strong></p><ul><li>hash索引只能用于等值比较，所以查询效率非常高</li><li>不支持范围查询，也不支持排序，因为索引列的分布是无序的</li></ul><h2 id="什么是聚簇索引与非聚集索引和区别？"><a href="#什么是聚簇索引与非聚集索引和区别？" class="headerlink" title="什么是聚簇索引与非聚集索引和区别？"></a>什么是聚簇索引与非聚集索引和区别？</h2><p>按物理存储分类：InnoDB的存储方式是聚集索引，MyISAM的存储方式是非聚集索引。</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/18.png" alt="18"></p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/19.png" alt="19"></p><h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><ol><li>聚簇索引将数据存储在索引树的叶子节点上。</li><li>聚簇索引可以减少一次查询，因为查询索引树的同时就能获取到数据。</li><li>聚簇索引的缺点是，对数据进行修改或删除操作时需要更新索引树，会增加系统的开销。</li><li>聚簇索引通常用于数据库系统中，主要用于提高查询效率。</li></ol><h3 id="非聚簇索引（又称二级索引-x2F-辅助索引）"><a href="#非聚簇索引（又称二级索引-x2F-辅助索引）" class="headerlink" title="非聚簇索引（又称二级索引 &#x2F;  辅助索引）"></a>非聚簇索引（又称二级索引 &#x2F;  辅助索引）</h3><ol><li>非聚簇索引不将数据存储在索引树的叶子节点上，而是存储在数据页中。</li><li>非聚簇索引在查询数据时需要两次查询，一次查询索引树，获取数据页的地址，再通过数据页的地址查询数据（<strong>通常情况下来说是的，但如果索引覆盖的话实际上是不用回表的</strong>）。</li><li>非聚簇索引的优点是，对数据进行修改或删除操作时不需要更新索引树，减少了系统的开销。</li><li>非聚簇索引通常用于数据库系统中，主要用于提高数据更新和删除操作的效率。</li></ol><h2 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a>二级索引</h2><p>​在MySQL中，创建一张表时会默认为主键创建聚簇索引，B+树将表中所有的数据组织起来，即数据就是索引主键所以在InnoDB里，主键索引也被称为聚簇索引，索引的叶子节点存的是整行数据。而除了聚簇索引以外的所有索引都称为二级索引，二级索引的叶子节点内容是主键的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">例如创建如下一张表:</span><br><span class="line"></span><br><span class="line">CREATE TABLE users(</span><br><span class="line">  id INT NOT NULL,</span><br><span class="line">  name VARCHAR(20) NOT NULL,</span><br><span class="line">  age INT NOT NULL,</span><br><span class="line">  PRIMARY KEY(id)</span><br><span class="line">);</span><br><span class="line">新建一个以age字段的二级索引:</span><br><span class="line"></span><br><span class="line">ALTER TABLE users ADD INDEX index_age(age);</span><br><span class="line">MySQL会分别创建主键id的聚簇索引和age的二级索引:</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/20.png" alt="20"></p><p>在MySQL中主键索引的叶子节点存的是整行数据，而二级索引叶子节点内容是主键的值.</p><h2 id="回表"><a href="#回表" class="headerlink" title="回表"></a>回表</h2><p>​讲完二级索引，接下来讲一讲如何使用二级索引查找数据。这里假设对name字段创建了一个索引，并且表里就存了上面示例中的几条数据，这里我再把图拿过来例如执行下面这条sql 则需要进行回表:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE age=35;</span><br><span class="line">SELECT * FROM users WHERE name=&#x27;jason&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/21.png" alt="21"></p><p>由于查询条件是name &#x3D; ‘jason’; age&#x3D;’35’，所以会走name&#x2F;age索引;</p><p>整个过程大致分为以下几个步骤：</p><ul><li>从根节点开始，21&lt;35  定位右边存储指针，</li><li>在索引叶子节点找到35的第一条记录，也就是id&#x3D;9的那条</li><li>由于是select <em>，还要查其它字段，此时就会根据id&#x3D;9到聚簇索引（主键索引）中查找其它字段数据，这个查找过程前面说了很多次了，这个根据id&#x3D;9到聚簇索引中查找数据的过程就被称为*<em>回表</em></em></li></ul><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p>​上一小节说当执行select *  from <code>user</code> where age &#x3D; 35;这条sql的时候，会先从索引页中查出来age &#x3D; 35;对应的主键id，之后再回表，到聚簇索引中查询其它字段的值。</p><p>那么当执行下面这条sql，又会怎样呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from `user` where age = 35;</span><br></pre></td></tr></table></figure><p>这次查询字段从select *变成select id，查询条件不变，所以也会走age索引</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/22.png" alt="22"></p><p>​所以还是跟前面一样了，先从索引页中查出来age &#x3D; 35;对应的主键id之后，惊讶的发现，sql中需要查询字段的id值已经查到了，那次此时压根就不需要回表了，已经查到id了，还回什么表。</p><p>​而这种需要查询的字段都在索引列中的情况就被称为<strong>覆盖索引</strong>，索引列覆盖了查询字段的意思。当使用覆盖索引时会减少回表的次数，这样查询速度更快，性能更高。所以，在日常开发中，尽量不要select * ，需要什么查什么，如果出现覆盖索引的情况，查询会快很多。</p><h2 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `test`.`user`  ADD INDEX(`name`);</span><br></pre></td></tr></table></figure><p>​假设，我们现在对name字段加了一个普通非唯一索引，那么name就是索引列，同时name这个索引也就是单列索引;此时如果往表中插入三条数据，那么name索引的叶子节点存的数据就如下图所示</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/23.png" alt="23"></p><p>​<strong>mysql会根据name字段的值进行排序，这里我假设张三排在李四前面，当索引列的值相同时，就会根据id排序，所以索引实际上已经根据索引列的值排好序了。</strong></p><p>​这里肯定有小伙伴疑问，name字段存储的中文也可以排序么？答案是可以的，并且mysql支持很多种排序规则，我们在建数据库或者是建表的时候等都可以指定排序规则，<strong>并且后面文章涉及到的字符串排序都是随便排的，实际情况可能不一样</strong>。</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/24.png" alt="24"></p><p>​对于单个索引列数据查找也是跟前面说的聚簇索引一样，也会对数据分组，之后可以根据二分查找在单个索引列来查找数据。当数据不断增多，一个索引页存储不下数据的时候，也会用多个索引页来存储，并且索引页直接也会形成双向链表;</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/25.png" alt="25"></p><p>​当索引页不断增多时，为了方便在不同索引页中查找数据，也就会抽取一个索引页，除了存页中id，同时也会存储这个id对应的索引列的值;</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/26.png" alt="26"></p><h2 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `test`.`user` ADD INDEX(`name`, `age`, `id`);</span><br></pre></td></tr></table></figure><p>​除了单列索引，联合索引其实也是一样的，只不过索引页存的数据就多了一些索引列;比如，在name和age上建立一个联合索引，此时单个索引页就如图所示:</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/27.png" alt="27"></p><p><strong>先以name排序，name相同时再以age排序，如果再有其它列，依次类推，最后再以id排序。</strong></p><p>相比于只有name一个字段的索引来说，索引页就多存了一个索引列。最后形成的B+树简化为如下图:</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/28.png" alt="28"></p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>​顾名思义是最左优先，以最左边的为起点任何连续的索引都能匹配上。如果没有第一列的话，直接访问第二列，那第二列肯定是无序的，直接访问后面的列就用不到索引了当创建(a,b,c)复合索引时，想要索引生效的话，只能使用 a和ab、ac和abc三种组合！</p><h2 id="单列索引联合索引分别什么场景创建，优势是什么"><a href="#单列索引联合索引分别什么场景创建，优势是什么" class="headerlink" title="单列索引联合索引分别什么场景创建，优势是什么"></a>单列索引联合索引分别什么场景创建，优势是什么</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>当只需要查询某个字段的时候可建立单列索引，加快查询速度.而当查询的字段较多的情况下，使用联合索引</p><h3 id="联合索引的优势"><a href="#联合索引的优势" class="headerlink" title="联合索引的优势"></a>联合索引的优势</h3><p><strong>1.减少开销</strong></p><p>建一个联合索引(a,b,c),实际相当于建了(a),(a,b),(a,b,c)三个索引.每多一个索引,都会增加写操作的开销和磁盘空间的开销.对于大量数据的表,使用联合索引会大大的减少开销!</p><p><strong>2.覆盖索引</strong></p><p>对联合索引(a,b,c),如果有如下sql的</p><p>select a,b,c from table where a&#x3D;’xxx’ and b&#x3D;’xx’;</p><p>那么mysql可以直接通过遍历索引取得数据,而无需回表,这减少了很多的随机io操作.减少io操作,特别是随机io其实DBA主要的优化策略.所以,在真正的实际应用中,覆盖索引是主要的提升性能的优化手段之一.</p><p><strong>3.效率高</strong></p><p>索引列多,通过联合索引筛选出的数据越少.比如有1000w条数据的表,有如下sql:</p><p>select col1,col2,col3 from table where col1&#x3D;1 and col2&#x3D;2 and col3&#x3D;3;</p><p>假设:假设每个条件可以筛选出10%的数据</p><p>A:如果只有单列索引,那么通过该索引能筛选出1000w*10%&#x3D;100w条数据,然后再回表从100w调数据中找到符合col2&#x3D;2 and col3&#x3D;3的数据,然后再排序,再分页,以此类推(递归);</p><p>B:如果是(col1,col2,col3)联合索引,通过三列索引筛选出1000w*10%*10%*10%&#x3D;1w,效率提升可想而知;</p><h2 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h2><p>​索引下推（INDEX CONDITION PUSHDOWN，简称 ICP）是在 MySQL 5.6 针对<strong>扫描二级索引</strong>的一项优化改进。 用来在范围查询时减少回表的次数 。ICP 适用于 MYISAM 和 INNODB。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `test`.`user`  ADD INDEX (`name`,`age`)</span><br></pre></td></tr></table></figure><p>不使用索引下推实现</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/29.png" alt="29"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Explain SELECT * FROM user1 WHERE name LIKE &#x27;A%&#x27; and age = 40;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/30.png" alt="30"></p><p>使用索引下推实现</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/31.png" alt="31"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Explain SELECT * FROM user1 WHERE name LIKE &#x27;A%&#x27; and age = 40;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/32.png" alt="32"></p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/33.png" alt="33"></p><p>接下来要执行如下的sql:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `user` where name &gt; &#x27;王五&#x27; and age &gt; 22;</span><br></pre></td></tr></table></figure><p>在MySQL5.6(不包括5.6)之前，整个sql大致执行步骤如下：</p><ul><li>先根据二分查找，定位到name &gt; ‘王五’的第一条数据，也就是id&#x3D;4的那个赵六</li><li>之后就会根据id&#x3D;4进行回表操作，到聚簇索引中查找id&#x3D;4其它字段的数据，然后判断数据中的age是否大于22，是的话就说明是我们需要查找的数据，否则就不是</li><li>之后顺着链表，继续遍历，然后找到一条记录就回一次表，然后判断age，如此反复下去，直至结束</li></ul><p>所以对于图上所示，整个搜索过程会经历5次回表操作，两个赵六，两个刘七，一个王九，最后符合条件的也就是id&#x3D;6的赵六那条数据，其余age不符和。</p><p>虽然这么执行没什么问题，但是不知有没有发现其实没必要进行那么多次回表，因为光从上面的索引图示就可以看出，符合name &gt; ‘王五’ and age &gt; 22的数据就id&#x3D;6的赵六那条数据</p><p>所以在MySQL5.6之后，对上面的age &gt; 22判断逻辑进行了优化</p><p>前面还是一样，定位查找到id&#x3D;4的那个赵六，之后就<strong>不回表</strong>来判断age了，因为索引列有age的值了，那么直接根据索引中age判断是否大于22，如果大于的话，再回表查询剩余的字段数据（因为是select *），然后再顺序链表遍历，直至结束</p><p>所以这样优化之后，回表次数就成1了，相比于前面的5次，大大减少了回表的次数。</p><p>而这个优化，就被称为<strong>索引下推</strong>，就是为了减少回表的次数。</p><p>之所以这个优化叫索引下推，其实是跟判断age &gt; 22逻辑执行的地方有关，这里就不过多赘述了。</p><h2 id="索引合并"><a href="#索引合并" class="headerlink" title="索引合并"></a>索引合并</h2><p>索引合并（index merge）是从MySQL5.1开始引入的索引优化机制，在之前的MySQL版本中，一条sql多个查询条件只能使用一个索引，但是引入了索引合并机制之后，MySQL在<strong>某些特殊</strong>的情况下会扫描多个索引，然后将扫描结果进行合并</p><p>结果合并会为下面三种情况：</p><ul><li>取交集（intersect）</li><li>取并集（union）</li><li>排序后取并集（sort-union）</li></ul><p>为了不耽误演示，删除之前所有的索引，然后为name和age各自分别创建一个二级索引idx_name和idx_age</p><h3 id="取交集（intersect）"><a href="#取交集（intersect）" class="headerlink" title="取交集（intersect）"></a>取交集（intersect）</h3><p>当执行下面这条sql就会出现取交集的情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `user` where name = &#x27;赵六&#x27; and age= 22;</span><br></pre></td></tr></table></figure><p>查看执行计划</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/34.png" alt="34"></p><p>​type是index_merge，并且possible_key和key都是idx_name和idx_age，说明使用了索引合并，并且Extra有Using intersect(idx_age,idx_name)，intersect就是交集的意思。</p><p>​整个过程大致是这样的,分别根据idx_name和idx_age取出对应的主键id,之后将主键id取交集,那么这部分交集的id一定同时满足查询name &#x3D; ‘赵六’ and age&#x3D; 22的查询条件（仔细想想）,之后再根据交集的id回表;不过要想使用取交集的联合索引,需要满足各自索引查出来的主键id是排好序的,这是为了方便可以快速的取交集;比如下面这条sql就无法使用联合索引;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `user` where name = &#x27;赵六&#x27; and age &gt; 22;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/35.png" alt="35"></p><p>​只能用name这个索引，因为age &gt; 22查出来的id是无序的，前面在讲索引的时候有说过索引列的排序规则</p><p>由此可以看出，使用联合索引条件还是比较苛刻的。</p><h3 id="取并集（union）"><a href="#取并集（union）" class="headerlink" title="取并集（union）"></a>取并集（union）</h3><p>取并集就是将前面例子中的and换成or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `user` where name = &#x27;赵六&#x27; or age = 22;</span><br></pre></td></tr></table></figure><p>​前面执行的情况都一样,根据条件到各自的索引上去查,之后对查询的id取并集去重，之后再回表;同样地,取并集也要求各自索引查出来的主键id是排好序的,如果查询条件换成age &gt; 22时就无法使用取并集的索引合并。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `user` where name = &#x27;赵六&#x27; or age &gt; 22;</span><br></pre></td></tr></table></figure><h3 id="排序后取并集（sort-union）"><a href="#排序后取并集（sort-union）" class="headerlink" title="排序后取并集（sort-union）"></a>排序后取并集（sort-union）</h3><p>虽然取并集要求各自索引查出来的主键id是排好序的，但是如果遇到没排好序的情况，mysql会自动对这种情况进行优化，会先对主键id排序，然后再取并集，这种情况就叫 排序后取并集（sort-union）。</p><p>比如上面提到的无法直接取并集的sql就符合排序后取并集（sort-union）这种情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `user` where name = &#x27;赵六&#x27; or age &gt; 22;</span><br></pre></td></tr></table></figure><h2 id="为什么Mysql默认-InnoDB-而不是-MyISAM-？"><a href="#为什么Mysql默认-InnoDB-而不是-MyISAM-？" class="headerlink" title="为什么Mysql默认 InnoDB, 而不是 MyISAM ？"></a>为什么Mysql默认 InnoDB, 而不是 MyISAM ？</h2><p><strong>MyISAM 与 InnoDB</strong></p><p>众所周知，MySQL 有两种常见的存储引擎。一种是 MyISAM，一种是 InnoDB。</p><p><strong>一、它们是什么？</strong></p><p>先来看看官网对 MyISAM 的描述，只有一句话，看来官方也不想多加解释。</p><p>​MyISAM is based on the older (and no longer available) ISAM storage engine but has many useful extensions.</p><p>大意：MyISAM 是一款青出于蓝而胜于蓝的存储引擎，它在 ISAM 基础上作了一些扩展和加工。关于 ISAM ，我只告诉你它是 Indexed Sequential Access Method 的缩写，翻译为“有索引的顺序访问方法”。</p><p>而对 <a href="https://link.juejin.cn/?target=https://dev.mysql.com/doc/refman/8.0/en/innodb-introduction.html">InnoDB</a> 的描述，就更 professional 一些了。</p><p>​InnoDB is a general-purpose storage engine that balances high reliability and high performance. In MySQL 8.0, InnoDB is the default MySQL storage engine. Unless you have configured a different default storage engine, issuing a CREATE TABLE statement without an ENGINE&#x3D; clause creates an InnoDB table.</p><p>大意：InnoDB 是一种通用的存储引擎，在高可靠和高性能上作了均衡。MySQL 8.0 中，它是默认的存储引擎（其实在5.5之后的版本就是了），当你执行 CREATE TABLE 建表语句并且不带 “ENGINE &#x3D; ”子句时，默认帮你创建的就是 InnoDB 表了。</p><p><strong>二、两者有什么区别？</strong></p><p>拿官网两者的 Features 来作一个分析对比吧：</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/36.png" alt="36"></p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/37.png" alt="37"></p><p>1、InnoDB 是聚集索引，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高，但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，否则其他索引也会很大。而 MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针，主键索引和辅助索引是独立的。</p><p>2、InnoDB 支持外键，而 MyISAM 不支持。对一个包含外键的 InnoDB 表转为 MYISAM 会失败。</p><p>3、InnoDB 在 MySQL 5.6 之前不支持全文索引，而 MyISAM 一直都支持，如果你用的是老版本，查询效率上 MyISAM 要高。</p><p>4、InnoDB 锁粒度是行锁，而 MyISAM 是表锁。</p><p>5、InnoDB 支持事务，MyISAM 不支持，对于 InnoDB 每一条 SQL 语言都默认封装成事务，自动提交，这样会影响速度，所以最好把多条 SQL 语言放在 begin 和 commit 之间，组成一个事务。</p><p>6、InnoDB 不保存表的具体行数，执行 select count(*) from table 时需要全表扫描。而 MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快，但如果上述语句还包含了 where 子句，那么两者执行效率是一样的。</p><p><a href="https://blogs.oracle.com/mysql/post/still-using-myisam-it-is-time-to-switch-to-innodb">https://blogs.oracle.com/mysql/post/still-using-myisam-it-is-time-to-switch-to-innodb</a></p><p><a href="https://tecadmin.net/choosing-between-innodb-myisam-and-memory-storage-engines/">https://tecadmin.net/choosing-between-innodb-myisam-and-memory-storage-engines/</a></p><p><a href="http://dimitrik.free.fr/blog/archives/2015/12/mysql-performance-revisiting-innodb-vs-myisam-with-mysql-57.html">http://dimitrik.free.fr/blog/archives/2015/12/mysql-performance-revisiting-innodb-vs-myisam-with-mysql-57.html</a></p><h2 id="如果一个表没有主键索引那还会创建B-树吗？"><a href="#如果一个表没有主键索引那还会创建B-树吗？" class="headerlink" title="如果一个表没有主键索引那还会创建B+树吗？"></a>如果一个表没有主键索引那还会创建B+树吗？</h2><p><strong>答案是会的！！！</strong></p><p>​InnoDB是MySQL中的一种存储引擎，它会为每个表创建一个主键索引。如果表没有明确的主键索引，InnoDB会使用一个隐藏的、自动生成的主键来创建索引。这个隐藏的主键索引使用的就是B+树结构。因此，在InnoDB中，即使表没有明确的主键索引，也会创建一个B+树索引。</p><h2 id="索引的优缺点，什么时候该用和不该用"><a href="#索引的优缺点，什么时候该用和不该用" class="headerlink" title="索引的优缺点，什么时候该用和不该用"></a>索引的优缺点，什么时候该用和不该用</h2><p><strong>优点：</strong></p><ol><li><p><strong>提高检索效率</strong></p></li><li><p><strong>降低排序成本，索引对应的字段是会有一个自动排序功能的，默认是升序asc</strong>。</p></li></ol><p><strong>缺点:</strong></p><ol><li><strong>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</strong></li><li><strong>索引需要占用物理空间，数据量越大，占用空间越大</strong></li><li><strong>会降低表的增删改的效率，因为每次增删改索引，都需要进行动态维护</strong></li></ol><h3 id="既然索引有坏有好-什么时候需要索引-什么时候不需要？"><a href="#既然索引有坏有好-什么时候需要索引-什么时候不需要？" class="headerlink" title="既然索引有坏有好,什么时候需要索引,什么时候不需要？"></a>既然索引有坏有好,什么时候需要索引,什么时候不需要？</h3><p><strong>适合：</strong></p><ol><li><strong>较频繁的作为查询条件的字段应该创建索引</strong></li></ol><p><strong>不适合：</strong></p><ol><li><p><strong>字段值的唯一性太差不适合单独做索引</strong></p></li><li><p><strong>更新非常频繁的字段不适合</strong></p></li><li><p><strong>不会出现在where句中的字段不适合。</strong></p></li></ol><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h2><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/38.png" alt="38"></p><p>关于SQL优化方法，包括5点</p><p>​1）创建索引减少扫描量；</p><p>​2）调整索引减少计算量；</p><p>​3）索引覆盖（减少不必访问的列，避免回表查询）； </p><p>​4）干预执行计划；  </p><p>​5）SQL改写；</p><h2 id="通过Explain干预执行计划"><a href="#通过Explain干预执行计划" class="headerlink" title="通过Explain干预执行计划"></a>通过Explain干预执行计划</h2><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/39.jpg" alt="39"></p><h3 id="Explain含义"><a href="#Explain含义" class="headerlink" title="Explain含义"></a>Explain含义</h3><p>​Explain是 SQL 分析工具中非常重要的一个功能，它可以模拟优化器执行查询语句，帮助我们理解查询是如何执行的；分析查询执行计划可以帮助我们发现查询瓶颈，优化查询性能。</p><h3 id="Explain作用"><a href="#Explain作用" class="headerlink" title="Explain作用"></a>Explain作用</h3><ul><li>表的读取顺序</li><li>SQL执行时查询操作类型</li><li>可以使用哪些索引</li><li>实际使用哪些索引</li><li>每张表有多少行记录被扫描</li><li><strong>SQL语句性能分析</strong></li></ul><h3 id="Explain用法"><a href="#Explain用法" class="headerlink" title="Explain用法"></a>Explain用法</h3><p>数据准备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">drop table orders;</span><br><span class="line">drop table products;</span><br><span class="line">drop table users;</span><br><span class="line">CREATE TABLE users (  </span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,  </span><br><span class="line">  name VARCHAR(50) NOT NULL,  </span><br><span class="line">  email VARCHAR(100) NOT NULL,  </span><br><span class="line">  password VARCHAR(100) NOT NULL  </span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE products (  </span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,  </span><br><span class="line">  name VARCHAR(50) NOT NULL,  </span><br><span class="line">  price FLOAT NOT NULL  </span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE orders (  </span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,  </span><br><span class="line">  user_id INT NOT NULL,  </span><br><span class="line">  order_date DATETIME NOT NULL,  </span><br><span class="line">  total_price FLOAT NOT NULL,  </span><br><span class="line">  product_id INT NOT NULL,  </span><br><span class="line">  FOREIGN KEY (user_id) REFERENCES users(id),  </span><br><span class="line">  FOREIGN KEY (product_id) REFERENCES products(id)  </span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">alter table users add index index_name_email (name,email);</span><br><span class="line"></span><br><span class="line">INSERT INTO users (name, email, password)     </span><br><span class="line">VALUES (&#x27;张三&#x27;, &#x27;zhangsan@example.com&#x27;, &#x27;password123&#x27;),     </span><br><span class="line">(&#x27;李四&#x27;, &#x27;lisi@example.com&#x27;, &#x27;password123&#x27;),     </span><br><span class="line">(&#x27;王五&#x27;, &#x27;wangwu@example.com&#x27;, &#x27;password123&#x27;),     </span><br><span class="line">(&#x27;赵六&#x27;, &#x27;zhaoli@example.com&#x27;, &#x27;password123&#x27;),     </span><br><span class="line">(&#x27;钱七&#x27;, &#x27;qianqi@example.com&#x27;, &#x27;password123&#x27;);   </span><br><span class="line"></span><br><span class="line">INSERT INTO products (name, price)     </span><br><span class="line">VALUES (&#x27;产品 1&#x27;, 10.00),     </span><br><span class="line">(&#x27;产品 2&#x27;, 15.00),     </span><br><span class="line">(&#x27;产品 3&#x27;, 20.00),     </span><br><span class="line">(&#x27;产品 4&#x27;, 12.00),     </span><br><span class="line">(&#x27;产品 5&#x27;, 18.00); </span><br><span class="line"></span><br><span class="line">INSERT INTO orders (user_id, order_date, total_price, product_id)     </span><br><span class="line">VALUES (1, &#x27;2023-02-18 10:00:00&#x27;, 100.00, 1),     </span><br><span class="line">(2, &#x27;2023-02-18 11:00:00&#x27;, 50.00, 2),     </span><br><span class="line">(3, &#x27;2023-02-18 12:00:00&#x27;, 20.00, 3),     </span><br><span class="line">(4, &#x27;2023-02-18 13:00:00&#x27;, 15.00, 4),     </span><br><span class="line">(5, &#x27;2023-02-18 14:00:00&#x27;, 25.00, 5); </span><br></pre></td></tr></table></figure><p>MySQL5.7版本之前，使用Explain Extended在Explain的基础上额外多返回filtered列与extra列；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Explain Extended select * from users;</span><br></pre></td></tr></table></figure><p>MySQL5.7版本之前，使用Explain Partitions在Explain的基础上额外多返回partitions列；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Explain Partitions select * from users;</span><br></pre></td></tr></table></figure><p>MySQL5.7版本引入了这两个特性,直接使用Explain关键字可以将partitions列、filtered列,extra列直接查询出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Explain select * from users;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/40.png" alt="40"></p><p>Explain语句返回列的各列含义：</p><table><thead><tr><th><strong>列名</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>id</td><td>每个select都有一个对应的id号，并且是从1开始自增的</td></tr><tr><td>select_type</td><td>查询语句执行的查询操作类型</td></tr><tr><td>table</td><td>表名</td></tr><tr><td>partitions</td><td>表分区情况</td></tr><tr><td>type</td><td>查询所用的访问类型</td></tr><tr><td>possible_keys</td><td>可能用到的索引</td></tr><tr><td>key</td><td>实际查询用到的索引</td></tr><tr><td>key_len</td><td>所使用到的索引长度</td></tr><tr><td>ref</td><td>使用到索引时，与索引进行等值匹配的列或者常量</td></tr><tr><td>rows</td><td>预计扫描的行数（索引行数或者表记录行数）</td></tr><tr><td>filtered</td><td>表示符合查询条件的数据百分比</td></tr><tr><td>Extra</td><td>SQL执行的额外信息</td></tr></tbody></table><h3 id="Explain返回列详解"><a href="#Explain返回列详解" class="headerlink" title="Explain返回列详解"></a>Explain返回列详解</h3><h4 id="id列：每个select都有一个对应的id号，并且是从1开始自增的"><a href="#id列：每个select都有一个对应的id号，并且是从1开始自增的" class="headerlink" title="id列：每个select都有一个对应的id号，并且是从1开始自增的"></a>id列：每个select都有一个对应的id号，并且是从1开始自增的</h4><ul><li>如果id序号相同，从上往下执行。</li><li>如果id序号不同，序号大先执行。</li><li>如果两种都存在，先执行序号大，在同级从上往下执行。</li><li>如果显示NULL，最后执行。表示结果集，并且不需要使用它来进行查询。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- id序号相同</span><br><span class="line">explain </span><br><span class="line">SELECT users.name, orders.total_price, products.price    </span><br><span class="line">FROM users    </span><br><span class="line">INNER JOIN orders ON users.id = orders.user_id    </span><br><span class="line">INNER JOIN products ON orders.product_id = products.id;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/41.png" alt="41"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- id序号不同</span><br><span class="line">explain</span><br><span class="line">select * from orders where product_id = (select id from products where products.price = 10);</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/42.png" alt="42"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 两种都存在</span><br><span class="line">set session optimizer_switch=&#x27;derived_merge=off&#x27;; #关闭MySQL5.7对衍生表合并优化</span><br><span class="line"></span><br><span class="line">explain </span><br><span class="line">select orders.* </span><br><span class="line">from (select id from products) as temp inner join orders on temp.id = orders.product_id;</span><br><span class="line"></span><br><span class="line">set session optimizer_switch=&#x27;derived_merge=on&#x27;; #还原配置</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/43.png" alt="43"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 显示NULL</span><br><span class="line">explain</span><br><span class="line">select id from users</span><br><span class="line">union</span><br><span class="line">select id from products;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/44.png" alt="44"></p><p>优化器会针对子查询进行一定的优化重写SQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN select * from users WHERE id in (select user_id from orders where id = 1);</span><br><span class="line">show WARNINGS;</span><br></pre></td></tr></table></figure><h4 id="select-type列：表示查询语句执行的查询操作类型"><a href="#select-type列：表示查询语句执行的查询操作类型" class="headerlink" title="select_type列：表示查询语句执行的查询操作类型"></a>select_type列：表示查询语句执行的查询操作类型</h4><h5 id="simple：简单select，不包括union与子查询"><a href="#simple：简单select，不包括union与子查询" class="headerlink" title="simple：简单select，不包括union与子查询"></a>simple：简单select，不包括union与子查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Explain select * from users;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/45.png" alt="45"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 连接查询</span><br><span class="line">Explain select * from users inner join orders on users.id = orders.user_id;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/46.png" alt="46"></p><h5 id="primary：复杂查询中最外层查询，比如使用union或union-all时，id为1的记录select-type通常是primary"><a href="#primary：复杂查询中最外层查询，比如使用union或union-all时，id为1的记录select-type通常是primary" class="headerlink" title="primary：复杂查询中最外层查询，比如使用union或union all时，id为1的记录select_type通常是primary"></a>primary：复杂查询中最外层查询，比如使用union或union all时，id为1的记录select_type通常是primary</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select id from users</span><br><span class="line">union</span><br><span class="line">select id from products;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/47.png" alt="47"></p><h5 id="subquery：指在-select-语句中出现的子查询语句-结果不依赖于外部查询（不在from语句中）"><a href="#subquery：指在-select-语句中出现的子查询语句-结果不依赖于外部查询（不在from语句中）" class="headerlink" title="subquery：指在 select 语句中出现的子查询语句,结果不依赖于外部查询（不在from语句中）"></a>subquery：指在 select 语句中出现的子查询语句,结果不依赖于外部查询（不在from语句中）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select orders.*,(select name from products where id = 1) from orders;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/48.png" alt="48"></p><h5 id="dependent-subquery：指在-select-语句中出现的查询语句，结果依赖于外部查询"><a href="#dependent-subquery：指在-select-语句中出现的查询语句，结果依赖于外部查询" class="headerlink" title="dependent subquery：指在 select 语句中出现的查询语句，结果依赖于外部查询"></a>dependent subquery：指在 select 语句中出现的查询语句，结果依赖于外部查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select orders.*,(select name from products where products.id = orders.user_id) from orders;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/49.png" alt="49"></p><h5 id="derived：派生表-在FROM子句的查询语句-表示从外部数据源中推导出来的-而不是从-SELECT-语句中的其他列中选择出来的"><a href="#derived：派生表-在FROM子句的查询语句-表示从外部数据源中推导出来的-而不是从-SELECT-语句中的其他列中选择出来的" class="headerlink" title="derived：派生表,在FROM子句的查询语句,表示从外部数据源中推导出来的,而不是从 SELECT 语句中的其他列中选择出来的"></a>derived：派生表,在FROM子句的查询语句,表示从外部数据源中推导出来的,而不是从 SELECT 语句中的其他列中选择出来的</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set session optimizer_switch=&#x27;derived_merge=off&#x27;; #关闭MySQL5.7对衍生表合并优化</span><br><span class="line"></span><br><span class="line">explain</span><br><span class="line">select * from (select user_id from orders where id = 1) as temp;</span><br><span class="line"></span><br><span class="line">set session optimizer_switch=&#x27;derived_merge=on&#x27;; #还原配置</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/50.png" alt="50"></p><h5 id="union-分union与union-all两种-若第二个select出现在union之后-则被标记为union-如果union被from子句的子查询包含-则第一个select会被标记为derived-union会针对相同的结果集进行去重-union-all不会进行去重处理"><a href="#union-分union与union-all两种-若第二个select出现在union之后-则被标记为union-如果union被from子句的子查询包含-则第一个select会被标记为derived-union会针对相同的结果集进行去重-union-all不会进行去重处理" class="headerlink" title="union:分union与union all两种,若第二个select出现在union之后,则被标记为union;如果union被from子句的子查询包含,则第一个select会被标记为derived;union会针对相同的结果集进行去重,union all不会进行去重处理"></a>union:分union与union all两种,若第二个select出现在union之后,则被标记为union;如果union被from子句的子查询包含,则第一个select会被标记为derived;union会针对相同的结果集进行去重,union all不会进行去重处理</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- union</span><br><span class="line">explain </span><br><span class="line">select * from (</span><br><span class="line">select id from products where price = 10</span><br><span class="line">union</span><br><span class="line">select id from orders where user_id in (1,2)</span><br><span class="line">union </span><br><span class="line">select id from users where name = &#x27;张三&#x27; ) as temp;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/51.png" alt="51"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- union all</span><br><span class="line">explain </span><br><span class="line">select * from (</span><br><span class="line">select id from products where price = 10</span><br><span class="line">union all</span><br><span class="line">select id from orders where user_id in (1,2)</span><br><span class="line">union all</span><br><span class="line">select id from users where name = &#x27;张三&#x27; ) as temp;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/52.png" alt="52"></p><h5 id="dependent-union：当union作为子查询时，其中第一个union为dependent-subquery，第二个union为dependent-union"><a href="#dependent-union：当union作为子查询时，其中第一个union为dependent-subquery，第二个union为dependent-union" class="headerlink" title="dependent union：当union作为子查询时，其中第一个union为dependent subquery，第二个union为dependent union"></a>dependent union：当union作为子查询时，其中第一个union为dependent subquery，第二个union为dependent union</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">explain </span><br><span class="line">select * from orders where id in (</span><br><span class="line">select id from products where price = 10</span><br><span class="line">union</span><br><span class="line">select id from orders where user_id = 2</span><br><span class="line">union </span><br><span class="line">select id from users where name = &#x27;张三&#x27; );</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/53.png" alt="53"></p><h5 id="union-result：如果两个查询中有相同的列，则会对这些列进行重复删除，只保留一个表中的列"><a href="#union-result：如果两个查询中有相同的列，则会对这些列进行重复删除，只保留一个表中的列" class="headerlink" title="union result：如果两个查询中有相同的列，则会对这些列进行重复删除，只保留一个表中的列"></a>union result：如果两个查询中有相同的列，则会对这些列进行重复删除，只保留一个表中的列</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select id from users</span><br><span class="line">union</span><br><span class="line">select id from products;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/54.png" alt="54"></p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/55.png" alt="55"></p><h4 id="table列：查询所涉及的表名。如果有多个表，将显示多行记录"><a href="#table列：查询所涉及的表名。如果有多个表，将显示多行记录" class="headerlink" title="table列：查询所涉及的表名。如果有多个表，将显示多行记录"></a>table列：查询所涉及的表名。如果有多个表，将显示多行记录</h4><h4 id="partitions列：表分区情况"><a href="#partitions列：表分区情况" class="headerlink" title="partitions列：表分区情况"></a>partitions列：表分区情况</h4><p>​查询语句所涉及的表的分区情况。具体来说，它会显示出查询语句在哪些分区上执行，以及是否使用了分区裁剪等信息。如果没有分区，该项为NULL。</p><h4 id="type列：查询所使用的访问类型"><a href="#type列：查询所使用的访问类型" class="headerlink" title="type列：查询所使用的访问类型"></a>type列：查询所使用的访问类型</h4><p>​效率从高到低分别为：<strong>system &gt; const &gt; eq_ref &gt; ref</strong> &gt; fulltext &gt; ref_or_null <strong>&gt; range &gt; index &gt; ALL，</strong>一般来说保证range级别，最好能达到ref级别</p><h5 id="system-const类型的一种特殊场景-查询的表只有一行记录的情况-并且该表使用的存储引擎的统计数据是精确的"><a href="#system-const类型的一种特殊场景-查询的表只有一行记录的情况-并且该表使用的存储引擎的统计数据是精确的" class="headerlink" title="system:const类型的一种特殊场景,查询的表只有一行记录的情况,并且该表使用的存储引擎的统计数据是精确的"></a>system:const类型的一种特殊场景,查询的表只有一行记录的情况,并且该表使用的存储引擎的统计数据是精确的</h5><p>InnoDb存储引擎的统计数据不是精确的，虽然只有一条数据但是type类型为ALL；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE t;</span><br><span class="line">CREATE TABLE t(i INT) ENGINE=InnoDb;</span><br><span class="line">INSERT INTO t VALUES(1);</span><br><span class="line">explain select * from t;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/56.png" alt="56"></p><p>Memory存储引擎的统计数据是精确的，所以当只有一条记录的时候type类型为system。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE tt;</span><br><span class="line">CREATE TABLE tt(i INT) ENGINE=memory;</span><br><span class="line">INSERT INTO tt VALUES(1);</span><br><span class="line">explain select * from tt;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/57.png" alt="57"></p><h5 id="const：基于主键或唯一索引查看一行，当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问转换成常量查询，效率高"><a href="#const：基于主键或唯一索引查看一行，当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问转换成常量查询，效率高" class="headerlink" title="const：基于主键或唯一索引查看一行，当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问转换成常量查询，效率高"></a>const：基于主键或唯一索引查看一行，当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问转换成常量查询，效率高</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select * from orders where id = 1;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/58.png" alt="58"></p><h5 id="eq-ref：基于主键或唯一索引连接两个表，对于每个索引键值，只有一条匹配记录，被驱动表的类型为’eq-ref’"><a href="#eq-ref：基于主键或唯一索引连接两个表，对于每个索引键值，只有一条匹配记录，被驱动表的类型为’eq-ref’" class="headerlink" title="eq_ref：基于主键或唯一索引连接两个表，对于每个索引键值，只有一条匹配记录，被驱动表的类型为’eq_ref’"></a>eq_ref：基于主键或唯一索引连接两个表，对于每个索引键值，只有一条匹配记录，被驱动表的类型为’eq_ref’</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select users.* from users inner join orders on users.id = orders.id;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/59.png" alt="59"></p><h5 id="ref：基于非唯一索引连接两个表或通过二级索引列与常量进行等值匹配，可能会存在多条匹配记录"><a href="#ref：基于非唯一索引连接两个表或通过二级索引列与常量进行等值匹配，可能会存在多条匹配记录" class="headerlink" title="ref：基于非唯一索引连接两个表或通过二级索引列与常量进行等值匹配，可能会存在多条匹配记录"></a>ref：基于非唯一索引连接两个表或通过二级索引列与常量进行等值匹配，可能会存在多条匹配记录</h5><p>1.关联查询，使用非唯一索引进行匹配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select users.* from users inner join orders on users.id = orders.user_id;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/60.png" alt="60"></p><p>2.简单查询，使用二级索引列匹配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select * from orders where user_id = 1;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/61.png" alt="61"></p><h5 id="range：使用非唯一索引扫描部分索引，比如使用索引获取某些范围区间的记录"><a href="#range：使用非唯一索引扫描部分索引，比如使用索引获取某些范围区间的记录" class="headerlink" title="range：使用非唯一索引扫描部分索引，比如使用索引获取某些范围区间的记录"></a>range：使用非唯一索引扫描部分索引，比如使用索引获取某些范围区间的记录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select * from orders where user_id &gt; 3;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/62.png" alt="62"></p><h5 id="index：扫描整个索引就能拿到结果，一般是二级索引，这种查询一般为使用覆盖索引（需优化，缩小数据范围）"><a href="#index：扫描整个索引就能拿到结果，一般是二级索引，这种查询一般为使用覆盖索引（需优化，缩小数据范围）" class="headerlink" title="index：扫描整个索引就能拿到结果，一般是二级索引，这种查询一般为使用覆盖索引（需优化，缩小数据范围）"></a>index：扫描整个索引就能拿到结果，一般是二级索引，这种查询一般为使用覆盖索引（需优化，缩小数据范围）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select user_id from orders;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/63.png" alt="63"></p><h5 id="all：扫描整个表进行匹配，即扫描聚簇索引树（需优化，添加索引优化）"><a href="#all：扫描整个表进行匹配，即扫描聚簇索引树（需优化，添加索引优化）" class="headerlink" title="all：扫描整个表进行匹配，即扫描聚簇索引树（需优化，添加索引优化）"></a>all：扫描整个表进行匹配，即扫描聚簇索引树（需优化，添加索引优化）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select * from users;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/64.png" alt="64"></p><h5 id="NULL：MySQL在优化过程中分解语句就已经可以获取到结果，执行时甚至不用访问表或索引。"><a href="#NULL：MySQL在优化过程中分解语句就已经可以获取到结果，执行时甚至不用访问表或索引。" class="headerlink" title="NULL：MySQL在优化过程中分解语句就已经可以获取到结果，执行时甚至不用访问表或索引。"></a>NULL：MySQL在优化过程中分解语句就已经可以获取到结果，执行时甚至不用访问表或索引。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain </span><br><span class="line">select min(id) from users;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/65.png" alt="65"></p><h4 id="possible-keys列：表示在查询中可能使用到某个索引或多个索引；如果没有选择索引，显示NULL"><a href="#possible-keys列：表示在查询中可能使用到某个索引或多个索引；如果没有选择索引，显示NULL" class="headerlink" title="possible_keys列：表示在查询中可能使用到某个索引或多个索引；如果没有选择索引，显示NULL"></a>possible_keys列：表示在查询中可能使用到某个索引或多个索引；如果没有选择索引，显示NULL</h4><h4 id="key列：表示在查询中实际使用的索引，如果没有使用索引，显示NULL。"><a href="#key列：表示在查询中实际使用的索引，如果没有使用索引，显示NULL。" class="headerlink" title="key列：表示在查询中实际使用的索引，如果没有使用索引，显示NULL。"></a>key列：表示在查询中实际使用的索引，如果没有使用索引，显示NULL。</h4><h4 id="key-len列：表示当优化器决定使用某个索引执行查询时，该索引记录的最大长度（主要使用在联合索引）"><a href="#key-len列：表示当优化器决定使用某个索引执行查询时，该索引记录的最大长度（主要使用在联合索引）" class="headerlink" title="key_len列：表示当优化器决定使用某个索引执行查询时，该索引记录的最大长度（主要使用在联合索引）"></a>key_len列：表示当优化器决定使用某个索引执行查询时，该索引记录的最大长度（主要使用在联合索引）</h4><p>联合索引可以通过这个值算出具体使用了索引中的哪些列。</p><p>使用单例索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain  </span><br><span class="line">select * from users where id = 1;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/66.png" alt="66"></p><p>使用联合索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain </span><br><span class="line">select * from users where name = &#x27;张三&#x27; and email = &#x27;zhangsan@example.com&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/67.png" alt="67"></p><p>计算规则：</p><ul><li><p>字符串：</p><p>char(n)：n个字节 </p><p>varchar(n)：如果是uft-8：3n+2字节，加的2个字节存储字符串长度。如果是utf8mb4：4n+2字节。</p></li><li><p>数值类型：</p><p>tinyint：1字节</p><p>smaillint：2字节</p><p>int：4字节</p><p>bigint：8字节</p></li><li><p>时间类型：</p><p>date：3字节</p><p>timestamp：4字节</p><p>datetime：8字节<br>字段如果为NULL，需要1个字节记录是否为NULL</p></li></ul><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/68.png" alt="68"></p><h4 id="ref列：表示将哪个字段或常量和key列所使用的字段进行比较。"><a href="#ref列：表示将哪个字段或常量和key列所使用的字段进行比较。" class="headerlink" title="ref列：表示将哪个字段或常量和key列所使用的字段进行比较。"></a>ref列：表示将哪个字段或常量和key列所使用的字段进行比较。</h4><p>当使用索引列等值查询时，与索引列进行等值匹配的对象信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 1.常量：</span><br><span class="line">explain </span><br><span class="line">select * from users where name = &#x27;张三&#x27; and email = &#x27;zhangsan@example.com&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/69.png" alt="69"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 2.字段:</span><br><span class="line">explain</span><br><span class="line">select users.* from users inner join orders on users.id = orders.id;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/70.png" alt="70"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 3.函数:</span><br><span class="line">explain</span><br><span class="line">select users.* from users inner join orders on users.id = trim(orders.id);</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/71.png" alt="71"></p><h4 id="rows列：全表扫描时表示需要扫描表的行数估计值；索引扫描时表示扫描索引的行数估计值；值越小越好（不是结果集中的行数）"><a href="#rows列：全表扫描时表示需要扫描表的行数估计值；索引扫描时表示扫描索引的行数估计值；值越小越好（不是结果集中的行数）" class="headerlink" title="rows列：全表扫描时表示需要扫描表的行数估计值；索引扫描时表示扫描索引的行数估计值；值越小越好（不是结果集中的行数）"></a>rows列：全表扫描时表示需要扫描表的行数估计值；索引扫描时表示扫描索引的行数估计值；值越小越好（不是结果集中的行数）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 1.全表扫描</span><br><span class="line">explain</span><br><span class="line">select * from orders where user_id &gt;= 3 and total_price = 25;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/72.png" alt="72"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 2.索引扫描</span><br><span class="line">explain</span><br><span class="line">select * from orders where user_id &gt; 3;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/73.png" alt="73"></p><h4 id="filtered列：表示符合查询条件的数据百分比。可以使用rows-filtered-x2F-100计算出与explain前一个表进行连接的行数。"><a href="#filtered列：表示符合查询条件的数据百分比。可以使用rows-filtered-x2F-100计算出与explain前一个表进行连接的行数。" class="headerlink" title="filtered列：表示符合查询条件的数据百分比。可以使用rows * filtered&#x2F;100计算出与explain前一个表进行连接的行数。"></a>filtered列：表示符合查询条件的数据百分比。可以使用rows * filtered&#x2F;100计算出与<strong>explain</strong>前一个表进行连接的行数。</h4><p>前一个表指 explain 中的id值比当前表id值小的表，id相同的时候指后执行的表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select users.* from users inner join orders on users.id = orders.id;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/74.png" alt="74"></p><h4 id="Extra列：SQL执行查询的一些额外信息"><a href="#Extra列：SQL执行查询的一些额外信息" class="headerlink" title="Extra列：SQL执行查询的一些额外信息"></a>Extra列：SQL执行查询的一些额外信息</h4><h5 id="Using-Index：使用非主键索引树就可以查询所需要的数据。一般是覆盖索引，即查询列都包含在辅助索引树叶子节点中，不需要回表查询。"><a href="#Using-Index：使用非主键索引树就可以查询所需要的数据。一般是覆盖索引，即查询列都包含在辅助索引树叶子节点中，不需要回表查询。" class="headerlink" title="Using Index：使用非主键索引树就可以查询所需要的数据。一般是覆盖索引，即查询列都包含在辅助索引树叶子节点中，不需要回表查询。"></a>Using Index：使用非主键索引树就可以查询所需要的数据。一般是覆盖索引，即查询列都包含在辅助索引树叶子节点中，不需要回表查询。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select user_id,id from orders where user_id = 1;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/75.png" alt="75"></p><h5 id="Using-where：不通过索引查询所需要的数据"><a href="#Using-where：不通过索引查询所需要的数据" class="headerlink" title="Using where：不通过索引查询所需要的数据"></a>Using where：不通过索引查询所需要的数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select * from orders where total_price = 100;</span><br><span class="line"></span><br><span class="line">explain</span><br><span class="line">select * from orders where user_id = 1 and total_price = 100;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/76.png" alt="76"></p><h5 id="Using-index-condition：表示查询列不被索引覆盖，where-条件中是一个索引范围查找，过滤完索引后回表找到所有符合条件的数据行。"><a href="#Using-index-condition：表示查询列不被索引覆盖，where-条件中是一个索引范围查找，过滤完索引后回表找到所有符合条件的数据行。" class="headerlink" title="Using index condition：表示查询列不被索引覆盖，where 条件中是一个索引范围查找，过滤完索引后回表找到所有符合条件的数据行。"></a>Using index condition：表示查询列不被索引覆盖，where 条件中是一个索引范围查找，过滤完索引后回表找到所有符合条件的数据行。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select * from orders where user_id &gt; 3;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/77.png" alt="77"></p><h5 id="Using-temporary：表示需要使用临时表来处理查询；"><a href="#Using-temporary：表示需要使用临时表来处理查询；" class="headerlink" title="Using temporary：表示需要使用临时表来处理查询；"></a>Using temporary：表示需要使用临时表来处理查询；</h5><p>1.total_price列无索引，需要创建一张临时表进行去重</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select distinct total_price from orders;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/78.png" alt="78"></p><p>2.name列有联合索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select distinct name from users;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/79.png" alt="79"></p><h5 id="Using-filesort：当查询中包含-order-by-操作而且无法利用索引完成的排序操作，数据较少时从内存排序，如果数据较多需要在磁盘中排序-需优化成索引排序。"><a href="#Using-filesort：当查询中包含-order-by-操作而且无法利用索引完成的排序操作，数据较少时从内存排序，如果数据较多需要在磁盘中排序-需优化成索引排序。" class="headerlink" title="Using filesort：当查询中包含 order by 操作而且无法利用索引完成的排序操作，数据较少时从内存排序，如果数据较多需要在磁盘中排序;需优化成索引排序。"></a>Using filesort：当查询中包含 order by 操作而且无法利用索引完成的排序操作，数据较少时从内存排序，如果数据较多需要在磁盘中排序;需优化成索引排序。</h5><p>1.total_price列无索引，无法通过索引进行排序。需要先保存total_price与对应的主键id，然后在排序total_price查找数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select total_price from orders order by total_price;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/80.png" alt="80"></p><p>2.name列有索引，因索引已经是排好序的所以直接读取就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select name from users order by name;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/81.png" alt="81"></p><h5 id="Select-tables-optimized-away：使用某些聚合函数（min-max）来访问某个索引值。"><a href="#Select-tables-optimized-away：使用某些聚合函数（min-max）来访问某个索引值。" class="headerlink" title="Select tables optimized away：使用某些聚合函数（min,max）来访问某个索引值。"></a>Select tables optimized away：使用某些聚合函数（min,max）来访问某个索引值。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">explain </span><br><span class="line">select min(id) from users;</span><br><span class="line"></span><br><span class="line">explain </span><br><span class="line">select min(password) from users;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/82.png" alt="82"></p><h3 id="索引优化最佳实践"><a href="#索引优化最佳实践" class="headerlink" title="索引优化最佳实践"></a>索引优化最佳实践</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 示例表</span><br><span class="line">CREATE TABLE `employees` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(24) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class="line">  `age` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;年龄&#x27;,</span><br><span class="line">  `position` varchar(20) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;职位&#x27;,</span><br><span class="line">  `hire_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;入职时间&#x27;,</span><br><span class="line">  `remark` varchar(255) DEFAULT NULL COMMENT &#x27;备注&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_name_age_position` (`name`,`age`,`position`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8 COMMENT=&#x27;员工记录表&#x27;;</span><br><span class="line"></span><br><span class="line">INSERT INTO `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) VALUES (2, &#x27;张三&#x27;, 18, &#x27;beijing&#x27;, &#x27;2023-06-11 20:51:35&#x27;, &#x27;测试&#x27;);</span><br><span class="line">INSERT INTO `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) VALUES (3, &#x27;张三&#x27;, 23, &#x27;shanghai&#x27;, &#x27;2023-06-11 20:51:35&#x27;, &#x27;测试2&#x27;);</span><br><span class="line">INSERT INTO `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) VALUES (1, &#x27;李四&#x27;, 20, &#x27;shanghai&#x27;, &#x27;2023-06-11 20:51:35&#x27;, &#x27;测试3&#x27;);</span><br><span class="line">INSERT INTO `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) VALUES (5, &#x27;王五&#x27;, 19, &#x27;beijing&#x27;, &#x27;2023-06-12 14:32:15&#x27;, NULL);</span><br><span class="line">INSERT INTO `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) VALUES (4, &#x27;赵六&#x27;, 22, &#x27;shenzheng&#x27;, &#x27;2023-06-12 14:33:00&#x27;, NULL);</span><br><span class="line">INSERT INTO `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) VALUES (6, &#x27;赵六&#x27;, 24, &#x27;beijing&#x27;, &#x27;2023-06-12 14:37:50&#x27;, NULL);</span><br><span class="line">INSERT INTO `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) VALUES (7, &#x27;刘七&#x27;, 20, &#x27;shanghai&#x27;, &#x27;2023-06-12 14:38:27&#x27;, NULL);</span><br><span class="line">INSERT INTO `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) VALUES (8, &#x27;刘七&#x27;, 22, &#x27;beijing&#x27;, &#x27;2023-06-12 14:38:41&#x27;, NULL);</span><br><span class="line">INSERT INTO `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) VALUES (9, &#x27;王九&#x27;, 9, &#x27;shanghai &#x27;, &#x27;2023-06-12 14:40:17&#x27;, NULL);</span><br></pre></td></tr></table></figure><h4 id="全值匹配"><a href="#全值匹配" class="headerlink" title="全值匹配"></a>全值匹配</h4><p>索引长度计算公式</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/calculate.png" alt="calculate"></p><p>MySQL全值匹配是指在使用复合索引时，查询条件要包含索引的所有列，才能最大程度地利用索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees WHERE name= &#x27;张三&#x27;; </span><br></pre></td></tr></table></figure><p>查看索引长度是74&#x3D;(3*24+2),可以算出联合索引中只使用了name前缀索引. </p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/83.png" alt="83"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees WHERE name= &#x27;张三&#x27; AND age = 18; </span><br></pre></td></tr></table></figure><p>查看索引长度是78&#x3D;(3*24+2)+4,可以算出联合索引中只使用了name和age前缀索引.</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/84.png" alt="84"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees WHERE name= &#x27;张三&#x27; AND age = 18 AND position =&#x27;beijing&#x27;; </span><br></pre></td></tr></table></figure><p>查看索引长度是140&#x3D;(3x24+2)+4+(3x20+2),可以算出联合索引中只使用了完整的联合索引</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/85.png" alt="85"></p><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p> 如果索引使用了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。</p><p><strong>——带头大哥不能死，中间兄弟不能断；</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- name 74   +age 78 + position 140</span><br><span class="line">EXPLAIN SELECT * FROM employees WHERE name= &#x27;张三&#x27; and age = 18 AND position = &#x27;beijing&#x27; ; </span><br><span class="line">-- 带头大哥不能死</span><br><span class="line">EXPLAIN SELECT * FROM employees WHERE age = 18 AND position = &#x27;beijing&#x27;;</span><br><span class="line">-- 中间兄弟不能断</span><br><span class="line">EXPLAIN SELECT * FROM employees WHERE name= &#x27;张三&#x27; AND position = &#x27;beijing&#x27;; </span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/86.png" alt="86"></p><h4 id="不在索引列上做任何操作-计算-函数-自动or手动-类型转换-导致索引失效而转向全表扫描"><a href="#不在索引列上做任何操作-计算-函数-自动or手动-类型转换-导致索引失效而转向全表扫描" class="headerlink" title="不在索引列上做任何操作(计算,函数,(自动or手动)类型转换),导致索引失效而转向全表扫描"></a>不在索引列上做任何操作(计算,函数,(自动or手动)类型转换),导致索引失效而转向全表扫描</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees WHERE name = &#x27;张三&#x27;;</span><br><span class="line">EXPLAIN SELECT * FROM employees WHERE left(name,3) = &#x27;张三&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/87.png" alt="87"></p><p>给hire_time增加一个普通索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `employees` ADD INDEX `idx_hire_time` (`hire_time`) USING BTREE ; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN select * from employees where date(hire_time) =&#x27;2018-09-30&#x27;; </span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/88.png" alt="88"></p><p>转化为日期范围查询，有可能会走索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN select * from employees where hire_time &gt;=&#x27;2018-09-30 00:00:00&#x27; and hire_time &lt;=&#x27;2018-09-30 23:59:59&#x27;; </span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/89.png" alt="89"></p><p>还原最初索引状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `employees` DROP INDEX `idx_hire_time`; </span><br></pre></td></tr></table></figure><h4 id="存储引擎不能使用索引中范围条件右边的列"><a href="#存储引擎不能使用索引中范围条件右边的列" class="headerlink" title="存储引擎不能使用索引中范围条件右边的列"></a>存储引擎不能使用索引中范围条件右边的列</h4><p>范围查询会使<strong>后面字段无序，</strong>造成部分索引失效。</p><p><strong>—— 范围之后全失效 ;</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees WHERE name= &#x27;张三&#x27; AND age = 18 AND position =&#x27;beijing&#x27;;</span><br><span class="line">EXPLAIN SELECT * FROM employees WHERE name= &#x27;张三&#x27; AND age &gt; 18 AND position =&#x27;beijing&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/90.png" alt="90"></p><h4 id="尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少-select-语句"><a href="#尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少-select-语句" class="headerlink" title="尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少 select * 语句"></a>尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少 select * 语句</h4><p><strong>—— 覆盖索引不写星;</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT name,age FROM employees WHERE name= &#x27;张三&#x27; AND age = 18 AND position =&#x27;beijing&#x27;; </span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/91.png" alt="91"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees WHERE name= &#x27;LiLei&#x27; AND age = 23 AND position =&#x27;manager&#x27;; </span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/92.png" alt="92"></p><h4 id="不等空值还有or，索引失效要少用"><a href="#不等空值还有or，索引失效要少用" class="headerlink" title="不等空值还有or，索引失效要少用"></a>不等空值还有or，索引失效要少用</h4><p><strong>mysql在使用不等于（！&#x3D;或者&lt;&gt;），not in ，not exists 的时候无法使用索引会导致全表扫描</strong></p><p><strong>&lt; 、 &gt; 、 &lt;&#x3D;、&gt;&#x3D; 这些;mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees WHERE name != &#x27;张三&#x27;; </span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/93.png" alt="93"></p><p><strong>is null,is not null 一般情况下也无法使用索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees WHERE name is null </span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/94.png" alt="94"></p><p><strong>少用or或in，用它查询时，mysql不一定使用索引，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引，详见范围查询优化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees WHERE name = &#x27;LiLei&#x27; or name = &#x27;HanMeimei&#x27;; </span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/95.png" alt="95"></p><h4 id="Like百分写最右"><a href="#Like百分写最右" class="headerlink" title="Like百分写最右"></a>Like百分写最右</h4><p><strong>—— Like百分写最右</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees WHERE name like &#x27;%三&#x27; </span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/96.png" alt="96"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees WHERE name like &#x27;张%&#x27; </span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/97.png" alt="97"></p><p>问题：解决like’%字符串%’索引不被使用的方法？</p><p>a）使用覆盖索引，查询字段必须是建立覆盖索引字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT name,age,position FROM employees WHERE name like &#x27;%Lei%&#x27;; </span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/98.png" alt="98"></p><p>b）如果不能使用覆盖索引则可能需要借助搜索引擎</p><h4 id="字符串不加单引号索引失效"><a href="#字符串不加单引号索引失效" class="headerlink" title="字符串不加单引号索引失效"></a>字符串不加单引号索引失效</h4><p><strong>—— VAR引号不可丢</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees WHERE name = &#x27;1000&#x27;; </span><br><span class="line">EXPLAIN SELECT * FROM employees WHERE name = 1000; </span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/99.png" alt="99"></p><h4 id="范围查询优化"><a href="#范围查询优化" class="headerlink" title="范围查询优化"></a>范围查询优化</h4><p>给年龄添加单值索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `employees` ADD INDEX `idx_age` (`age`) USING BTREE ; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from employees where age &gt;=1 and age &lt;=2000; </span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/100.png" alt="100"></p><p>​没走索引原因：mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引。比如这个例子，可能是由于单次数据量查询过大导致优化器最终选择不走索引;</p><p>优化方法：可以将大的范围拆分成多个小范围</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from employees where age &gt;=1 and age &lt;=1000;</span><br><span class="line">explain select * from employees where age &gt;=1001 and age &lt;=2000;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/101.png" alt="101"></p><p>还原最初索引状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `employees` DROP INDEX `idx_age`; </span><br></pre></td></tr></table></figure><h4 id="索引使用总结："><a href="#索引使用总结：" class="headerlink" title="索引使用总结："></a>索引使用总结：</h4><p><strong>全值匹配我最爱，最左前缀要遵守；</strong></p><p><strong>带头大哥不能死，中间兄弟不能断；</strong></p><p><strong>索引列上少计算，范围之后全失效；</strong></p><p><strong>Like百分写最右，覆盖索引不写星；</strong></p><p><strong>不等空值还有or，索引失效要少用；</strong></p><p><strong>VAR引号不可丢，SQL高级也不难！</strong></p><h3 id="trace工具用法"><a href="#trace工具用法" class="headerlink" title="trace工具用法"></a>trace工具用法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line">trace工具用法：</span><br><span class="line">mysql&gt; set session optimizer_trace=&quot;enabled=on&quot;,end_markers_in_json=on;  --开启trace</span><br><span class="line">mysql&gt; select * from employees where name &gt; &#x27;a&#x27; order by position;</span><br><span class="line">mysql&gt; SELECT * FROM information_schema.OPTIMIZER_TRACE;</span><br><span class="line"></span><br><span class="line">查看trace字段：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;steps&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;join_preparation&quot;: &#123;    --第一阶段：SQL准备阶段，格式化sql</span><br><span class="line">        &quot;select#&quot;: 1,</span><br><span class="line">        &quot;steps&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;expanded_query&quot;: &quot;/* select#1 */ select `employees`.`id` AS `id`,`employees`.`name` AS `name`,`employees`.`age` AS `age`,`employees`.`position` AS `position`,`employees`.`hire_time` AS `hire_time` from `employees` where (`employees`.`name` &gt; &#x27;a&#x27;) order by `employees`.`position`&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ] /* steps */</span><br><span class="line">      &#125; /* join_preparation */</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;join_optimization&quot;: &#123;    --第二阶段：SQL优化阶段</span><br><span class="line">        &quot;select#&quot;: 1,</span><br><span class="line">        &quot;steps&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;condition_processing&quot;: &#123;    --条件处理</span><br><span class="line">              &quot;condition&quot;: &quot;WHERE&quot;,</span><br><span class="line">              &quot;original_condition&quot;: &quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;,</span><br><span class="line">              &quot;steps&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;transformation&quot;: &quot;equality_propagation&quot;,</span><br><span class="line">                  &quot;resulting_condition&quot;: &quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;transformation&quot;: &quot;constant_propagation&quot;,</span><br><span class="line">                  &quot;resulting_condition&quot;: &quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;transformation&quot;: &quot;trivial_condition_removal&quot;,</span><br><span class="line">                  &quot;resulting_condition&quot;: &quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;</span><br><span class="line">                &#125;</span><br><span class="line">              ] /* steps */</span><br><span class="line">            &#125; /* condition_processing */</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;substitute_generated_columns&quot;: &#123;</span><br><span class="line">            &#125; /* substitute_generated_columns */</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;table_dependencies&quot;: [    --表依赖详情</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;table&quot;: &quot;`employees`&quot;,</span><br><span class="line">                &quot;row_may_be_null&quot;: false,</span><br><span class="line">                &quot;map_bit&quot;: 0,</span><br><span class="line">                &quot;depends_on_map_bits&quot;: [</span><br><span class="line">                ] /* depends_on_map_bits */</span><br><span class="line">              &#125;</span><br><span class="line">            ] /* table_dependencies */</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;ref_optimizer_key_uses&quot;: [</span><br><span class="line">            ] /* ref_optimizer_key_uses */</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;rows_estimation&quot;: [    --预估表的访问成本</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;table&quot;: &quot;`employees`&quot;,</span><br><span class="line">                &quot;range_analysis&quot;: &#123;</span><br><span class="line">                  &quot;table_scan&quot;: &#123;     --全表扫描情况</span><br><span class="line">                    &quot;rows&quot;: 10123,    --扫描行数</span><br><span class="line">                    &quot;cost&quot;: 2054.7    --查询成本</span><br><span class="line">                  &#125; /* table_scan */,</span><br><span class="line">                  &quot;potential_range_indexes&quot;: [    --查询可能使用的索引</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;index&quot;: &quot;PRIMARY&quot;,    --主键索引</span><br><span class="line">                      &quot;usable&quot;: false,</span><br><span class="line">                      &quot;cause&quot;: &quot;not_applicable&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;index&quot;: &quot;idx_name_age_position&quot;,    --辅助索引</span><br><span class="line">                      &quot;usable&quot;: true,</span><br><span class="line">                      &quot;key_parts&quot;: [</span><br><span class="line">                        &quot;name&quot;,</span><br><span class="line">                        &quot;age&quot;,</span><br><span class="line">                        &quot;position&quot;,</span><br><span class="line">                        &quot;id&quot;</span><br><span class="line">                      ] /* key_parts */</span><br><span class="line">                    &#125;</span><br><span class="line">                  ] /* potential_range_indexes */,</span><br><span class="line">                  &quot;setup_range_conditions&quot;: [</span><br><span class="line">                  ] /* setup_range_conditions */,</span><br><span class="line">                  &quot;group_index_range&quot;: &#123;</span><br><span class="line">                    &quot;chosen&quot;: false,</span><br><span class="line">                    &quot;cause&quot;: &quot;not_group_by_or_distinct&quot;</span><br><span class="line">                  &#125; /* group_index_range */,</span><br><span class="line">                  &quot;analyzing_range_alternatives&quot;: &#123;    --分析各个索引使用成本</span><br><span class="line">                    &quot;range_scan_alternatives&quot;: [</span><br><span class="line">                      &#123;</span><br><span class="line">                        &quot;index&quot;: &quot;idx_name_age_position&quot;,</span><br><span class="line">                        &quot;ranges&quot;: [</span><br><span class="line">                          &quot;a &lt; name&quot;      --索引使用范围</span><br><span class="line">                        ] /* ranges */,</span><br><span class="line">                        &quot;index_dives_for_eq_ranges&quot;: true,</span><br><span class="line">                        &quot;rowid_ordered&quot;: false,    --使用该索引获取的记录是否按照主键排序</span><br><span class="line">                        &quot;using_mrr&quot;: false,</span><br><span class="line">                        &quot;index_only&quot;: false,       --是否使用覆盖索引</span><br><span class="line">                        &quot;rows&quot;: 5061,              --索引扫描行数</span><br><span class="line">                        &quot;cost&quot;: 6074.2,            --索引使用成本</span><br><span class="line">                        &quot;chosen&quot;: false,           --是否选择该索引</span><br><span class="line">                        &quot;cause&quot;: &quot;cost&quot;</span><br><span class="line">                      &#125;</span><br><span class="line">                    ] /* range_scan_alternatives */,</span><br><span class="line">                    &quot;analyzing_roworder_intersect&quot;: &#123;</span><br><span class="line">                      &quot;usable&quot;: false,</span><br><span class="line">                      &quot;cause&quot;: &quot;too_few_roworder_scans&quot;</span><br><span class="line">                    &#125; /* analyzing_roworder_intersect */</span><br><span class="line">                  &#125; /* analyzing_range_alternatives */</span><br><span class="line">                &#125; /* range_analysis */</span><br><span class="line">              &#125;</span><br><span class="line">            ] /* rows_estimation */</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;considered_execution_plans&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;plan_prefix&quot;: [</span><br><span class="line">                ] /* plan_prefix */,</span><br><span class="line">                &quot;table&quot;: &quot;`employees`&quot;,</span><br><span class="line">                &quot;best_access_path&quot;: &#123;    --最优访问路径</span><br><span class="line">                  &quot;considered_access_paths&quot;: [   --最终选择的访问路径</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;rows_to_scan&quot;: 10123,</span><br><span class="line">                      &quot;access_type&quot;: &quot;scan&quot;,     --访问类型：为scan，全表扫描</span><br><span class="line">                      &quot;resulting_rows&quot;: 10123,</span><br><span class="line">                      &quot;cost&quot;: 2052.6,</span><br><span class="line">                      &quot;chosen&quot;: true,            --确定选择</span><br><span class="line">                      &quot;use_tmp_table&quot;: true</span><br><span class="line">                    &#125;</span><br><span class="line">                  ] /* considered_access_paths */</span><br><span class="line">                &#125; /* best_access_path */,</span><br><span class="line">                &quot;condition_filtering_pct&quot;: 100,</span><br><span class="line">                &quot;rows_for_plan&quot;: 10123,</span><br><span class="line">                &quot;cost_for_plan&quot;: 2052.6,</span><br><span class="line">                &quot;sort_cost&quot;: 10123,</span><br><span class="line">                &quot;new_cost_for_plan&quot;: 12176,</span><br><span class="line">                &quot;chosen&quot;: true</span><br><span class="line">              &#125;</span><br><span class="line">            ] /* considered_execution_plans */</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;attaching_conditions_to_tables&quot;: &#123;</span><br><span class="line">              &quot;original_condition&quot;: &quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;,</span><br><span class="line">              &quot;attached_conditions_computation&quot;: [</span><br><span class="line">              ] /* attached_conditions_computation */,</span><br><span class="line">              &quot;attached_conditions_summary&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;table&quot;: &quot;`employees`&quot;,</span><br><span class="line">                  &quot;attached&quot;: &quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;</span><br><span class="line">                &#125;</span><br><span class="line">              ] /* attached_conditions_summary */</span><br><span class="line">            &#125; /* attaching_conditions_to_tables */</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;clause_processing&quot;: &#123;</span><br><span class="line">              &quot;clause&quot;: &quot;ORDER BY&quot;,</span><br><span class="line">              &quot;original_clause&quot;: &quot;`employees`.`position`&quot;,</span><br><span class="line">              &quot;items&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;item&quot;: &quot;`employees`.`position`&quot;</span><br><span class="line">                &#125;</span><br><span class="line">              ] /* items */,</span><br><span class="line">              &quot;resulting_clause_is_simple&quot;: true,</span><br><span class="line">              &quot;resulting_clause&quot;: &quot;`employees`.`position`&quot;</span><br><span class="line">            &#125; /* clause_processing */</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;reconsidering_access_paths_for_index_ordering&quot;: &#123;</span><br><span class="line">              &quot;clause&quot;: &quot;ORDER BY&quot;,</span><br><span class="line">              &quot;steps&quot;: [</span><br><span class="line">              ] /* steps */,</span><br><span class="line">              &quot;index_order_summary&quot;: &#123;</span><br><span class="line">                &quot;table&quot;: &quot;`employees`&quot;,</span><br><span class="line">                &quot;index_provides_order&quot;: false,</span><br><span class="line">                &quot;order_direction&quot;: &quot;undefined&quot;,</span><br><span class="line">                &quot;index&quot;: &quot;unknown&quot;,</span><br><span class="line">                &quot;plan_changed&quot;: false</span><br><span class="line">              &#125; /* index_order_summary */</span><br><span class="line">            &#125; /* reconsidering_access_paths_for_index_ordering */</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;refine_plan&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;table&quot;: &quot;`employees`&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            ] /* refine_plan */</span><br><span class="line">          &#125;</span><br><span class="line">        ] /* steps */</span><br><span class="line">      &#125; /* join_optimization */</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;join_execution&quot;: &#123;    --第三阶段：SQL执行阶段</span><br><span class="line">        &quot;select#&quot;: 1,</span><br><span class="line">        &quot;steps&quot;: [</span><br><span class="line">        ] /* steps */</span><br><span class="line">      &#125; /* join_execution */</span><br><span class="line">    &#125;</span><br><span class="line">  ] /* steps */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结论：全表扫描的成本低于索引扫描，所以mysql最终选择全表扫描</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from employees where name &gt; &#x27;zzz&#x27; order by position;</span><br><span class="line">mysql&gt; SELECT * FROM information_schema.OPTIMIZER_TRACE;</span><br><span class="line"></span><br><span class="line">查看trace字段可知索引扫描的成本低于全表扫描，所以mysql最终选择索引扫描</span><br><span class="line"></span><br><span class="line">mysql&gt; set session optimizer_trace=&quot;enabled=off&quot;;    --关闭trace</span><br></pre></td></tr></table></figure><h2 id="SQL改写"><a href="#SQL改写" class="headerlink" title="SQL改写"></a>SQL改写</h2><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/102.jpg" alt="102"></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="创建student表"><a href="#创建student表" class="headerlink" title="创建student表"></a>创建student表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS student;</span><br><span class="line">CREATE TABLE student (</span><br><span class="line">  id int(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;序号&#x27;,</span><br><span class="line">  student_id INT NOT NULL COMMENT &#x27;学号&#x27;,</span><br><span class="line">  name varchar(20) COMMENT &#x27;姓名&#x27;,</span><br><span class="line">  department varchar(20) COMMENT &#x27;院系&#x27;,</span><br><span class="line">  remarks varchar(400) COMMENT &#x27;备注&#x27;,</span><br><span class="line">  PRIMARY KEY (id)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure><h4 id="创建scores表"><a href="#创建scores表" class="headerlink" title="创建scores表"></a>创建scores表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS scores;</span><br><span class="line">CREATE TABLE scores (</span><br><span class="line">   id INT NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT &#x27;序号&#x27;,</span><br><span class="line">   student_id INT NOT NULL COMMENT &#x27;学号&#x27;,</span><br><span class="line">   course_name VARCHAR(50) NOT NULL COMMENT &#x27;课程名称&#x27;,</span><br><span class="line">   score INT NOT NULL COMMENT &#x27;分数&#x27;,</span><br><span class="line">   remarks varchar(400) COMMENT &#x27;备注&#x27;</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure><h4 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student ADD index idx_name_department (name, department);</span><br></pre></td></tr></table></figure><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `student` (`name`,`student_id`,`department`,`remarks`) values (&#x27;刘零&#x27;,1,&#x27;美术&#x27;,&#x27;备注0&#x27;);</span><br><span class="line">INSERT INTO `student` (`name`,`student_id`,`department`,`remarks`) values (&#x27;郑一&#x27;,2,&#x27;土木&#x27;,&#x27;备注1&#x27;);</span><br><span class="line">INSERT INTO `student` (`name`,`student_id`,`department`,`remarks`) values (&#x27;吴二&#x27;,3,&#x27;数学&#x27;,&#x27;备注2&#x27;);</span><br><span class="line">INSERT INTO `student` (`name`,`student_id`,`department`,`remarks`) values (&#x27;张三&#x27;,4,&#x27;中文&#x27;,&#x27;备注3&#x27;);</span><br><span class="line">INSERT INTO `student` (`name`,`student_id`,`department`,`remarks`) values (&#x27;李四&#x27;,5,&#x27;英语&#x27;,&#x27;备注4&#x27;);</span><br><span class="line">INSERT INTO `student` (`name`,`student_id`,`department`,`remarks`) values (&#x27;王五&#x27;,6,&#x27;美术&#x27;,&#x27;备注5&#x27;);</span><br><span class="line">INSERT INTO `student` (`name`,`student_id`,`department`,`remarks`) values (&#x27;钱六&#x27;,7,&#x27;土木&#x27;,&#x27;备注6&#x27;);</span><br><span class="line">INSERT INTO `student` (`name`,`student_id`,`department`,`remarks`) values (&#x27;孙七&#x27;,8,&#x27;数学&#x27;,&#x27;备注7&#x27;);</span><br><span class="line">INSERT INTO `student` (`name`,`student_id`,`department`,`remarks`) values (&#x27;赵八&#x27;,9,&#x27;英语&#x27;,&#x27;备注8&#x27;);</span><br><span class="line">INSERT INTO `student` (`name`,`student_id`,`department`,`remarks`) values (&#x27;周九&#x27;,10,&#x27;数学&#x27;,&#x27;备注9&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-- 批量导数</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE v_name VARCHAR(20);</span><br><span class="line">  DECLARE v_department VARCHAR(200);</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line">DECLARE n INT DEFAULT 100000;</span><br><span class="line">DECLARE v_max_id INT DEFAULT 1;</span><br><span class="line">set autocommit = 0;</span><br><span class="line">select max(id) into v_max_id from student;</span><br><span class="line">REPEAT</span><br><span class="line">set i = i + 1;</span><br><span class="line">set v_max_id = v_max_id + 1;</span><br><span class="line">set v_name = CONCAT(&#x27;mock_name&#x27;,i);</span><br><span class="line">set v_department = CONCAT(&#x27;mock_department&#x27;,i);</span><br><span class="line">INSERT INTO `student` (`student_id`,`name`,`department`,`remarks`) values (v_max_id,v_name,v_department,&#x27;mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks&#x27;);</span><br><span class="line"></span><br><span class="line">INSERT INTO `scores` (`student_id`,`course_name`,`score`,`remarks`) values (v_max_id,CONCAT(&#x27;mock_Chinese&#x27;,i),RAND()*(100-50)+50,&#x27;mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks&#x27;);</span><br><span class="line">INSERT INTO `scores` (`student_id`,`course_name`,`score`,`remarks`) values (v_max_id,CONCAT(&#x27;mock_Math&#x27;,i),RAND()*(100-50)+50,&#x27;mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks&#x27;);</span><br><span class="line">INSERT INTO `scores` (`student_id`,`course_name`,`score`,`remarks`) values (v_max_id,CONCAT(&#x27;mock_English&#x27;,i),RAND()*(100-50)+50,&#x27;mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks_mock_remarks&#x27;);</span><br><span class="line"></span><br><span class="line">UNTIL i = n</span><br><span class="line">END REPEAT;</span><br><span class="line">COMMIT;</span><br><span class="line">set autocommit = 1;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="SQL优化最佳实践"><a href="#SQL优化最佳实践" class="headerlink" title="SQL优化最佳实践"></a>SQL优化最佳实践</h3><h4 id="避免使用select"><a href="#避免使用select" class="headerlink" title="避免使用select *"></a>避免使用select *</h4><p>阿里规范</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/103.png" alt="103"></p><p>原因分析：查看执行计划，select * 走全表扫描，没有用到任何索引，查询效率非常低；查询列都是索引列那么这些列被称为覆盖索引。这种情况下查询的相关字段都能走索引，索引查询的效率相对较高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN select * from student where name like &#x27;mock_name%&#x27;;--不走索引</span><br><span class="line">EXPLAIN select name, department from student where name like &#x27;mock_name%&#x27;;--走索引</span><br></pre></td></tr></table></figure><p>通过show warnings语句查看查询列*号替换成表所有字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN select * from student where name like &#x27;mock_name%&#x27;;--替换成表对应的字段</span><br><span class="line">SHOW WARNINGS;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/104.png" alt="104"></p><p>总结：</p><ul><li>查询时需要先将星号解析成表的所有字段然后在查询，<strong>增加查询解析器的成本</strong>；</li><li>select  * 查询一般<strong>不走覆盖索引</strong>会产生大量的回表查询；</li><li>在实际应用中我们通常只需要使用某几个字段，其他不需要使用的字段也查出来<strong>浪费CPU、内存资源</strong>；</li><li>文本数据、大字段数据数据传输<strong>增加网络消耗</strong>。</li></ul><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/105.jpg" alt="105"></p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/106.jpg" alt="106"></p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/107.jpg" alt="107"></p><h4 id="小表驱动大表"><a href="#小表驱动大表" class="headerlink" title="小表驱动大表"></a>小表驱动大表</h4><p>​小表驱动大表就是指用数据量较小、索引比较完备的表，然后使用其索引和条件对大表进行数据筛选，从而减少数据计算量，提高查询效率。比如说student表有30条数据，scores表有80w条数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 小表驱动大表</span><br><span class="line">EXPLAIN</span><br><span class="line">select * from student left join scores on student.id = scores.student_id;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/108.png" alt="108"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 大表驱动小表</span><br><span class="line">EXPLAIN</span><br><span class="line">select * from scores left join student on student.id = scores.student_id;</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/109.png" alt="109"></p><p>​Join Buffer（连接缓冲区）是优化器用于处理连接查询操作时的临时缓冲区。简单来说当我们需要比较两个或多个表的数据进行Join操作时，Join Buffer可以帮助MySQL临时存储结果，以减少磁盘读取和CPU负担，提高查询效率。需要注意的是每个join都有一个单独的缓冲区。</p><p>​Block nested-loop join（BNL算法）会将驱动表数据加载到join buffer里面，然后再批量与非驱动表进行匹配；如果驱动表数据量较大，join buffer无法一次性装载驱动表的结果集，将会分阶段与被驱动表进行批量数据匹配，会增加被驱动表的扫描次数，从而降低查询效率。所以开发中要遵守小表驱动大表的原则。</p><p>分阶段匹配过程如下：</p><p>1、先把student表前15条数据读到join buffer中。</p><p>2、然后用scores表去匹配join buffer中的前15条。</p><p>3、记录下匹配结果。</p><p>4、清空join buffer。</p><p>5、再把student表后15条读取join buffer中。</p><p>6、然后用scores表去匹配join buffer中的后15条。</p><p>7、记录下匹配结果。</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/110.jpg" alt="110"></p><h4 id="用连接查询代替子查询"><a href="#用连接查询代替子查询" class="headerlink" title="用连接查询代替子查询"></a>用连接查询代替子查询</h4><p>mysql需要在两张表以上获取数据的方式有两种：第一种通过连表查询获取，第二种通过子查询获取。</p><p>模拟一个真实场景,student表有30条数据,scores表有80w条数据,我们想查看学号小于15的学员各科分数信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE scores ADD index idx_student_id (student_id);</span><br><span class="line"></span><br><span class="line">EXPLAIN</span><br><span class="line">SELECT</span><br><span class="line">(SELECT student.NAME FROM student WHERE student.id = scores.student_id),</span><br><span class="line">scores.course_name,</span><br><span class="line">scores.score</span><br><span class="line">FROM</span><br><span class="line">scores;</span><br></pre></td></tr></table></figure><p>​因为子查询需要执行两次数据库查询，一次是外部查询，一次是嵌套子查询。因此，使用连接查询可以减少数据库查询的次数，提高查询的效率。</p><p>​连接查询可以更好地利用数据库索引，提高查询的性能。子查询通常会使用临时表或内存表，而连接查询可以直接利用表上的索引。这意味着连接查询可以更快地访问表中的数据，减少查询的资源消耗。</p><p>​对于大型数据集，使用连接查询通常比使用子查询更高效。子查询通常需要扫描整个表，而连接查询可以利用索引加速读取操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line">SELECT</span><br><span class="line">student.NAME,</span><br><span class="line">scores.course_name,</span><br><span class="line">scores.score</span><br><span class="line">FROM</span><br><span class="line">student inner JOIN scores ON student.id = scores.student_id;</span><br></pre></td></tr></table></figure><p>使用连接查询可以更快地执行查询操作，减少数据库的负载，提高查询的性能和效率。</p><h4 id="提升group-by的效率"><a href="#提升group-by的效率" class="headerlink" title="提升group by的效率"></a>提升group by的效率</h4><p>​创建索引：如果你使用group by的列没有索引，那么查询可能会变得很慢。因此，可以创建一个或多个适当的索引来加速查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select remarks from scores group by remarks;</span><br></pre></td></tr></table></figure><p>添加索引前：</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/111.png" alt="111"></p><p>添加索引后：</p><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/112.png" alt="112"></p><p>调整查询：查询的写法也会影响group by的效率。可以尝试不使用子查询或临时表，或者可以使用JOIN或EXISTS来代替IN子查询。</p><p>限制结果集的数量：如果你只需要查看一小部分结果,可以在查询中添加LIMIT子句,以便只返回一定数量的结果。</p><h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h4><p>​批量插入或批量删除数据，比如说现在需要将1w+数据插入到数据库，大家是一条一条处理还是批量操作呢？建议是批量操作，逐个处理会频繁的与数据库交互，损耗性能。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Order order: list)&#123;   </span><br><span class="line"> </span><br><span class="line">     orderMapper.insert(order):</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​在循环中逐条插入数据。该操作需要多次请求数据库,才能完成这批数据的插入。众所周知，我们在代码中，每次远程请求数据库，是会消耗一定性能的。而如果我们的代码需要请求多次数据库才能完成本次业务功能,势必会消耗更多的性能。那么如何优化呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正解</span></span><br><span class="line">orderMapper.insertBatch(List&lt;User&gt; users): </span><br></pre></td></tr></table></figure><p>提供一个批量插入数据的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into order(id,code,user_id)  values(123,&#x27;001&#x27;,100),(124,&#x27;002&#x27;,100),(125,&#x27;003&#x27;,101);</span><br></pre></td></tr></table></figure><p>这样只需要远程请求一次数据库，sql性能会得到提升，数据量越多，提升越大。</p><p>​但需要注意的是，不建议一次批量操作太多的数据，如果数据太多数据库响应也会很慢。批量操作需要把握一个度，建议每批数据尽量控制在500以内。如果数据多于500，则分多批次处理。</p><h4 id="使用limit"><a href="#使用limit" class="headerlink" title="使用limit"></a>使用limit</h4><ul><li>提高查询效率：一个查询返回成千上万的数据行，不仅占用了大量的系统资源，也会占用更多的网络带宽，影响查询效率。使用LIMIT可以限制返回的数据行数，减轻了系统负担，提高了查询效率。</li><li>避免过度提取数据：对于大型数据库系统，从数据库中提取大量的数据可能会导致系统崩溃。使用LIMIT可以限制提取的数据量，避免过度提取数据，保护系统不受影响。</li><li>优化分页查询：分页查询需要查询所有的数据才能进行分页处理，这会浪费大量的系统资源和时间。使用LIMIT优化分页查询可以只查询需要的数据行，缩短查询时间，减少资源的浪费。</li><li>简化查询结果：有时我们只需要一小部分数据来得出决策，而不是整个数据集。使用LIMIT可以使结果集更加精简和易于阅读和理解。</li></ul><p>限制行数非常有用，因为它可以提高查询性能、减少处理需要的时间，并且只返回我们关心的列。</p><p><strong>百万级表Limit翻页越往后越慢咋办</strong></p><p>为什么 offset 偏大之后 limit 查找会变慢？这需要了解 limit 操作是如何运作的，以下面这句查询为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name limit 10000,10</span><br></pre></td></tr></table></figure><p>这句 SQL 的执行逻辑是</p><ul><li>1.从数据表中读取第N条数据添加到数据集中</li><li>2.重复第一步直到 N &#x3D; 10000 + 10</li><li>3.根据 offset 抛弃前面 10000 条数</li><li>4.返回剩余的 10 条数据</li></ul><p><strong>第一次优化</strong></p><p>根据数据库这种查找的特性，就有了一种想当然的方法，利用自增索引（假设为id）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name where (id &gt;= 10000) limit 10</span><br></pre></td></tr></table></figure><p><strong>第二次优化</strong></p><p>​说起数据库查询优化，第一时间想到的就是索引，所以便有了第二次优化：先查找出需要数据的索引列（假设为 id），再通过索引列查找出需要的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Select * From table_name Where id in (Select id From table_name where ( user = xxx )) limit 10000, 10;</span><br><span class="line"></span><br><span class="line">select * from table_name where( user = xxx ) limit 10000,10</span><br></pre></td></tr></table></figure><p>相比较结果是（500w条数据）：第一条花费平均耗时约为第二条的 1&#x2F;3 左右。</p><p>同样是较大的 offset，第一条的查询更为复杂，为什么性能反而得到了提升？</p><p>这涉及到 mysql 主索引的数据结构 b+Tree ，这里不展开，基本原理就是：</p><ul><li>子查询只用到了索引列，没有取实际的数据，所以不涉及到磁盘IO，所以即使是比较大的 offset 查询速度也不会太差。</li><li>利用子查询的方式，把原来的基于 user 的搜索转化为基于主键（id）的搜索，主查询因为已经获得了准确的索引值，所以查询过程也相对较快。</li></ul><p><strong>第三次优化</strong></p><p>在数据量大的时候 in 操作的效率就不怎么样了，我们需要把 in 操作替换掉，使用 join 就是一个不错的选择。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name inner join ( select id from table_name where (user = xxx) limit 10000,10) b using (id)</span><br></pre></td></tr></table></figure><h4 id="用union-all代替union"><a href="#用union-all代替union" class="headerlink" title="用union all代替union"></a>用union all代替union</h4><ul><li>union all：获取所有数据但是数据不去重，包含重复数据；</li><li>union：获取所有数据且数据去重，不包含重复数据；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id,name,department from student</span><br><span class="line">union all</span><br><span class="line">select id,student_id,score from scores</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/113.png" alt="113"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id,name,department from student</span><br><span class="line">union</span><br><span class="line">select id,student_id,score from scores</span><br></pre></td></tr></table></figure><p><img src="/2099/01/01/MySQL%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/114.png" alt="114"></p><p>​那么union all与union如果当然它业务数据容许出现重复的记录，我们更推荐使用union all，因为union去重数据需要遍历、排序和比较，它更耗时，更消耗cpu资源，但是数据结果最完整;</p><h4 id="join的表不宜过多"><a href="#join的表不宜过多" class="headerlink" title="join的表不宜过多"></a>join的表不宜过多</h4><ul><li>查询效率下降：多表JOIN查询数据对比时间边长</li><li>系统负载增加：JOIN操作需要进行大量的计算，因此会导致系统负载增加。</li><li>维护难度加大：在一个连接了多个表的查询中，如果需要修改其中一个表的结构或内容，就可能会需要同时修改其他表的结构或内容。</li></ul><p>因此,在数据库设计时,应该尽量减少JOIN操作的使用频率,并且简化表之间的关系，以提高查询效率和系统的性能。</p><p>除上述优化之外，通常在建表还需要注意以下内容：</p><ul><li>控制索引数量</li><li>选择合理的字段类型</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SQL优化是提高数据库性能的重要方法，在实际开发中我们的SQL要尽量遵守以下几点原则，避免留下技术债：</p><ol><li>减少数据扫描</li><li>返回更少数据</li><li>减少交互次数</li><li>减少服务器CPU及内存开销</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八股文面试题</title>
      <link href="/2077/07/07/%E5%85%AB%E8%82%A1%E6%96%87%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2077/07/07/%E5%85%AB%E8%82%A1%E6%96%87%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="is-和-x3D-x3D-的区别"><a href="#is-和-x3D-x3D-的区别" class="headerlink" title="is 和 &#x3D;&#x3D; 的区别"></a>is 和 &#x3D;&#x3D; 的区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">c = d = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">e = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">is</span> d)</span><br><span class="line"><span class="built_in">print</span>(c == d)</span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">is</span> e)</span><br><span class="line"><span class="built_in">print</span>(c == e)</span><br><span class="line"></span><br><span class="line">output: <span class="literal">True</span> <span class="literal">True</span> <span class="literal">False</span> <span class="literal">True</span>    </span><br><span class="line">== 是比较操作符,只是判断对象的值（value）是否一致，而<span class="keyword">is</span> 则判断的是对象之间的身份（内存地址）是否一致.   </span><br></pre></td></tr></table></figure><h3 id="Python-的深浅拷贝"><a href="#Python-的深浅拷贝" class="headerlink" title="Python 的深浅拷贝"></a>Python 的深浅拷贝</h3><p>浅拷贝只成功”独立“拷贝了列表的外层，而列表的内层列表，还是共享的;<br>深拷贝使得两个列表完全独立开来，每一个列表的操作，都不会影响到另一个;</p><h3 id="filter、map、reduce-的作用"><a href="#filter、map、reduce-的作用" class="headerlink" title="filter、map、reduce 的作用"></a>filter、map、reduce 的作用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">filter</span> 函数用于过滤序列，它接收一个函数和一个序列，把函数作用在序列的每个元素上.</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">lst1 = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x&gt;<span class="number">2</span>, lst))</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> 函数传入一个函数和一个序列，并把函数作用到序列的每个元素上，返回一个可迭代对象</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">lst1 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x*<span class="number">2</span>, lst))</span><br><span class="line"></span><br><span class="line">reduce 函数用于递归计算，同样需要传入一个函数和一个序列，并把函数和序列元素的计算结果与下一个元素进行计算</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x + y, <span class="built_in">range</span>(<span class="number">101</span>))</span><br></pre></td></tr></table></figure><h3 id="re中match和search的区别"><a href="#re中match和search的区别" class="headerlink" title="re中match和search的区别"></a>re中match和search的区别</h3><p>match()函数只检测要匹配的字符是不是在 string 的开始位置匹配，没匹配到返回None；search()会扫描整个 string 查找匹配；</p><h3 id="面向对象中-new-和-init-区别"><a href="#面向对象中-new-和-init-区别" class="headerlink" title="面向对象中__new__ 和 __init__ 区别"></a>面向对象中<code>__new__</code> 和 <code>__init__</code> 区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__new__是在实例创建之前被调用的，因为它的任务就是创建实例然后返回该实例对象，是个静态方法。__init__是当实例对象创建完成后被调用的，然后设置对象属性的一些初始值，通常用在初始化一个类实例的时候，是一个实例方法</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、__new__至少要有一个参数 cls，代表当前类，此参数在实例化时由Python解释器自动识别。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、__new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，可以 <span class="keyword">return</span> 父类（通过<span class="built_in">super</span>(当前类名, cls)）__new__出来的实例，或者直接是 <span class="built_in">object</span> 的__new__出来的实例。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、__init__有一个参数 self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、如果__new__创建的是当前类的实例，会自动调用__init__函数，通过 <span class="keyword">return</span> 语句里面调用的__new__函数的第一个参数是 cls 来保证是当前类实例，如果是其他类的类名，；那么实际创建返回的就是其他类的实例，就不会调用当前类的__init__函数，也不会调用其他类的__init__函数;</span><br></pre></td></tr></table></figure><h3 id="zip-函数用法"><a href="#zip-函数用法" class="headerlink" title="zip 函数用法"></a>zip 函数用法</h3><p>将可迭代的对象作为参数,将对象中对应的元素打包成一个个元组,然后返回由这些元组组成的zip对象;以最短的序列为界限；需要使用list（）转换；</p><h3 id="列表推导式、字典推导式"><a href="#列表推导式、字典推导式" class="headerlink" title="列表推导式、字典推导式"></a>列表推导式、字典推导式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">列表推导式：[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">字典推导式：[k: random.randint(<span class="number">0</span>,<span class="number">10</span>) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure><p>迭代器和生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">迭代器：__iter__就是对象的一个特殊方法，它是迭代规则(iterator potocol)的基础。或者说，对象如果没有它，就不能返回迭代器，就没有<span class="built_in">next</span>()方法，就不能迭代。判断一个对象是否可迭代：</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(obj, Iterable))</span><br><span class="line"></span><br><span class="line">生成器：(i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)) 可通过<span class="built_in">next</span>()取值实质上还是调用对象的__next__()方法</span><br></pre></td></tr></table></figure><h3 id="read、readline、readlines-的区别"><a href="#read、readline、readlines-的区别" class="headerlink" title="read、readline、readlines 的区别"></a>read、readline、readlines 的区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">read 读取整个文件</span><br><span class="line">readline 读取下一行,使用生成器方法</span><br><span class="line">readlines 读取整个文件到一个迭代器以供我们遍历</span><br></pre></td></tr></table></figure><h3 id="二分法查找函数判断是否在序列中"><a href="#二分法查找函数判断是否在序列中" class="headerlink" title="二分法查找函数判断是否在序列中"></a>二分法查找函数判断是否在序列中</h3><p>必须是有序序列才可以使用二分查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">data,item</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        mid = n // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> data[mid] == item:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> data[mid] &gt; item:</span><br><span class="line">            <span class="keyword">return</span> binary_search(data[:mid], item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> binary_search(data[mid + <span class="number">1</span>:], item)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">66</span>, <span class="number">78</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">233</span>, <span class="number">250</span>, <span class="number">444</span>, <span class="number">890</span>]</span><br><span class="line">binary_search(lst, <span class="number">99</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非递归算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">data, item</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(data)</span><br><span class="line">    first = <span class="number">0</span></span><br><span class="line">    last = n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> first &lt;= last:</span><br><span class="line">        mid = (first + last)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> data[mid] == item:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> data[mid] &gt; item:</span><br><span class="line">            last = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            first = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="实例方法、类方法和静态方法"><a href="#实例方法、类方法和静态方法" class="headerlink" title="实例方法、类方法和静态方法"></a>实例方法、类方法和静态方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">实例(对象的绑定方法)方法</span><br><span class="line">定义：第一个参数必须是实例对象，该参数名一般约定为“self”，通过它来传递实例的属性和方法（也可以传类的属性和方法）</span><br><span class="line">调用：只能由实例对象调用</span><br><span class="line"></span><br><span class="line">类方法</span><br><span class="line">定义：使用装饰器@classmethod。第一个参数必须是当前类对象，该参数名一般约定为“cls”，通过它来传递类的属性和方法（不能传实例的属性和方法）</span><br><span class="line">调用：实例对象和类对象都可以调用</span><br><span class="line"></span><br><span class="line">静态方法</span><br><span class="line">定义：使用装饰器@staticmethod。参数随意，没有“self”和“cls”参数，但是方法体中不能使用类或实例的任何属性和方法</span><br><span class="line">调用：实例对象和类对象都可以调用</span><br></pre></td></tr></table></figure><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>反射就是通过字符串的形式，导入模块；通过字符串的形式，去模块寻找指定函数，并执行。<br>利用字符串的形式去对象（模块）中操作（查找&#x2F;获取&#x2F;删除&#x2F;添加）成员，一种基于字符串的事件驱动！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">people = NewClass(<span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;boy&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(people, <span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(people, <span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="built_in">setattr</span>(people, <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;girl&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(people, <span class="string">&#x27;male&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="metaclass-元类"><a href="#metaclass-元类" class="headerlink" title="metaclass 元类"></a>metaclass 元类</h3><p>先定义元类， 根据 metaclass 创建出类，所以：先定义metaclass，然后创建类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyMetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, class_name, class_parents, class_attr</span>):</span><br><span class="line">class_attr[<span class="string">&#x27;print&#x27;</span>] = <span class="string">&quot;this is my metaclass&#x27;s subclass %s&quot;</span> %class_name</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, class_name, class_parents, class_attr)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNewClass</span>(<span class="built_in">object</span>, metaclass=MyMetaclass):</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="sort-和-sorted-的区别"><a href="#sort-和-sorted-的区别" class="headerlink" title="sort 和 sorted 的区别"></a>sort 和 sorted 的区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sort() 是可变对象列表（<span class="built_in">list</span>）的方法，无参数，无返回值，sort() 会改变可变对象</span><br><span class="line"><span class="built_in">sorted</span>() 是产生一个新的对象。<span class="built_in">sorted</span>(L) 返回一个排序后的L,不改变原始的L，<span class="built_in">sorted</span>() 适用于任何可迭代容器</span><br></pre></td></tr></table></figure><h3 id="any和all"><a href="#any和all" class="headerlink" title="any和all"></a>any和all</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">all</span> 如果存在 <span class="number">0</span> Null <span class="literal">False</span> 返回 <span class="literal">False</span>，否则返回 <span class="literal">True</span>；</span><br><span class="line"><span class="built_in">any</span> 如果都是<span class="number">0</span>，<span class="literal">None</span>，<span class="literal">False</span>，Null 时，否则返回 <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="闭包和装饰器"><a href="#闭包和装饰器" class="headerlink" title="闭包和装饰器"></a>闭包和装饰器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果在一个内部函数里,对在外部作用域(但不是在全局作用域)的变量进行引用,那么内部函数就被认为是闭包(closure)</span><br><span class="line">特点：</span><br><span class="line">1.必须有一个内嵌函数</span><br><span class="line">2.内嵌函数必须引用外部函数中的变量</span><br><span class="line">3.外部函数的返回值必须是内嵌函数</span><br><span class="line"></span><br><span class="line">装饰器是一种特殊的闭包，就是在闭包的基础上传递了一个函数，然后覆盖原来函数的执行入口，以后调用这个函数的时候，就可以额外实现一些功能</span><br></pre></td></tr></table></figure><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p>yield 是用来生成迭代器的语法，在函数中，如果包含了yield，那么这个函数就是一个迭代器。当代码执行至 yield时，就会中断代码执行，直到程序调用next() 函数时，才会在上次 yield 的地方继续执行;</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">arr: <span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(arr) - i):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j + <span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序的思想：首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程称为一趟快速排序，之后再递归排序两边的数据;<br>挑选基准值：从数列中挑出一个元素，称为”基准”（pivot）</p><p>分割：重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（与基准值相等的数可以到任何一边）；在这个分割结束之后，对基准值的排序就已经完成。<br>递归排序子序列：递归地将小于基准值元素的子序列和大于基准值元素的子序列排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">arr, low, high</span>):</span><br><span class="line">    i = (low - <span class="number">1</span>)  <span class="comment"># 最小元素索引</span></span><br><span class="line">    pivot = arr[high]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(low, high):</span><br><span class="line">        <span class="comment"># 当前元素小于或等于pivot</span></span><br><span class="line">        <span class="keyword">if</span> arr[j] &lt;= pivot:</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">            arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">    arr[i + <span class="number">1</span>], arr[high] = arr[high], arr[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quicksort</span>(<span class="params">arr, low, high</span>):</span><br><span class="line">    <span class="keyword">if</span> low &lt; high:</span><br><span class="line">        pi = partition(arr, low, high)</span><br><span class="line">        quicksort(arr, low, pi - <span class="number">1</span>)</span><br><span class="line">        quicksort(arr, pi + <span class="number">1</span>, high)</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">20</span>]        </span><br><span class="line">quicksort(list1, <span class="number">0</span>, <span class="built_in">len</span>(list1) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中</span><br><span class="line">data = [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;, &#x27;four&#x27;]</span><br><span class="line">for i, enu in enumerate(data):</span><br><span class="line">print(i, enu)</span><br></pre></td></tr></table></figure><h3 id="json序列化时保留中文"><a href="#json序列化时保留中文" class="headerlink" title="json序列化时保留中文"></a>json序列化时保留中文</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dumps(dict_obj, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="简述断言"><a href="#简述断言" class="headerlink" title="简述断言"></a>简述断言</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Python 的断言就是检测一个条件，如果条件为真，它什么都不做；反之它触发一个带可选错误信息的AssertionError</span><br><span class="line">def testassert(n):</span><br><span class="line">assert n == 2, &quot;n is not 2&quot;</span><br><span class="line">print(&#x27;n is 2&#x27;)</span><br><span class="line">testassert(1)</span><br><span class="line"></span><br><span class="line">输出异常：AssertionError: n is not 2</span><br></pre></td></tr></table></figure><h3 id="正则-re-complie-的作用"><a href="#正则-re-complie-的作用" class="headerlink" title="正则 re.complie 的作用"></a>正则 re.complie 的作用</h3><p>re.compile 是将正则表达式编译成一个对象，加快速度，并重复使用</p><h2 id="综合网络篇"><a href="#综合网络篇" class="headerlink" title="综合网络篇"></a>综合网络篇</h2><h3 id="OSI七层协议"><a href="#OSI七层协议" class="headerlink" title="OSI七层协议"></a>OSI七层协议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">七层分为:应用层、表示层、会话层、传输层、网络层、数据链路层、物理层</span><br><span class="line">五层分为:应用层、传输层、网络层、数据链路层、物理层</span><br><span class="line"></span><br><span class="line">物理层：网线，电缆等物理设备</span><br><span class="line">数据链路层：Mac 地址</span><br><span class="line">网络层：IP 地址</span><br><span class="line">传输层：TCP，UDP 协议</span><br><span class="line">应用层：FTP 协议，Email，WWW 等</span><br></pre></td></tr></table></figure><h3 id="三次握手四次挥手"><a href="#三次握手四次挥手" class="headerlink" title="三次握手四次挥手"></a>三次握手四次挥手</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">都发生在传输层：TCP 标志位（位码）,有 6 种标示: SYN(synchronous 建立联机)、ACK(acknowledgement 确认) 、PSH(push 传送) 、FIN(finish 结束) 、RST(reset重置) 、URG(urgent 紧急) ;</span><br><span class="line">Sequence number(顺序号码)、 Acknowledge number(确认号码);</span><br><span class="line"></span><br><span class="line">第一次握手：主机 A 发送位码为 syn＝1,随机产生seqnumber=1234567 的数据包到服务器，并进入 SYN_SEND 状态，主机B由SYN=1 知道，A 要求建立联机；</span><br><span class="line"></span><br><span class="line">第二次握手：主机 B 收到请求后要确认联机信息，向A 发送ack number=(主机 A 的 seq+1),syn=1,ack=1,随机产生 seq=7654321 的包，并进入SYN_RECV状态；</span><br><span class="line"></span><br><span class="line">第三次握手：主机 A 收到后检查 ack number 是否正确，即第一次发送的seqnumber+1,以及位码 ack 是否为 1，若正确，主机 A 会再发送ack number=(主机 B 的 seq+1),ack=1，主机 B 收到后确认 seq 值与ack=1 则连接建立成功，两个主机均进入 ESTABLISHED 状态</span><br><span class="line"></span><br><span class="line">四次挥手：因为 TCP 连接是全双工的，因此每个方向都必须单独进行关闭。这个原则是当一方完成它的数据发送任务后就能发送一个 FIN 来终止这个方向的连接。收到一个 FIN 只意味着这一方向上没有数据流动，一个 TCP 连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭服务器 A 发送一个 FIN，用来关闭 A 到服务器 B 的数据传送。服务器B收到这个 FIN，它发回一个 ACK，确认序号为收到的序号加1。和SYN一样，一个 FIN 将占用一个序号服务器 B 关闭与服务器 A 的连接，发送一个 FIN 给服务器A服务器 A 发回 ACK 报文确认，并将确认序号设置为收到序号加1；</span><br></pre></td></tr></table></figure><h3 id="tcp和udp的区别"><a href="#tcp和udp的区别" class="headerlink" title="tcp和udp的区别"></a>tcp和udp的区别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TCP 和 UDP 都是 OSI 模型中运输层的协议。TCP 提供可靠的通信传输，而UDP 则常被用于广播和细节控制交给应用的通信传输。UDP 不提供复杂的控制机制，利用 IP 提供面向无连接的通信服务。TCP 充分实现了数据传输时各种控制功能，可以进行丢包的重发控制，还可以对次序乱掉的分包进行顺序控制</span><br><span class="line"></span><br><span class="line">TCP 应用：FTP 传输，点对点短信等</span><br><span class="line">UDP 应用：媒体流等</span><br></pre></td></tr></table></figure><h3 id="什么是socket"><a href="#什么是socket" class="headerlink" title="什么是socket"></a>什么是socket</h3><p>socket 是对 TCP&#x2F;IP 协议的封装，它的出现只是使得程序员更方便地使用 TCP&#x2F;IP 协议栈而已。socket 本身并不是协议，它是应用层与TCP&#x2F;IP 协议族通信的中间软件抽象层，是一组调用接口（TCP&#x2F;IP 网络的API 函数）；</p><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p>并行：多个 CPU 核心，不同的程序就分配给不同的 CPU 来运行。多个程序同时执行<br>并发：多个任务整体看上去是同时执行，在底层，两个任务被拆成了很多份，然后⼀个⼀个执行，站在更高的角度看来两个任务是同时在执行的</p><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>​简单来说，就是在多个线程访问某个方法或者对象的时候，不管通过任何的方式调用以及线程如何去交替执行。在程序中不做任何同步干预操作的情况下，这个方法或者对象的执行&#x2F;修改都能按照预期的结果来反馈。线程安全问题的具体表现在三个方面，原子性、有序性、可见性。</p><p>​线程安全指的是，我们写的某段代码，在多个线程同时执行这段代码时，不会产生混乱，依然能够得到正常的结果，比如i++，i初始化值为0，那么两个线程来同时执行这行代码，如果代码是线程安全的，那么最终的结果应该就是⼀个线程的结果为1，⼀个线程的结果为2，如果出现了两个线程的结果都为1，则表示这段代码是线程不安全的。所以线程安全，主要指的是⼀段代码在多个线程同时执行的情况下，能否得到正确的结果。</p><h3 id="简述-进程、线程、协程的区别以及应用场景"><a href="#简述-进程、线程、协程的区别以及应用场景" class="headerlink" title="简述 进程、线程、协程的区别以及应用场景"></a>简述 进程、线程、协程的区别以及应用场景</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">进程：是操作系统进行资源分配和调度运行的一个独立单位</span><br><span class="line">线程：是处理器(CPU)任务调度和执行的基本单位</span><br><span class="line">协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈</span><br><span class="line"></span><br><span class="line">多进程：密集 CPU 任务，需要充分使用多核 CPU 资源（服务器，大量的并行计算）的时候，用多进程。 缺陷：多个进程之间通信成本高，切换开销大</span><br><span class="line"></span><br><span class="line">多线程：密集 I/O 任务（网络 I/O，磁盘 I/O，数据库I/O）使用多线程合适。缺陷：同一个时间切片只能运行一个线程，不能做到高并行，但是可以做到高并发.</span><br><span class="line"></span><br><span class="line">协程：又称微线程，在单线程上执行多个任务，用函数切换，开销极小。不通过操作系统调度，没有进程、线程的切换开销。缺陷：单线程执行，处理密集CPU和本地磁盘 IO 的时候，性能较低。处理网络 I/O 性能还是比较高.</span><br><span class="line"></span><br><span class="line">多线程请求返回是无序的，哪个线程有数据返回就处理哪个线程，而协程返回的数据是有序的.</span><br></pre></td></tr></table></figure><h3 id="如何使用线程池和进程池"><a href="#如何使用线程池和进程池" class="headerlink" title="如何使用线程池和进程池"></a>如何使用线程池和进程池</h3><p>当并发的任务数远远超过了计算机的承受能力时,即无法一次性开启过多的进程数或线程数时,就应该用池的概念将开启的进程数或线程数限制在计算机可承受的范围内;通过multiprocessing.Pool;也可以使用 concurrent.futures 模块提供的功能来实现;</p><h3 id="进程之间如何通信"><a href="#进程之间如何通信" class="headerlink" title="进程之间如何通信"></a>进程之间如何通信</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;write(%s), 父进程为(%s)&quot;</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;Python&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Put %s to Queue&quot;</span> % i)</span><br><span class="line">        q.put(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;read(%s), 父进程为(%s)&quot;</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q.qsize()):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;read 从 Queue 获取到消息： %s&quot;</span> % q.get(<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(%s) start&quot;</span> % os.getpid())</span><br><span class="line">    q = Manager().Queue()</span><br><span class="line">    pw = Process(target=write, args=(q, ))</span><br><span class="line">    pr = Process(target=read, args=(q, ))</span><br><span class="line">    pw.start()</span><br><span class="line">    pr.start()</span><br><span class="line">    pw.join()</span><br><span class="line">    pr.terminate()</span><br></pre></td></tr></table></figure><p>Python 的 multiprocessing 模块包装了底层的机制，提供了Queue、Pipes 等多种方式来交换数据；</p><h3 id="进程锁和线程锁"><a href="#进程锁和线程锁" class="headerlink" title="进程锁和线程锁"></a>进程锁和线程锁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进程锁：是为了控制同一操作系统中多个进程访问一个共享资源，只是因为程序的独立性，各个进程是无法控制其他进程对资源的访问的，但是可以使用本地系统的信号量控制。信号量(Semaphore)，有时被称为信号灯，是在多线程环境下使用的一种设施，是可以用来保证两个或多个关键代码段不被并发调用。</span><br><span class="line"></span><br><span class="line">线程锁：当多个线程几乎同时修改一个共享数据的时候，需要进行同步控制，线程同步能够保证多个线程安全的访问竞争资源(全局内容)，最简单的同步机制就是使用互斥锁。某个线程要更改共享数据时，先将其锁定，此时资源的状态为锁定状态，其他线程就不能更改，直到该线程将资源状态改为非锁定状态，也就是释放资源，其他的线程才能再次锁定资源。互斥锁保证了每一次只有一个线程进入写入操作。从而保证了多线程下数据的安全性</span><br></pre></td></tr></table></figure><h3 id="threading-local-的作用"><a href="#threading-local-的作用" class="headerlink" title="threading.local 的作用"></a>threading.local 的作用</h3><p>ThreadLocal 叫做线程本地变量，ThreadLocal 在每一个变量中都会创建一个副本，每个线程都可以访问自己内部的副本变量，对其他线程时不可见的，修改之后也不会影响到其他线程</p><h3 id="LVS-是什么及作用"><a href="#LVS-是什么及作用" class="headerlink" title="LVS 是什么及作用"></a>LVS 是什么及作用</h3><p>LVS 是 Linux Virtual Server 的简写，意即Linux虚拟服务器,是一个虚拟的服务器集群系统,即负载均衡服务器</p><h3 id="Nginx的作用"><a href="#Nginx的作用" class="headerlink" title="Nginx的作用"></a>Nginx的作用</h3><p>1、反向代理 :是用来代理服务器的，代理要访问的目标服务器;</p><p>2、负载均衡 ；3、HTTP 服务器（包含动静分离）</p><p>4、正向代理:某些情况下，代理用户去访问服务器</p><h3 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h3><p>​RPC 是指远程过程调用，比如两台服务器 A，B，一个应用部署在A服务器上，想要调用 B 服务器上应用提供的函数&#x2F;方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据;底层则通过构造HTTP请求来调⽤远端的方法，所以，有⼀种说法是RPC协议是HTTP协议之上的⼀种协议.</p><h3 id="什么是CDN"><a href="#什么是CDN" class="headerlink" title="什么是CDN"></a>什么是CDN</h3><p>​CDN 的全称是 Content Delivery Network，即内容分发网络。CDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术;</p><h3 id="浏览器输入一个网址到展示页面的过程"><a href="#浏览器输入一个网址到展示页面的过程" class="headerlink" title="浏览器输入一个网址到展示页面的过程"></a>浏览器输入一个网址到展示页面的过程</h3><p>①浏览器通过 DNS 服务器查找到域名对应的 IP 地址；②浏览器给 IP 对应的 web 服务器发送 HTTP 请求<br>③web 服务器接收到 HTTP 请求后，返回响应给浏览器浏览器接收到响应后渲染页面。</p><h3 id="消息队列如何保证消息可靠传输"><a href="#消息队列如何保证消息可靠传输" class="headerlink" title="消息队列如何保证消息可靠传输"></a>消息队列如何保证消息可靠传输</h3><p>消息可靠传输代表了两层意思，既不能多也不能少：</p><ol><li>为了保证消息不多，也就是消息不能重复，也就是⽣产者不能重复⽣产消息，或者消费者不能重复消费消息；</li><li>⾸先要确保消息不多发，这个不常出现，也⽐较难控制，因为如果出现了多发，很⼤的原因是⽣产者⾃⼰的原因，如果要避免出现问题，就需要在消费端做控制；</li><li>要避免不重复消费，最保险的机制就是消费者实现幂等性，保证就算重复消费，也不会有问题，通过幂等性，也能解决⽣产者重复发送消息的问题；</li><li>消息不能少，意思就是消息不能丢失，⽣产者发送的消息，消费者⼀定要能消费到，对于这个问题，就要考虑两个方面：</li><li>⽣产者发送消息时，要确认broker确实收到并持久化了这条消息，⽐如RabbitMQ的confirm制，Kafka的ack机制都可以保证⽣产者能正确的将消息发送给broker；</li><li>broker要等待消费者真正确认消费到了消息时才删除掉消息，这⾥通常就是消费端ack机制，消费者接收到⼀条消息后，如果确认没问题了，就可以给broker发送⼀个ack，broker接收到ack后才会删除消息</li></ol><h3 id="uwsgi、uWSGI-和-WSGI-的区别"><a href="#uwsgi、uWSGI-和-WSGI-的区别" class="headerlink" title="uwsgi、uWSGI 和 WSGI 的区别"></a>uwsgi、uWSGI 和 WSGI 的区别</h3><p>uwsgi：是服务器和服务端应用程序的一种协议，规定了怎么把请求转发给应用程序和返回; uwsgi 是一种线路协议而不是通信协议，在此常用于在uWSGI 服务器与其他网络服务器的数据通信</p><p>uWSGI：是一个 Web 服务器，它实现了 WSGI 协议、uwsgi、http 等协议。Nginx 中 HttpUwsgiModule 的作用是与 uWSGI 服务器进行交换</p><p>WSGI：全称是 Web Server Gateway Interface，是一种描述web server 如何与web application 通信的规范。django，flask 等都遵循该协议</p><h3 id="实现接口幂等性"><a href="#实现接口幂等性" class="headerlink" title="实现接口幂等性"></a>实现接口幂等性</h3><p>1.唯⼀id。每次操作，都根据操作和内容⽣成唯⼀的id，在执⾏之前先判断id是否存在，如果不存在则执⾏后续操作，并且保存到数据库或者redis等。</p><p>2.服务端提供发送token的接口,业务调⽤接⼝前先获取token,然后调⽤业务接⼝请求时,把token携带过去,务器判断token是否存在redis中,存在表示第⼀次请求,可以继续执⾏业务,执⾏业务完成后，最后需要把redis中的token删除</p><p>3.建去重表。将业务中有唯⼀标识的字段保存到去重表，如果表中存在，则表示已经处理过了</p><p>4.版本控制。增加版本号，当版本号符合时，才能更新数据</p><p>5.状态控制。例如订单有状态已⽀付 未⽀付 ⽀付中 ⽀付失败，当处于未⽀付的时候才允许修改为⽀付中等</p><h2 id="数据库篇"><a href="#数据库篇" class="headerlink" title="数据库篇"></a>数据库篇</h2><h3 id="什么是数据库事务"><a href="#什么是数据库事务" class="headerlink" title="什么是数据库事务"></a>什么是数据库事务</h3><p>事务（Transaction）是并发控制的基本单位。所谓的事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位</p><h3 id="Mysql锁有哪些？"><a href="#Mysql锁有哪些？" class="headerlink" title="Mysql锁有哪些？"></a>Mysql锁有哪些？</h3><p>按锁粒度分类：行锁：锁某行数据，锁粒度最小，并发度高；表锁：锁整张表，锁粒度最⼤，并发度低</p><p>间隙锁：锁的是⼀个区间</p><p>共享锁：也就是读锁，⼀个事务给某⾏数据加了读锁，其他事务也可以读，但是不能写</p><p>排它锁：也就是写锁，⼀个事务给某⾏数据加了写锁，其他事务不能读，也不能写</p><p>乐观锁：并不会真正的去锁某行记录，⽽是通过⼀个版本号来实现的</p><p>悲观锁：上⾯所说的行锁、表锁等都是悲观锁<br>在事务的隔离级别实现中，就需要利用锁来解决幻读</p><h3 id="事务的基本特性和隔离级别"><a href="#事务的基本特性和隔离级别" class="headerlink" title="事务的基本特性和隔离级别"></a>事务的基本特性和隔离级别</h3><p><strong>事务基本特性ACID分别是：</strong><br>原子性：指的是⼀个事务中的操作要么全部成功，要么全部失败。<br>⼀致性：指的是数据库总是从⼀个⼀致性的状态转换到另外⼀个⼀致性的状态。比如A转账给B100块钱，假设A只有90块，⽀付之前我们数据库⾥的数据都是符合约束的,但是如果事务执⾏成功了,我们的数据库数据就破坏约束了,因此事务不能成功,这⾥我们说事务提供了⼀致性的保证<br>隔离性：指的是⼀个事务的修改在最终提交前，对其他事务是不可见的。<br>持久性：指的是⼀旦事务提交，所做的修改就会永久保存到数据库中。</p><p><strong>隔离性有4个隔离级别，分别是：</strong></p><p><strong>read uncommit 读未提交</strong>，可能会读到其他事务未提交的数据，也叫做脏读。⽤户本来应该读取到id&#x3D;1的⽤户age应该是10，结果读取到了其他事务还没有提交的事务，结果读取结果age&#x3D;20，这就是脏读。</p><p><strong>read commit 读已提交</strong>，两次读取结果不⼀致，叫做不可重复读。不可重复读解决了脏读的问题，他只会读取已经提交的事务。⽤户开启事务读取id&#x3D;1⽤户，查询到age&#x3D;10，再次读取发现结果&#x3D;20，在同⼀个事务⾥同⼀个查询读取到不同的结果叫做不可重复读。</p><p><strong>repeatable read 可重复复读</strong>，这是mysql的默认级别，就是每次读取结果都⼀样，但是有可能产⽣幻读。<br><strong>serializable 串行</strong>，⼀般是不会使⽤的，他会给每⼀⾏读取的数据加锁，会导致⼤量超时和锁竞争的问题。</p><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>MVCC(Multi-Version Concurrency Control ，多版本并发控制)指的就是在使⽤READ COMMITTD、REPEATABLE READ这两种隔离级别的事务在执行普通的SEELCT操作时访问记录的版本链的过程。可以使不同事务的读-写、写-读操作并发执⾏，从⽽提升系统性能。READCOMMITTD、REPEATABLE READ这两个隔离级别的⼀个很⼤不同就是：生成ReadView的时机不同，READ COMMITTD在每⼀次进行普通SELECT操作前都会⽣成⼀个ReadView，而REPEATABLE READ只在第⼀次进⾏普通SELECT操作前⽣成⼀个ReadView，之后的查询操作都重复使⽤这个<br>ReadView就好了</p><p>MVCC主要解决了三个问题:</p><p>①通过 MVCC 可以解决读写并发阻塞问题从而提升数据并发处理能力</p><p>②MVCC 采用了乐观锁的方式实现，降低了死锁的概率</p><p>③解决了一致性读的问题也就是事务启动时根据某个条件读取到的数据，直到事务结束时，再次执行相同条件，还是读到同一份数据，不会发生变化。</p><p>而我们在使用 MVCC 时一般会根据业务场景来选择组合搭配乐观锁或悲观锁。</p><h3 id="简述触发器、函数、视图、存储过程"><a href="#简述触发器、函数、视图、存储过程" class="headerlink" title="简述触发器、函数、视图、存储过程"></a>简述触发器、函数、视图、存储过程</h3><p>触发器：触发器是一个特殊的存储过程，它是数据库在insert、update、delete的时候自动执行的代码块</p><p>函数：数据库中提供了许多内置函数，还可以自定义函数，实现sql 逻辑</p><p>视图：视图是由查询结果形成的一张虚拟表，是表通过某种运算得到的一个投影</p><p>存储过程：把一段代码封装起来，当要执行这一段代码的时候，可以通过调用该存储过程来实现（经过第一次编译后再次调用不需要再次编译，比一个个执行sql 语句效率高）</p><h3 id="char-和-varchar-的区别"><a href="#char-和-varchar-的区别" class="headerlink" title="char 和 varchar 的区别"></a>char 和 varchar 的区别</h3><p>char：存储定长数据很方便,CHAR 字段上的索引效率很高,必须在括号里定义长度,可以有默认值,比如定义 char(10)<br>varchar：存储变长数据，但存储效率没有 CHAR 高，必须在括号里定义长度，可以有默认值</p><h3 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h3><p>实现快速定位数据的一种存储结构，其设计思想是以空间换时间。索引的原理：就是把无序的数据变成有序的查询</p><h3 id="常见索引种类"><a href="#常见索引种类" class="headerlink" title="常见索引种类"></a>常见索引种类</h3><p><strong>聚簇索引</strong>：创建一张表时会默认为主键创建聚簇索引，B+树将表中所有的数据组织起来，即数据就是索引主键所以在InnoDB里，主键索引也被称为聚簇索引，索引的叶子节点存的是整行数据</p><p><strong>二级索引</strong>：而除了聚簇索引以外的所有索引都称为二级索引，二级索引的叶子节点内容是主键的值</p><p><strong>单列索引</strong>：现在对name字段加了一个普通非唯一索引,那么name就是索引列,同时name这个索引也就是单列索引</p><p><strong>覆盖索引</strong>：需要查询的字段都在索引列中的情况就被称为覆盖索引</p><p><strong>联合索引</strong>：联合索引其实也是一样的，只不过索引页存的数据就多了一些索引列</p><p><strong>唯一索引</strong>：索引列的值必须唯一，但允许有空值。</p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>顾名思义是最左优先，以最左边的为起点任何连续的索引都能匹配上。如果没有第一列的话，直接访问第二列，那第二列肯定是无序的，直接访问后面的列就用不到索引了当创建(a,b,c)复合索引时，想要索引生效的话，只能使用 a和ab、ac和abc组合！</p><h3 id="常见索引数据结构和区别"><a href="#常见索引数据结构和区别" class="headerlink" title="常见索引数据结构和区别"></a>常见索引数据结构和区别</h3><p><strong>二叉树：</strong>每个节点最多有两个子节,大在右,小在左,数据随机性情况下树杈越明显；如果数据是按顺序依次进入树的高度则会很高(相当于一个链表结构)；极端的情况下 就是一个链表结构</p><p><strong>红黑树(平衡二叉树)：</strong>虽通过自旋平衡，子节点会自动分叉为2个分支，从而减少树的高度，当数据有序插入时比二叉树数据检索性能更佳. 但是如果数据量过大，节点个数就越多，树高度也会增高（也就是树的深度越深），增加磁盘I&#x2F;O次数，影响查询效率.</p><p><strong>B-树：</strong>它不再限制一个父节点中只能有两个子节点,而是允许 M 个子节点（M &gt; 2）。不仅如此，B树的一个节点可以存储多个元素，相比较于前面的那些二叉树数据结构又将整体的树高度降低了。B 树的节点可以包含有多个子节点，所以 B树是一棵多叉树，它的每一个节点包含的最多子节点数量的称为B树的阶；</p><p><strong>B+树：</strong>B+tree 是在B树基础上的一种优化，其更适合做存储索引结构。在 B+tree 中,非叶子节点上仅存储键值，不存储数据；而所有数据记录均存储在叶子节点上，并且数据是按照顺序排列的。此外在 B+tree 中各个数据页之间是通过双向链表连接的。</p><h3 id="MySQL中为什么会选用B-tree做索引结构"><a href="#MySQL中为什么会选用B-tree做索引结构" class="headerlink" title="MySQL中为什么会选用B+tree做索引结构"></a>MySQL中为什么会选用B+tree做索引结构</h3><p>① 非叶子节点上可以存储更多的键值（索引），相应的树的阶数（节点的子节点树）就会更大，树也就会变得更矮更胖。这样一来我们查找数据进行磁盘I&#x2F;O的次数就会大大减少，数据查询的效率也会更快。</p><p>②所有数据记录都有序存储在叶子节点上，就会使得范围查找，排序查找，分组查找以及去重查找变得异常简单。</p><p>③数据页之间、数据记录之间都是通过链表链接的，有了这个结构的支持就可以方便的在数据查询后进行升序或者降序操作。</p><p>④因为叶子节点存储所有数据，所以 B+树的全局扫描能力更强一些，因为它只需要扫描叶子节点。但是 B 树需要遍历整个树。</p><p>⑤在数据检索方面，由于所有的数据都存储在叶子节点，所以B+树的IO次数会更加稳定一些。</p><h3 id="数据库读写分离"><a href="#数据库读写分离" class="headerlink" title="数据库读写分离"></a>数据库读写分离</h3><p>读写分离，就是将数据库分为了主从库，一个主库用于写数据，多个从库完成读数据的操作，主从库之间通过某种机制进行数据的同步，是一种常见的数据库架构;</p><h3 id="MySQL-数据库备份命令"><a href="#MySQL-数据库备份命令" class="headerlink" title="MySQL 数据库备份命令"></a>MySQL 数据库备份命令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u 用户名 <span class="operator">-</span>p 数据库名 <span class="operator">&gt;</span> 导出的文件名</span><br></pre></td></tr></table></figure><h3 id="MySql存储引擎InnoDB与MyISAM有什么区别"><a href="#MySql存储引擎InnoDB与MyISAM有什么区别" class="headerlink" title="MySql存储引擎InnoDB与MyISAM有什么区别"></a>MySql存储引擎InnoDB与MyISAM有什么区别</h3><p>1.数据存储的方式不同,MyISAM中的数据和索引是分开存储的,而 InnoDB是把索引和数据存储在同一个文件里面。</p><p>2.对于事务的支持不同，MyISAM 不支持事务，但是每次查询都是原子的；而 InnoDB 支持ACID特性的事务处理</p><p>3.对于锁的支持不同，MyISAM 只支持表锁，而 InnoDB 可以根据不同的情况，支持行锁，表锁，间隙锁，临键锁</p><p>4.MyISAM 不支持外键，InnoDB 支持外键</p><h3 id="innoDB-如何解决幻读"><a href="#innoDB-如何解决幻读" class="headerlink" title="innoDB 如何解决幻读"></a>innoDB 如何解决幻读</h3><p>虽然 InnoDB 中通过间隙锁的方式解决了幻读问题，但是加锁之后一定会影响到并发性能，因此，如果对性能要求较高的业务场景中，可以把隔离级别设置成RC，这个级别中不存在间隙锁。</p><h3 id="Explain语句结果中各个字段分别表示什么"><a href="#Explain语句结果中各个字段分别表示什么" class="headerlink" title="Explain语句结果中各个字段分别表示什么"></a>Explain语句结果中各个字段分别表示什么</h3><table><thead><tr><th>列名</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>查询语句中每出现⼀个SELECT关键字，MySQL就会为它分配⼀个唯⼀的id值，某些⼦查询会被优化为join查询，那么出现的id会⼀样</td></tr><tr><td>select_type</td><td>SELECT关键字对应的那个查询的类型</td></tr><tr><td>table</td><td>表名</td></tr><tr><td>partitions</td><td>匹配的分区信息</td></tr><tr><td>type</td><td>针对单表的查询⽅式（全表扫描、索引）</td></tr><tr><td>possible_keys</td><td>可能⽤到的索引</td></tr><tr><td>key</td><td>实际使⽤到的索引</td></tr><tr><td>key_len</td><td>实际使⽤到的索引⻓度</td></tr><tr><td>ref</td><td>当使⽤索引列等值查询时，与索引列进⾏等值匹配的对象信息</td></tr><tr><td>rows</td><td>预估的需要读取的记录条数</td></tr><tr><td>filtered</td><td>某个表经过搜索条件过滤后剩余记录条数的百分⽐</td></tr><tr><td>Extra</td><td>⼀些额外的信息，⽐如排序等</td></tr></tbody></table><h3 id="索引在什么情况下会失效"><a href="#索引在什么情况下会失效" class="headerlink" title="索引在什么情况下会失效"></a>索引在什么情况下会失效</h3><p>①在索引列上做运算，比如使用函数，Mysql 在生成执行计划的时候,它是根据统计信息来判断是否要使用索引的。而在索引列上加函数运算，导致 Mysql 无法识别索引列，也就不会再走索引了。不过从 Mysql8 开始，增加了函数索引可以解决这个问题。</p><p>②在一个由多列构成的组合索引中，需要按照最左匹配法则，也就是从索引的最左列开始顺序检索，否则不会走索引。在组合索引中，索引的存储结构是按照索引列的顺序来存储的，因此在sql 中也需要按照这个顺序才能进行逐一匹配。否则 InnoDB 无法识别索引导致索引失效。</p><p>③当索引列存在隐式转化的时候， 比如索引列是字符串类型，但是在sql 查询中没有使用引号。那么 Mysql 会自动进行类型转化，从而导致索引失效</p><p>④在索引列使用不等于号、not 查询的时候,由于索引数据的检索效率非常低,因此Mysql 引擎会判断不走索引。</p><p>⑤使用 like 通配符匹配后缀%xxx 的时候，由于这种方式不符合索引的最左匹配原则，所以也不会走索引。但是反过来，如果通配符匹配的是前缀 xxx%，符合最左匹配，也会走索引。</p><p>⑥使用 or 连接查询的时候，or 语句前后没有同时使用索引，那么索引会失效。只有or 左右查询字段都是索引列的时候，才会生效。</p><h3 id="索引的优缺点，什么时候该用和不该用"><a href="#索引的优缺点，什么时候该用和不该用" class="headerlink" title="索引的优缺点，什么时候该用和不该用"></a>索引的优缺点，什么时候该用和不该用</h3><p><strong>优点：</strong>提高检索效率；降低排序成本，索引对应的字段是会有一个自动排序功能的，默认是升序asc。</p><p><strong>缺点:</strong></p><ol><li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</li><li>索引需要占用物理空间，数据量越大，占用空间越大</li><li>会降低表的增删改的效率，因为每次增删改索引，都需要进行动态维护</li></ol><p><strong>适合：</strong>较频繁的作为查询条件的字段应该创建索引</p><p><strong>不适合：</strong></p><ol><li>字段值的唯一性太差不适合单独做索引</li><li>更新非常频繁的字段不适合</li><li>不会出现在where句中的字段不适合。</li></ol><h3 id="MySQL查询慢如何优化"><a href="#MySQL查询慢如何优化" class="headerlink" title="MySQL查询慢如何优化"></a>MySQL查询慢如何优化</h3><ol><li>检查是否走了索引，如果没有则优化SQL利⽤索引</li><li>检查所利⽤的索引，是否是最优索引</li><li>检查所查字段是否都是必须的，是否查询了过多字段，查出了多余数据</li><li>检查表中数据是否过多，是否应该进⾏分库分表了</li><li>检查数据库实例所在机器的性能配置，是否太低，是否可以适当增加资源</li></ol><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>内连接：INNER JOIN， 可以省略 INNER 获取交集<br>左外连接：LEFT JOIN  获取左边的所有记录和交集<br>右外连接：RIGHT JOIN 获取右边的所有记录和交集<br>全外连接：FULL JOIN  获取并集；MySQL不支持；用得也比较少<br>交叉连接：CROSS JOIN 笛卡儿积</p><h3 id="雪花ID"><a href="#雪花ID" class="headerlink" title="雪花ID"></a>雪花ID</h3><p>第⼀位符号位固定为0，41位时间戳，10位workId，12位序列号，位数可以有不同实现。</p><p>优点：每个毫秒值包含的ID值很多，不够可以变动位数来增加，性能佳(依赖workId的实现);时间戳值在高位，中间是固定的机器码，自增的序列在低位，整个ID是趋势递增的。能够根据业务场景数据库节点布置灵活调整bit位划分，灵活度高。<br>缺点：强依赖于机器时钟，如果时钟回拨，会导致重复的ID⽣成，所以⼀般基于此的算法发现时钟回拨，都会抛异常处理，阻止ID生成，这可能导致服务不可用。</p><h2 id="Redis篇"><a href="#Redis篇" class="headerlink" title="Redis篇"></a>Redis篇</h2><h3 id="Redis有哪些数据结构"><a href="#Redis有哪些数据结构" class="headerlink" title="Redis有哪些数据结构"></a>Redis有哪些数据结构</h3><ol><li>字符串：可以⽤来做最简单的数据，可以缓存某个简单的字符串，也可以缓存某个json格式的字符串，Redis分布式锁的实现就利⽤了这种数据结构，还包括可以实现计数器、Session共享、分布式ID</li><li>哈希表：可以⽤来存储⼀些key-value对，更适合⽤来存储对象</li><li>列表：Redis的列表通过命令的组合，既可以当做栈，也可以当做队列来使⽤，可以⽤来缓存类似微信公号、微博等消息流数据</li><li>集合：和列表类似，也可以存储多个元素，但是不能重复，集合可以进⾏交集、并集、差集操作，从⽽可以实现类似，我和某⼈共同关注的⼈、朋友圈点赞等功能</li><li>有序集合：集合是⽆序的，有序集合可以设置顺序，可以⽤来实现排行榜功能</li></ol><h3 id="高效的找到redis中的某个KEY"><a href="#高效的找到redis中的某个KEY" class="headerlink" title="高效的找到redis中的某个KEY"></a>高效的找到redis中的某个KEY</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">con = redis.Redis()</span><br><span class="line">con.keys(pattern=<span class="string">&#x27;key*&#x27;</span>)  <span class="comment"># * 代表通配符</span></span><br></pre></td></tr></table></figure><h3 id="Redis持久化机制"><a href="#Redis持久化机制" class="headerlink" title="Redis持久化机制"></a>Redis持久化机制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RDB：Redis DataBase，在指定的时间间隔内将内存中的数据集快照写⼊磁盘，实际操作过程是fork⼀个子进程，先将数据集写⼊临时⽂件，写⼊成功后，再替换之前的⽂件，用⼆进制压缩存储。</span><br><span class="line">优点：1.整个Redis数据库将只包含⼀个文件 dump.rdb，⽅便持久化。容灾性好，⽅便备份。</span><br><span class="line">2.性能最大化，fork ⼦进程来完成写操作，让主进程继续处理命令，所以是 IO 最⼤化。使用单独子进程来进⾏持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能</span><br><span class="line">3.相对于数据集大时，比 AOF 的启动效率更高。</span><br><span class="line"></span><br><span class="line">缺点：1.数据安全性低。RDB 是间隔⼀段时间进行持久化，如果持久化之间 redis 发⽣故障，会发⽣数据丢失。</span><br><span class="line">2.由于RDB是通过fork⼦进程来协助完成数据持久化⼯作的，因此，如果当数据集较大时，可能会导致整个服务器停⽌服务几百毫秒，甚⾄是1秒钟。</span><br><span class="line"></span><br><span class="line">AOF：Append Only File，以日志的形式记录服务器所处理的每⼀个写、删除操作，查询操作不会记录，以⽂本的⽅式记录，可以打开⽂件看到详细的操作记录</span><br><span class="line">优点：</span><br><span class="line">1. 数据安全，Redis中提供了3中同步策略，即每秒同步、每修改同步和不同步。事实上，每秒同步也是异步完成的，其效率也是⾮常⾼的，所差的是⼀旦系统出现宕机现象，那么这⼀秒钟之内修改的数据将会丢失。而每修改同步，我们可以将其视为同步持久化，即每次发生的数据变化都会被⽴即记录到磁盘中。。</span><br><span class="line">2. 通过 append 模式写⽂件，即使中途服务器宕机也不会破坏已经存在的内容，可以通过 redis-check-aof ⼯具解决数据⼀致性问题。</span><br><span class="line">3. AOF 机制的 rewrite 模式。定期对AOF⽂件进⾏重写，以达到压缩的⽬的</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">1. AOF 文件比 RDB ⽂件大，且恢复速度慢。</span><br><span class="line">2. 数据集⼤的时候，比 rdb 启动效率低。</span><br><span class="line">3. 运⾏效率没有RDB高</span><br></pre></td></tr></table></figure><h3 id="Redis事务实现"><a href="#Redis事务实现" class="headerlink" title="Redis事务实现"></a>Redis事务实现</h3><p>1、事务开始<br>MULTI命令的执行，标识着⼀个事务的开始。MULTI命令会将客户端状态的 flags 属性中打开REDIS_MULTI 标识来完成的。</p><p>2、命令⼊队<br>当⼀个客户端切换到事务状态之后，服务器会根据这个客户端发送来的命令来执⾏不同的操作。如果客户端发送的命令为MULTI、EXEC、WATCH、DISCARD中的⼀个，⽴即执⾏这个命令，否则将命令放⼊⼀个事务队列⾥⾯，然后向客户端返回 QUEUED 回复</p><ul><li>如果客户端发送的命令为 EXEC、DISCARD、WATCH、MULTI 四个命令的其中⼀个，那么服务器⽴即执⾏这个命令。</li><li>如果客户端发送的是四个命令以外的其他命令，那么服务器并不⽴即执⾏这个命令。⾸先检查此命令的格式是否正确，如果不正确，服务器会在客户端状态（redisClient）的 flags 属性关闭 REDIS_MULTI 标识，并且返回错误信息给客户端。如果正确，将这个命令放⼊⼀个事务队列⾥⾯，然后向客户端返回 QUEUED 回复</li></ul><p>事务队列是按照FIFO的⽅式保存⼊队的命令</p><p>3、事务执⾏<br>客户端发送 EXEC 命令，服务器执⾏ EXEC 命令逻辑。</p><ul><li>如果客户端状态的 flags 属性不包含 REDIS_MULTI 标识，或者包含 REDIS_DIRTY_CAS 或者REDIS_DIRTY_EXEC 标识，那么就直接取消事务的执⾏。</li><li>否则客户端处于事务状态（flags 有 REDIS_MULTI 标识），服务器会遍历客户端的事务队列，然后执⾏事务队列中的所有命令，最后将返回结果全部返回给客户端；</li></ul><p>redis 不⽀持事务回滚机制，但是它会检查每⼀个事务中的命令是否错误。Redis 事务不⽀持检查那些程序员⾃⼰逻辑错误。例如对 String 类型的数据库键执⾏对 HashMap 类型的操作！</p><ul><li>WATCH 命令是⼀个乐观锁，可以为 Redis 事务提供 check-and-set （CAS）⾏为。可以监控⼀个或多个键，⼀旦其中有⼀个键被修改（或删除），之后的事务就不会执⾏，监控⼀直持续到EXEC命令。</li><li>MULTI命令⽤于开启⼀个事务，它总是返回OK。MULTI执⾏之后，客户端可以继续向服务器发送任意多条命令,这些命令不会⽴即被执⾏,⽽是被放到⼀个队列中,当EXEC命令被调⽤时，所有队列中的命令才会被执⾏。</li><li>EXEC：执⾏所有事务块内的命令。返回事务块内所有命令的返回值，按命令执⾏的先后顺序排列。当操作被打断时，返回空值 nil 。通过调⽤DISCARD，客户端可以清空事务队列，并放弃执⾏事务， 并且客户端会从事务状态中退出。</li><li>UNWATCH命令可以取消watch对所有key的监控。</li></ul><h3 id="Redis单线程为什么这么快"><a href="#Redis单线程为什么这么快" class="headerlink" title="Redis单线程为什么这么快"></a>Redis单线程为什么这么快</h3><ol><li>纯内存操作</li><li>核⼼是基于⾮阻塞的IO多路复⽤机制</li><li>单线程反⽽避免了多线程的频繁上下⽂切换带来的性能问题</li></ol><h3 id="Redis主从复制的核心原理"><a href="#Redis主从复制的核心原理" class="headerlink" title="Redis主从复制的核心原理"></a>Redis主从复制的核心原理</h3><p>通过执行slaveof命令或设置slaveof选项，让⼀个服务器去复制另⼀个服务器的数据。主数据库可以进行读写操作，当写操作导致数据变化时会自动将数据同步给从数据库。⽽从数据库⼀般是只读的，并接受主数据库同步过来的数据。⼀个主数据库可以拥有多个从数据库，⽽⼀个从数据库只能拥有⼀个主数据库。</p><p>全量复制：</p><ol><li>主节点通过bgsave命令fork⼦进程进⾏RDB持久化，该过程是⾮常消耗CPU、内存(⻚表复制)、硬盘IO的</li><li>主节点通过⽹络将RDB⽂件发送给从节点，对主从节点的带宽都会带来很⼤的消耗</li><li>从节点清空老数据、载⼊新RDB文件的过程是阻塞的,无法响应客户端的命令;如果从节点执行bgrewriteaof，也会带来额外的消耗</li></ol><p>部分复制：</p><ol><li>复制偏移量：执行复制的双⽅，主从节点，分别会维护⼀个复制偏移量offset</li><li>复制积压缓冲区：主节点内部维护了⼀个固定⻓度的、先进先出(FIFO)队列 作为复制积压缓冲区，当主从节点offset的差距过⼤超过缓冲区⻓度时，将⽆法执⾏部分复制，只能执⾏全量复制。</li><li>服务器运行ID(runid)：每个Redis节点，都有其运⾏ID，运⾏ID由节点在启动时⾃动⽣成，主节点会将⾃⼰的运⾏ID发送给从节点，从节点会将主节点的运⾏ID存起来。 从节点Redis断开重连的时候，就是根据运⾏ID来判断同步的进度：</li></ol><ul><li>如果从节点保存的runid与主节点现在的runid相同，说明主从节点之前同步过，主节点会继续尝试使⽤部分复制(到底能不能部分复制还要看offset和复制积压缓冲区的情况)；</li><li>如果从节点保存的runid与主节点现在的runid不同，说明从节点在断线前同步的Redis节点并不是当前的主节点，只能进行全量复制。</li></ul><h3 id="Redis集群策略"><a href="#Redis集群策略" class="headerlink" title="Redis集群策略"></a>Redis集群策略</h3><ol><li>主从模式：这种模式⽐较简单，主库可以读写，并且会和从库进⾏数据同步，这种模式下，客户端直接连主库或某个从库，但是但主库或从库宕机后，客户端需要⼿动修改IP，另外，这种模式也⽐较难进⾏扩容，整个集群所能存储的数据受到某台机器的内存容量，所以不可能⽀持特⼤数据量</li><li>哨兵模式：这种模式在主从的基础上新增了哨兵节点，但主库节点宕机后，哨兵会发现主库节点宕机，然后在从库中选择⼀个库作为进的主库，另外哨兵也可以做集群，从⽽可以保证但某⼀个哨兵节点宕机后，还有其他哨兵节点可以继续⼯作，这种模式可以⽐较好的保证Redis集群的⾼可⽤，但是仍然不能很好的解决Redis的容量上限问题。</li><li>Cluster模式：Cluster模式是⽤得⽐较多的模式，它⽀持多主多从，这种模式会按照key进⾏槽位的分配，可以使得不同的key分散到不同的主节点上，利⽤这种模式可以使得整个集群⽀持更⼤的数据容量，同时每个主节点可以拥有⾃⼰的多个从节点，如果该主节点宕机，会从它的从节点中选举⼀个新的主节点。</li></ol><p>对于这三种模式，如果Redis要存的数据量不⼤，可以选择哨兵模式，如果Redis要存的数据量⼤，并且需要持续的扩容，那么选择Cluster模式。</p><h3 id="缓存穿透、缓存击穿、缓存雪崩"><a href="#缓存穿透、缓存击穿、缓存雪崩" class="headerlink" title="缓存穿透、缓存击穿、缓存雪崩"></a>缓存穿透、缓存击穿、缓存雪崩</h3><p>缓存中存放的⼤多都是热点数据，⽬的就是防⽌请求可以直接从缓存中获取到数据，⽽不⽤访问Mysql。</p><ol><li>缓存雪崩：如果缓存中某⼀时刻⼤批热点数据同时过期，那么就可能导致⼤量请求直接访问Mysql了，解决办法就是在过期时间上增加⼀点随机值，另外如果搭建⼀个⾼可⽤的Redis集群也是防⽌缓存雪崩的有效⼿段</li><li>缓存穿透：假如某⼀时刻访问redis的⼤量key都在redis中不存在（⽐如⿊客故意伪造⼀些乱七⼋糟的key）那么也会给数据造成压⼒，这就是缓存穿透，解决⽅案是使⽤布隆过滤器，它的作⽤就是如果它认为⼀个key不存在，那么这个key就肯定不存在，所以可以在缓存之前加⼀层布隆过滤器来拦截不存在的key</li><li>缓存击穿：和缓存雪崩类似，缓存雪崩是⼤批热点数据失效，⽽缓存击穿是指某⼀个热点key突然失效，也导致了⼤量请求直接访问Mysql数据库，这就是缓存击穿，解决⽅案就是考虑这个热点key不设过期时间</li></ol><h3 id="如何避免缓存穿透、缓存击穿、缓存雪崩"><a href="#如何避免缓存穿透、缓存击穿、缓存雪崩" class="headerlink" title="如何避免缓存穿透、缓存击穿、缓存雪崩"></a>如何避免缓存穿透、缓存击穿、缓存雪崩</h3><p><strong>缓存雪崩：</strong>1.缓存数据的过期时间设置随机，防⽌同⼀时间⼤量数据过期现象发⽣；2.给每⼀个缓存数据增加相应的缓存标记，记录缓存是否失效，如果缓存标记失效，则更新数据缓存。3.缓存预热互斥锁</p><p><strong>缓存穿透：</strong>1.接⼝层增加校验，如⽤户鉴权校验，id做基础校验，id&lt;&#x3D;0的直接拦截；2.从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太⻓会导致正常情况也没法使⽤）。这样可以防⽌攻击⽤户反复⽤同⼀个id暴⼒攻击；3.采⽤布隆过滤器，将所有可能存在的数据哈希到⼀个⾜够⼤的 bitmap 中，⼀个⼀定不存在的数据会被这个 bitmap 拦截掉，从⽽避免了对底层存储系统的查询压⼒</p><p><strong>缓存击穿：</strong>设置热点数据永远不过期。加互斥锁</p><h3 id="布隆过滤器原理，优缺点"><a href="#布隆过滤器原理，优缺点" class="headerlink" title="布隆过滤器原理，优缺点"></a>布隆过滤器原理，优缺点</h3><p><strong>原理：</strong>当一个元素被加入集合时,通过 K 个散列函数将这个元素映射成一个位数组中的 K 个点,把它们置为 1。检索的时候,使用同样的方式去映射,只要看到每个映射的位置的值是不是1,就可以大概知道该元素是否存在集合中了。</p><p><strong>位图</strong>：int[10]，每个int类型的整数是4*8&#x3D;32个bit，则int[10]⼀共有320 bit，每个bit⾮0即1，初始化时都是0。</p><p><strong>添加数据时：</strong>将数据进⾏hash得到hash值，对应到bit位，将该bit改为1，hash函数可以定义多个，则 ⼀个数据添加会将多个（hash函数个数）bit改为1，多个hash函数的⽬的是减少hash碰撞的概率。</p><p><strong>查询数据：</strong>hash函数计算得到hash值，对应到bit中，如果有⼀个为0，则说明数据不在bit中，如果都为1，则该数据可能在bit中。</p><p>优点：</p><p>1.占⽤内存⼩；增加和查询元素的时间复杂度为：O(K), (K为哈希函数的个数，⼀般⽐较⼩)，与数据量⼤⼩⽆关哈希函数相互之间没有关系，⽅便硬件并⾏运算。</p><p>2.布隆过滤器不需要存储元素本身，在某些对保密要求⽐较严格的场合有很⼤优势 数据量很⼤时，布隆过滤器可以表示全集；使⽤同⼀组散列函数的布隆过滤器可以进⾏交、并、差运算</p><p>缺点：</p><p>1.误判率，即存在假阳性(False Position)，不能准确判断元素是否在集合中不能获取元素本身</p><p>2.⼀般情况下不能从布隆过滤器中删除元素</p><h3 id="Redis分布式锁底层是如何实现的"><a href="#Redis分布式锁底层是如何实现的" class="headerlink" title="Redis分布式锁底层是如何实现的"></a>Redis分布式锁底层是如何实现的</h3><p>分布式锁，是一种跨进程的跨机器节点的互斥锁，它可以用来保证多机器节点对于共享资源访问的排他性。</p><ol><li>⾸先利⽤setnx来保证：如果key不存在才能获取到锁，如果key存在，则获取不到锁；还可以用 expire 命令设置锁的失效时间，从而避免死锁问题</li><li>然后还要利⽤lua脚本来保证多个redis操作的原⼦性</li><li>同时还要考虑到锁过期，所以需要额外的⼀个看⻔狗定时任务来监听锁是否需要续约</li><li>同时还要考虑到redis节点挂掉后的情况，所以需要采⽤红锁的⽅式来同时向N&#x2F;2+1个节点申请锁，都申请到了才证明获取锁成功，这样就算其中某个redis节点挂掉了，锁也不能被其他客户端获取到</li></ol><h3 id="缓存过期策略"><a href="#缓存过期策略" class="headerlink" title="缓存过期策略"></a>缓存过期策略</h3><p><strong>定时过期：</strong>是指每个设置过期时间的 key 都需要创建一个定时器，到过期时间就会立即对 key 进行清除。该策略可以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量</p><p><strong>惰性过期：</strong>是指被动访问某个 key 的时候，才会判断 key 是否已过期，过期则清除。该策略可以最大化地节省CPU 资源，却对内存非常不友好。极端情况可能出现大量的过期 key 没有再次被访问，从而不会被清除，占用大量内存。</p><p><strong>定期过期：</strong>每隔⼀定的时间，会扫描⼀定数量的数据库的expires字典中⼀定数量的key，并清除其中已过期的key。该策略是⼀个折中⽅案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。</p><p><strong>分桶策略：</strong>定期过期的优化，将过期时间点相近的key放在⼀起，按时间扫描分桶。</p><p><strong>Redis 中同时使用了惰性过期和定期过期两种过期策略。</strong></p><h3 id="常见缓存淘汰算法"><a href="#常见缓存淘汰算法" class="headerlink" title="常见缓存淘汰算法"></a>常见缓存淘汰算法</h3><ol><li>LRU（LeastRecentlyUsed，最近最少使⽤），根据最近被使⽤的时间，离当前最远的数据优先被淘汰；</li><li>LFU（LeastFrequentlyUsed，最不经常使⽤），在⼀段时间内，缓存数据被使⽤次数最少的会被淘汰。</li><li>FIFO（First In First Out，先进先出），根据缓存被存储的时间，离当前最远的数据优先被淘汰；</li></ol><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>CAP理论是分布式领域中⾮常重要的⼀个指导理论，C（Consistency）表示强⼀致性，A（Availability）表示可⽤性，P（Partition Tolerance）表示分区容错性，CAP理论指出在⽬前的硬件条件下，⼀个分布式系统是必须要保证分区容错性的，⽽在这个前提下，分布式系统要么保证CP，要么保证AP，⽆法同时保证CAP。</p><p>分区容错性表示，⼀个系统虽然是分布式的，但是对外看上去应该是⼀个整体，不能由于分布式系统内部的某个结点挂点，或⽹络出现了故障，⽽导致系统对外出现异常。所以，对于分布式系统⽽⾔是⼀定要保证分区容错性的。</p><p>强⼀致性表示,⼀个分布式系统中各个结点之间能及时的同步数据,在数据同步过程中,是不能对外提供服务的，不然就会造成数据不⼀致,所以强⼀致性和可⽤性是不能同时满⾜的。可⽤性表示,⼀个分布式系统对外要保证可⽤。</p><h3 id="数据⼀致性模型有哪些"><a href="#数据⼀致性模型有哪些" class="headerlink" title="数据⼀致性模型有哪些"></a>数据⼀致性模型有哪些</h3><p><strong>强⼀致性：</strong>当更新操作完成之后，任何多个后续进程的访问都会返回最新的更新过的值，这种是对⽤户 最友好的，就是⽤户上⼀次写什么，下⼀次就保证能读到什么。根据 CAP理论，这种实现需要牺牲可⽤性。</p><p><strong>弱⼀致性：</strong>系统在数据写⼊成功之后，不承诺⽴即可以读到最新写⼊的值，也不会具体的承诺多久之后 可以读到。⽤户读到某⼀操作对系统数据的更新需要⼀段时间，我们称这段时间为“不⼀致性窗⼝”。</p><p><strong>最终⼀致性：</strong>最终⼀致性是弱⼀致性的特例，强调的是所有的数据副本，在经过⼀段时间的同步之后， 最终都能够达到⼀个⼀致的状态。因此，最终⼀致性的本质是需要系统保证最终数据能够达到⼀致，⽽ 不需要实时保证系统数据的强⼀致性。到达最终⼀致性的时间 ，就是不⼀致窗⼝时间，在没有故障发⽣的前提下，不⼀致窗⼝的时间主要受通信延迟，系统负载和复制副本的个数影响。最终⼀致性模型根据其提供的不同保证可以划分为更多的模型，包括因果⼀致性和会话⼀致性等</p><h3 id="Redis和MySQL如何保证数据一致性"><a href="#Redis和MySQL如何保证数据一致性" class="headerlink" title="Redis和MySQL如何保证数据一致性"></a>Redis和MySQL如何保证数据一致性</h3><p>1.先更新数据库，再更新缓存</p><ul><li>如果先更新数据库，再更新缓存，如果缓存更新失败，就会导致数据库和Redis 中的数据不一致。</li></ul><p>2.先删除缓存，再更新数据库</p><ul><li>如果是先删除缓存，再更新数据库，理想情况是应用下次访问 Redis 的时候，发现Redis里面的数据是空的就从数据库加载保存到 Redis 里面，那么数据是一致的。但是在极端情况下，由于删除 Redis 和更新数据库这两个操作并不是原子的，所以这个过程如果有其他线程来访问，还是会存在数据不一致问题。</li></ul><p>所以，如果需要在极端情况下仍然保证 Redis 和 Mysql 的数据一致性，就只能采用最终一致性方案。比如基于 RocketMQ 的可靠性消息通信，来实现最终一致性;还可以直接通过 Canal 组件，监控 Mysql 中 binlog 的日志，把更新后的数据同步到 Redis 里面。</p><p>因为这里是基于最终一致性来实现的，如果业务场景不能接受数据的短期不一致性，那我们可以通过读写锁的方式来保证强一致性;在数据更新的时候，其他任何请求都无法访问缓存中的数据，直到数据更新完毕，从而保证了数据的强一致性但是这种方式由于增加了锁的操作，所以在性能上会存在一定的影响。</p><h3 id="Redis和MySQL如何保证数据一致性-1"><a href="#Redis和MySQL如何保证数据一致性-1" class="headerlink" title="Redis和MySQL如何保证数据一致性"></a>Redis和MySQL如何保证数据一致性</h3><ol><li>先更新Mysql，再更新Redis，如果更新Redis失败，可能仍然不⼀致</li><li>先删除Redis缓存数据，再更新Mysql，再次查询的时候在将数据添加到缓存中，这种⽅案能解决1⽅案的问题，但是在⾼并发下性能较低，⽽且仍然会出现数据不⼀致的问题，⽐如线程1删除了Redis缓存数据，正在更新Mysql，此时另外⼀个查询再查询，那么就会把Mysql中⽼数据⼜查到Redis中</li><li>延时双删，步骤是：先删除Redis缓存数据，再更新Mysql，延迟⼏百毫秒再删除Redis缓存数据，这样就算在更新Mysql时，有其他线程读了Mysql，把⽼数据读到了Redis中，那么也会被删除掉，从⽽把数据保持⼀致。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPC介绍</title>
      <link href="/2023/03/31/RPC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/03/31/RPC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="RPC介绍"><a href="#RPC介绍" class="headerlink" title="RPC介绍"></a>RPC介绍</h3><p>RPC 的全称是 Remote Procedure Call ，是一种进程间通信方式。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即无论是调用本地接口&#x2F;服务的还是远程的接口&#x2F;服务，本质上编写的调用代码基本相同。</p><p>说起RPC，就不能不提到分布式，这个促使RPC诞生的领域。</p><p>假设你有一个计算器接口，Calculator模块，以及它的实现类CalculatorImpl，那么在系统还是<strong>单体应用</strong>时，你要调用Calculator的add方法来执行一个加运算，直接实例一个CalculatorImpl对象，然后调用add方法就行了，这其实就是非常普通的<strong>本地函数调用</strong>，因为在<strong>同一个地址空间</strong>，或者说在同一块内存，所以可以直接实现。</p><p><img src="/2023/03/31/RPC%E4%BB%8B%E7%BB%8D/1.png" alt="1"></p><p>现在，基于高性能和高可靠等因素的考虑，你决定将系统改造为分布式应用，将很多可以共享的功能都单独拎出来，比如上面说到的计算器，你单独把它放到一个服务里头，让别的服务去调用它。</p><p><img src="/2023/03/31/RPC%E4%BB%8B%E7%BB%8D/2.png" alt="2"></p><p>这下问题来了，服务A里头并没有CalculatorImpl这个类，那它要怎样调用服务B的CalculatorImpl的add方法呢？</p><p>有同学会说，可以模仿B&#x2F;S架构的调用方式呀，在B服务暴露一个Restful接口，然后A服务通过调用这个Restful接口来间接调用CalculatorImpl的add方法。</p><p>很好，这已经很接近RPC了，不过如果是这样，那每次调用时，是不是都需要写一串发起http请求的代码呢？比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = requests.get(<span class="string">&quot;URL&quot;</span>)　</span><br></pre></td></tr></table></figure><p>但是，两个问题：<br>1、http协议较为复杂，效率低，相对笨重</p><p>2、调用方式不像本地调用简单方便，让调用者感知不到远程调用的逻辑。</p><h3 id="RPC实现"><a href="#RPC实现" class="headerlink" title="RPC实现"></a>RPC实现</h3><h4 id="RPC实现原理"><a href="#RPC实现原理" class="headerlink" title="RPC实现原理"></a>RPC实现原理</h4><p>实际情况下，RPC很少用到http协议来进行数据传输，毕竟我只是想传输一下数据而已，何必动用到一个文本传输的应用层协议呢，所以一般会选择直接传输二进制数据</p><p>不管你用何种协议进行数据传输，一个完整的RPC过程，都可以用下面这张图来描述：</p><p><img src="/2023/03/31/RPC%E4%BB%8B%E7%BB%8D/3.png" alt="3"></p><p>以左边的Client端为例，Application就是rpc的调用方，Client Stub就是我们上面说到的代理对象，也就是那个看起来像是Calculator的实现类，其实内部是通过rpc方式来进行远程调用的代理对象，至于Client Run-time Library，则是实现远程调用的工具包，比如python的socket模块，最后通过底层网络实现实现数据的传输。</p><p>这个过程中最重要的就是<strong>序列化</strong>和<strong>反序列化</strong>了，因为数据传输的数据包必须是二进制的，你直接丢一个python对象过去，人家可不认识，你必须把python对象序列化为二进制格式，传给Server端，Server端接收到之后，再反序列化为python对象。</p><h4 id="Python实现RPC"><a href="#Python实现RPC" class="headerlink" title="Python实现RPC"></a>Python实现RPC</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rpyc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数主要是host, port</span></span><br><span class="line">conn = rpyc.connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line"><span class="comment"># test是服务端的那个以&quot;exposed_&quot;开头的方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    cResult = conn.root.cal(i)</span><br><span class="line">    <span class="built_in">print</span>(cResult)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"></span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">from</span> rpyc <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> rpyc.utils.server <span class="keyword">import</span> ThreadedServer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestService</span>(<span class="title class_ inherited__">Service</span>):</span><br><span class="line">    <span class="comment"># 对于服务端来说， 只有以&quot;exposed_&quot;打头的方法才能被客户端调用，所以要提供给客户端的方法都得加&quot;exposed_&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exposed_cal</span>(<span class="params">self, num</span>):</span><br><span class="line">        <span class="keyword">return</span>  num*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">sr = ThreadedServer(TestService, port=<span class="number">9999</span>, auto_register=<span class="literal">False</span>)</span><br><span class="line">sr.start()</span><br></pre></td></tr></table></figure><h4 id="GRPC框架"><a href="#GRPC框架" class="headerlink" title="GRPC框架"></a>GRPC框架</h4><p>目前流行的开源 RPC 框架还是比较多的，有阿里巴巴的 Dubbo、Facebook 的 Thrift、Google 的 gRPC、Twitter 的 Finagle 等。</p><p>gRPC：是 Google 公布的开源软件，基于最新的 HTTP 2.0 协议，并支持常见的众多编程语言。RPC 框架是基于 HTTP 协议实现的，底层使用到了 Netty 框架的支持。<br>Thrift：是 Facebook 的开源 RPC 框架，主要是一个跨语言的服务开发框架。用户只要在其之上进行二次开发就行，应用对于底层的 RPC 通讯等都是透明的。不过这个对于用户来说需要学习特定领域语言这个特性，还是有一定成本的。<br>Dubbo：是阿里集团开源的一个极为出名的 RPC 框架，在很多互联网公司和企业应用中广泛使用。协议和序列化框架都可以插拔是极其鲜明的特色。</p><p>以使用较为广泛的gRPC为例学习下RPC框架的使用</p><p>gRPC 是 Google 开放的一款 RPC (Remote Procedure Call) 框架，建立在 HTTP2 之上，使用 Protocol Buffers。</p><h5 id="protocol-buffers介绍"><a href="#protocol-buffers介绍" class="headerlink" title="protocol buffers介绍"></a>protocol buffers介绍</h5><p><a href="https://developers.google.com/protocol-buffers/">protocol buffers</a> 是 Google 公司开发的一种数据描述语言，采用简单的二进制格式，比 XML、JSON 格式体积更小，编解码效率更高。用于数据存储、通信协议等方面。</p><p>通过一个 <code>.proto</code> 文件，你可以定义你的数据的结构，并生成基于各种语言的代码。目前支持的语言很多，有 Python、golang、js、java 等等。</p><h5 id="gRPC简介"><a href="#gRPC简介" class="headerlink" title="gRPC简介"></a>gRPC简介</h5><p>有了 protocol buffers 之后，Google 进一步推出了 gRPC。通过 gRPC，我们可以在 <code>.proto</code> 文件中也一并定义好 service，让远端使用的 client 可以如同调用本地的 library 一样使用。</p><p><img src="/2023/03/31/RPC%E4%BB%8B%E7%BB%8D/4.png" alt="4"></p><p>可以看到 gRPC Server 是由 C++ 写的，Client 则分別是 Java 以及 Ruby，Server 跟 Client 端则是通过 protocol buffers 来信息传递。</p><p><strong>1.定义功能函数</strong></p><p>calculate.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求平方</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> math.sqrt(x)</span><br></pre></td></tr></table></figure><p><strong>2.创建 .proto 文件</strong></p><p>在这里描述我们要使用的 message 以及 service</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Number</span> &#123;</span><br><span class="line">    <span class="type">float</span> value = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Calculate</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> Square(Number) <span class="keyword">returns</span> (Number) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.生成 gRPC 类</strong></p><p>这部分可能是整个过程中最“黑盒子”的部分。我们将使用特殊工具自动生成类。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install grpcio grpcio<span class="literal">-tools</span></span><br><span class="line">python <span class="literal">-m</span> grpc_tools.protoc <span class="literal">-I</span>. <span class="literal">--python_out</span>=. <span class="literal">--grpc_python_out</span>=. calculate.proto</span><br></pre></td></tr></table></figure><p>你会看到生成来两个文件：</p><ul><li>calculate_pb2.py  —  包含 message(calculate_pb2.Number)</li><li>calculate_pb2_grpc.py  —  包含 server(calculate_pb2_grpc.CalculatorServicer) and client(calculate_pb2_grpc.CalculatorStub)</li></ul><p><strong>4.创建 gRPC 服务端</strong></p><p>server.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"><span class="keyword">import</span> calculate_pb2</span><br><span class="line"><span class="keyword">import</span> calculate_pb2_grpc</span><br><span class="line"><span class="keyword">import</span> calculate</span><br><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 CalculateServicer 继承自 calculate_pb2_grpc.CalculateServicer</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalculateServicer</span>(calculate_pb2_grpc.CalculateServicer):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Square</span>(<span class="params">self, request, context</span>):</span><br><span class="line">        response = calculate_pb2.Number()</span><br><span class="line">        response.value = calculate.square(request.value)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 gRPC server</span></span><br><span class="line">server = grpc.server(futures.ThreadPoolExecutor(max_workers=<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 利用 add_CalculateServicer_to_server 这个方法把上面定义的 CalculateServicer 加到 server 中</span></span><br><span class="line">calculate_pb2_grpc.add_CalculateServicer_to_server(CalculateServicer(), server)</span><br><span class="line"><span class="comment"># 让 server 跑在 port 50051 中</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Starting server. Listening on port 50051.&#x27;</span>)</span><br><span class="line">server.add_insecure_port(<span class="string">&#x27;[::]:50051&#x27;</span>)</span><br><span class="line">server.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为 server.start() 不会阻塞，添加睡眠循环以持续服务</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    server.stop(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>启动 gRPC server：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python server.py</span><br><span class="line">Starting server. Listening on port <span class="number">50051</span>.</span><br></pre></td></tr></table></figure><p><strong>5. 创建 gRPC 客户端</strong></p><p>client.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"><span class="keyword">import</span> calculate_pb2</span><br><span class="line"><span class="keyword">import</span> calculate_pb2_grpc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 gRPC channel，连接到 localhost:50051</span></span><br><span class="line">channel = grpc.insecure_channel(<span class="string">&#x27;localhost:50051&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建一个 stub (gRPC client)</span></span><br><span class="line">stub = calculate_pb2_grpc.CalculateStub(channel)</span><br><span class="line"><span class="comment"># 创建一个有效的请求消息 Number</span></span><br><span class="line">number = calculate_pb2.Number(value=<span class="number">16</span>)</span><br><span class="line"><span class="comment"># 带着 Number 去调用 Square</span></span><br><span class="line">response = stub.Square(number)</span><br><span class="line"><span class="built_in">print</span>(response.value)</span><br></pre></td></tr></table></figure><p>启动 gRPC client：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python client.py</span><br><span class="line"><span class="number">4.0</span></span><br></pre></td></tr></table></figure><p>最终的文件结构：</p><p><img src="/2023/03/31/RPC%E4%BB%8B%E7%BB%8D/5.png" alt="5"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>RPC 主要用于公司内部的服务调用，性能消耗低，传输效率高，实现复杂。</p><p>HTTP 主要用于对外的异构环境，浏览器接口调用，App 接口调用，第三方接口调用等。</p><p>RPC 使用场景(大型的网站，内部子系统较多、接口非常多的情况下适合使用 RPC)：</p><ul><li>长链接。不必每次通信都要像 HTTP 一样去 3 次握手，减少了网络开销。</li><li>注册发布机制。RPC 框架一般都有注册中心，有丰富的监控管理;发布、下线接口、动态扩展等，对调用方来说是无感知、统一化的操作。</li><li>安全性，没有暴露资源操作。</li><li>微服务支持。就是最近流行的服务化架构、服务化治理，RPC 框架是一个强力的支撑。</li></ul><h3 id="RPC没那么简单"><a href="#RPC没那么简单" class="headerlink" title="RPC没那么简单"></a>RPC没那么简单</h3><p><strong>要实现一个RPC不算难，难的是实现一个高性能高可靠的RPC框架。</strong></p><p>比如，既然是分布式了，那么一个服务可能有多个实例，你在调用时，要如何获取这些实例的地址呢？</p><p>这时候就需要一个服务注册中心，比如在Dubbo里头，就可以使用Zookeeper作为注册中心，在调用时，从Zookeeper获取服务的实例列表，再从中选择一个进行调用。</p><p>那么选哪个调用好呢？这时候就需要负载均衡了，于是你又得考虑如何实现复杂均衡，比如Dubbo就提供了好几种负载均衡策略。</p><p>这还没完，总不能每次调用时都去注册中心查询实例列表吧，这样效率多低呀，于是又有了缓存，有了缓存，就要考虑缓存的更新问题，blablabla……</p><p>你以为就这样结束了，没呢，还有这些：</p><ul><li>客户端总不能每次调用完都干等着服务端返回数据吧，于是就要支持异步调用；</li><li>服务端的接口修改了，老的接口还有人在用，怎么办？总不能让他们都改了吧？这就需要版本控制了；</li><li>服务端总不能每次接到请求都马上启动一个线程去处理吧？于是就需要线程池；</li><li>服务端关闭时，还没处理完的请求怎么办？是直接结束呢，还是等全部请求处理完再关闭呢？</li><li>……</li></ul><p>如此种种，都是一个优秀的RPC框架需要考虑的问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2023/03/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2023/03/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>常见的内部排序算法有：<strong>插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序</strong>等。用一张图概括：</p><p><img src="/2023/03/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1.png" alt="1"></p><h3 id="关于时间复杂度"><a href="#关于时间复杂度" class="headerlink" title="关于时间复杂度"></a>关于时间复杂度</h3><ol><li>平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</li><li>线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序；</li><li>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。希尔排序</li><li>线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。</li></ol><h3 id="关于稳定性"><a href="#关于稳定性" class="headerlink" title="关于稳定性"></a>关于稳定性</h3><ul><li>排序后 2 个相等键值的顺序和排序之前它们的顺序相同</li><li>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</li><li>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</li></ul><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li>n：数据规模</li><li>k：“桶”的个数</li><li>In-place：占用常数内存，不占用额外内存</li><li>Out-place：占用额外内存</li></ul><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>​冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><p><strong>算法步骤</strong></p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><strong>动图演示</strong></p><p><img src="/2023/03/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1.gif" alt="1"></p><p><strong>Python 代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(arr)-i):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>​选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><p><strong>算法步骤</strong></p><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ol><p><strong>动图演示</strong></p><p><img src="/2023/03/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/2.gif" alt="2"></p><p><strong>Python 代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selectionSort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr) - <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 记录最小数的索引</span></span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[minIndex]:</span><br><span class="line">                minIndex = j</span><br><span class="line">        <span class="comment"># i 不是最小数时，将 i 和最小数进行交换</span></span><br><span class="line">        <span class="keyword">if</span> i != minIndex:</span><br><span class="line">            arr[i], arr[minIndex] = arr[minIndex], arr[i]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>​插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p><strong>算法步骤</strong></p><ol><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。(如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。)</li></ol><p><strong>动图演示</strong></p><p><img src="/2023/03/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/3.gif" alt="3"></p><p><strong>Python 代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insertionSort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        preIndex = i-<span class="number">1</span></span><br><span class="line">        current = arr[i]</span><br><span class="line">        <span class="keyword">while</span> preIndex &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[preIndex] &gt; current:</span><br><span class="line">            arr[preIndex+<span class="number">1</span>] = arr[preIndex]</span><br><span class="line">            preIndex-=<span class="number">1</span></span><br><span class="line">        arr[preIndex+<span class="number">1</span>] = current</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><p><strong>算法步骤</strong></p><ol><li>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk &#x3D; 1；</li><li>按增量序列个数 k，对序列进行 k 趟排序；</li><li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ol><p><strong>Python 代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shellSort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    gap = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gap &lt; <span class="built_in">len</span>(arr) / <span class="number">3</span>:</span><br><span class="line">        gap = gap*<span class="number">3</span>+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap,<span class="built_in">len</span>(arr)):</span><br><span class="line">            temp = arr[i]</span><br><span class="line">            j = i-gap</span><br><span class="line">            <span class="keyword">while</span> j &gt;=<span class="number">0</span> <span class="keyword">and</span> arr[j] &gt; temp:</span><br><span class="line">                arr[j+gap]=arr[j]</span><br><span class="line">                j-=gap</span><br><span class="line">            arr[j+gap] = temp</span><br><span class="line">        gap = math.floor(gap/<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p><p>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p><ul><li>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；</li><li>自下而上的迭代；</li></ul><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。</p><p><strong>算法步骤</strong></p><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li>重复步骤 3 直到某一指针达到序列尾；</li><li>将另一序列剩下的所有元素直接复制到合并序列尾。</li></ol><p><strong>动图演示</strong></p><p><img src="/2023/03/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/4.gif" alt="4"></p><p><strong>Python 代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mergeSort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(arr)&lt;<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    middle = math.floor(<span class="built_in">len</span>(arr)/<span class="number">2</span>)</span><br><span class="line">    left, right = arr[<span class="number">0</span>:middle], arr[middle:]</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">left,right</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">        <span class="keyword">if</span> left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]:</span><br><span class="line">            result.append(left.pop(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right.pop(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> left:</span><br><span class="line">        result.append(left.pop(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> right:</span><br><span class="line">        result.append(right.pop(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p><p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</span><br></pre></td></tr></table></figure><p><strong>算法步骤</strong></p><p>① 从数列中挑出一个元素，称为 “基准”（pivot）;</p><p>② 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</p><p>③ 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</p><p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><p><strong>动图演示</strong></p><p><img src="/2023/03/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/5.gif" alt="5"></p><p><strong>Python 代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quickSort</span>(<span class="params">arr, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">    left = <span class="number">0</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(left,(<span class="built_in">int</span>, <span class="built_in">float</span>)) <span class="keyword">else</span> left</span><br><span class="line">    right = <span class="built_in">len</span>(arr)-<span class="number">1</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(right,(<span class="built_in">int</span>, <span class="built_in">float</span>)) <span class="keyword">else</span> right</span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        partitionIndex = partition(arr, left, right)</span><br><span class="line">        quickSort(arr, left, partitionIndex-<span class="number">1</span>)</span><br><span class="line">        quickSort(arr, partitionIndex+<span class="number">1</span>, right)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">arr, left, right</span>):</span><br><span class="line">    pivot = left</span><br><span class="line">    index = pivot+<span class="number">1</span></span><br><span class="line">    i = index</span><br><span class="line">    <span class="keyword">while</span>  i &lt;= right:</span><br><span class="line">        <span class="keyword">if</span> arr[i] &lt; arr[pivot]:</span><br><span class="line">            swap(arr, i, index)</span><br><span class="line">            index+=<span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    swap(arr,pivot,index-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> index-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">arr, i, j</span>):</span><br><span class="line">    arr[i], arr[j] = arr[j], arr[i]</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p><ol><li>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</li><li>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</li></ol><p>堆排序的平均时间复杂度为 Ο(nlogn)。</p><p><strong>算法步骤</strong></p><ol><li>创建一个堆 H[0……n-1]；</li><li>把堆首（最大值）和堆尾互换；</li><li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li><li>重复步骤 2，直到堆的尺寸为 1。</li></ol><p><strong>动图演示</strong></p><p><img src="/2023/03/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/6.gif" alt="6"></p><p><strong>Python 代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">buildMaxHeap</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(math.floor(<span class="built_in">len</span>(arr)/<span class="number">2</span>),-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        heapify(arr,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heapify</span>(<span class="params">arr, i</span>):</span><br><span class="line">    left = <span class="number">2</span>*i+<span class="number">1</span></span><br><span class="line">    right = <span class="number">2</span>*i+<span class="number">2</span></span><br><span class="line">    largest = i</span><br><span class="line">    <span class="keyword">if</span> left &lt; arrLen <span class="keyword">and</span> arr[left] &gt; arr[largest]:</span><br><span class="line">        largest = left</span><br><span class="line">    <span class="keyword">if</span> right &lt; arrLen <span class="keyword">and</span> arr[right] &gt; arr[largest]:</span><br><span class="line">        largest = right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> largest != i:</span><br><span class="line">        swap(arr, i, largest)</span><br><span class="line">        heapify(arr, largest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">arr, i, j</span>):</span><br><span class="line">    arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heapSort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">global</span> arrLen</span><br><span class="line">    arrLen = <span class="built_in">len</span>(arr)</span><br><span class="line">    buildMaxHeap(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)-<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">        swap(arr,<span class="number">0</span>,i)</span><br><span class="line">        arrLen -=<span class="number">1</span></span><br><span class="line">        heapify(arr, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>​计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><p><strong>动图演示</strong></p><p><img src="/2023/03/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/7.gif" alt="7"></p><p><strong>Python 代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">countingSort</span>(<span class="params">arr, maxValue</span>):</span><br><span class="line">    bucketLen = maxValue+<span class="number">1</span></span><br><span class="line">    bucket = [<span class="number">0</span>]*bucketLen</span><br><span class="line">    sortedIndex =<span class="number">0</span></span><br><span class="line">    arrLen = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(arrLen):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bucket[arr[i]]:</span><br><span class="line">            bucket[arr[i]]=<span class="number">0</span></span><br><span class="line">        bucket[arr[i]]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(bucketLen):</span><br><span class="line">        <span class="keyword">while</span> bucket[j]&gt;<span class="number">0</span>:</span><br><span class="line">            arr[sortedIndex] = j</span><br><span class="line">            sortedIndex+=<span class="number">1</span></span><br><span class="line">            bucket[j]-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p><ol><li>在额外空间充足的情况下，尽量增大桶的数量</li><li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li></ol><p>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p><p><strong>什么时候最快</strong></p><p>当输入的数据可以均匀的分配到每一个桶中。</p><p><strong>什么时候最慢</strong></p><p>当输入的数据被分配到了同一个桶中。</p><p><strong>Python 代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bucket_sort</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;桶排序&quot;&quot;&quot;</span></span><br><span class="line">    min_num = <span class="built_in">min</span>(s)</span><br><span class="line">    max_num = <span class="built_in">max</span>(s)</span><br><span class="line">    <span class="comment"># 桶的大小</span></span><br><span class="line">    bucket_range = (max_num-min_num) / <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="comment"># 桶数组</span></span><br><span class="line">    count_list = [ [] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s) + <span class="number">1</span>)]</span><br><span class="line">    <span class="comment"># 向桶数组填数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        count_list[<span class="built_in">int</span>((i-min_num)//bucket_range)].append(i)</span><br><span class="line">    s.clear()</span><br><span class="line">    <span class="comment"># 回填，这里桶内部排序直接调用了sorted</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> count_list:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">sorted</span>(i):</span><br><span class="line">            s.append(j)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == __main__ :</span><br><span class="line">    a = [<span class="number">3.2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>]</span><br><span class="line">    bucket_sort(a)</span><br><span class="line">    <span class="built_in">print</span>(a) <span class="comment"># [2, 3, 3.2, 4, 6, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p><strong>基数排序 vs 计数排序 vs 桶排序</strong></p><p>基数排序有两种方法：</p><p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><ul><li>基数排序：根据键值的每位数字来分配桶；</li><li>计数排序：每个桶只存储单一键值；</li><li>桶排序：每个桶存储一定范围的数值；</li></ul><p><strong>动图演示</strong></p><p><img src="/2023/03/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8.gif" alt="8"></p><p><strong>Python 代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RadixSort</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    i = <span class="number">0</span>                                    <span class="comment">#初始为个位排序</span></span><br><span class="line">    n = <span class="number">1</span>                                     <span class="comment">#最小的位数置为1（包含0）</span></span><br><span class="line">    max_num = <span class="built_in">max</span>(<span class="built_in">list</span>) <span class="comment">#得到带排序数组中最大数</span></span><br><span class="line">    <span class="keyword">while</span> max_num &gt; <span class="number">10</span>**n: <span class="comment">#得到最大数是几位数</span></span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        bucket = &#123;&#125; <span class="comment">#用字典构建桶</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            bucket.setdefault(x, []) <span class="comment">#将每个桶置空</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span>: <span class="comment">#对每一位进行排序</span></span><br><span class="line">            radix =<span class="built_in">int</span>((x / (<span class="number">10</span>**i)) % <span class="number">10</span>) <span class="comment">#得到每位的基数</span></span><br><span class="line">            bucket[radix].append(x) <span class="comment">#将对应的数组元素加入到相 #应位基数的桶中</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(bucket[k]) != <span class="number">0</span>: <span class="comment">#若桶不为空</span></span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> bucket[k]: <span class="comment">#将该桶中每个元素</span></span><br><span class="line">                    <span class="built_in">list</span>[j] = y <span class="comment">#放回到数组中</span></span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span>  <span class="built_in">list</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列</title>
      <link href="/2023/02/25/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/2023/02/25/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h3><p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p><h3 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h3><p>MQ全称为Message Queue 消息队列（MQ）是一种应用程序对应用程序的通信方法。MQ是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取队列中的消息。这样发布者和使用者都不用知道对方的存在。</p><p>我们先不管消息(Message)这个词，来看看队列(Queue)。队列是一种先进先出的数据结构。</p><p>消息队列可以简单理解为：把要传输的数据放在队列中。</p><h3 id="消息队列应用"><a href="#消息队列应用" class="headerlink" title="消息队列应用"></a>消息队列应用</h3><p>消息队列中间件是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。</p><p>利用一个经典外卖系统的消息推送给图解下MQ的意义</p><p><img src="/2023/02/25/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/1.png" alt="1"></p><h3 id="RabbitMQ介绍"><a href="#RabbitMQ介绍" class="headerlink" title="RabbitMQ介绍"></a>RabbitMQ介绍</h3><p>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现.RabbitMQ是一款基于AMQP协议的消息中间件,它能够在应用之间提供可靠的消息传输。在易用性,扩展性,高可用性上表现优秀。使用消息中间件利于应用之间的解耦，生产者（客户端）无需知道消费者（服务端）的存在。而且两端可以使用不同的语言编写，大大提供了灵活性。</p><h4 id="关键词说明"><a href="#关键词说明" class="headerlink" title="关键词说明"></a>关键词说明</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Broker：消息队列服务器实体。 </span><br><span class="line">Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。 </span><br><span class="line">Queue：消息队列载体，每个消息都会被投入到一个或多个队列。 </span><br><span class="line">Binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。 </span><br><span class="line">Routing Key：路由关键字，exchange根据这个关键字进行消息投递。 </span><br><span class="line">vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。 </span><br><span class="line">producer：消息生产者，就是投递消息的程序。 </span><br><span class="line">consumer：消息消费者，就是接受消息的程序。 </span><br><span class="line">channel：消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。</span><br></pre></td></tr></table></figure><h4 id="消息队列运行机制"><a href="#消息队列运行机制" class="headerlink" title="消息队列运行机制"></a>消息队列运行机制</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、客户端连接到消息队列服务器，打开一个channel</span><br><span class="line">2、客户端声明一个exchange，并设置相关属性</span><br><span class="line">3、客户端声明一个queue，并设置相关属性</span><br><span class="line">4、客户端使用routing key，在exchange和queue之间建立好绑定关系</span><br><span class="line">5、客户端投递消息到exchange</span><br><span class="line">6、exchange接收到消息后，就根据消息的key和已经设置的binding，将消息投递到一个或多个队列里</span><br><span class="line"><span class="section"># 注:在声明一个队列后，如果将其持久化，则下次不需要进行声明，因为该队列已经在rabbitMQ中了！！！</span></span><br></pre></td></tr></table></figure><h4 id="exchange类型"><a href="#exchange类型" class="headerlink" title="exchange类型"></a>exchange类型</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、direct交换机(关键字模式)</span><br><span class="line"><span class="code">特点：依据key进行投递 </span></span><br><span class="line"><span class="code">    例如绑定时设置了routing_key为”hello”，那么客户端提交的消息，只有设置了key为”hello”的才会投递到队列。</span></span><br><span class="line"><span class="code">2、topic交换机(关键字模糊匹配模式/通配符)</span></span><br><span class="line"><span class="code">特点：对key模式匹配后进行投递，符号”#”匹配一个或多个词，符号” * ”匹配一个词 </span></span><br><span class="line"><span class="code">例如”abc.#”匹配”abc.def.ghi”，”abc.*”只匹配”abc.def”。</span></span><br><span class="line"><span class="code">3、fanout交换机(发布订阅模式)</span></span><br><span class="line"><span class="code">特点：不需要key，采取广播模式，一个消息进来时，投递到与该交换机绑定的所有队列</span></span><br></pre></td></tr></table></figure><h4 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当客户端从队列中取出消息之后，可能需要一段时间才能处理完成，如果在这个过程中，客户端出错了,异常退出了，而数据还没有处理完成,那么非常不幸,这段数据就丢失了,因为rabbitmq默认会把此消息标记为已完成，然后从队列中移除，</span><br><span class="line"></span><br><span class="line">消息确认是客户端从rabbitmq中取出消息，并处理完成之后，会发送一个ack告诉rabbitmq，消息处理完成，当rabbitmq收到客户端的获取消息请求之后，或标记为处理中，当再次收到ack之后，才会标记为已完成，然后从队列中删除。当rabbitmq检测到客户端和自己断开链接之后，还没收到ack，则会重新将消息放回消息队列，交给下一个客户端处理，保证消息不丢失，也就是说，RabbitMQ给了客户端足够长的时间来做数据处理。 </span><br><span class="line">在客户端使用auto<span class="emphasis">_ack来标记是否需要发送ack，默认是False。手动应答，True为默认应答</span></span><br></pre></td></tr></table></figure><p>配置参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通知消息队列(服务端),消息取走了,如果auto_ack=False,不加下面的配置,消息会一直存在</span></span><br><span class="line">ch.basic_ack(delivery_tag=method.delivery_tag)</span><br></pre></td></tr></table></figure><h4 id="Erlang的安装"><a href="#Erlang的安装" class="headerlink" title="Erlang的安装"></a>Erlang的安装</h4><p>首先确定想安装的RabbitMQ版本，再去安装对应版本的Erlang；</p><p>首先安装好Erlang后，新增系统环境变量；变量名为：ERLANG_HOME;变量值为安装的盘符路径；</p><p>Path中添加环境变量：%ERLANG_HOME%\bin</p><p>验证Erlang是否安装成功；cmd后输入erl显示Erlang版本号则安装成功</p><h4 id="RabbitMQ的安装"><a href="#RabbitMQ的安装" class="headerlink" title="RabbitMQ的安装"></a>RabbitMQ的安装</h4><p>进入官网下载安装，下一步即可，安装完成后，在win菜单下找到RabbitMQ command prompt</p><p>输入命令激活RabbitMQ的UI界面</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins.bat enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>激活完成后重启rabbitmq</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 停止服务</span><br><span class="line">net stop RabbitMQ</span><br><span class="line"># 启动服务</span><br><span class="line">net start RabbitMQ</span><br></pre></td></tr></table></figure><p>重启完成后验证是否成功，登录到localhost15672,出现登录页面即安装成功</p><p>RabbitMQ默认的登录用户名和密码皆为guest,登陆成功进入页面即成功安装。</p><h3 id="RabbitMQ的工作模型"><a href="#RabbitMQ的工作模型" class="headerlink" title="RabbitMQ的工作模型"></a>RabbitMQ的工作模型</h3><h4 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h4><p><strong>producer.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到连接对象</span></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">&#x27;localhost&#x27;</span>))</span><br><span class="line"><span class="comment"># 拿到channel对象,创建一个通道</span></span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 声明一个队列</span></span><br><span class="line">channel.queue_declare(queue=<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment"># 生产者向队列中放一条消息</span></span><br><span class="line">channel.basic_publish(exchange=<span class="string">&#x27;&#x27;</span>,  <span class="comment"># 简单模式</span></span><br><span class="line">                      routing_key=<span class="string">&#x27;hello&#x27;</span>,  <span class="comment"># 指定队列</span></span><br><span class="line">                      body=<span class="string">&#x27;Hello World!&#x27;</span>  <span class="comment"># 发送的数据</span></span><br><span class="line">                      )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[x] Sent &#x27;Hello World!&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line"><span class="comment"># connection.close()</span></span><br></pre></td></tr></table></figure><p>consumer.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">&#x27;localhost&#x27;</span>))</span><br><span class="line"></span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 声明一个队列，两端都声明的原因是不确定哪一端先跑起来</span></span><br><span class="line">channel.queue_declare(queue=<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">ch, method, properties, body</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; [x] Received %r&quot;</span> % body)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定监听的队列参数，并没有真正的开始消费,告诉RabbitMQ使用callback来接受数据(消息)</span></span><br><span class="line">channel.basic_consume(queue=<span class="string">&#x27;hello&#x27;</span>, on_message_callback=callback, auto_ack=<span class="literal">True</span>)  <span class="comment"># 默认应答</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; [*] Waiting for messages. To exit press CTRL+C&#x27;</span>)</span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><h5 id="应答参数"><a href="#应答参数" class="headerlink" title="应答参数"></a>应答参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_ack=<span class="literal">False</span></span><br><span class="line">ch.basic_ack(delivery_tag=method.delivery_tag)</span><br></pre></td></tr></table></figure><h5 id="持久化参数"><a href="#持久化参数" class="headerlink" title="持久化参数"></a>持久化参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#声明队列为可持久化队列</span></span><br><span class="line">channel.queue_declare(queue=<span class="string">&#x27;hello2&#x27;</span>, durable=<span class="literal">True</span>)  <span class="comment"># 若声明过，则换一个名字</span></span><br><span class="line"> </span><br><span class="line">channel.basic_publish(exchange=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                      routing_key=<span class="string">&#x27;hello2&#x27;</span>,</span><br><span class="line">                      body=<span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">                      properties=pika.BasicProperties(</span><br><span class="line">                          delivery_mode=<span class="number">2</span>,  <span class="comment"># make message persistent</span></span><br><span class="line">                          )</span><br><span class="line">                      )</span><br></pre></td></tr></table></figure><h5 id="分发参数"><a href="#分发参数" class="headerlink" title="分发参数"></a>分发参数</h5><p>默认机制下属于轮询分发，总是你一个我一个，想要做到公平分发,必须关闭自动应答ack，改成手动应答。使用basicQos(perfetch&#x3D;1)限制每次只发送不超过1条消息到同一个消费者，消费者必须手动反馈告知队列，才会发送下一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basic_qos(prefetch_count=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="交换机模式"><a href="#交换机模式" class="headerlink" title="交换机模式"></a>交换机模式</h4><h5 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h5><p>如何理解发布订阅这一个词语；可理解为报纸期刊，由报社发布，送到每一个订阅报纸或期刊客户手中，人手一份；发布订阅模式与简单模式区别在于声明一个交换机后，将声明的队列绑定到交换机上；而后进行消息处理。</p><p><img src="/2023/02/25/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/2.png" alt="2"></p><p>发布订阅和简单的消息队列区别在于，发布订阅会将消息发送给所有的订阅者，而消息队列中的数据被消费一次便消失。所以，RabbitMQ实现发布和订阅时，会为每一个订阅者创建一个队列，而发布者发布消息时，会将消息放置在所有相关队列中。</p><p>生产者配置**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发布订阅模式fanout</span></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="comment"># 链接rabbitmq</span></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">&#x27;localhost&#x27;</span>))</span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 声明一个名为logs类型为fanout交换机</span></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">&#x27;logs&#x27;</span>, exchange_type=<span class="string">&#x27;fanout&#x27;</span>)</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;info: Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向指定的交换机插入数据</span></span><br><span class="line">channel.basic_publish(exchange=<span class="string">&#x27;logs&#x27;</span>, routing_key=<span class="string">&#x27;&#x27;</span>, body=message)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; [x] Sent %r&quot;</span> % message)</span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure><p><strong>消费者配置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">&#x27;localhost&#x27;</span>))</span><br><span class="line"></span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 声明一个交换机</span></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">&#x27;logs&#x27;</span>, exchange_type=<span class="string">&#x27;fanout&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建一个队列并随机命名</span></span><br><span class="line">result = channel.queue_declare(<span class="string">&quot;&quot;</span>, exclusive=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 获取队列名称</span></span><br><span class="line">queue_name = result.method.queue</span><br><span class="line"><span class="built_in">print</span>(queue_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将队列绑定到交换机</span></span><br><span class="line">channel.queue_bind(queue=queue_name, exchange=<span class="string">&#x27;logs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; [*] Waiting for logs. To exit press CTRL+C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">ch, method, properties, body</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; [x] %r&quot;</span> % body)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure><h5 id="关键字模式"><a href="#关键字模式" class="headerlink" title="关键字模式"></a>关键字模式</h5><p>在发布订阅模式的基础上做了升级，可以通过匹配关键字形成准确推送，需要指定routing_key参数作为匹配根据</p><p><img src="/2023/02/25/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/3.png" alt="3"></p><p><strong>producer配置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关键字模式direct</span></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="comment"># 链接rabbitmq</span></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">&#x27;localhost&#x27;</span>))</span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">&#x27;logs2&#x27;</span>, exchange_type=<span class="string">&#x27;direct&#x27;</span>)</span><br><span class="line"><span class="comment"># 声明一个名为logs2类型为direct交换机</span></span><br><span class="line">message = <span class="string">&quot;info: Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向指定的交换机插入数据</span></span><br><span class="line">channel.basic_publish(exchange=<span class="string">&#x27;logs2&#x27;</span>, routing_key=<span class="string">&#x27;info&#x27;</span>, body=message)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; [x] Sent %r&quot;</span> % message)</span><br><span class="line">connection.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>consumer配置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">&#x27;localhost&#x27;</span>))</span><br><span class="line"></span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 声明一个交换机</span></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">&#x27;logs2&#x27;</span>, exchange_type=<span class="string">&#x27;direct&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建一个队列并随机命名</span></span><br><span class="line">result = channel.queue_declare(<span class="string">&quot;&quot;</span>, exclusive=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 获取队列名称</span></span><br><span class="line">queue_name = result.method.queue</span><br><span class="line"><span class="built_in">print</span>(queue_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将队列绑定到交换机(绑定多个可以复制，也可以循环)</span></span><br><span class="line">channel.queue_bind(queue=queue_name, exchange=<span class="string">&#x27;logs2&#x27;</span>, routing_key=<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">channel.queue_bind(queue=queue_name, exchange=<span class="string">&#x27;logs2&#x27;</span>, routing_key=<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; [*] Waiting for logs. To exit press CTRL+C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">ch, method, properties, body</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; [x] %r&quot;</span> % body)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure><h5 id="通配符模式"><a href="#通配符模式" class="headerlink" title="通配符模式"></a>通配符模式</h5><p>通配符交换机”与之前的路由模式相比，它将信息的传输类型的key更加细化，以“key1.key2.keyN….”的模式来指定信息传输的key的大类型和大类型下面的小类型，让消费者可以更加精细的确认自己想要获取的信息类型。而在消费者一段，不用精确的指定具体到哪一个大类型下的小类型的key，而是可以使用类似正则表达式(但与正则表达式规则完全不同)的通配符在指定一定范围或符合某一个字符串匹配规则的key，来获取想要的信息。</p><p><code>*</code>只能加一个单词<br><code>#</code>可以加任意单词字符</p><p><img src="/2023/02/25/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/4.png" alt="4"></p><p><strong>producer配置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模糊匹配模式topic</span></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="comment"># 链接rabbitmq</span></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">&#x27;localhost&#x27;</span>))</span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">&#x27;logs3&#x27;</span>, exchange_type=<span class="string">&#x27;topic&#x27;</span>)</span><br><span class="line"><span class="comment"># 声明一个名为logs3类型为topic交换机</span></span><br><span class="line">message = <span class="string">&quot;info: Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向指定的交换机插入数据</span></span><br><span class="line">channel.basic_publish(exchange=<span class="string">&#x27;logs3&#x27;</span>, routing_key=<span class="string">&#x27;usa.weather&#x27;</span>, body=message)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; [x] Sent %r&quot;</span> % message)</span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure><p><strong>consumer配置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">&#x27;localhost&#x27;</span>))</span><br><span class="line"></span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 声明一个交换机</span></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">&#x27;logs3&#x27;</span>, exchange_type=<span class="string">&#x27;topic&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建一个队列并随机命名</span></span><br><span class="line">result = channel.queue_declare(<span class="string">&quot;&quot;</span>, exclusive=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 获取队列名称</span></span><br><span class="line">queue_name = result.method.queue</span><br><span class="line"><span class="built_in">print</span>(queue_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将队列绑定到交换机(绑定多个需要复制) usa.#, #.news, #.weather</span></span><br><span class="line">channel.queue_bind(queue=queue_name, exchange=<span class="string">&#x27;logs3&#x27;</span>, routing_key=<span class="string">&#x27;#.news&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; [*] Waiting for logs. To exit press CTRL+C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">ch, method, properties, body</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; [x] %r&quot;</span> % body)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure><h3 id="基于rabbitmq的RPC实现"><a href="#基于rabbitmq的RPC实现" class="headerlink" title="基于rabbitmq的RPC实现"></a>基于rabbitmq的RPC实现</h3><p><img src="/2023/02/25/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/5.png" alt="5"></p><p>如图我们可以看出生产端client向消费端server请求处理数据，他会经历如下几次来完成交互。</p><ul><li><p><strong>1</strong>.生产端 生成rpc_queue队列，这个队列负责帮消费者 接收数据并把消息发给消费端。</p></li><li><p><strong>2</strong>.生产端 生成另外一个随机队列，这个队列是发给消费端，消费者用这个队列把处理好的数据发送给生产端。</p></li><li><p><strong>3</strong>.生产端 生成一组唯一字符串UUID，发送给消费者，消费者会把这串字符作为验证在发给生产者。</p></li><li><p><strong>4</strong>.当消费端处理完数据，发给生产端时,会把处理数据与UUID一起通过随机生产的队列发回给生产端。</p></li><li><p><strong>5</strong>.生产端，会使用while循环 不断检测是否有数据，并以这种形式来实现阻塞等待数据，来监听消费端。</p></li><li><p><strong>6</strong>.生产端获取数据调用回调函数，回调函数判断本机的UUID与消费端发回UID是否匹配，由于消费端，可能有多个，且处理时间不等所以需要判断，判断成功赋值数据，while循环就会捕获到，完成交互。</p></li></ul><p><strong>服务端</strong>作为消费端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接rabbitmq</span></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>))</span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成rpc_queue</span></span><br><span class="line">channel.queue_declare(queue=<span class="string">&#x27;rpc_queue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 　斐波那契数列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 收到消息就调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_request</span>(<span class="params">ch, method, props, body</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    ch: 管道内存对象地址</span></span><br><span class="line"><span class="string">    method: 消息发给哪个queue</span></span><br><span class="line"><span class="string">    props: 返回给消费的返回参数</span></span><br><span class="line"><span class="string">    body:数据对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">int</span>(body)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; [.] fib(%s)&quot;</span> % n)</span><br><span class="line">    <span class="comment"># 调用斐波那契函数 传入结果</span></span><br><span class="line">    response = fib(n)</span><br><span class="line"></span><br><span class="line">    ch.basic_publish(exchange=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                     <span class="comment"># props.reply_to  要放结果的队列</span></span><br><span class="line">     <span class="comment"># props.correlation_id  任务</span></span><br><span class="line">                     <span class="comment"># 生产端随机生成的queue</span></span><br><span class="line">                     routing_key=props.reply_to,</span><br><span class="line">                     <span class="comment"># 获取UUID唯一 字符串数值</span></span><br><span class="line">                     properties=pika.BasicProperties(correlation_id= props.correlation_id),</span><br><span class="line">                     <span class="comment"># 消息返回给生产端</span></span><br><span class="line">                     body=<span class="built_in">str</span>(response))</span><br><span class="line">    <span class="comment"># 确保任务完成</span></span><br><span class="line">    ch.basic_ack(delivery_tag=method.delivery_tag)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># rpc_queue收到消息:调用on_request回调函数；queue=&#x27;rpc_queue&#x27;从rpc内收</span></span><br><span class="line">channel.basic_consume(queue=<span class="string">&quot;rpc_queue&quot;</span>,on_message_callback=on_request)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; [x] Awaiting RPC requests&quot;</span>)</span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure><p><strong>客户端</strong>作为生产端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FibonacciRpcClient</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 赋值变量，一个循环值</span></span><br><span class="line">        self.response = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 链接rabbitmq</span></span><br><span class="line">        self.connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">&#x27;localhost&#x27;</span>))</span><br><span class="line">        self.channel = self.connection.channel()</span><br><span class="line">        <span class="comment"># 随机取queue名字，发给消费端</span></span><br><span class="line">        self.callback_queue = result.method.queue</span><br><span class="line">        <span class="comment"># 监听消息队列中是否有值返回,如果有值则执行 on_response 函数(一旦有结果,则执行on_response)</span></span><br><span class="line">        self.channel.basic_consume(queue=self.callback_queue,</span><br><span class="line">                                   auto_ack=<span class="literal">True</span>,</span><br><span class="line">                                   on_message_callback=self.on_response)</span><br><span class="line"><span class="comment"># 收到消息就调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_response</span>(<span class="params">self, ch, method, props, body</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        ch: 管道内存对象地址</span></span><br><span class="line"><span class="string">        method: 消息发给哪个queue</span></span><br><span class="line"><span class="string">        props: 返回给消费的返回参数</span></span><br><span class="line"><span class="string">        body:数据对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 判断本机生成的ID 与 生产端发过来的ID是否相等</span></span><br><span class="line">        <span class="keyword">if</span> self.corr_id == props.correlation_id:</span><br><span class="line">            <span class="comment"># 将body值 赋值给self.response</span></span><br><span class="line">            self.response = body</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="comment"># 　随机一次唯一的字符串</span></span><br><span class="line">        self.corr_id = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">        <span class="comment"># routing_key=&#x27;rpc_queue&#x27; 发一个消息到rpc_queue内</span></span><br><span class="line">        self.channel.basic_publish(exchange=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                                   routing_key=<span class="string">&#x27;rpc_queue&#x27;</span>,</span><br><span class="line">                                   properties=pika.BasicProperties(</span><br><span class="line">                                       <span class="comment"># 执行命令之后结果返回给self.callback_queue这个队列中</span></span><br><span class="line">                                       reply_to=self.callback_queue,</span><br><span class="line">                                       <span class="comment"># 生成UUID 发送给消费端</span></span><br><span class="line">                                       correlation_id=self.corr_id,</span><br><span class="line">                                   ),</span><br><span class="line">                                   <span class="comment"># 发的消息，必须传入字符串，不能传数字</span></span><br><span class="line">                                   body=<span class="built_in">str</span>(n))</span><br><span class="line">        <span class="comment"># 没有数据就循环收</span></span><br><span class="line">        <span class="keyword">while</span> self.response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 非阻塞版的start_consuming(),没有消息不阻塞</span></span><br><span class="line">            self.connection.process_data_events()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(self.response)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 实例化</span></span><br><span class="line">fibonacci_rpc = FibonacciRpcClient()</span><br><span class="line">response = fibonacci_rpc.call(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; [.] Got %r&quot;</span> % response)    </span><br></pre></td></tr></table></figure><h3 id="基于python中的rpc框架"><a href="#基于python中的rpc框架" class="headerlink" title="基于python中的rpc框架"></a>基于python中的rpc框架</h3><p>自带的: SimpleXMLRPCServer(数据包大,速度慢)<br>第三方: ZeroRPC(底层使用ZeroMQ和MessagePack,速度快,响应时间短,并发高),grpc(谷歌推出支持夸语言)</p><h4 id="SimpleXMLRPCServer使用"><a href="#SimpleXMLRPCServer使用" class="headerlink" title="SimpleXMLRPCServer使用"></a>SimpleXMLRPCServer使用</h4><p><strong>服务端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xmlrpc.server <span class="keyword">import</span> SimpleXMLRPCServer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RPCServer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(RPCServer, self).__init__()</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        self.send_data = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">        self.recv_data = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getObj</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get data&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.send_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendObj</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;send data&#x27;</span>)</span><br><span class="line">        self.recv_data = data</span><br><span class="line">        <span class="built_in">print</span>(self.recv_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># SimpleXMLRPCServer</span></span><br><span class="line">server = SimpleXMLRPCServer((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">4242</span>), allow_none=<span class="literal">True</span>)</span><br><span class="line">server.register_introspection_functions()</span><br><span class="line">server.register_instance(RPCServer())</span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> xmlrpc.client <span class="keyword">import</span> ServerProxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># SimpleXMLRPCServer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xmlrpc_client</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;xmlrpc client&#x27;</span>)</span><br><span class="line">    c = ServerProxy(<span class="string">&#x27;http://localhost:4242&#x27;</span>)</span><br><span class="line">    data = &#123;<span class="string">&#x27;client:&#x27;</span> + <span class="built_in">str</span>(i): i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)&#125;</span><br><span class="line">    start = time.perf_counter()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        a = c.getObj()</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        c.sendObj(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;xmlrpc total time %s&#x27;</span> % (time.perf_counter() - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    xmlrpc_client()</span><br></pre></td></tr></table></figure><h4 id="ZeroRPC使用"><a href="#ZeroRPC使用" class="headerlink" title="ZeroRPC使用"></a>ZeroRPC使用</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install zerorpc</span><br></pre></td></tr></table></figure><p><strong>服务端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zerorpc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RPCServer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(RPCServer, self).__init__()</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        self.send_data = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">        self.recv_data = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getObj</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get data&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.send_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendObj</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;send data&#x27;</span>)</span><br><span class="line">        self.recv_data = data</span><br><span class="line">        <span class="built_in">print</span>(self.recv_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># zerorpc</span></span><br><span class="line">s = zerorpc.Server(RPCServer())</span><br><span class="line">s.bind(<span class="string">&#x27;tcp://0.0.0.0:4243&#x27;</span>)</span><br><span class="line">s.run()</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zerorpc</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># zerorpc</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zerorpc_client</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;zerorpc client&#x27;</span>)</span><br><span class="line">    c = zerorpc.Client()</span><br><span class="line">    c.connect(<span class="string">&#x27;tcp://127.0.0.1:4243&#x27;</span>)</span><br><span class="line">    data = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">    start = time.perf_counter()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        a = c.getObj()</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        c.sendObj(data)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;total time %s&#x27;</span> % (time.perf_counter() - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    zerorpc_client()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2023/01/13/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/01/13/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><p>什么是git：版本控制器 - 控制的对象是开发的项目代码；作用：完成、协同开发项目，帮助程序员整合代码。</p><p>特点：集群化，多分支。</p><h2 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h2><p>Git分为三大块：工作区、暂存区、版本库。</p><p>工作区：程序代码的创建、编写、删除、修改</p><p>暂存区：内存中临时存储</p><p>版本库：本地开发的代码库</p><p>总体流程如下：</p><p><img src="/2023/01/13/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1.jpg" alt="1"></p><h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><ol><li>有红色信息(工作区有内容)，就执行 add </li><li>全绿信息(内容全部在暂存区)，才执行 commit</li><li>只有被版本库控制的代码，才能被监听，所以可以回滚到任何一个版本</li></ol><h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h4 id="将已有文件夹初始化为git仓库"><a href="#将已有文件夹初始化为git仓库" class="headerlink" title="将已有文件夹初始化为git仓库"></a>将已有文件夹初始化为git仓库</h4><p>进入该文件夹内，git bash here后；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 目标文件夹内部</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><h4 id="在指定目录下-初始化git仓库"><a href="#在指定目录下-初始化git仓库" class="headerlink" title="在指定目录下 - 初始化git仓库"></a>在指定目录下 - 初始化git仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 目标目录</span><br><span class="line">git init 仓库名</span><br></pre></td></tr></table></figure><h4 id="在仓库目录终端下-设置全局用户"><a href="#在仓库目录终端下-设置全局用户" class="headerlink" title="在仓库目录终端下 - 设置全局用户"></a>在仓库目录终端下 - 设置全局用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">git config --global user.email <span class="string">&#x27;xxx@qq.com&#x27;</span></span><br><span class="line"></span><br><span class="line">注：在全局文件 C:\Users\用户文件夹\.gitconfig新建用户信息，在所有仓库下都可以使用</span><br></pre></td></tr></table></figure><h4 id="在仓库目录终端下-设置局部用户"><a href="#在仓库目录终端下-设置局部用户" class="headerlink" title="在仓库目录终端下 - 设置局部用户"></a>在仓库目录终端下 - 设置局部用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">git config user.email <span class="string">&#x27;用户邮箱&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">git status -s  </span><br><span class="line">-- 查看仓库状态的简约显示</span><br></pre></td></tr></table></figure><h4 id="工作区操作"><a href="#工作区操作" class="headerlink" title="工作区操作"></a>工作区操作</h4><p>通过任何方式完成的文件删与改;空文件夹不会被git记录.</p><h4 id="撤销工作区操作：改、删（了解）"><a href="#撤销工作区操作：改、删（了解）" class="headerlink" title="撤销工作区操作：改、删（了解）"></a>撤销工作区操作：改、删（了解）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout .</span><br><span class="line">-- 撤销所有暂存区的提交</span><br><span class="line"></span><br><span class="line">git checkout 文件名</span><br><span class="line">-- 撤销某一文件的暂存区提交</span><br></pre></td></tr></table></figure><h4 id="工作区内容提交到暂存区"><a href="#工作区内容提交到暂存区" class="headerlink" title="工作区内容提交到暂存区"></a>工作区内容提交到暂存区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">-- 添加项目中所有文件</span><br><span class="line"></span><br><span class="line">git add 文件名  </span><br><span class="line">-- 添加指定文件</span><br></pre></td></tr></table></figure><h4 id="撤销暂存区提交：add的逆运算（很少使用）"><a href="#撤销暂存区提交：add的逆运算（很少使用）" class="headerlink" title="撤销暂存区提交：add的逆运算（很少使用）"></a>撤销暂存区提交：add的逆运算（很少使用）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD .</span><br><span class="line">-- 撤销所有暂存区的提交</span><br><span class="line"></span><br><span class="line">git reset 文件名</span><br><span class="line">-- 撤销某一文件的暂存区提交</span><br><span class="line"></span><br><span class="line">git reset .</span><br><span class="line">-- 撤销所有暂存区的提交</span><br></pre></td></tr></table></figure><h4 id="提交暂存区内容到版本库"><a href="#提交暂存区内容到版本库" class="headerlink" title="提交暂存区内容到版本库"></a>提交暂存区内容到版本库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;描述信息&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="撤销版本库提交：commit的逆运算"><a href="#撤销版本库提交：commit的逆运算" class="headerlink" title="撤销版本库提交：commit的逆运算"></a>撤销版本库提交：commit的逆运算</h4><p>回滚暂存区已经提交到版本库的操作；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">回滚到上一个版本：</span><br><span class="line">git reset --hard HEAD^</span><br><span class="line">git reset --hard HEAD~</span><br><span class="line"></span><br><span class="line">回滚到上三个版本：</span><br><span class="line">git reset --hard HEAD^^^</span><br><span class="line">git reset --hard HEAD~3</span><br><span class="line"></span><br><span class="line">回滚到指定版本号的版本(常用):</span><br><span class="line">git reset --hard 版本号（可以填写版本号前几个字符）</span><br></pre></td></tr></table></figure><h4 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><h4 id="查看时间点之前-之后的日志"><a href="#查看时间点之前-之后的日志" class="headerlink" title="查看时间点之前|之后的日志"></a>查看时间点之前|之后的日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看时间点之前</span></span><br><span class="line">git <span class="built_in">log</span> --after 2018-6-1</span><br><span class="line">git <span class="built_in">log</span> --before 2018-6-1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看时间点之后</span></span><br><span class="line">git reflog --after 2018-6-1</span><br><span class="line">git reflog --before 2018-6-1</span><br></pre></td></tr></table></figure><h4 id="查看指定开发者日志"><a href="#查看指定开发者日志" class="headerlink" title="查看指定开发者日志"></a>查看指定开发者日志</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log --author author_name</span><br><span class="line">git reflog --author author_name</span><br></pre></td></tr></table></figure><h3 id="过滤文件"><a href="#过滤文件" class="headerlink" title="过滤文件"></a>过滤文件</h3><p>.gitignore 文件;在仓库根目录下创建该文件;文件与文件夹均可以被过滤;文件过滤语法</p><ol><li>文件或文件夹名：代表所有目录下的同名文件或文件夹都被过滤</li><li>&#x2F;文件或文件夹名：代表仓库根目录下的文件或文件夹被过滤</li></ol><p>a.txt：项目中所有a.txt文件和文件夹都会被过滤<br>&#x2F;a.txt：项目中只有根目录下a.txt文件和文件夹会被过滤<br>&#x2F;b&#x2F;a.txt：项目中只有根目录下的b文件夹下的a.txt文件和文件夹会被过滤<br><em>x</em>：名字中有一个x的都会被过滤（*代表0~n个任意字符）<br>空文件夹不会被提交，空包会被提交，包可以被提交（包中有一个init空文件）</p><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>本地仓库情况下，必须提交一次版本库才能创建分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><p>显示绿色为当前所在分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><h4 id="创建并切换到分支"><a href="#创建并切换到分支" class="headerlink" title="创建并切换到分支"></a>创建并切换到分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名</span><br></pre></td></tr></table></figure><h4 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h4 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支名</span><br><span class="line">例如：git merge dev  是将dev合并到master上.</span><br></pre></td></tr></table></figure><h3 id="remote源操作"><a href="#remote源操作" class="headerlink" title="remote源操作"></a>remote源操作</h3><h4 id="查看仓库已配置的远程源"><a href="#查看仓库已配置的远程源" class="headerlink" title="查看仓库已配置的远程源"></a>查看仓库已配置的远程源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><h4 id="查看remote命令帮助文档"><a href="#查看remote命令帮助文档" class="headerlink" title="查看remote命令帮助文档"></a>查看remote命令帮助文档</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -h</span><br></pre></td></tr></table></figure><h4 id="删除远程源"><a href="#删除远程源" class="headerlink" title="删除远程源"></a>删除远程源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote remove 源名</span><br><span class="line">eg: git remote remove origin</span><br></pre></td></tr></table></figure><h4 id="添加远程源"><a href="#添加远程源" class="headerlink" title="添加远程源"></a>添加远程源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add 源名 源地址</span><br><span class="line">eg：git remote add origin git@gitee.com:hauye/happy.git</span><br></pre></td></tr></table></figure><h4 id="提交代码到远程源"><a href="#提交代码到远程源" class="headerlink" title="提交代码到远程源"></a>提交代码到远程源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push 源名 分支名</span><br><span class="line">eg：git push origin dev</span><br></pre></td></tr></table></figure><h4 id="克隆远程源"><a href="#克隆远程源" class="headerlink" title="克隆远程源"></a>克隆远程源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程源地址</span><br><span class="line">eg：git <span class="built_in">clone</span> git@gitee.com:hauye/happy.git</span><br><span class="line">通过克隆方式连接远程源，默认远程源名就叫origin；所以主动添加远程源来连接远程仓库，源码也用origin</span><br></pre></td></tr></table></figure><h3 id="采用ssh协议连接远程源"><a href="#采用ssh协议连接远程源" class="headerlink" title="采用ssh协议连接远程源"></a>采用ssh协议连接远程源</h3><h4 id="创建电脑的公钥私钥"><a href="#创建电脑的公钥私钥" class="headerlink" title="创建电脑的公钥私钥"></a>创建电脑的公钥私钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -keygen -t rsa -C <span class="string">&quot;*@*.com&quot;</span></span><br><span class="line">邮箱可以任意填写；码云线上添加公钥：项目仓库 =&gt; 管理 =&gt; 部署公钥管理 =&gt; 添加公钥 =&gt; 添加个人公钥</span><br></pre></td></tr></table></figure><h4 id="提交本地代码到远程仓库"><a href="#提交本地代码到远程仓库" class="headerlink" title="提交本地代码到远程仓库"></a>提交本地代码到远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h4 id="如何成为其他码云项目的开发者"><a href="#如何成为其他码云项目的开发者" class="headerlink" title="如何成为其他码云项目的开发者"></a>如何成为其他码云项目的开发者</h4><p>1）生成自己电脑的公钥，配置到自己的码云个人公钥中<br>2）把自己的码云用户名提供给别人，别人添加你成为项目开发者<br>3）自己确认添加，成为开发者，克隆开发项目，进行开发</p><h4 id="如何成为公司自建git服务器的开发者"><a href="#如何成为公司自建git服务器的开发者" class="headerlink" title="如何成为公司自建git服务器的开发者"></a>如何成为公司自建git服务器的开发者</h4><p>1）生成自己电脑的公钥(公钥生成一次就可以了)，把它提交给项目管理者<br>2）项目管理者添加你公钥，加入开发者，提供给你项目克隆地址<br>3）克隆开发项目，进行开发</p><h3 id="协同开发"><a href="#协同开发" class="headerlink" title="协同开发"></a>协同开发</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1）作为开发者，第一次同步项目（前台已经是项目开发者了）</span><br><span class="line">&gt;: git <span class="built_in">clone</span> 项目地址</span><br><span class="line"></span><br><span class="line">2）保证自己本地有dev分支，且与远程仓库版本同步(没有就自己新建)</span><br><span class="line"></span><br><span class="line">3）本地开发的代码，必须add、commit到本地版本库后，才和远程仓库进行交互</span><br><span class="line"></span><br><span class="line">4）交互顺序：必须 先拉(pull)后提(push)</span><br><span class="line"></span><br><span class="line">5）必须切换到要交互的分支，在与远程同名的分支进行交互，如本地dev与远程dev交互</span><br><span class="line">git checkout dev</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;提交信息&#x27;</span></span><br><span class="line">git pull origin dev</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><h3 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h3><p>1）在远程仓库和本地仓库版本不一致时，拉取远程仓库版本到本地时，两个版本进入融合，可能会出现版本冲突</p><p>2）定位冲突文件冲突代码，线下沟通冲突代码，整合代码解决冲突</p><p>3）将解决冲突后的代码重新提交到本地版本库</p><p>4）再推去远程仓库，直到没有冲突，提交本地版本库到远程</p><p>出现冲突的前提：<br>    1）不同开发者同时操作了同一文件<br>    2）并且在相同行写了代码</p><p>如何解决：线下沟通，根据实际需求完成代码整合。</p><h3 id="线上分支合并"><a href="#线上分支合并" class="headerlink" title="线上分支合并"></a>线上分支合并</h3><p>说在前面：没程序员鸟事；都是组长或者leader干的事。咱想干也没权限干。</p><p>点击 +Pull Request（提交合并分支请求）</p><h3 id="远程仓库回滚"><a href="#远程仓库回滚" class="headerlink" title="远程仓库回滚"></a>远程仓库回滚</h3><p>以dev分支举例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1）本地先切换到远程要回滚的分支所对应的本地分支</span><br><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line">2）回滚本地分支</span><br><span class="line">git reset --hard 版本号</span><br><span class="line"></span><br><span class="line">3）本地版本强行提交给服务器（确认无误的情况下，不然挨叼是少不了的，说不好明天见不到你了。）</span><br><span class="line">git push origin dev -f</span><br></pre></td></tr></table></figure><p>著名五星上将麦克阿瑟曾经说过：只要有版本记录在,git你随便操作，脱拉硬拽，无所吊谓哦。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁</title>
      <link href="/2023/01/12/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2023/01/12/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式锁介绍"><a href="#分布式锁介绍" class="headerlink" title="分布式锁介绍"></a>分布式锁介绍</h2><p>​分布式锁,是一种跨进程的跨机器节点的互斥锁，它可以用来保证多机器节点对于共享资源访问的排他性;是控制分布式系统之间同步访问共享资源的一种方式。</p><h2 id="使用分布式锁的原因"><a href="#使用分布式锁的原因" class="headerlink" title="使用分布式锁的原因"></a>使用分布式锁的原因</h2><pre><code>  我们在开发应用的时候，如果需要对某一个共享变量进行多线程同步访问的时候，可以使用我们学到的锁进行处理，并且可以完美的运行，毫无Bug！</code></pre><p>注意这是单机应用,后来业务发展,需要做集群,一个应用需要部署到几台机器上然后做负载均衡,大致如下图:</p><p><img src="/2023/01/12/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1.png" alt="1"></p><pre><code>  图中可以看到，变量A存在三个服务器内存中（这个变量A主要体现是在一个类中的一个成员变量,是一个有状态的对象）,如果不加任何控制的话,变量A同时都会在分配一块内存,三个请求发过来同时对这个变量操作,显然结果是不对的！即使不是同时发过来,三个请求分别操作三个不同内存区域的数据，变量A之间不存在共享，也不具有可见性，处理的结果也是不对的！</code></pre><p>如果我们业务中确实存在这个场景的话，我们就需要一种方法解决这个问题！</p><p>​为了保证一个方法或属性在高并发情况下的同一时间只能被同一个线程执行，在传统单体应用单机部署的情况下，可以使用并发处理相关的功能进行互斥控制。但是，随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的应用并不能提供分布式锁的能力。为了解决这个问题就需要一种跨机器的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！  </p><h2 id="分布式应具备的条件"><a href="#分布式应具备的条件" class="headerlink" title="分布式应具备的条件"></a>分布式应具备的条件</h2><p>  在分析分布式锁的三种实现方式之前，先了解一下分布式锁应该具备哪些条件：</p><p>1、在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行；<br>2、高可用的获取锁与释放锁；<br>3、高性能的获取锁与释放锁；<br>4、具备可重入特性；<br>5、具备锁失效机制，防止死锁；<br>6、具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。  </p><h2 id="分布式锁的三种实现方式"><a href="#分布式锁的三种实现方式" class="headerlink" title="分布式锁的三种实现方式"></a>分布式锁的三种实现方式</h2><pre><code>  目前几乎很多大型网站及应用都是分布式部署的,分布式场景中的数据一致性问题一直是一个比较重要的话题。分布式的CAP理论告诉我们“任何一个分布式系统都无法同时满足一致性(Consistency)可用性(Availability)和分区容错性（Partition tolerance），最多只能同时满足两项。”所以，很多系统在设计之初就要对这三者做出取舍。在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证“最终一致性”，只要这个最终时间是在用户可以接受的范围内即可。</code></pre><p>​在很多场景中，我们为了保证数据的最终一致性，需要很多的技术方案来支持，比如分布式事务、分布式锁等。有的时候，我们需要保证一个方法在同一时间内只能被同一个线程执行。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基于数据库实现分布式锁；</span><br><span class="line">基于缓存（Redis等）实现分布式锁；</span><br><span class="line">基于Zookeeper实现分布式锁；</span><br></pre></td></tr></table></figure><h2 id="基于数据库的实现方式"><a href="#基于数据库的实现方式" class="headerlink" title="基于数据库的实现方式"></a>基于数据库的实现方式</h2><p>​基于数据库的实现方式的核心思想是:在数据库中创建一个表，表中包含<strong>方法名</strong>等字段，并在<strong>方法名字段上创建唯一索引</strong>，想要执行某个方法，就使用这个方法名向表中插入数据，成功插入则获取锁，执行完成后删除对应的行数据释放锁。</p><p>（1）创建一个表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `method_lock`;</span><br><span class="line">CREATE TABLE `method_lock` (</span><br><span class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `method_name` varchar(64) NOT NULL COMMENT &#x27;锁定的方法名&#x27;,</span><br><span class="line">  `desc` varchar(255) NOT NULL COMMENT &#x27;备注信息&#x27;,</span><br><span class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uidx_method_name` (`method_name`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT=&#x27;锁定中的方法&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/12/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/2.png" alt="2"></p><p>（2）想要执行某个方法，就使用这个方法名向表中插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO method_lock (method_name, desc) VALUES (&#x27;methodName&#x27;, &#x27;测试的methodName&#x27;);</span><br></pre></td></tr></table></figure><p>因为我们对<code>method_name</code>做了<strong>唯一性约束</strong>，这里如果有多个请求同时提交到数据库的话，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，可以执行方法体内容。</p><p>（3）成功插入则获取锁，执行完成后删除对应的行数据释放锁：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from method_lock where method_name =&#x27;methodName&#x27;;</span><br></pre></td></tr></table></figure><p>注意：这只是使用基于数据库的一种方法，使用数据库实现分布式锁还有很多其他的玩法！</p><p>使用基于数据库的这种实现方式很简单，但是对于分布式锁应该具备的条件来说，它有一些问题需要解决及优化：</p><p>​1、因为是基于数据库实现的，数据库的可用性和性能将直接影响分布式锁的可用性及性能，所以，数据库需要双机部署、数据同步、主备切换；</p><p>​2、不具备可重入的特性，因为同一个线程在释放锁之前，行数据一直存在，无法再次成功插入数据，所以，需要在表中新增一列，用于记录当前获取到锁的机器和线程信息，在再次获取锁的时候，先查询表中机器和线程信息是否和当前机器和线程相同，若相同则直接获取锁；</p><p>​3、没有锁失效机制，因为有可能出现成功插入数据后，服务器宕机了，对应的数据没有被删除，当服务恢复后一直获取不到锁，所以，需要在表中新增一列，用于记录失效时间，并且需要有定时任务清除这些失效的数据；</p><p>​4、不具备阻塞锁特性，获取不到锁直接返回失败，所以需要优化获取逻辑，循环多次去获取。</p><p>​5、在实施的过程中会遇到各种不同的问题，为了解决这些问题，实现方式将会越来越复杂；依赖数据库需要一定的资源开销，性能问题需要考虑。  </p><h2 id="基于Redis的实现方式"><a href="#基于Redis的实现方式" class="headerlink" title="基于Redis的实现方式"></a>基于Redis的实现方式</h2><p>  1、选用Redis实现分布式锁原因：</p><p>（1）Redis有很高的性能；<br>（2）Redis命令对此支持较好，实现起来比较方便</p><p>2、使用命令介绍：</p><p>（1）SETNX</p><p>SETNX key val：当且仅当key不存在时，set一个key为val的字符串，返回1；若key存在，则什么都不做，返回0。</p><p>（2）expire</p><p>expire key timeout：为key设置一个超时时间，单位为second，超过这个时间锁会自动释放，避免死锁。</p><p>（3）delete</p><p>delete key：删除key</p><p>在使用Redis实现分布式锁的时候，主要就会使用到这三个命令。</p><p>3、实现思想：</p><p>​（1）获取锁的时候，使用setnx加锁，并使用expire命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的value值为一个随机生成的UUID，通过此在释放锁的时候进行判断。</p><p>​（2）获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。</p><p>​（3）释放锁的时候，通过UUID判断是不是该锁，若是该锁，则执行delete进行锁释放。  </p><p>4、 分布式锁的简单实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连接redis</span></span><br><span class="line">redis_client = redis.Redis(host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                           port=<span class="number">6379</span>,</span><br><span class="line">                           password=password,</span><br><span class="line">                           db=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取一个锁</span></span><br><span class="line">lock_name：锁定名称</span><br><span class="line">acquire_time: 客户端等待获取锁的时间</span><br><span class="line">time_out: 锁的超时时间</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">acquire_lock</span>(<span class="params">lock_name, acquire_time=<span class="number">10</span>, time_out=<span class="number">10</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取一个分布式锁&quot;&quot;&quot;</span></span><br><span class="line">    identifier = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">    end = time.time() + acquire_time</span><br><span class="line">    lock = <span class="string">&quot;string:lock:&quot;</span> + lock_name</span><br><span class="line">    <span class="keyword">while</span> time.time() &lt; end:</span><br><span class="line">        <span class="keyword">if</span> redis_client.setnx(lock, identifier):</span><br><span class="line">            <span class="comment"># 给锁设置超时时间, 防止进程崩溃导致其他进程无法获取锁</span></span><br><span class="line">            redis_client.expire(lock, time_out)</span><br><span class="line">            <span class="keyword">return</span> identifier</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> redis_client.ttl(lock):</span><br><span class="line">            redis_client.expire(lock, time_out)</span><br><span class="line">        time.sleep(<span class="number">0.001</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#释放一个锁</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">release_lock</span>(<span class="params">lock_name, identifier</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;通用的锁释放函数&quot;&quot;&quot;</span></span><br><span class="line">    lock = <span class="string">&quot;string:lock:&quot;</span> + lock_name</span><br><span class="line">    pip = redis_client.pipeline(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pip.watch(lock)</span><br><span class="line">            lock_value = redis_client.get(lock)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> lock_value:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> lock_value.decode() == identifier:</span><br><span class="line">                pip.multi()</span><br><span class="line">                pip.delete(lock)</span><br><span class="line">                pip.execute()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            pip.unwatch()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> redis.excetions.WacthcError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>5、测试刚才实现的分布式锁</strong></p><p>例子中使用50个线程模拟秒杀一个商品,使用–运算符来实现商品减少,从结果有序性就可以看出是否为加锁状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exec_func</span>():</span><br><span class="line">    identifier=acquire_lock(<span class="string">&#x27;resource&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;identifier&#125;</span>:获得了锁&quot;</span>)</span><br><span class="line">    release_lock(<span class="string">&#x27;resource&#x27;</span>,identifier)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    t = Thread(target=exec_func)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h2 id="基于ZooKeeper的实现方式"><a href="#基于ZooKeeper的实现方式" class="headerlink" title="基于ZooKeeper的实现方式"></a>基于ZooKeeper的实现方式</h2><p>​ZooKeeper是一个为分布式应用提供一致性服务的开源组件，它内部是一个分层的文件系统目录树结构，规定同一个目录下只能有一个唯一文件名。基于ZooKeeper实现分布式锁的步骤如下：</p><p>（1）创建一个目录mylock；<br>（2）线程A想获取锁就在mylock目录下创建临时顺序节点；<br>（3）获取mylock目录下所有的子节点,然后获取比自己小的兄弟节点，如果不存在,则说明当前线程顺序号最小，获得锁；<br>（4）线程B获取所有节点，判断自己不是最小节点，设置监听比自己次小的节点；<br>（5）线程A处理完，删除自己的节点，线程B监听到变更事件，判断自己是不是最小的节点，如果是则获得锁。</p><p>​推荐一个Apache的开源库Curator，它是一个ZooKeeper客户端，Curator提供的InterProcessMutex是分布式锁的实现，acquire方法用于获取锁，release方法用于释放锁。</p><p>优点：具备高可用、可重入、阻塞锁特性，可解决失效死锁问题。</p><p>缺点：因为需要频繁的创建和删除节点，性能上不如Redis方式。 </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​上面的三种实现方式，没有在所有场合都是完美的，所以，应根据不同的应用场景选择最适合的实现方式。在分布式环境中，对资源进行上锁有时候是很重要的，比如抢购某一资源，这时候使用分布式锁就可以很好地控制资源。当然，在具体使用中，还需要考虑很多因素，比如超时时间的选取，获取锁时间的选取对并发量都有很大的影响，上述实现的分布式锁也只是一种简单的实现，主要是一种思想 。</p><h2 id="其他使用场景"><a href="#其他使用场景" class="headerlink" title="其他使用场景"></a>其他使用场景</h2><p>​在分布式系统中，分布式锁是一种非常重要的机制，它可以用来保证在分布式环境中各个节点之间的协作性和一致性，以下是一些开发中常见的场景，可以使用分布式锁来保证系统的正确性：</p><ol><li><p>并发任务调度<br> 在分布式系统中，可能需要对某个任务进行调度，如果多个节点同时发起任务调度请求，那么就需要使用分布式锁来保证只有一个节点能够成功获取到任务调度的锁，从而避免任务被多次执行</p></li><li><p>分布式事务<br>   在分布式事务中，需要保证不同节点对共享资源的访问是互斥的，否则可能会导致数据不一致的问题，此时可以使用分布式锁来保证在事务执行过程中，各个节点之间对共享资源的访问是互斥的</p></li><li><p>分布式缓存<br>   在分布式缓存中，需要保证各个节点对缓存的访问是互斥的，否则可能会导致缓存中的数据不一致，此时可以使用分布式锁来保证各个节点对缓存的访问是互斥的</p></li><li><p>购买限制<br>   在电商等场景中，可能需要对某个商品的购买数量进行限制，如果多个用户同时发起购买请求，那么就需要使用分布式锁来保证只有一个用户能够成功获取到购买锁，从而避免超卖等问题</p></li></ol><p>​        需要注意的是，分布式锁是一种非常重要的机制，但同时也会带来一定的性能开销和复杂度，因此在使用分布式锁时需要权衡系统的性能和可维护性，以及使用分布式锁所带来的成本和风险.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis与Mysql双写一致性方案</title>
      <link href="/2023/01/07/Redis%E4%B8%8EMysql%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88/"/>
      <url>/2023/01/07/Redis%E4%B8%8EMysql%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​首先，缓存由于其高并发和高性能的特性，已经在项目中被广泛使用。在读取缓存方面，大家没啥疑问，都是按照下图的流程来进行业务操作</p><p><img src="/2023/01/07/Redis%E4%B8%8EMysql%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88/1.png" alt="1"></p><p>​但是在更新缓存方面，对于更新完数据库，是更新缓存呢，还是删除缓存。又或者是先删除缓存，再更新数据库，其实大家存在很大的争议</p><p>本文由以下三个部分组成 1、讲解缓存更新策略 2、对每种策略进行缺点分析 3、针对缺点给出改进方案</p><h2 id="一致性方案"><a href="#一致性方案" class="headerlink" title="一致性方案"></a>一致性方案</h2><p>​先做一个说明,从理论上来说，给缓存设置过期时间，是保证最终一致性的解决方案。这种方案下，我们可以对存入缓存的数据设置过期时间,所有的写操作以数据库为准，对缓存操作只是尽最大努力即可。也就是说如果数据库写成功,缓存更新失败,那么只要到达过期时间，则后面的读请求自然会从数据库中读取新值然后回填缓存。因此，接下来讨论的思路不依赖于给缓存设置过期时间这个方案。 在这里，我们讨论<strong>三种</strong>更新策略：</p><ol><li><p>先更新数据库，再更新缓存</p></li><li><p>先删除缓存，再更新数据库</p></li><li><p>先更新数据库，再删除缓存</p></li></ol><h2 id="先更新数据库-再更新缓存"><a href="#先更新数据库-再更新缓存" class="headerlink" title="先更新数据库,再更新缓存"></a>先更新数据库,再更新缓存</h2><p>这套方案，大家是普遍反对的。为什么呢？有如下两点原因。</p><p><strong>原因一（线程安全角度）</strong> 同时有请求A和请求B进行更新操作，那么会出现</p><p>（1）线程A更新了数据库</p><p>（2）线程B更新了数据库</p><p>（3）线程B更新了缓存</p><p>（4）线程A更新了缓存</p><p>这就出现请求A更新缓存应该比请求B更新缓存早才对，但是因为网络等原因，B却比A更早更新了缓存。这就导致了脏数据，因此不考虑。</p><p><strong>原因二（业务场景角度）</strong> 有如下两点：</p><ul><li>（1）如果你是一个写数据库场景比较多，而读数据场景比较少的业务需求，采用这种方案就会导致，数据压根还没读到，缓存就被频繁的更新，浪费性能。</li><li>（2）如果你写入数据库的值，并不是直接写入缓存的，而是要经过一系列复杂的计算再写入缓存。那么，每次写入数据库后，都再次计算写入缓存的值，无疑是浪费性能的。显然，删除缓存更为适合。</li></ul><p>接下来讨论的就是争议最大的，先删缓存，再更新数据库。还是先更新数据库，再删缓存的问题。</p><h2 id="先删缓存-再更新数据库"><a href="#先删缓存-再更新数据库" class="headerlink" title="先删缓存,再更新数据库"></a>先删缓存,再更新数据库</h2><p>该方案会导致不一致的原因是。同时有一个请求A进行更新操作,另一个请求B进行查询操作。那么会出现如下情形:</p><p>（1）请求A进行写操作，删除缓存</p><p>（2）请求B查询发现缓存不存在</p><p>（3）请求B去数据库查询得到旧值</p><p>（4）请求B将旧值写入缓存</p><p>（5）请求A将新值写入数据库 上述情况就会导致不一致的情形出现。而且，如果不采用给缓存设置过期时间策略，该数据永远都是脏数据。</p><p>那么，<strong>如何解决呢？采用延时双删策略</strong> 伪代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String key,Object data)</span>&#123;</span><br><span class="line">        redis.delKey(key);</span><br><span class="line">        db.updateData(data);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        redis.delKey(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>转化为中文描述就是</p><p>（1）先淘汰缓存</p><p>（2）再写数据库（这两步和原来一样）</p><p>（3）休眠1秒，再次淘汰缓存 这么做，可以将1秒内所造成的缓存脏数据，再次删除。</p><p><strong>那么，这个1秒怎么确定的，具体该休眠多久呢？</strong></p><p>针对上面的情形，读者应该自行评估自己的项目的读数据业务逻辑的耗时。然后写数据的休眠时间则在读数据业务逻辑的耗时基础上，加几百ms即可。这么做的目的，就是确保读请求结束，写请求可以删除读请求造成的缓存脏数据。</p><p><strong>如果你用了mysql的读写分离架构怎么办？</strong></p><p>ok，在这种情况下，造成数据不一致的原因如下，还是两个请求，一个请求A进行更新操作，另一个请求B进行查询操作。</p><p>（1）请求A进行写操作，删除缓存</p><p>（2）请求A将数据写入数据库了，</p><p>（3）请求B查询缓存发现，缓存没有值</p><p>（4）请求B去从库查询，这时，还没有完成主从同步，因此查询到的是旧值</p><p>（5）请求B将旧值写入缓存</p><p>（6）数据库完成主从同步，从库变为新值 上述情形，就是数据不一致的原因。还是使用双删延时策略。只是，睡眠时间修改为在主从同步的延时时间基础上，加几百ms。</p><p><strong>采用这种同步淘汰策略，吞吐量降低怎么办？</strong></p><p>ok，那就将第二次删除作为异步的。自己起一个线程，异步删除。这样，写的请求就不用沉睡一段时间后了，再返回。这么做，加大吞吐量。</p><p><strong>第二次删除,如果删除失败怎么办？</strong></p><p>这是个非常好的问题，因为第二次删除失败，就会出现如下情形。还是有两个请求，一个请求A进行更新操作，另一个请求B进行查询操作，为了方便，假设是单库：</p><p>（1）请求A进行写操作，删除缓存</p><p>（2）请求B查询发现缓存不存在</p><p>（3）请求B去数据库查询得到旧值</p><p>（4）请求B将旧值写入缓存</p><p>（5）请求A将新值写入数据库</p><p>（6）请求A试图去删除请求B写入对缓存值，结果失败了。 ok,这也就是说。如果第二次删除缓存失败,会再次出现缓存和数据库不一致的问题。 <strong>如何解决呢？</strong> 具体解决方案，且看第(3)种更新策略的解析。</p><h2 id="先更新数据库-再删缓存"><a href="#先更新数据库-再删缓存" class="headerlink" title="先更新数据库,再删缓存"></a>先更新数据库,再删缓存</h2><p>首先，先说一下。老外提出了一个缓存更新套路，名为<a href="https://link.zhihu.com/?target=https://docs.microsoft.com/en-us/azure/architecture/patterns/cache-aside">《Cache-Aside pattern》</a>。其中就指出</p><ol><li><strong>失效</strong>：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</li><li><strong>命中</strong>：应用程序从cache中取数据，取到后返回。</li><li><strong>更新</strong>：先把数据存到数据库中，成功后，再让缓存失效。</li></ol><p>另外，知名社交网站facebook也在论文<a href="https://link.zhihu.com/?target=https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf">《Scaling Memcache at Facebook》</a>中提出，他们用的也是先更新数据库，再删缓存的策略。</p><p><strong>这种情况不存在并发问题么？</strong></p><p>不是的。假设这会有两个请求，一个请求A做查询操作，一个请求B做更新操作，那么会有如下情形产生</p><p>（1）缓存刚好失效</p><p>（2）请求A查询数据库，得一个旧值</p><p>（3）请求B将新值写入数据库</p><p>（4）请求B删除缓存</p><p>（5）请求A将查到的旧值写入缓存 ok，如果发生上述情况，确实是会发生脏数据。</p><p><strong>然而，发生这种情况的概率又有多少呢？</strong></p><p>发生上述情况有一个先天性条件，就是步骤（3）的写数据库操作比步骤（2）的读数据库操作耗时更短，才有可能使得步骤（4）先于步骤（5）。</p><p>可是，大家想想，数据库的读操作的速度远快于写操作的（不然做读写分离干嘛，做读写分离的意义就是因为读操作比较快，耗资源少），因此步骤（3）耗时比步骤（2）更短，这一情形很难出现。 假设，有人非要抬杠，有强迫症，一定要解决怎么办？</p><p><strong>如何解决上述并发问题？</strong></p><p>首先，给缓存设有效时间是一种方案。其次，采用策略（2）里给出的异步延时删除策略，保证读请求完成以后，再进行删除操作。</p><p><strong>还有其他造成不一致的原因么？</strong></p><p>有的，这也是缓存更新策略（2）和缓存更新策略（3）都存在的一个问题，如果删缓存失败了怎么办，那不是会有不一致的情况出现么。比如一个写数据请求，然后写入数据库了，删缓存失败了，这会就出现不一致的情况了。这也是缓存更新策略（2）里留下的最后一个疑问。</p><p><strong>如何解决？</strong> 提供一个保障的重试机制即可，这里给出两套方案。</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一:"></a>方案一:</h3><p><img src="/2023/01/07/Redis%E4%B8%8EMysql%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88/2.png" alt="2"></p><p>流程如下所示</p><p>（1）更新数据库数据；</p><p>（2）缓存因为种种问题删除失败</p><p>（3）将需要删除的key发送至消息队列</p><p>（4）自己消费消息，获得需要删除的key</p><p>（5）继续重试删除操作，直到成功 然而，该方案有一个缺点，对业务线代码造成大量的侵入。于是有了方案二，在方案二中，启动一个订阅程序去订阅数据库的binlog，获得需要操作的数据。在应用程序中，另起一段程序，获得这个订阅程序传来的信息，进行删除缓存操作。</p><h3 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h3><p><img src="/2023/01/07/Redis%E4%B8%8EMysql%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88/3.png" alt="3"></p><p>流程如下图所示：</p><p>（1）更新数据库数据</p><p>（2）数据库会将操作信息写入binlog日志当中</p><p>（3）订阅程序提取出所需要的数据以及key</p><p>（4）另起一段非业务代码，获得该信息</p><p>（5）尝试删除缓存操作，发现删除失败</p><p>（6）将这些信息发送至消息队列</p><p>（7）重新从消息队列中获得该数据，重试操作。</p><p><strong>说明：</strong>上述的订阅binlog程序在mysql中有现成的中间件叫canal,可以完成订阅binlog日志的功能。至于oracle中,目前不知道有没有现成中间件可以使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务隔离级别</title>
      <link href="/2023/01/02/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
      <url>/2023/01/02/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="事务四大特性（ACID）"><a href="#事务四大特性（ACID）" class="headerlink" title="事务四大特性（ACID）"></a>事务四大特性（ACID）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原子性（Atomicity）：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。</span><br><span class="line">隔离性（Isolation）：事务之间相互隔离，不受影响，这与事务的隔离级别密切相关</span><br><span class="line">一致性（Consistency）：事务执行前后的状态要一致，可理解为数据一致性</span><br><span class="line">持久性（Durable）：事务完成之后，对数据的修改是永恒的，即时出现故障也能够正常保持</span><br></pre></td></tr></table></figure><p>​程序访问数据库，往往是多个线程并发执行多个事务，数据库要能进行隔离操作，以保证各个线程获取数据的准确性，所以，对于不同的事务，采用不同的隔离级别会有不同的结果。</p><p><strong>如果不考虑事务的隔离性,会发生几种问题</strong></p><p><strong>脏写（Dirty Write）</strong><br>    如果一个事务修改了另一个事务提交修改过的数据，就意味着发生了脏写现象。<br><strong>脏读（Dirty Read）</strong><br>    如果一个事务读到了另一个未提交事务修改过的数据，就意味着发生了脏读现象。<br><strong>不可重复读</strong><br>    如果一个事务修改了另一个未提交事务读取的数据，就意味着发生了不可重复读现象。<br><strong>幻读</strong><br>    如果一个事务先根据某些查询条件查询出一些记录，在该事务未提交时，另一个事务写入了一些符合那些收缩条件的记录（这里指INSERT，DELETE，UPDATE 操作），就以为着发生了幻读现象</p><h2 id="脏读，不可重复读，幻读"><a href="#脏读，不可重复读，幻读" class="headerlink" title="脏读，不可重复读，幻读"></a>脏读，不可重复读，幻读</h2><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>​脏读指的是读到了其他事务未提交的数据，未提交意味着这些数据可能会回滚，也就是可能最终不会存到数据库中，也就是不存在的数据。读到了并一定最终存在的数据，这就是脏读;</p><p><img src="/2023/01/02/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/1.jpg" alt="1"></p><p>​脏读最大的问题就是可能会读到不存在的数据。比如在上图中，事务B的更新数据被事务A读取，但是事务B回滚了，更新数据全部还原，也就是说事务A刚刚读到的数据并没有存在于数据库中。 <strong>从宏观来看，就是事务A读出了一条不存在的数据，这个问题是很严重的</strong></p><h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>不可重复读指的是在一个事务内，最开始读到的数据和事务结束前的任意时刻读到的同一批数据出现不一致的情况</p><p><img src="/2023/01/02/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/2.jpg" alt="2"></p><p>​<strong>事务 A 多次读取同一数据，但事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致.</strong></p><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p><strong>幻读错误的理解</strong></p><p>​幻读是事务A 执行两次 select 操作得到不同的数据集,即 select 1 得到 10 条记录,select 2 得到 15 条记录。 这其实并不是幻读,既然第一次和第二次读取的不一致,那不还是不可重复读吗,所以这是不可重复读的一种。</p><p><strong>正确的理解</strong></p><p>​幻读，并不是说两次读取获取的结果集不同，幻读侧重的方面是某一次的 select 操作得到的结果所表征的数据状态无法支撑后续的业务操作。</p><p>​更为具体一些：select 某记录是否存在，不存在，准备插入此记录，但执行 insert 时发现此记录已存在，无法插入，此时就发生了幻读.</p><p><img src="/2023/01/02/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/3.jpg" alt="3"></p><p>查的时候明明没有这条记录，但插入的时候 却告诉我 主键冲突，这就好像幻觉一样。</p><p>这才是所有的幻读。 <strong>不可重复读侧重表达 读-读，幻读则是说 读-写，用写来证实读的是鬼影</strong></p><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>​上面阐述了事务执行过程中可能会遇到的一些现象，这些现象会对事务的一致性产生不同程度的影响。上面严重性现象排序:</p><p>脏写 &gt; 脏读 &gt; 不可重复读 &gt; 幻读</p><p>为了解决上面的问题，数据库就指定了一个隔离级别标准，隔离级别越低，就越可能发生严重的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">READ UNCOMMITTED：未提交读（读未提交）</span><br><span class="line">READ COMMITTED：已提交读（读已提交）</span><br><span class="line">REPEATABLE READ：可重复读</span><br><span class="line">SERIALIZABLE：可串行化</span><br></pre></td></tr></table></figure><h3 id="Read-uncommitted-读未提交-ru"><a href="#Read-uncommitted-读未提交-ru" class="headerlink" title="Read uncommitted(读未提交)-ru"></a>Read uncommitted(读未提交)-ru</h3><p>​事务B读取到了事务A未提交的数据；A事务在写数据时，不允许B事务进行写操作，但允许B事务进行读操作</p><p>于是 B就会读到A事务写入，但没提交的数据，于是出现脏读</p><p><strong>解决了更新丢失，但会出现脏读</strong></p><h3 id="Read-committed-读已提交-rc"><a href="#Read-committed-读已提交-rc" class="headerlink" title="Read committed(读已提交)-rc"></a>Read committed(读已提交)-rc</h3><p>​写事务提交之前不允许其他事务的读操作，可以解决脏读问题。但会出现一个事务范围内两个相同的查询却返回了不同数据；</p><p>​<strong>解决了更新丢失和脏读问题,但是会出现数据不一致的情况</strong></p><h3 id="Repeatable-read-可重复读取-rr"><a href="#Repeatable-read-可重复读取-rr" class="headerlink" title="Repeatable read(可重复读取)-rr"></a>Repeatable read(可重复读取)-rr</h3><p>​<strong>在开始读取数据（事务开启）时，不再允许修改操作</strong>，这样就可以在同一个事务内两次读到的数据是一样的，因此称为是可重复读隔离级别，但是有时可能会出现幻读</p><p><strong>解决了更新丢失、脏读、不可重复读、但是还会出现幻读</strong></p><h3 id="Serializable-串行化"><a href="#Serializable-串行化" class="headerlink" title="Serializable(串行化)"></a>Serializable(串行化)</h3><p>​要求事务序列化执行，事务只能一个接着一个地执行，但不能并发执行，如果仅仅通过“行级锁”是无法实现序列化的，必须通过其他机制保证新插入的数据不会被执行查询操作的事务访问到。</p><p>​序列化是最高的事务隔离级别，同时代价也是最高的，性能很低，一般很少使用，在该级别下，事务顺序执行；在这个级别，可能导致大量的超时现象和锁竞争</p><p><strong>可以避免脏读、不可重复读，幻读</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交</td><td>是</td><td>是</td><td>是</td></tr><tr><td>读已提交</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读</td><td>否</td><td>否</td><td>是</td></tr><tr><td>串行</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><p>可能出现的现象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在 READ UNCOMMITTTED 隔离级别下，可能发生脏读，不可重复读和幻读现象；</span><br><span class="line">在 READ COMMITTED 隔离级别下，可能发生不可重复读和幻读现象，但是不可能发生脏读现象；</span><br><span class="line">在 REPEATABLE READ 隔离级别下，可能发生幻读现象，但是不可能发生脏读和不可重复读现象；</span><br><span class="line">在 SERIALIZABLE 隔离级别下，上述各种现象都不可能发生。</span><br></pre></td></tr></table></figure><p>脏写： 脏写这个现象对一致性影响太严重了，无论哪种隔离级别，都不允许出现脏写的情况发生</p><p><strong>Oracle仅支持两种隔离级别：Read Committed与Serializable，默认基本为RC</strong></p><p><strong>Mysql的InnoDB 引擎才支持事务，默认事务隔离级别为：REPEATABLE READ(可重复读)-RR</strong></p><p><strong>在RR这一隔离级别下，只能解决部分幻读问题，不能解决全部的幻读问题</strong></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>首先设置数据库的隔离级别为读未提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> session transaction isolation level read UNCOMMITTED</span><br></pre></td></tr></table></figure><p>数据库的隔离级别设置为读已提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> session transaction isolation level read committed</span><br></pre></td></tr></table></figure><p>隔离级别设置为可重复读</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> session transaction isolation level REPEATABLE READ</span><br></pre></td></tr></table></figure><p>用命令 SELECT @@tx_isolation;查询下设置的级别</p><p>假设我们现在有一张表，表中有 主键 <code>ID</code> 和 年龄 <code>age</code> 两个字段<br>执行一条 SQL：<code>insert into t value (1, 1)</code></p><p><strong>接下来我们开启两个事务，从上到下时间线</strong></p><table><thead><tr><th>执行时间顺序</th><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>1</td><td>启动事务，查询得到值 <strong>1</strong></td><td>启动事务</td></tr><tr><td>2</td><td>-</td><td>查询得到值 <strong>1</strong></td></tr><tr><td>3</td><td>-</td><td>将 <strong>1</strong> 改成 <strong>2</strong></td></tr><tr><td>4</td><td>查询得到值 V1</td><td>-</td></tr><tr><td>5</td><td>-</td><td>提交事务 B</td></tr><tr><td>6</td><td>查询得到值 V2</td><td>-</td></tr><tr><td>7</td><td>提交事务A</td><td>-</td></tr><tr><td>8</td><td>查询得到值 V3</td><td>-</td></tr></tbody></table><h3 id="读未提交隔离级别下"><a href="#读未提交隔离级别下" class="headerlink" title="读未提交隔离级别下"></a>读未提交隔离级别下</h3><ol><li>两个事务同时开启</li><li>事务B 获取值1</li><li>事务B 将其1改成2</li><li>事务A 得到 V1 的值为 2,原因:此隔离级别下,<strong>事务B虽然还没有提交，但是事务A 是可以看到被修改的结果的</strong></li><li>事务B 提交</li><li>事务A 拿到 V2 的值为 2</li><li>事务A 提交</li><li>事务A 拿到 V3 的值为 2</li></ol><h3 id="读已提交隔离级别下"><a href="#读已提交隔离级别下" class="headerlink" title="读已提交隔离级别下"></a>读已提交隔离级别下</h3><ol><li>两个事务同时开启</li><li>事务B 获取值1</li><li>事务B 将其1该为2</li><li>事务A 得到 V1 的值为 1，原因：读已提交隔离级别下,事务B 的更新再提交后才能被 A 看到,此刻还没有提交</li><li>事务B 提交</li><li>事务A 查询 V2 的值为 2，原因：事务B已经提交过了，则事务A 可以看到事务B的改动</li><li>事务A 提交</li><li>事务A 查询 V3 的值为 2</li></ol><h3 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h3><p>​<strong>用户在执行当前事务期间看到的数据前后必须是一致的。即从事务开始之前，没有外部事务进行写操作，则到该事务提交这段时间访问到的数据是一致的，只能看到自己所修改的数据.</strong></p><ol><li>两个事务同时开启</li><li>事务B 获取值1</li><li>事务B 将其1该为2</li><li>事务A 得到的值为 1，原因：可重复读隔离级别下，参考上面文字</li><li>事务B 提交</li><li>事务A 查询 V2 得到的值为 1，原因：可重复读隔离级别下，参考上面文字</li><li>事务A 提交</li><li>事务A 查询 V3 得到的值为 2，原因：当前事务已经提交，可以访问比当前事务提交更早一些提交事务对数据库进行的写操作</li></ol><h2 id="MVCC-多版本并发控制-原理"><a href="#MVCC-多版本并发控制-原理" class="headerlink" title="MVCC(多版本并发控制)原理"></a>MVCC(多版本并发控制)原理</h2><h3 id="版本链"><a href="#版本链" class="headerlink" title="版本链"></a>版本链</h3><p>​对于使用InnoDB存储引擎的表来说，它的聚簇索引记录中都包含两个必要的隐藏列（row_id并不是必要的，我们创建的表中有主键或者非NULL的UNIQUE键时都不会包含row_id列）：</p><ul><li>trx_id：每次一个事务对某条聚簇索引记录进行改动时，都会把该事务的事务id赋值给trx_id隐藏列。</li><li>roll_pointer：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</li></ul><p>比如，我们创建一个 hero 表，字段有 <code>number</code>，<code>name</code>，<code>country</code><br>执行SQL: <code>select * from hero</code></p><table><thead><tr><th>number</th><th>name</th><th>country</th></tr></thead><tbody><tr><td>1</td><td>刘备</td><td>蜀</td></tr></tbody></table><p>假如我们现在有两个事务对该条记录进行改动，分别是 <code>trx_100</code>，<code>trx_200</code></p><table><thead><tr><th>执行时间顺序</th><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>1</td><td>BEGIN</td><td></td></tr><tr><td>2</td><td></td><td>BEGIN</td></tr><tr><td>3</td><td>UPDATE hero SET name&#x3D;‘关羽’ WHER number &#x3D;1</td><td></td></tr><tr><td>4</td><td>UPDATE hero SET name&#x3D;‘张飞’ WHER number &#x3D;1</td><td></td></tr><tr><td>5</td><td>COMMIT;</td><td></td></tr><tr><td>6</td><td></td><td>UPDATE hero SET name&#x3D;‘赵云’ WHER number &#x3D;1</td></tr><tr><td>7</td><td></td><td>UPDATE hero SET name&#x3D;‘诸葛亮’ WHER number &#x3D;1</td></tr><tr><td>8</td><td></td><td>COMMIT;</td></tr></tbody></table><p>​上面表格中进行了4次修改的操作，并且对每次进行一次改动，都会形成一个条日志，每条日志中也都有一个 <code>roll_pointer</code> 属性。通过这个属性，可以将这些日志串成一个链表;</p><p><img src="/2023/01/02/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/4.png" alt="4"></p><p>​从上图中我们可以看出，新修改的指向原来，这样就形成了一个类似链表的结构。随着更新次数的增多，所有的版本都会被 roll_pointer 属性连接成一个链表，这个链表称为版本链。版本链的头节点就是当前记录的最新值。我们之后会利用这个记录的版本链来控制并发事务访问相同记录时的行为，我们把这种机制称为 “多版本并发控制”，即MVCC.</p><h3 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h3><p>​对于使用读已提交和可重复读隔离级别的事务来说，都必须保证督导已经提交事务修改过的记录。也就是说假如另一个事务已经修改了记录但尚未提交，则不能直接读取最新版本的记录。最核心的问题是：需要判断版本里链中那个版本是当前事务可见的。</p><h4 id="ReadView内容介绍"><a href="#ReadView内容介绍" class="headerlink" title="ReadView内容介绍"></a>ReadView内容介绍</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m_ids： 再生成 ReadView 时，当前系统中活跃的读写事务的事务 <span class="built_in">id</span> 列表</span><br><span class="line">min_trx_id： 在生成 ReadView 时，当前系统中活跃的读写事务中最小的事务 <span class="built_in">id</span>；也就是 m_ids中的最小值；</span><br><span class="line">max_trx_id： 在生成 ReadView 时，系统应该分配给下一个事务的事务 <span class="built_in">id</span> 值。</span><br><span class="line">creator_trx_id： 生成该 ReadView 的事务的事务 <span class="built_in">id</span>。</span><br></pre></td></tr></table></figure><p>有了这个 ReadView 后，在访问某条记录时，只需要按照下面的步骤来判断记录的某个版本是否可见。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果被访问本版本的 trx_id 属性值与 ReadView 中的 creator_trx_id 值相同，意味和当前事务正在访问它自己修改过的记录，所以该版本可以被当前事务访问。</span><br><span class="line">如果被访问版本的 trx_id 属性值小于 ReadView 中的 trx_id值，表明生成该版本的事务在当前事务生成 ReadView 前已经提交了，被访问的已经不活跃了，所以该版本可以被当前事务访问。</span><br><span class="line">如果被访问版本的 trx_id 属性值大于或等于 ReadView 中的 max_trx_id 值，表明生成改本的事务在当前事务生成 ReadView 后开启，即事务还没有开启，所以该版本不能被当前事务所访问。</span><br><span class="line">如果被访问版本的 trx_id 属性值在 ReadView 的 min_trx_id 和 max_trx_id 之间，则需要判断 trx_id 属性值是否在 m_ids 列表中。如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该版本不可被访问；如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。</span><br></pre></td></tr></table></figure><p>​如果某个版本的数据对当前事务是不可见的，那就顺着版本链找到下一个版本的数据，并继续执行上面的步骤来判断记录的可见性；以此类推，知道版本链中最后一个版本。如果记录的最后一个版本也不可见，就意味着该条记录对当前事务完全不可见，查询结果就不包含该记录。</p><h3 id="不同隔离级别生成-ReadView-的时机"><a href="#不同隔离级别生成-ReadView-的时机" class="headerlink" title="不同隔离级别生成 ReadView 的时机"></a>不同隔离级别生成 ReadView 的时机</h3><h4 id="读已提交（READ-COMMITTED）"><a href="#读已提交（READ-COMMITTED）" class="headerlink" title="读已提交（READ COMMITTED）"></a>读已提交（READ COMMITTED）</h4><p>该隔离级别下，每次读取数据前都会生成一个 ReadView</p><h4 id="可重复读（REPEATABLE-READ）"><a href="#可重复读（REPEATABLE-READ）" class="headerlink" title="可重复读（REPEATABLE READ）"></a>可重复读（REPEATABLE READ）</h4><p>该隔离级别下，在第一次读取数据时生成一个 ReadView</p><h2 id="为什么可重复读只能解决部分幻读问题"><a href="#为什么可重复读只能解决部分幻读问题" class="headerlink" title="为什么可重复读只能解决部分幻读问题"></a>为什么可重复读只能解决部分幻读问题</h2><h3 id="验证准备"><a href="#验证准备" class="headerlink" title="验证准备"></a>验证准备</h3><p>假设我们有一张表 hero，字段有 <code>number</code>，<code>name</code>，<code>country</code>，目前该表中有 3 条数据，如下表</p><table><thead><tr><th>number</th><th>name</th><th>country</th></tr></thead><tbody><tr><td>1</td><td>刘备</td><td>蜀</td></tr><tr><td>2</td><td>赵云</td><td>蜀</td></tr><tr><td>3</td><td>曹操</td><td>魏</td></tr></tbody></table><h3 id="两个并发事务"><a href="#两个并发事务" class="headerlink" title="两个并发事务"></a>两个并发事务</h3><h4 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h4><table><thead><tr><th>执行时间顺序</th><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>1</td><td>BEGIN</td><td></td></tr><tr><td>2</td><td></td><td>BEGIN</td></tr><tr><td>3</td><td></td><td>SELECT * FROM hero</td></tr><tr><td>4</td><td>INSERT INTO hero value(4, ‘孙权’, ‘吴’)</td><td></td></tr><tr><td>5</td><td>COMMIT;</td><td></td></tr><tr><td>6</td><td></td><td>SELECT * FROM hero</td></tr><tr><td>7</td><td></td><td>COMMIT;</td></tr></tbody></table><p><strong>分析</strong></p><ol><li>事务A 开始执行</li><li>事务B 开始执行</li><li>事务A 插入一条记录</li><li>事务A 提交事务</li><li>事务B 进行全表查询</li><li>事务B 提交事务</li></ol><p>此时，在可重复读隔离级别下来，我们看看事务B 所查询到的数据；第一次查询结果</p><table><thead><tr><th>number</th><th>name</th><th>country</th></tr></thead><tbody><tr><td>1</td><td>刘备</td><td>蜀</td></tr><tr><td>2</td><td>赵云</td><td>蜀</td></tr><tr><td>3</td><td>曹操</td><td>魏</td></tr></tbody></table><p>第二次查询结果</p><table><thead><tr><th>number</th><th>name</th><th>country</th></tr></thead><tbody><tr><td>1</td><td>刘备</td><td>蜀</td></tr><tr><td>2</td><td>赵云</td><td>蜀</td></tr><tr><td>3</td><td>曹操</td><td>魏</td></tr></tbody></table><p>发现两次查询的结果是一样的，没有读到 事务A 新插入的数据</p><h4 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h4><table><thead><tr><th>执行时间顺序</th><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>1</td><td>BEGIN</td><td></td></tr><tr><td>2</td><td></td><td>BEGIN</td></tr><tr><td>3</td><td></td><td>SELECT * FROM hero</td></tr><tr><td>4</td><td>INSERT INTO hero value(5, ‘孙权’, ‘吴’)</td><td></td></tr><tr><td>5</td><td>COMMIT;</td><td></td></tr><tr><td>6</td><td></td><td>UPDATE hero SET country&#x3D;‘吴蜀魏’ WHER number &lt; 10</td></tr><tr><td>7</td><td></td><td>SELECT * FROM hero</td></tr><tr><td>8</td><td></td><td>COMMIT;</td></tr></tbody></table><p>我们发现第二种情况是事务B 在执行了一次修改操作之后，再次查询。看两次查询到的数据</p><p>第一次查询结果</p><table><thead><tr><th>number</th><th>name</th><th>country</th></tr></thead><tbody><tr><td>1</td><td>刘备</td><td>蜀</td></tr><tr><td>2</td><td>赵云</td><td>蜀</td></tr><tr><td>3</td><td>曹操</td><td>魏</td></tr></tbody></table><p>第二次查询结果</p><table><thead><tr><th>number</th><th>name</th><th>country</th></tr></thead><tbody><tr><td>1</td><td>刘备</td><td>吴蜀魏</td></tr><tr><td>2</td><td>赵云</td><td>吴蜀魏</td></tr><tr><td>3</td><td>曹操</td><td>吴蜀魏</td></tr><tr><td>5</td><td>孙权</td><td>吴蜀魏</td></tr></tbody></table><p>这个时候我们发现两次查到的结果并不一样，莫名奇妙多了一条记录，出现这样的情况，这是为什么呢？</p><p>​原因：当事务A 插入一条记录之后，事务B 如果不对其进行写的操作，那么事务B 在提交之前再次查询并会出现幻读情况，如果对其他事务做了修改并且再次查询，那么就会将其他事务写的操作归到自己的事务所有，这样自己的事务查询自己所修改的数据当然是可以查出来了。由于这样的操作，我们就可以明白“在可重复读”隔离级别下只能解决部分幻读问题这句话了</p><h2 id="二级索引与MVCC"><a href="#二级索引与MVCC" class="headerlink" title="二级索引与MVCC"></a>二级索引与MVCC</h2><p>​通过上面的讲解，我们知道，只有在聚簇索引记录中才有 trx_id 和 roll_pointer，如果某个查询语句是使用的二级索引来查询，该如何判断可见性？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">二级索引页面的Page Header部分有一个名为 PAGE_MAX_TRX_ID 的属性，执行增删改操作时，如果执行该操作的事物的事务id大于PAGE_MAX_TRX_ID的属性值,则将其值设置为执行操作的事务id，这就意味着 PAGE_MAX_TRX_ID 属性值设置为执行该操作的最大事务 id。</span><br><span class="line">当 SELECT 语句访问某个二级索引记录时，如果 ReadView 的 min_trx_id &gt; PAGE_MAX_TRX_ID 属性值？如果是，则说明该页面中的所有记录对该 ReadView 可见；否则就需要执行回表判断</span><br><span class="line">利用二级索引记录中的主键值进行回表操作，得到对应的聚簇索引记录后在按照聚簇索引的方式，判断该可见性。</span><br><span class="line">执行写操作会生成 事务id 和 ReadView;执行读操作只会生成 ReadView</span><br></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>​所谓的MVCC(Multi-Version Concurrency Control ,多版本并发控制)指的就是在使用READ COMMITTD、REPEATABLE READ这两种隔离级别的事务在执行普通的SELECT操作时访问记录的版本链的过程，这样子可以使不同事务的读-写、写-读操作并发执行，从而提升系统性能。READ COMMITTD、REPEATABLE READ这两个隔离级别的一个很大不同就是：生成ReadView的时机不同，READ COMMITTD在每一次进行普通SELECT操作前都会生成一个ReadView，而REPEATABLE READ只在第一次进行普通SELECT操作前生成一个ReadView，之后的查询操作都重复使用这个ReadView就好了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF-SHOP</title>
      <link href="/2022/12/09/DRF-SHOP/"/>
      <url>/2022/12/09/DRF-SHOP/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="创建虚拟环境并安装依赖"><a href="#创建虚拟环境并安装依赖" class="headerlink" title="创建虚拟环境并安装依赖"></a>创建虚拟环境并安装依赖</h3><ol><li>安装虚拟环境: pip install virtualenv</li><li>安装虚拟环境管理包：pip install virtualenvwrapper-win</li><li>将虚拟环境管理工具添加到环境变量：变量名：WORKON_HOME变量值为存储虚拟环境的盘符路径</li><li>安装django框架与相关库依赖</li></ol><h3 id="创建项目及应用"><a href="#创建项目及应用" class="headerlink" title="创建项目及应用"></a>创建项目及应用</h3><ol><li>可通过pycharm创建项目，也可通过命令行创建项目：django-admin startproject  ProjectName</li><li>创建应用统一放在根目录下的apps文件夹下，让django读取应用将apps加入环境变量</li><li>进入到apps文件夹下：cd apps 然后 python manage.py startapp AppName</li><li>将应用注册到settings中的INSTALLED_APPS中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BASE_DIR = Path(__file__).resolve().parent.parent</span><br><span class="line">sys.path.insert(<span class="number">2</span>, os.path.join(BASE_DIR, <span class="string">&#x27;apps&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="创建并配置数据库"><a href="#创建并配置数据库" class="headerlink" title="创建并配置数据库"></a>创建并配置数据库</h3><ol><li>创建一个本地用户以及本地数据库</li><li>赋予这个库的所有权限给这个用户</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">create</span> <span class="keyword">user</span> shopping @<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;shopping&#x27;</span>;</span><br><span class="line"><span class="number">2.</span> <span class="keyword">create</span> database shop charset<span class="operator">=</span>utf8mb4;</span><br><span class="line"><span class="number">3.</span> <span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> shop.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;shoping&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br></pre></td></tr></table></figure><p>django中settings文件配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;shop&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;shopping&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;shopping&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"><span class="keyword">from</span> apps.user.views <span class="keyword">import</span> ImageView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">  <span class="comment"># 用户模块</span></span><br><span class="line">    path(<span class="string">&#x27;api/user/&#x27;</span>, include(<span class="string">&#x27;apps.user.urls&#x27;</span>)),</span><br><span class="line">    <span class="comment"># 商品模块</span></span><br><span class="line">    path(<span class="string">&#x27;api/goods/&#x27;</span>, include(<span class="string">&#x27;apps.goods.urls&#x27;</span>)),</span><br><span class="line">    <span class="comment"># 购物车模块</span></span><br><span class="line">    path(<span class="string">&#x27;api/cart/&#x27;</span>, include(<span class="string">&#x27;apps.cart.urls&#x27;</span>)),</span><br><span class="line">    <span class="comment"># 订单模块</span></span><br><span class="line">    path(<span class="string">&#x27;api/order/&#x27;</span>, include(<span class="string">&#x27;apps.order.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="时区配置"><a href="#时区配置" class="headerlink" title="时区配置"></a>时区配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="模型类定义"><a href="#模型类定义" class="headerlink" title="模型类定义"></a>模型类定义</h2><h3 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h3><p>创建一个基础表模型用于部分表继承，位于BASE_DIR\apps\common\model.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseModel</span>(models.Model):</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;创建时间&#x27;</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;更新时间&#x27;</span>)</span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&#x27;是否删除&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        abstract = <span class="literal">True</span>  <span class="comment"># 抽奖表不生成</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;公共字段表&#x27;</span></span><br><span class="line">        db_table = <span class="string">&#x27;BaseTable&#x27;</span>          <span class="comment"># 生成的表名</span></span><br></pre></td></tr></table></figure><h4 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(AbstractUser, BaseModel):</span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">&#x27;手机号&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    avatar = models.ImageField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;头像&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;用户表&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="收货地址表"><a href="#收货地址表" class="headerlink" title="收货地址表"></a>收货地址表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">16</span>, verbose_name=<span class="string">&#x27;收货人姓名&#x27;</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">&#x27;收货手机号&#x27;</span>)</span><br><span class="line">    province = models.CharField(verbose_name=<span class="string">&#x27;省份/直辖市&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    city = models.CharField(verbose_name=<span class="string">&#x27;城市&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    country = models.CharField(verbose_name=<span class="string">&#x27;区县&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    detail_addr = models.CharField(verbose_name=<span class="string">&#x27;详细地址&#x27;</span>, max_length=<span class="number">96</span>)</span><br><span class="line">    is_default = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&#x27;是否为默认地址&#x27;</span>)</span><br><span class="line">    <span class="comment"># 外键字段</span></span><br><span class="line">    user = models.ForeignKey(to=<span class="string">&#x27;User&#x27;</span>, verbose_name=<span class="string">&#x27;所属用户&#x27;</span>, db_constraint=<span class="literal">False</span>, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;addr&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;收货地址表&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="省市区域表"><a href="#省市区域表" class="headerlink" title="省市区域表"></a>省市区域表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Area</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;省市区详细地址表模型&quot;&quot;&quot;</span></span><br><span class="line">    pid = models.IntegerField(verbose_name=<span class="string">&#x27;上级ID&#x27;</span>)</span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;地区名&#x27;</span>, max_length=<span class="number">96</span>)</span><br><span class="line">    level = models.CharField(verbose_name=<span class="string">&#x27;区域等级&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;area&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;区域表&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VerifyCode</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;验证码模型&quot;&quot;&quot;</span></span><br><span class="line">    phone = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">&#x27;手机号码&#x27;</span>)</span><br><span class="line">    code = models.CharField(max_length=<span class="number">6</span>, verbose_name=<span class="string">&#x27;验证码&#x27;</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;生成时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;verifycode&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;验证码表&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="商品相关"><a href="#商品相关" class="headerlink" title="商品相关"></a>商品相关</h3><h4 id="商品分类表"><a href="#商品分类表" class="headerlink" title="商品分类表"></a>商品分类表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsGroup</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">16</span>, verbose_name=<span class="string">&#x27;分类名称&#x27;</span>)</span><br><span class="line">    image = models.ImageField(verbose_name=<span class="string">&#x27;分类图标&#x27;</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, max_length=<span class="number">200</span>)</span><br><span class="line">    status = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&#x27;是否启用&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;goods_group&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;商品分类表&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="商品表"><a href="#商品表" class="headerlink" title="商品表"></a>商品表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&#x27;标题&#x27;</span>, max_length=<span class="number">20</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    desc = models.CharField(verbose_name=<span class="string">&#x27;商品描述&#x27;</span>, max_length=<span class="number">200</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&#x27;商品价格&#x27;</span>)</span><br><span class="line">    cover = models.ImageField(verbose_name=<span class="string">&#x27;封面图片链接&#x27;</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    stock = models.IntegerField(verbose_name=<span class="string">&#x27;库存&#x27;</span>, blank=<span class="literal">True</span>, default=<span class="number">1</span>)</span><br><span class="line">    sales = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;销量&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    is_on = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&#x27;是否上架&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    recommend = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&#x27;是否推荐&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 外键字段</span></span><br><span class="line">    group = models.ForeignKey(to=<span class="string">&#x27;GoodsGroup&#x27;</span>, verbose_name=<span class="string">&#x27;分类&#x27;</span>, max_length=<span class="number">16</span>, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;goods&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;商品表&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="商品详情表"><a href="#商品详情表" class="headerlink" title="商品详情表"></a>商品详情表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Detail</span>(models.Model):</span><br><span class="line">    producer = models.CharField(verbose_name=<span class="string">&#x27;厂商&#x27;</span>, max_length=<span class="number">96</span>)</span><br><span class="line">    norms = models.CharField(verbose_name=<span class="string">&#x27;规格&#x27;</span>, max_length=<span class="number">200</span>)</span><br><span class="line">    detail = RichTextField(blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;商品详情&#x27;</span>)</span><br><span class="line">    <span class="comment"># 外键字段一对一,应该放在商品表</span></span><br><span class="line">    goods = models.OneToOneField(to=<span class="string">&#x27;Goods&#x27;</span>, verbose_name=<span class="string">&#x27;商品&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;detail&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;商品详情表&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.goods.title</span><br></pre></td></tr></table></figure><h4 id="首页商品轮播图表"><a href="#首页商品轮播图表" class="headerlink" title="首页商品轮播图表"></a>首页商品轮播图表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsBanner</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;商品轮播图&quot;&quot;&quot;</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;轮播图名称&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    image = models.ImageField(verbose_name=<span class="string">&#x27;轮播图链接&#x27;</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># url = models.CharField(verbose_name=&#x27;跳转的地址&#x27;, max_length=200, default=&#x27;&#x27;)</span></span><br><span class="line">    status = models.BooleanField(verbose_name=<span class="string">&#x27;是否启用&#x27;</span>, default=<span class="literal">False</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    seq = models.IntegerField(verbose_name=<span class="string">&#x27;顺序&#x27;</span>, default=<span class="number">1</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;banner&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;首页商品轮播图表&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><h4 id="收藏商品表"><a href="#收藏商品表" class="headerlink" title="收藏商品表"></a>收藏商品表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Collect</span>(models.Model):</span><br><span class="line">    user = models.ForeignKey(to=<span class="string">&#x27;user.User&#x27;</span>, verbose_name=<span class="string">&#x27;用户id&#x27;</span>, on_delete=models.CASCADE, blank=<span class="literal">True</span>)</span><br><span class="line">    goods = models.ForeignKey(to=<span class="string">&#x27;Goods&#x27;</span>, verbose_name=<span class="string">&#x27;商品id&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;collect&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;收藏表&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.goods</span><br></pre></td></tr></table></figure><h3 id="购物车相关"><a href="#购物车相关" class="headerlink" title="购物车相关"></a>购物车相关</h3><h4 id="购物车表"><a href="#购物车表" class="headerlink" title="购物车表"></a>购物车表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cart</span>(models.Model):</span><br><span class="line">    <span class="comment"># 外键字段</span></span><br><span class="line">    user = models.ForeignKey(to=<span class="string">&#x27;user.User&#x27;</span>, verbose_name=<span class="string">&#x27;用户id&#x27;</span>, on_delete=models.CASCADE, blank=<span class="literal">True</span>)</span><br><span class="line">    goods = models.ForeignKey(to=<span class="string">&#x27;goods.Goods&#x27;</span>, verbose_name=<span class="string">&#x27;商品id&#x27;</span>,  on_delete=models.CASCADE)</span><br><span class="line">    </span><br><span class="line">    number = models.SmallIntegerField(verbose_name=<span class="string">&#x27;商品数量&#x27;</span>, default=<span class="number">1</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    is_checked = models.BooleanField(verbose_name=<span class="string">&#x27;是否选中&#x27;</span>, default=<span class="number">1</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;cart&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;购物车表&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="订单相关"><a href="#订单相关" class="headerlink" title="订单相关"></a>订单相关</h3><h4 id="订单主表"><a href="#订单主表" class="headerlink" title="订单主表"></a>订单主表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    ORDER_STATUS = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;待支付&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;待发货&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&#x27;配送中&#x27;</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">&#x27;待评价&#x27;</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">&#x27;已完成&#x27;</span>),</span><br><span class="line">        (<span class="number">6</span>, <span class="string">&#x27;已关闭&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    PAY_TYPES = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;支付宝&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;微信支付&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&#x27;云闪付&#x27;</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">&#x27;货到付款&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    addr = models.CharField(verbose_name=<span class="string">&#x27;收货地址&#x27;</span>, max_length=<span class="number">200</span>)</span><br><span class="line">    order_code = models.CharField(verbose_name=<span class="string">&#x27;订单编号&#x27;</span>, max_length=<span class="number">48</span>)</span><br><span class="line">    amount = models.FloatField(verbose_name=<span class="string">&#x27;订单总金额&#x27;</span>)</span><br><span class="line">    status = models.SmallIntegerField(verbose_name=<span class="string">&#x27;订单状态&#x27;</span>, default=<span class="number">1</span>, choices=ORDER_STATUS)</span><br><span class="line">    pay_type = models.SmallIntegerField(verbose_name=<span class="string">&#x27;支付方式&#x27;</span>, choices=PAY_TYPES, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    pay_time = models.DateTimeField(verbose_name=<span class="string">&#x27;支付时间&#x27;</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    trade_no = models.CharField(max_length=<span class="number">48</span>, verbose_name=<span class="string">&#x27;支付单号&#x27;</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 外键字段</span></span><br><span class="line">    user = models.ForeignKey(to=<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;下单用户&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;order&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;订单表&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.order_code</span><br></pre></td></tr></table></figure><h4 id="订单商品表"><a href="#订单商品表" class="headerlink" title="订单商品表"></a>订单商品表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OrderGoods</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    order = models.ForeignKey(to=<span class="string">&#x27;Order&#x27;</span>, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;所属订单&#x27;</span>)</span><br><span class="line">    goods = models.ForeignKey(to=<span class="string">&#x27;goods.Goods&#x27;</span>, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;商品id&#x27;</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">6</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&#x27;商品价格&#x27;</span>)</span><br><span class="line">    number = models.IntegerField(verbose_name=<span class="string">&#x27;商品数量&#x27;</span>, default=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;orderGoods&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;订单详情表&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="评论表"><a href="#评论表" class="headerlink" title="评论表"></a>评论表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Comment</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    RATES = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;好评&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;中评&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&#x27;差评&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    STARS = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;一星&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;二星&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&#x27;三星&#x27;</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">&#x27;四星&#x27;</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">&#x27;五星&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    user = models.ForeignKey(to=<span class="string">&#x27;user.User&#x27;</span>, verbose_name=<span class="string">&#x27;评论用户&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    order = models.ForeignKey(to=<span class="string">&#x27;Order&#x27;</span>, verbose_name=<span class="string">&#x27;所属订单&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    goods = models.ForeignKey(to=<span class="string">&#x27;goods.Goods&#x27;</span>, verbose_name=<span class="string">&#x27;所属商品&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    content = models.CharField(max_length=<span class="number">500</span>, verbose_name=<span class="string">&#x27;评论内容&#x27;</span>, default=<span class="string">&#x27;五星好评&#x27;</span>)</span><br><span class="line">    rate = models.SmallIntegerField(choices=RATES, verbose_name=<span class="string">&#x27;评论级别&#x27;</span>, default=<span class="number">1</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    star = models.SmallIntegerField(choices=STARS, verbose_name=<span class="string">&#x27;评论星级&#x27;</span>, default=<span class="number">5</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;comment&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;订单评论表&#x27;</span></span><br></pre></td></tr></table></figure><p>表模型设计好之后迁移数据：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. python manage.py makemigrations</span><br><span class="line"><span class="number">2</span>. python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h2><h3 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h3><p>创建超级管理员,安装djangorestframework-simplejwt</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. python manage.py createsuperuser</span><br><span class="line"><span class="number">2</span>. pip install djangorestframework<span class="literal">-simplejwt</span></span><br></pre></td></tr></table></figure><p>添加到settings中的INSTALLED_APPS中；并配置登录鉴权以及jwt的配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 配置登录鉴权方式</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework_simplejwt.authentication.JWTAuthentication&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">SIMPLE_JWT = &#123;</span><br><span class="line">    <span class="string">&#x27;ACCESS_TOKEN_LIFETIME&#x27;</span>: timedelta(days=<span class="number">1</span>),  <span class="comment"># 访问令牌的有效时间</span></span><br><span class="line">    <span class="string">&quot;REFRESH_TOKEN_LIFETIME&quot;</span>: timedelta(days=<span class="number">1</span>),  <span class="comment"># 刷新令牌的有效时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现登录视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_simplejwt.views <span class="keyword">import</span> TokenObtainPairView</span><br><span class="line"><span class="keyword">from</span> rest_framework_simplejwt.exceptions <span class="keyword">import</span> TokenError, InvalidToken</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">TokenObtainPairView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;登录接口&quot;&quot;&quot;</span></span><br><span class="line">        serializer = self.get_serializer(data=request.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">except</span> TokenError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> InvalidToken(e.args[<span class="number">0</span>])</span><br><span class="line">        result = serializer.validated_data</span><br><span class="line">        <span class="comment"># 自定义登陆成功后的返回字段</span></span><br><span class="line">        result[<span class="string">&#x27;id&#x27;</span>] = serializer.user.<span class="built_in">id</span></span><br><span class="line">        result[<span class="string">&#x27;mobile&#x27;</span>] = serializer.user.mobile</span><br><span class="line">        result[<span class="string">&#x27;email&#x27;</span>] = serializer.user.email</span><br><span class="line">        result[<span class="string">&#x27;username&#x27;</span>] = serializer.user.username</span><br><span class="line">        result[<span class="string">&#x27;token&#x27;</span>] = result.pop(<span class="string">&#x27;access&#x27;</span>)</span><br><span class="line">        result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;登陆成功&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> Response(result, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><h3 id="实现多方式登录"><a href="#实现多方式登录" class="headerlink" title="实现多方式登录"></a>实现多方式登录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> apps.user <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginModelBackend</span>(<span class="title class_ inherited__">ModelBackend</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义登录认证类实现,多方式登录&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request, username=<span class="literal">None</span>, password=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = models.User.objects.get(Q(username=username) | Q(mobile=username) | Q(email=username))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;用户不存在&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> serializers.ValidationError(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;密码不正确&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>往settings文件中配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUTHENTICATION_BACKENDS = [<span class="string">&#x27;apps.common.authentication.LoginModelBackend&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 一、接收用户参数</span></span><br><span class="line">        username = request.data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        password_confirmation = request.data.get(<span class="string">&#x27;password_confirmation&#x27;</span>)</span><br><span class="line">        email = request.data.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">        <span class="comment"># 二、参数校验</span></span><br><span class="line">        <span class="comment"># 1.校验参数是否为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([username, password, password_confirmation, email]):</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;相关数据信息不能为空&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="comment"># 2.校验用户是否注册</span></span><br><span class="line">        <span class="keyword">if</span> models.User.objects.<span class="built_in">filter</span>(username=username).exists():</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;用户名已存在&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="comment"># 3.校验两次密码是否一致</span></span><br><span class="line">        <span class="keyword">if</span> password != password_confirmation:</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;两次密码不一致&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="comment"># 4.检验密码长度</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">4</span> &lt;= <span class="built_in">len</span>(password) &lt;= <span class="number">16</span>):</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;密码长度需要在4-16位之间&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="comment"># 5.校验邮箱是否存在</span></span><br><span class="line">        <span class="keyword">if</span> models.User.objects.<span class="built_in">filter</span>(email=email).exists():</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;邮箱已被其他用户使用&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="comment"># 6.校验邮箱格式合法性 &#x27;.*@.*com$&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^[a-z0-9][\w.\-]*@[a-z0-9\-]+(\.[a-z]&#123;2,5&#125;)&#123;1,2&#125;$&#x27;</span>, email):</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;邮箱格式不符合规范&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="comment"># 三、创建用户</span></span><br><span class="line">        user_obj = models.User.objects.create_user(username=username, password=password, email=email)</span><br><span class="line">        result = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: user_obj.<span class="built_in">id</span>,</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">            <span class="string">&#x27;email&#x27;</span>: user_obj.email,</span><br><span class="line">            <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;注册成功&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(data=result, status=status.HTTP_201_CREATED)</span><br></pre></td></tr></table></figure><h3 id="刷新和校验token"><a href="#刷新和校验token" class="headerlink" title="刷新和校验token"></a>刷新和校验token</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework_simplejwt.views <span class="keyword">import</span> TokenVerifyView, TokenRefreshView</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新token 参数填refresh</span></span><br><span class="line">path(<span class="string">&#x27;token/refresh/&#x27;</span>, TokenRefreshView.as_view()),</span><br><span class="line"><span class="comment"># 校验token  参数填token 通过无响应体返回一个&#123;&#125;</span></span><br><span class="line">path(<span class="string">&#x27;token/verify/&#x27;</span>, TokenVerifyView.as_view()),</span><br></pre></td></tr></table></figure><h3 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h3><p>获取个人信息时，进行权限校验，需要在请求头添加token字段；防止越权只能获取自己的用户数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserPermission</span>(permissions.BasePermission):</span><br><span class="line">    <span class="comment"># DRF对象级权限</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span><br><span class="line">        <span class="comment"># 判断登录账号是否为管理员</span></span><br><span class="line">        <span class="keyword">if</span> request.user.is_superuser:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 如果不是管理员 则判断操作的用户对象和登录的用户对象是否为同一个</span></span><br><span class="line">        <span class="keyword">return</span> obj == request.user</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfoView</span>(GenericViewSet, mixins.RetrieveModelMixin):</span><br><span class="line">    queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ser.UserModelSerializer</span><br><span class="line">    permission_classes = [IsAuthenticated, UserPermission]</span><br></pre></td></tr></table></figure><h3 id="上传-x2F-更新头像"><a href="#上传-x2F-更新头像" class="headerlink" title="上传&#x2F;更新头像"></a>上传&#x2F;更新头像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;&lt;int:pk&gt;/avatar/upload/&#x27;</span>, views.UserInfoView.as_view(&#123;<span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;upload_avatar&#x27;</span>&#125;)),</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_avatar</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;上传用户头像&quot;&quot;&quot;</span></span><br><span class="line">    avatar = request.data.get(<span class="string">&#x27;avatar&#x27;</span>)</span><br><span class="line">    <span class="comment"># 校验是否上传文件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> avatar:</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;上传失败文件不能为空&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">    <span class="comment"># 校验文件大小不能超过1MB</span></span><br><span class="line">    <span class="keyword">if</span> avatar.size &gt; <span class="number">1024</span> * <span class="number">1024</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;文件不能超过1MB&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">    <span class="comment"># 文件保存</span></span><br><span class="line">    user = self.get_object()</span><br><span class="line">    <span class="comment"># 获取序列化对象</span></span><br><span class="line">    ser_obj = self.get_serializer(user, &#123;<span class="string">&#x27;avatar&#x27;</span>: avatar&#125;, partial=<span class="literal">True</span>)</span><br><span class="line">    ser_obj.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">    ser_obj.save()</span><br><span class="line">    <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;url&#x27;</span>: ser_obj.data[<span class="string">&#x27;avatar&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><h3 id="查看用户头像"><a href="#查看用户头像" class="headerlink" title="查看用户头像"></a>查看用户头像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">MEDIA_URL = <span class="string">&#x27;/file/image/&#x27;</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;查看头像&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, name</span>):</span><br><span class="line">        path = os.path.join(settings.MEDIA_ROOT, name)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(path):</span><br><span class="line">            <span class="keyword">return</span> FileResponse(<span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;路径下没找到该文件&#x27;</span>&#125;, status=status.HTTP_404_NOT_FOUND)</span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="comment"># 暴露图片接口</span></span><br><span class="line">re_path(<span class="string">r&#x27;file/image/(.+?)/&#x27;</span>, ImageView.as_view()),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露后端media资源文件夹</span></span><br><span class="line">re_path(<span class="string">&#x27;^media/(?P&lt;path&gt;.*)&#x27;</span>, serve, &#123;<span class="string">&#x27;document_root&#x27;</span>: settings.MEDIA_ROOT&#125;),</span><br></pre></td></tr></table></figure><h3 id="添加收货地址"><a href="#添加收货地址" class="headerlink" title="添加收货地址"></a>添加收货地址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AddrPermission</span>(permissions.BasePermission):</span><br><span class="line">    <span class="comment"># DRF对象级权限</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span><br><span class="line">        <span class="comment"># 判断登录账号是否为管理员</span></span><br><span class="line">        <span class="keyword">if</span> request.user.is_superuser:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 如果不是管理员 则判断操作的用户对象和登录的用户对象是否为同一个</span></span><br><span class="line">        <span class="keyword">return</span> obj.user == request.user</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddrView</span>(GenericViewSet, mixins.ListModelMixin, mixins.UpdateModelMixin,</span><br><span class="line">               mixins.DestroyModelMixin, mixins.CreateModelMixin):</span><br><span class="line">    queryset = models.Address.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ser.AddrModelSerializer</span><br><span class="line">    permission_classes = [IsAuthenticated, AddrPermission]</span><br></pre></td></tr></table></figure><h3 id="获取地址列表"><a href="#获取地址列表" class="headerlink" title="获取地址列表"></a>获取地址列表</h3><p>需要过滤出属于当前登录用户的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">    <span class="comment"># 过滤出收货地址模型中字段user等于当前用户id的收货地址</span></span><br><span class="line">    queryset = queryset.<span class="built_in">filter</span>(user=request.user)</span><br><span class="line">    serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure><h3 id="更新-x2F-删除地址"><a href="#更新-x2F-删除地址" class="headerlink" title="更新&#x2F;删除地址"></a>更新&#x2F;删除地址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py 修改和删除收货地址</span></span><br><span class="line">path(<span class="string">&#x27;address/&lt;int:pk&gt;/&#x27;</span>, views.AddrView.as_view(&#123;<span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>:<span class="string">&#x27;destroy&#x27;</span>&#125;)),</span><br></pre></td></tr></table></figure><h3 id="设置默认地址"><a href="#设置默认地址" class="headerlink" title="设置默认地址"></a>设置默认地址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_default_addr</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;设置默认收货地址&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1.获取要设置的地址对象</span></span><br><span class="line">    obj = self.get_object()</span><br><span class="line">    <span class="comment"># 2.将该地址设为默认地址，将用户的其他地址设置为非默认</span></span><br><span class="line">    obj.is_default = <span class="literal">True</span></span><br><span class="line">    obj.save()</span><br><span class="line">    <span class="comment"># 获取用户的所有收货地址</span></span><br><span class="line">    queryset = self.get_queryset().<span class="built_in">filter</span>(user=request.user)</span><br><span class="line">    <span class="keyword">for</span> addr <span class="keyword">in</span> queryset:</span><br><span class="line">        <span class="keyword">if</span> addr != obj:</span><br><span class="line">            addr.is_default = <span class="literal">False</span></span><br><span class="line">            addr.save()</span><br><span class="line">    <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;设置成功&#x27;</span>&#125;, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><h3 id="省市县数据获取"><a href="#省市县数据获取" class="headerlink" title="省市县数据获取"></a>省市县数据获取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AreaView</span>(GenericViewSet, mixins.ListModelMixin):</span><br><span class="line">    queryset = models.Area.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ser.AreaModelSerializer</span><br><span class="line">    filterset_fields = [<span class="string">&#x27;level&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="发送短信"><a href="#发送短信" class="headerlink" title="发送短信"></a>发送短信</h3><p>使用腾讯云发送短信服务，配置相关信息。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install qcloudsms<span class="literal">-py</span></span><br></pre></td></tr></table></figure><p>封装发送短信对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qcloudsms_py <span class="keyword">import</span> SmsSingleSender</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TencentSMS</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.appid = appid</span><br><span class="line">        self.appkey = app_key</span><br><span class="line">        self.template_id = template_id</span><br><span class="line">        self.sms_sign = <span class="string">&quot;签名&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">self, mobile, code</span>):</span><br><span class="line">        ssender = SmsSingleSender(self.appid, self.appkey)</span><br><span class="line">        params = [code, <span class="string">&#x27;3&#x27;</span>]  <span class="comment"># 当模板没有参数时，`params = []`</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = ssender.send_with_param(<span class="number">86</span>, mobile, self.template_id, params, sign=self.sms_sign, extend=<span class="string">&quot;&quot;</span>, ext=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> result.get(<span class="string">&#x27;result&#x27;</span>) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">&#x27;state&#x27;</span>: <span class="string">&#x27;OK&#x27;</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;短信发送成功&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>&#125;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">&#x27;state&#x27;</span>: <span class="string">&#x27;NO&#x27;</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;短信发送失败&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&#x27;state&#x27;</span>: <span class="string">&#x27;NO&#x27;</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;服务器内部错误或检查网络连接&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">500</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="发送验证码"><a href="#发送验证码" class="headerlink" title="发送验证码"></a>发送验证码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SMSView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;短信验证码服务视图&quot;&quot;&quot;</span></span><br><span class="line">    throttle_classes = [UserThrottling]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_code</span>():</span><br><span class="line">        code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            code += <span class="built_in">str</span>(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">        <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 获取手机号</span></span><br><span class="line">        mobile = request.data.get(<span class="string">&#x27;mobile&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">&#x27;^1[3-9][0-9]&#123;9&#125;$&#x27;</span>, mobile):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;手机号不符合规范&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="comment"># 生成验证码</span></span><br><span class="line">        code = self.generate_code()</span><br><span class="line">        <span class="comment"># 发送短信验证码</span></span><br><span class="line">        result = TencentSMS().send_message(mobile, code)</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;state&#x27;</span>] == <span class="string">&#x27;OK&#x27;</span>:</span><br><span class="line">            <span class="comment"># 短信验证码入库</span></span><br><span class="line">            code_obj = models.VerifyCode.objects.create(phone=mobile, code=code)</span><br><span class="line">            result[<span class="string">&#x27;codeID&#x27;</span>] = code_obj.<span class="built_in">id</span></span><br><span class="line">            <span class="keyword">return</span> Response(data=result, status=status.HTTP_200_OK)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(data=result, status=status.HTTP_500_INTERNAL_SERVER_ERROR)</span><br></pre></td></tr></table></figure><h3 id="短信接口频率限制"><a href="#短信接口频率限制" class="headerlink" title="短信接口频率限制"></a>短信接口频率限制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserThrottling</span>(<span class="title class_ inherited__">SimpleRateThrottle</span>):</span><br><span class="line">    scope = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    <span class="comment"># cache_format = &#x27;throttle_%(scope)s_%(ident)s&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_cache_key</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        mobile = request.data.get(<span class="string">&#x27;mobile&#x27;</span>)</span><br><span class="line">        value = self.cache_format % &#123;<span class="string">&#x27;scope&#x27;</span>: self.scope, <span class="string">&#x27;ident&#x27;</span>: mobile&#125;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="comment"># settings.py    </span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 配置限流频率</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># 根据类属性中的scope的值限制</span></span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;1/m&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定手机"><a href="#绑定手机" class="headerlink" title="绑定手机"></a>绑定手机</h3><p>封装静态方法处理相关参数，校验参数合法性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">get_request_params</span>(<span class="params">request</span>):</span><br><span class="line">       <span class="comment"># 1.获取参数</span></span><br><span class="line">       code = request.data.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">       codeID = request.data.get(<span class="string">&#x27;codeID&#x27;</span>)</span><br><span class="line">       mobile = request.data.get(<span class="string">&#x27;mobile&#x27;</span>)</span><br><span class="line">       <span class="keyword">return</span> code, codeID, mobile</span><br><span class="line"></span><br><span class="line"><span class="meta">   @staticmethod</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">verify_code</span>(<span class="params">code, codeID, mobile</span>):</span><br><span class="line">       <span class="comment"># 1.校验参数</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([code, codeID, mobile]):</span><br><span class="line">           <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;需要填入的字段信息不能为空&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">       <span class="comment"># 2.校验验证码,先在数据库中查询，查不到则为假验证码</span></span><br><span class="line">       <span class="keyword">if</span> models.VerifyCode.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=codeID, code=code, phone=mobile).exists():</span><br><span class="line">           <span class="comment"># 验证码存在,校验是否过期(过期时间三分钟)</span></span><br><span class="line">           code_obj = models.VerifyCode.objects.get(<span class="built_in">id</span>=codeID)</span><br><span class="line">           <span class="comment"># 获取验证码创建的时间戳</span></span><br><span class="line">           generate_time = code_obj.create_time.timestamp()</span><br><span class="line">           <span class="comment"># 当前时间的时间戳</span></span><br><span class="line">           current_time = time.time()</span><br><span class="line">           <span class="keyword">if</span> generate_time + <span class="number">180</span> &lt; current_time:</span><br><span class="line">               code_obj.delete()</span><br><span class="line">               <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;验证码已经过期，请重新获取&#x27;</span>&#125;, status=status.HTTP_406_NOT_ACCEPTABLE)</span><br><span class="line">           code_obj.delete()</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;验证码错误或者过期,请重新获取&#x27;</span>&#125;, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure><p>接口参数验证码code，手机号mobile，验证码id,校验是否被绑定；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bind_mobile</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绑定手机号&quot;&quot;&quot;</span></span><br><span class="line">    code, codeID, mobile = self.get_request_params(request)</span><br><span class="line">    result = self.verify_code(code, codeID, mobile)</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="comment"># 4.绑定手机号</span></span><br><span class="line">    <span class="comment"># 校验手机号是否被绑定</span></span><br><span class="line">    <span class="keyword">if</span> models.User.objects.<span class="built_in">filter</span>(mobile=mobile).exists():</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;该手机号已经被其他用户绑定,请核对手机号是否正确&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">    <span class="comment"># 绑定手机号</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        user = request.user</span><br><span class="line">        user.mobile = mobile</span><br><span class="line">        user.save()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;绑定手机号成功&#x27;</span>&#125;, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><h3 id="解绑手机"><a href="#解绑手机" class="headerlink" title="解绑手机"></a>解绑手机</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unbind_mobile</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解绑手机号&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1.获取参数</span></span><br><span class="line">    code, codeID, mobile = self.get_request_params(request)</span><br><span class="line">    <span class="comment"># 2.校验参数和校验验证码</span></span><br><span class="line">    result = self.verify_code(code, codeID, mobile)</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="comment"># 3.解除绑定(验证用户已绑定)</span></span><br><span class="line">    user = request.user</span><br><span class="line">    <span class="keyword">if</span> user.mobile == mobile:</span><br><span class="line">        user.mobile = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        user.save()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;解除绑定成功&#x27;</span>&#125;, status=status.HTTP_200_OK)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;未查询到所绑定的手机号,请核实绑定手机号是否正确&#x27;</span>&#125;, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure><h3 id="修改昵称"><a href="#修改昵称" class="headerlink" title="修改昵称"></a>修改昵称</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_name</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;修改用户昵称&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取参数</span></span><br><span class="line">    last_name = request.data.get(<span class="string">&#x27;last_name&#x27;</span>)</span><br><span class="line">    <span class="comment"># 校验参数</span></span><br><span class="line">    <span class="keyword">if</span> last_name:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; <span class="built_in">len</span>(last_name) &lt; <span class="number">8</span>:</span><br><span class="line">            <span class="comment"># 修改用户名</span></span><br><span class="line">            user = self.get_object()</span><br><span class="line">            user.last_name = last_name</span><br><span class="line">            user.save()</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;修改用户昵称成功&#x27;</span>&#125;, status=status.HTTP_200_OK)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;参数last_name长度超过8&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;参数last_name不能为空&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br></pre></td></tr></table></figure><h3 id="修改邮箱"><a href="#修改邮箱" class="headerlink" title="修改邮箱"></a>修改邮箱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_email</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;修改邮箱&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取参数</span></span><br><span class="line">    email = request.data.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">    user = self.get_object()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> email:</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;email参数不能为空&#x27;</span>&#125;)</span><br><span class="line">    <span class="comment"># 校验邮箱格式是否正确</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^\w+@[A-Za-z0-9]+(\.[A-Za-z0-9]+)&#123;1,2&#125;$&#x27;</span>, email):</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;邮箱不符合标准格式&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">    <span class="comment"># 判断是否跟原邮箱一致</span></span><br><span class="line">    <span class="keyword">if</span> user.email == email:</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;OK&#x27;</span>&#125;, status=status.HTTP_406_NOT_ACCEPTABLE)</span><br><span class="line">    <span class="comment"># 校验参数是否存在</span></span><br><span class="line">    <span class="keyword">if</span> models.User.objects.<span class="built_in">filter</span>(email=email).exists():</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;该邮箱已存在系统中，请更改其他邮箱&#x27;</span>&#125;, status=status.HTTP_406_NOT_ACCEPTABLE)</span><br><span class="line">    <span class="comment"># 修改邮箱</span></span><br><span class="line">    user.email = email</span><br><span class="line">    user.save()</span><br><span class="line">    <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;修改用户邮箱成功&#x27;</span>&#125;, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_password</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    user = self.get_object()</span><br><span class="line">    <span class="comment"># 获取参数</span></span><br><span class="line">    code, codeId, mobile = self.get_request_params(request)</span><br><span class="line">    password = request.data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    password_confirmation = request.data.get(<span class="string">&#x27;password_confirmation&#x27;</span>)</span><br><span class="line">    <span class="comment"># 校验验证码</span></span><br><span class="line">    result = self.verify_code(code, codeId, mobile)</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">if</span> user.mobile != mobile:</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;填写的手机号与绑定手机号不一致&#x27;</span>&#125;, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line">    <span class="comment"># 校验密码</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([password, password_confirmation]):</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;密码相关字段信息不能为空&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">    <span class="keyword">if</span> password != password_confirmation:</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;两次密码不一致&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">    <span class="comment"># 修改密码</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">3</span> &lt; <span class="built_in">len</span>(password) &lt;= <span class="number">16</span>:</span><br><span class="line">        user.set_password(password)</span><br><span class="line">        user.save()</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;修改密码成功&#x27;</span>&#125;, status=status.HTTP_200_OK)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;密码长度不符合规范，应在4-16位之间&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="用户模块路由"><a href="#用户模块路由" class="headerlink" title="用户模块路由"></a>用户模块路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> rest_framework_simplejwt.views <span class="keyword">import</span> TokenVerifyView, TokenRefreshView</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, views.LoginView.as_view()),</span><br><span class="line">    <span class="comment"># 注册</span></span><br><span class="line">    path(<span class="string">&#x27;register/&#x27;</span>, views.RegisterView.as_view()),</span><br><span class="line">    <span class="comment"># 刷新token 参数填refresh</span></span><br><span class="line">    path(<span class="string">&#x27;token/refresh/&#x27;</span>, TokenRefreshView.as_view()),</span><br><span class="line">    <span class="comment"># 校验token  参数填token 通过无响应体返回一个&#123;&#125;</span></span><br><span class="line">    path(<span class="string">&#x27;token/verify/&#x27;</span>, TokenVerifyView.as_view()),</span><br><span class="line">    <span class="comment"># 返回单个用户的信息</span></span><br><span class="line">    path(<span class="string">&#x27;user/&lt;int:pk&gt;/&#x27;</span>, views.UserInfoView.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 上传用户头像的路由</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/avatar/upload/&#x27;</span>, views.UserInfoView.as_view(actions=&#123;<span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;upload_avatar&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 添加和获取收货地址路由</span></span><br><span class="line">    path(<span class="string">&#x27;address/&#x27;</span>, views.AddrView.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>, <span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;create&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 修改和删除收货地址</span></span><br><span class="line">    path(<span class="string">&#x27;address/&lt;int:pk&gt;/&#x27;</span>, views.AddrView.as_view(actions=&#123;<span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>: <span class="string">&#x27;destroy&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 设置默认地址</span></span><br><span class="line">    path(<span class="string">&#x27;address/&lt;int:pk&gt;/default/&#x27;</span>, views.AddrView.as_view(actions=&#123;<span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;set_default_addr&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 发送短信验证码服务</span></span><br><span class="line">    path(<span class="string">&#x27;sendsms/&#x27;</span>, views.SMSView.as_view()),</span><br><span class="line">    <span class="comment"># 绑定用户手机号</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/mobile/bind/&#x27;</span>, views.UserInfoView.as_view(&#123;<span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;bind_mobile&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 解除绑定手机号</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/mobile/unbind/&#x27;</span>, views.UserInfoView.as_view(&#123;<span class="string">&#x27;put&#x27;</span>:<span class="string">&#x27;unbind_mobile&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 修改用户昵称</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/name/&#x27;</span>, views.UserInfoView.as_view(actions=&#123;<span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;update_name&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 修改用户昵称</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/email/&#x27;</span>, views.UserInfoView.as_view(actions=&#123;<span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;update_email&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 修改用户密码</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/password/&#x27;</span>, views.UserInfoView.as_view(&#123;<span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;update_password&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 获取省市区县数据</span></span><br><span class="line">    path(<span class="string">&#x27;area/&#x27;</span>, views.AreaView.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>&#125;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="商品模块"><a href="#商品模块" class="headerlink" title="商品模块"></a>商品模块</h2><h3 id="首页数据"><a href="#首页数据" class="headerlink" title="首页数据"></a>首页数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IndexView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;商城首页接口&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取商品所有的分类信息</span></span><br><span class="line">        group = models.GoodsGroup.objects.<span class="built_in">filter</span>(status=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 继承APIView时，如果有图片字段你，返回数据需要补全完整的图片路径，需要在序列化传入请求对象</span></span><br><span class="line">        group_ser = ser.GoodsGroupSerializer(group, many=<span class="literal">True</span>, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br><span class="line">        <span class="comment"># 获取商品的轮播图</span></span><br><span class="line">        banner = models.GoodsBanner.objects.<span class="built_in">filter</span>(status=<span class="literal">True</span>)</span><br><span class="line">        banner_ser = ser.GoodsBannerSerializer(banner, many=<span class="literal">True</span>, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br><span class="line">        <span class="comment"># 获取所有推荐的商品</span></span><br><span class="line">        goods = models.Goods.objects.<span class="built_in">filter</span>(recommend=<span class="literal">True</span>)</span><br><span class="line">        goods_ser = ser.GoodsSerializer(goods, many=<span class="literal">True</span>, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        result = &#123;</span><br><span class="line">            <span class="string">&#x27;group&#x27;</span>: group_ser.data,</span><br><span class="line">            <span class="string">&#x27;banner&#x27;</span>: banner_ser.data,</span><br><span class="line">            <span class="string">&#x27;goods&#x27;</span>: goods_ser.data</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(data=result, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><h3 id="获取商品分类"><a href="#获取商品分类" class="headerlink" title="获取商品分类"></a>获取商品分类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsGroupView</span>(mixins.ListModelMixin, GenericViewSet):</span><br><span class="line">    queryset = models.GoodsGroup.objects.<span class="built_in">filter</span>(status=<span class="literal">True</span>)</span><br><span class="line">    serializer_class = ser.GoodsGroupSerializer</span><br></pre></td></tr></table></figure><h3 id="商品列表"><a href="#商品列表" class="headerlink" title="商品列表"></a>商品列表</h3><p>实现商品分页、排序、过滤；DRF配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 配置过滤器</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.filters.OrderingFilter&#x27;</span>,</span><br><span class="line">                                ],</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>视图实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义分页器&quot;&quot;&quot;</span></span><br><span class="line">    page_size = <span class="number">2</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;page_size&#x27;</span></span><br><span class="line">    max_page_size = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsView</span>(<span class="title class_ inherited__">ReadOnlyModelViewSet</span>):</span><br><span class="line">    queryset = models.Goods.objects.<span class="built_in">filter</span>(is_on=<span class="literal">True</span>).<span class="built_in">all</span>().order_by(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    serializer_class = ser.GoodsSerializer</span><br><span class="line">    <span class="comment"># 实现分页</span></span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    <span class="comment"># 实现商品分类</span></span><br><span class="line">    filterset_fields = [<span class="string">&#x27;group&#x27;</span>, <span class="string">&#x27;recommend&#x27;</span>]</span><br><span class="line">    <span class="comment"># 实现商品价格和销量排序</span></span><br><span class="line">    ordering_fields = [<span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;sales&#x27;</span>, <span class="string">&#x27;id&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="商品详情"><a href="#商品详情" class="headerlink" title="商品详情"></a>商品详情</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">retrieve</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    <span class="comment"># 实现商品详情</span></span><br><span class="line">    instance = self.get_object()</span><br><span class="line">    serializer = self.get_serializer(instance)</span><br><span class="line">    detail = models.Detail.objects.<span class="built_in">filter</span>(goods=instance).first()</span><br><span class="line">    detail_ser = ser.DetailSerializer(detail)</span><br><span class="line">    result = serializer.data</span><br><span class="line">    <span class="comment"># 序列化时增加一个detail字段返回商品详情序列化器输出的数据</span></span><br><span class="line">    result[<span class="string">&#x27;detail&#x27;</span>] = detail_ser.data</span><br><span class="line">    <span class="keyword">return</span> Response(result)</span><br></pre></td></tr></table></figure><h3 id="收藏商品"><a href="#收藏商品" class="headerlink" title="收藏商品"></a>收藏商品</h3><p>防止越权只能操作自己的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CollectPermission</span>(permissions.BasePermission):</span><br><span class="line">    <span class="comment"># DRF对象级权限</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span><br><span class="line">        <span class="comment"># 判断操作的用户对象和登录的用户对象是否为同一个</span></span><br><span class="line">        <span class="keyword">return</span> obj.user == request.user</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollectView</span>(mixins.ListModelMixin, mixins.DestroyModelMixin,</span><br><span class="line">                  mixins.CreateModelMixin, GenericViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    create(post):收藏商品</span></span><br><span class="line"><span class="string">    destroy(delete):删除商品收藏</span></span><br><span class="line"><span class="string">    list(get):收藏列表接口</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = models.Collect.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ser.CollectSerializer</span><br><span class="line">    permission_classes = [IsAuthenticated, CollectPermission]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 重写create方法</span></span><br><span class="line">        user = request.user</span><br><span class="line">        param_user_id = <span class="built_in">int</span>(request.data.get(<span class="string">&#x27;user&#x27;</span>))</span><br><span class="line">        goods_id = <span class="built_in">int</span>(request.data.get(<span class="string">&#x27;goods&#x27;</span>))</span><br><span class="line">        <span class="comment"># 判断用户id与传入的参数是否一致</span></span><br><span class="line">        <span class="keyword">if</span> user.<span class="built_in">id</span> != param_user_id:</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;抱歉，您没有操作其他用户的权限&#x27;</span>&#125;)</span><br><span class="line">        <span class="comment"># 判断是否已收藏</span></span><br><span class="line">        <span class="keyword">if</span> models.Collect.objects.<span class="built_in">filter</span>(user=param_user_id, goods=goods_id).exists():</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;已收藏，不能重复收藏&#x27;</span>&#125;, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line">        <span class="comment"># 调用父类方法增加</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().create(request, *args, **kwargs)   </span><br></pre></td></tr></table></figure><h3 id="取消收藏"><a href="#取消收藏" class="headerlink" title="取消收藏"></a>取消收藏</h3><p>路由中注册视图集delete请求对应方法即可</p><h3 id="获取收藏列表"><a href="#获取收藏列表" class="headerlink" title="获取收藏列表"></a>获取收藏列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">    <span class="comment"># 过滤出属于自己的数据</span></span><br><span class="line">    queryset = queryset.<span class="built_in">filter</span>(user=request.user.<span class="built_in">id</span>)</span><br><span class="line">    serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">    result = serializer.data</span><br><span class="line">    <span class="keyword">return</span> Response(result)</span><br></pre></td></tr></table></figure><h3 id="商品模块路由"><a href="#商品模块路由" class="headerlink" title="商品模块路由"></a>商品模块路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 首页数据</span></span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.IndexView.as_view()),</span><br><span class="line">    <span class="comment"># 商品列表</span></span><br><span class="line">    path(<span class="string">&#x27;goods/&#x27;</span>, views.GoodsView.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 单个商品详情</span></span><br><span class="line">    path(<span class="string">&#x27;goods/&lt;int:pk&gt;/&#x27;</span>, views.GoodsView.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 收藏商品、获取用户收藏商品列表</span></span><br><span class="line">    path(<span class="string">&#x27;collect/&#x27;</span>, views.CollectView.as_view(actions=&#123;<span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;create&#x27;</span>, <span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 取消收藏</span></span><br><span class="line">    path(<span class="string">&#x27;collect/&lt;int:pk&gt;/&#x27;</span>, views.CollectView.as_view(actions=&#123;<span class="string">&#x27;delete&#x27;</span>: <span class="string">&#x27;destroy&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 获取商品分类</span></span><br><span class="line">    path(<span class="string">&#x27;group/&#x27;</span>, views.GoodsGroupView.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>&#125;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="购物车模块"><a href="#购物车模块" class="headerlink" title="购物车模块"></a>购物车模块</h2><p>购物车序列化器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> apps.goods.ser <span class="keyword">import</span> GoodsSerializer</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Cart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CartSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;（反序列化）购物车序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Cart</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadCartSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;（序列化）购物车序列化器&quot;&quot;&quot;</span></span><br><span class="line">    goods = GoodsSerializer()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Cart</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="添加商品到购物车"><a href="#添加商品到购物车" class="headerlink" title="添加商品到购物车"></a>添加商品到购物车</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ModifyGoodStatus</span>(<span class="title class_ inherited__">BasePermission</span>):</span><br><span class="line">    <span class="comment"># 对象级权限，判断操作的用户是否和登录用户是否一致</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> obj.user == request.user</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CartView</span>(mixins.DestroyModelMixin, mixins.ListModelMixin, mixins.UpdateModelMixin,</span><br><span class="line">               mixins.CreateModelMixin, GenericViewSet):</span><br><span class="line">    queryset = Cart.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CartSerializer</span><br><span class="line">    permission_classes = [IsAuthenticated, ModifyGoodStatus]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_serializer_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;实现读写使用不同序列化类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">&#x27;list&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> ReadCartSerializer</span><br><span class="line">        <span class="keyword">return</span> self.serializer_class</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加商品到购物车</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取用户信息</span></span><br><span class="line">        user = request.user</span><br><span class="line">        <span class="comment"># 获取参数</span></span><br><span class="line">        goods = request.data.get(<span class="string">&#x27;goods&#x27;</span>)</span><br><span class="line">        <span class="comment"># 校验该用户购物车是否有该商品</span></span><br><span class="line">        <span class="keyword">if</span> Cart.objects.<span class="built_in">filter</span>(user=user, goods=goods).exists():</span><br><span class="line">            cart_goods = Cart.objects.get(user=user, goods=goods)</span><br><span class="line">            <span class="comment"># 如果有直接修改商品的数量</span></span><br><span class="line">            cart_goods.number += <span class="number">1</span></span><br><span class="line">            cart_goods.save()</span><br><span class="line">            <span class="comment"># 对该商品进行序列化</span></span><br><span class="line">            serializer = self.get_serializer(cart_goods)</span><br><span class="line">            <span class="keyword">return</span> Response(data=serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            request.data[<span class="string">&#x27;user&#x27;</span>] = user.<span class="built_in">id</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>().create(request, *args, **kwargs)    </span><br></pre></td></tr></table></figure><h3 id="获取购物车商品列表"><a href="#获取购物车商品列表" class="headerlink" title="获取购物车商品列表"></a>获取购物车商品列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取购物车商品列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    <span class="comment"># 过滤出属于当前登录用户的购物车商品</span></span><br><span class="line">    queryset = self.get_queryset().<span class="built_in">filter</span>(user=request.user)</span><br><span class="line">    serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure><h3 id="修改购物车商品选中状态"><a href="#修改购物车商品选中状态" class="headerlink" title="修改购物车商品选中状态"></a>修改购物车商品选中状态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改购物车商品选中状态</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_good_status</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    obj = self.get_object()</span><br><span class="line">    obj.is_checked = <span class="keyword">not</span> obj.is_checked</span><br><span class="line">    obj.save()</span><br><span class="line">    <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;修改成功&#x27;</span>&#125;, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><h3 id="修改商品数量"><a href="#修改商品数量" class="headerlink" title="修改商品数量"></a>修改商品数量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改购物车商品数量</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_good_number</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        obj = self.get_object()</span><br><span class="line">        <span class="comment"># 获取参数</span></span><br><span class="line">        number = request.data.get(<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">        <span class="comment"># 校验参数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(number, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;商品数量只能填写数字&#x27;</span>&#125;,</span><br><span class="line">                            status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="comment"># 判断商品的数量是否大于库存</span></span><br><span class="line">        <span class="keyword">elif</span> number &gt; obj.goods.stock:</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;加入购物车数量不能大于该商品库存&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            obj.number = number</span><br><span class="line">            obj.save()</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;商品数量修改成功&#x27;</span>&#125;, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><h3 id="删除购物车商品"><a href="#删除购物车商品" class="headerlink" title="删除购物车商品"></a>删除购物车商品</h3><p>路由中注册视图集delete请求对应destroy方法即可</p><h3 id="购物车模块路由"><a href="#购物车模块路由" class="headerlink" title="购物车模块路由"></a>购物车模块路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 购物车增加商品以及获取购物车商品列表</span></span><br><span class="line">    path(<span class="string">&#x27;goods/&#x27;</span>, views.CartView.as_view(actions=&#123;<span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;create&#x27;</span>, <span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 删除购物车商品</span></span><br><span class="line">    path(<span class="string">&#x27;goods/&lt;int:pk&gt;/&#x27;</span>, views.CartView.as_view(actions=&#123;<span class="string">&#x27;delete&#x27;</span>: <span class="string">&#x27;destroy&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 修改购物车商品选中状态,此处id为购物车表id</span></span><br><span class="line">    path(<span class="string">&#x27;goods/&lt;int:pk&gt;/checked/&#x27;</span>, views.CartView.as_view(actions=&#123;<span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;update_good_status&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 修改购物车商品数量</span></span><br><span class="line">    path(<span class="string">&#x27;goods/&lt;int:pk&gt;/number/&#x27;</span>, views.CartView.as_view(actions=&#123;<span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;update_good_number&#x27;</span>&#125;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h2><h3 id="提交订单"><a href="#提交订单" class="headerlink" title="提交订单"></a>提交订单</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OrderPermission</span>(permissions.BasePermission):</span><br><span class="line">    <span class="comment"># DRF对象级权限</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span><br><span class="line">        <span class="comment"># 如果不是管理员 则判断操作的用户对象和登录的用户对象是否为同一个</span></span><br><span class="line">        <span class="keyword">return</span> obj.user == request.user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderView</span>(mixins.ListModelMixin, GenericViewSet):</span><br><span class="line">    queryset = Order.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = OrderSerializer</span><br><span class="line">    permission_classes = [IsAuthenticated, OrderPermission]</span><br><span class="line">    filterset_fields = [<span class="string">&#x27;status&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对整个视图开启事务操作(数据库)</span></span><br><span class="line"><span class="meta">    @transaction.atomic</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取参数</span></span><br><span class="line">        addr = request.data.get(<span class="string">&#x27;addr&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断收货地址是否有误</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Address.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=addr, user=request.user).exists():</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;传入的收货地址id错误&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        obj = Address.objects.get(<span class="built_in">id</span>=addr)  <span class="comment"># 为收货地址的模型对象</span></span><br><span class="line">        <span class="comment"># 将收货地址拼接为字符串</span></span><br><span class="line">        addr_str = <span class="string">f&#x27;<span class="subst">&#123;obj.province&#125;</span><span class="subst">&#123;obj.city&#125;</span><span class="subst">&#123;obj.country&#125;</span><span class="subst">&#123;obj.detail_addr&#125;</span> <span class="subst">&#123;obj.name&#125;</span> <span class="subst">&#123;obj.phone&#125;</span>&#x27;</span></span><br><span class="line">        <span class="comment"># 获取购物车选取的商品</span></span><br><span class="line">        cart_goods = Cart.objects.<span class="built_in">filter</span>(user=request.user, is_checked=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cart_goods.exists():</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;订单提交失败，未选择商品&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="comment"># 生成订单编号时间戳加用户id</span></span><br><span class="line">        order_code = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time())) + <span class="built_in">str</span>(request.user.<span class="built_in">id</span>)</span><br><span class="line">        <span class="comment"># 设置一个事务保存的节点</span></span><br><span class="line">        save_id = transaction.savepoint()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 创建订单对象</span></span><br><span class="line">            order = Order.objects.create(addr=addr_str, order_code=order_code, amount=<span class="number">0</span>, user=request.user)</span><br><span class="line">            <span class="comment"># 定义商品总价格</span></span><br><span class="line">            amount = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> cart <span class="keyword">in</span> cart_goods:</span><br><span class="line">                <span class="comment"># 获取商品数量</span></span><br><span class="line">                num = cart.number</span><br><span class="line">                <span class="comment"># 获取商品价格</span></span><br><span class="line">                price = cart.goods.price</span><br><span class="line">                <span class="comment"># 将价格进行累加</span></span><br><span class="line">                amount += price * num</span><br><span class="line">                <span class="comment"># 判断商品购买数量是否大于商品库存</span></span><br><span class="line">                stock = cart.goods.stock</span><br><span class="line">                <span class="keyword">if</span> stock &gt; num:</span><br><span class="line">                    <span class="comment"># 修改商品的销量和库存并且保存</span></span><br><span class="line">                    stock -= num</span><br><span class="line">                    cart.goods.sales += num</span><br><span class="line">                    cart.goods.save()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    transaction.savepoint_rollback(save_id)</span><br><span class="line">                    <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">f&#x27;订单创建失败，商品&quot;<span class="subst">&#123;cart.goods.title&#125;</span>&quot;库存不足&#x27;</span>&#125;,status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">                <span class="comment"># 在订单商品表中新增一条数据</span></span><br><span class="line">                OrderGoods.objects.create(order=order, goods=cart.goods, price=price, number=num)</span><br><span class="line">                <span class="comment"># 删除购物车记录</span></span><br><span class="line">                cart.delete()</span><br><span class="line">            <span class="comment"># 修改订单总金额</span></span><br><span class="line">            order.amount = amount</span><br><span class="line">            order.save()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 事务回滚,回退到某个指定节点</span></span><br><span class="line">            transaction.savepoint_rollback(save_id)</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;服务器异常，订单创建失败&#x27;</span>&#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 提交事务</span></span><br><span class="line">            transaction.savepoint_commit(save_id)</span><br><span class="line">            <span class="comment"># 返回结果</span></span><br><span class="line">            ser_obj = self.get_serializer(order)</span><br><span class="line">            <span class="keyword">return</span> Response(data=ser_obj.data, status=status.HTTP_201_CREATED)</span><br></pre></td></tr></table></figure><h3 id="获取订单列表"><a href="#获取订单列表" class="headerlink" title="获取订单列表"></a>获取订单列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">    <span class="comment"># 数据过滤</span></span><br><span class="line">    queryset = queryset.<span class="built_in">filter</span>(user=request.user)</span><br><span class="line">    serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure><h3 id="获取单个订单详情"><a href="#获取单个订单详情" class="headerlink" title="获取单个订单详情"></a>获取单个订单详情</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">retrieve</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    instance = self.get_object()</span><br><span class="line">    serializer = self.get_serializer(instance)</span><br><span class="line">    result = serializer.data</span><br><span class="line">    <span class="comment"># 获取订单中的商品信息</span></span><br><span class="line">    goods_obj = OrderGoods.objects.<span class="built_in">filter</span>(order=instance)</span><br><span class="line">    <span class="comment"># 对订单中的商品进行序列化</span></span><br><span class="line">    order_goods = OrderGoodsSerializer(goods_obj, many=<span class="literal">True</span>, context=&#123;<span class="string">&#x27;request&#x27;</span>:request&#125;)</span><br><span class="line">    <span class="comment"># 将商品信息增加到返回的序列化字典当中</span></span><br><span class="line">    result[<span class="string">&#x27;goods_list&#x27;</span>] = order_goods.data</span><br><span class="line">    <span class="keyword">return</span> Response(result, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><h3 id="取消订单"><a href="#取消订单" class="headerlink" title="取消订单"></a>取消订单</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">close_order</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    obj = self.get_object()</span><br><span class="line">    <span class="keyword">if</span> obj.status != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;只能取消未支付的订单&#x27;</span>&#125;, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line">    <span class="comment"># 修改订单状态</span></span><br><span class="line">    obj.status = <span class="number">6</span></span><br><span class="line">    obj.save()</span><br><span class="line">    <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;取消订单成功&#x27;</span>&#125;, status=status.HTTP_202_ACCEPTED)</span><br></pre></td></tr></table></figure><h3 id="订单商品评价"><a href="#订单商品评价" class="headerlink" title="订单商品评价"></a>订单商品评价</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CommentView</span>(mixins.CreateModelMixin, mixins.ListModelMixin, GenericViewSet):</span><br><span class="line">    queryset = Comment.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CommentSerializer</span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br><span class="line">    <span class="comment"># 配置查询评价信息的过滤参数</span></span><br><span class="line">    filterset_fields = [<span class="string">&#x27;goods&#x27;</span>, <span class="string">&#x27;order&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @transaction.atomic</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取参数</span></span><br><span class="line">        order = request.data.get(<span class="string">&#x27;order&#x27;</span>)</span><br><span class="line">        <span class="comment"># 校验订单编号是否为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> order:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;订单id不能为空&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="comment"># 校验订单是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Order.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=order).exists():</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;订单id有误&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="comment"># 创建订单对象</span></span><br><span class="line">        order_obj = Order.objects.get(<span class="built_in">id</span>=order)</span><br><span class="line">        <span class="comment"># 校验是该订单否属于当前用户</span></span><br><span class="line">        <span class="keyword">if</span> order_obj.user != request.user:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;没有评论该订单的权限&#x27;</span>&#125;, status=status.HTTP_403_FORBIDDEN)</span><br><span class="line">        <span class="comment"># 校验订单是否为待评价状态</span></span><br><span class="line">        <span class="keyword">if</span> order_obj.status != <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;该订单不处于待评论状态&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        comment = request.data.get(<span class="string">&#x27;comment&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(comment, <span class="built_in">list</span>):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;评论参数comment格式错误,应为列表格式&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="comment"># 设置一个保存事务的节点</span></span><br><span class="line">        save_id = transaction.savepoint()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> comment:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(item, <span class="built_in">dict</span>):</span><br><span class="line">                    <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;评论参数comment格式错误,内部为字典&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">                goods = item.get(<span class="string">&#x27;goods&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> OrderGoods.objects.<span class="built_in">filter</span>(order=order_obj, goods=goods).exists():</span><br><span class="line">                    <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">f&#x27;订单中没有id为<span class="subst">&#123;goods&#125;</span>的商品&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">                <span class="comment"># 往item中添加订单id和用户id</span></span><br><span class="line">                item[<span class="string">&#x27;user&#x27;</span>] = request.user.<span class="built_in">id</span></span><br><span class="line">                item[<span class="string">&#x27;order&#x27;</span>] = order</span><br><span class="line">                ser = CommentSerializer(data=item)</span><br><span class="line">                ser.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">                ser.save()</span><br><span class="line">            order_obj.status = <span class="number">5</span></span><br><span class="line">            order_obj.save()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 事务回滚</span></span><br><span class="line">            transaction.savepoint_rollback(save_id)</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;评论失败&#x27;</span>&#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            transaction.savepoint_commit(save_id)</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;订单评论成功&#x27;</span>&#125;, status=status.HTTP_201_CREATED)</span><br></pre></td></tr></table></figure><h3 id="评价查询"><a href="#评价查询" class="headerlink" title="评价查询"></a>评价查询</h3><p>配置 filterset_fields &#x3D; [‘goods’, ‘order’]根据字段过滤</p><p>订单模块路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 提交订单</span></span><br><span class="line">    path(<span class="string">&#x27;submit/&#x27;</span>, views.OrderView.as_view(actions=&#123;<span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;create&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 获取订单列表</span></span><br><span class="line">    path(<span class="string">&#x27;order/&#x27;</span>, views.OrderView.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 获取单个订单详情和取消订单</span></span><br><span class="line">    path(<span class="string">&#x27;order/&lt;int:pk&gt;/&#x27;</span>, views.OrderView.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span>, <span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;close_order&#x27;</span>&#125;)),</span><br><span class="line">    <span class="comment"># 增加商品评论接口和获取商品评价</span></span><br><span class="line">    path(<span class="string">&#x27;comment/&#x27;</span>, views.CommentView.as_view(actions=&#123;<span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;create&#x27;</span>, <span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>&#125;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="支付功能"><a href="#支付功能" class="headerlink" title="支付功能"></a>支付功能</h2><h3 id="支付宝支付的使用"><a href="#支付宝支付的使用" class="headerlink" title="支付宝支付的使用"></a>支付宝支付的使用</h3><p>安装支付宝支付的SDK</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python<span class="literal">-alipay-sdk</span></span><br></pre></td></tr></table></figure><p>使用支付宝沙箱环境，pc端支付宝开放平台扫码登录，控制台下有个沙箱环境，点进去获取应用id进行配置,配置公钥与私钥存储文件；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> alipay <span class="keyword">import</span> AliPay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pay</span>:</span><br><span class="line">    appid = appid</span><br><span class="line">    app_private_key_string = <span class="built_in">open</span>(settings.BASE_DIR / <span class="string">&quot;apps/common/yourPrivateKey.key&quot;</span>).read()</span><br><span class="line">    alipay_public_key_string = <span class="built_in">open</span>(settings.BASE_DIR / <span class="string">&quot;apps/common/alipayPublicCert.crt&quot;</span>).read()</span><br><span class="line">    alipay_site = <span class="string">&#x27;https://openapi-sandbox.dl.alipaydev.com/gateway.do?&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.pay_obj = AliPay(</span><br><span class="line">            appid=self.appid, alipay_public_key_string=self.alipay_public_key_string,</span><br><span class="line">            app_private_key_string=self.app_private_key_string)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_pay_url</span>(<span class="params">self, subject, out_trade_no, amount</span>):</span><br><span class="line">        res = self.pay_obj.api_alipay_trade_page_pay(</span><br><span class="line">            subject=subject,</span><br><span class="line">            out_trade_no=out_trade_no,</span><br><span class="line">            total_amount=<span class="built_in">float</span>(amount),</span><br><span class="line">            return_url=<span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">            <span class="comment"># notify_url=&#x27;http://127.0.0.1:8000/api/order/pay/success/&#x27;</span></span><br><span class="line">        )</span><br><span class="line">        pay_url = self.alipay_site + res</span><br><span class="line">        <span class="keyword">return</span> pay_url</span><br></pre></td></tr></table></figure><h3 id="支付功能的实现"><a href="#支付功能的实现" class="headerlink" title="支付功能的实现"></a>支付功能的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OrderPayView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        order_id = request.data.get(<span class="string">&#x27;orderID&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Order.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=order_id, user=request.user).exists():</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;订单id有误，订单不存在&#x27;</span>&#125;, status=status.HTTP_422_UNPROCESSABLE_ENTITY)</span><br><span class="line">        <span class="comment"># 查询当前订单</span></span><br><span class="line">        order = Order.objects.get(<span class="built_in">id</span>=order_id)</span><br><span class="line">        <span class="comment"># 获取订单总金额</span></span><br><span class="line">        money = order.amount</span><br><span class="line">        <span class="comment"># 获取订单编号</span></span><br><span class="line">        order_no = order.order_code</span><br><span class="line">        subject = <span class="string">&#x27;伟荣优选订单&#x27;</span></span><br><span class="line">        pay_url = Pay().generate_pay_url(subject=subject, out_trade_no=order_no, amount=money)</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;pay_url&#x27;</span>: pay_url&#125;, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支付接口</span></span><br><span class="line">path(<span class="string">&#x27;pay/&#x27;</span>, views.OrderPayView.as_view()),</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FLASK数据库</title>
      <link href="/2022/10/27/FLASK%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/10/27/FLASK%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="SQLAlchemy介绍"><a href="#SQLAlchemy介绍" class="headerlink" title="SQLAlchemy介绍"></a>SQLAlchemy介绍</h2><p>SQLAlchemy是一个基于Python实现的ORM框架；可理解为对象模型与数据库表的映射。</p><p>对象关系映射(Object Relational Mapping 简称ORM)：是一种程序设计技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换；从效果上来说，其实是创建了一个可在编程语言里使用的“虚拟对象数据库”。</p><p>具体实现形式：ORM可以通过类的方式去操作数据库而不用再写原生的SQL语句，通过把表映射成类，把行作为实例(一条数据)，把字段作为属性，ORM在执行对象操作的时候最终还是会把对象的操作转换为数据库的原生语句</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    age = <span class="number">18</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Person类 -&gt; 数据库中的一张表</span></span><br><span class="line"><span class="comment"># Person类中的属性 -&gt; 数据库中一张表字段</span></span><br><span class="line"><span class="comment"># Person类的一个对象 -&gt; 数据库中表的一条数据</span></span><br><span class="line"><span class="comment"># p = Person(&#x27;tom&#x27;)</span></span><br><span class="line"><span class="comment"># p.save()</span></span><br><span class="line"><span class="comment"># insert into table values (&#x27;tom&#x27;)</span></span><br></pre></td></tr></table></figure><p>安装相关工具</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br><span class="line">pip intstall SQLAlchemy</span><br></pre></td></tr></table></figure><h2 id="SQLAlchemy操作数据库"><a href="#SQLAlchemy操作数据库" class="headerlink" title="SQLAlchemy操作数据库"></a>SQLAlchemy操作数据库</h2><p>SQLAlchemy本身无法操作数据库;根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作；调用pymysql的API格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;dbname&gt;[?&lt;options&gt;]</span><br><span class="line"><span class="comment"># DB_URL = f&#x27;数据库的名+驱动名://&#123;USER&#125;:&#123;PWD&#125;@&#123;HOST&#125;:&#123;PORT&#125;/&#123;DATA_BASE&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>连接数据库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn_db1</span>():</span><br><span class="line">    <span class="comment"># 数据库的变量</span></span><br><span class="line">    HOST = <span class="string">&#x27;192.168.30.151&#x27;</span>  <span class="comment"># 127.0.0.1/localhost</span></span><br><span class="line">    PORT = <span class="number">3306</span></span><br><span class="line">    DATA_BASE = <span class="string">&#x27;flask_db&#x27;</span></span><br><span class="line">    USER = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">    PWD = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    DB_URL = <span class="string">f&#x27;mysql+pymysql://<span class="subst">&#123;USER&#125;</span>:<span class="subst">&#123;PWD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DATA_BASE&#125;</span>&#x27;</span></span><br><span class="line">    engine = create_engine(DB_URI)</span><br><span class="line">    <span class="comment"># 执行一个SQL</span></span><br><span class="line">    sql = <span class="string">&#x27;select 1;&#x27;</span></span><br><span class="line">    conn = engine.connect()</span><br><span class="line">    <span class="comment"># 执行SQL语句</span></span><br><span class="line">    result = conn.execute(sql)</span><br><span class="line">    <span class="built_in">print</span>(result.fetchone())</span><br><span class="line">    <span class="comment"># 链接数据库</span></span><br><span class="line">    <span class="keyword">with</span> engine.connect() <span class="keyword">as</span> conn:</span><br><span class="line">        <span class="comment"># 执行sql语句</span></span><br><span class="line">        conn.execute(sql)</span><br></pre></td></tr></table></figure><h2 id="ORM模型映射到数据库中"><a href="#ORM模型映射到数据库中" class="headerlink" title="ORM模型映射到数据库中"></a>ORM模型映射到数据库中</h2><ol><li>用 declarative_base 根据 engine 创建一个ORM基类</li><li>用这个 Base 类作为基类来写自己的ORM类。要定义 <code>__tablename__ </code>类属性，来指定这个模型映射到数据库中的表名</li><li>创建属性来映射到表中的字段，所有需要映射到表中的属性都应该为Column类型</li><li>使用 Base.metadata.create_all() 来将模型映射到数据库中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line">engine = create_engine(DB_URL)</span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ =<span class="string">&#x27;t_person&#x27;</span></span><br><span class="line">    <span class="comment"># 在这个ORM模型中创建一些属性，来跟表中的字段进行一一映射。</span></span><br><span class="line">    <span class="comment"># 这些属性必须是sqlalchemy给我们提供好的数据类型</span></span><br><span class="line">    <span class="built_in">id</span> =Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">20</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line">    country = Column(String(<span class="number">20</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Person: <span class="subst">&#123;self.name&#125;</span>==<span class="subst">&#123;self.age&#125;</span>==<span class="subst">&#123;self.country&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 映射表结构</span></span><br><span class="line">    Base.metadata.create_all()</span><br></pre></td></tr></table></figure><p>注意:一旦使用 Base.metadata.create_all() 将模型映射到数据库中后,即使改变了模型的字段,也不会重新映射了.</p><h2 id="SQLAlchemy对数据的增删改查操作"><a href="#SQLAlchemy对数据的增删改查操作" class="headerlink" title="SQLAlchemy对数据的增删改查操作"></a>SQLAlchemy对数据的增删改查操作</h2><p>构建Session对象;所有和数据库的ORM操作都必须通过一个叫做 Session 的会话对象来实现。修改完对象需提交</p><p><strong>添加对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Session对象来操作数据</span></span><br><span class="line">Session = sessionmaker(engine)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一条add()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data_one</span>():</span><br><span class="line">    <span class="comment"># 实例化session对象</span></span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> session:</span><br><span class="line">        person1 = Person(name=<span class="string">&#x27;keven&#x27;</span>, age=<span class="number">22</span>, country=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">        session.add(person1)</span><br><span class="line">        session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加多条add_all([obj1, obj2,···])</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data_many</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> session:</span><br><span class="line">        person1 = Person(name=<span class="string">&#x27;stephen&#x27;</span>, age=<span class="number">22</span>, country=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">        person2 = Person(name=<span class="string">&#x27;kobe&#x27;</span>, age=<span class="number">23</span>, country=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">        session.add_all([person1, person2])</span><br><span class="line">        session.commit()</span><br></pre></td></tr></table></figure><p><strong>查找对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询所有数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_all</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> session:</span><br><span class="line">        all_person = session.query(Person).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> all_person:</span><br><span class="line">            <span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询一条</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_one</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> session:</span><br><span class="line">        person = session.query(Person).first()</span><br><span class="line">        <span class="built_in">print</span>(person)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定条件进行筛选,获取结果的第一条</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_by_params</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="comment"># person = session.query(Person).filter_by(name=&#x27;keven&#x27;).first()</span></span><br><span class="line">        <span class="comment"># 通过类属性进行判断</span></span><br><span class="line">        person = session.query(Person).<span class="built_in">filter</span>(Person.name == <span class="string">&#x27;kobe&#x27;</span>).first()</span><br><span class="line">        <span class="built_in">print</span>(person)</span><br></pre></td></tr></table></figure><p><strong>修改对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于查询到后在做更改,修改后记得提交</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_data</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> session:</span><br><span class="line">        person = session.query(Person).<span class="built_in">filter</span>(Person.name == <span class="string">&#x27;kobe&#x27;</span>).first()</span><br><span class="line">        person.age = <span class="number">41</span></span><br><span class="line">        session.commit()</span><br></pre></td></tr></table></figure><p><strong>删除对象</strong></p><p>将需要删除的数据从数据库中查找出来，然后使用 session.delete 方法将这条数据从session中删除，最后做commit操作就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">delete_data</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> session:</span><br><span class="line">        person = session.query(Person).<span class="built_in">filter</span>(Person.name == <span class="string">&#x27;kobe&#x27;</span>).first()</span><br><span class="line">        session.delete(person)</span><br><span class="line">        session.commit()</span><br></pre></td></tr></table></figure><h2 id="SQLAlchemy常用数据类型"><a href="#SQLAlchemy常用数据类型" class="headerlink" title="SQLAlchemy常用数据类型"></a>SQLAlchemy常用数据类型</h2><p><strong>Integer：</strong>整形，映射到数据库中是int类型。<br><strong>Float：</strong>浮点类型，映射到数据库中是float类型。他占据的32位。<br><strong>Double：</strong>双精度浮点类型，映射到数据库中是double类型，占据64位 (SQLALCHEMY中没有)。<br><strong>String：</strong>可变字符类型，映射到数据库中是varchar类型.<br><strong>Boolean：</strong>布尔类型，映射到数据库中的是tinyint类型。</p><p><strong>DECIMAL：</strong>定点类型。是专门为了解决浮点类型精度丢失的问题的。在存储钱相关的字段的时候建议大家都使用这个数据类型。</p><p><strong>Enum：</strong>枚举类型。指定某个字段只能是枚举中指定的几个值，不能为其他值。</p><p><strong>Date：</strong>存储日期，只能存储年月日。映射到数据库中是date类型。在Python代码中，可以使用 datetime.date 来指定。</p><p><strong>DateTime：</strong>存储时间，可以存储年月日时分秒毫秒等。映射到数据库中也是datetime类型。在Python代码中，可以使用datetime.datetime 来指定。</p><p><strong>Time：</strong>存储时间，可以存储时分秒。映射到数据库中也是time类型。在Python代码中，可以使用 datetime.time 来指定。</p><p><strong>Text：</strong>存储长字符串。一般可以存储6W多个字符。如果超出了这个范围，可以使用LONGTEXT类型。映射到数据库中就是text类型。</p><p><strong>LONGTEXT：</strong>长文本类型，映射到数据库中是longtext类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String, Boolean, DECIMAL, Float, Date, Time, DateTime, Text, Enum</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.dialects.mysql <span class="keyword">import</span> LONGTEXT</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date, datetime, time</span><br><span class="line"><span class="keyword">import</span> enum</span><br><span class="line"></span><br><span class="line">engine = create_engine(DB_URL)</span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"></span><br><span class="line">Session = sessionmaker(engine)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置enum模块</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TagEnum</span>(enum.Enum):</span><br><span class="line">    python = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">    django = <span class="string">&#x27;Django&#x27;</span></span><br><span class="line">    java = <span class="string">&#x27;java&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_news4&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    price = Column(Float)  <span class="comment"># 精度丢失问题</span></span><br><span class="line">    specific = Column(DECIMAL(<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line">    title = Column(String(<span class="number">20</span>))</span><br><span class="line">    is_delete = Column(Boolean)</span><br><span class="line">    tags1 = Column(Enum(<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;django&#x27;</span>, <span class="string">&#x27;java&#x27;</span>))</span><br><span class="line">    tags2 = Column(Enum(TagEnum))</span><br><span class="line">    create_time = Column(DateTime)</span><br><span class="line">    update_time = Column(Date)</span><br><span class="line">    delete_time = Column(Time)</span><br><span class="line">    content = Column(LONGTEXT)</span><br><span class="line">    comment = Column(Text)  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 增加数据    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_data</span>():</span><br><span class="line">    news = News(</span><br><span class="line">        price=<span class="number">100.3214</span>,</span><br><span class="line">        specific=<span class="number">1000.2341</span>,</span><br><span class="line">        title=<span class="string">&#x27;测试sqlalchemy数据&#x27;</span>,</span><br><span class="line">        is_delete=<span class="literal">True</span>,</span><br><span class="line">        tags1=<span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">        tags2=<span class="string">&#x27;django&#x27;</span>,</span><br><span class="line">        create_time=datetime(<span class="number">2022</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">38</span>),</span><br><span class="line">        update_time=date(<span class="number">2022</span>, <span class="number">11</span>, <span class="number">11</span>),</span><br><span class="line">        delete_time=time(<span class="number">6</span>, <span class="number">7</span>, <span class="number">23</span>),</span><br><span class="line">        content=<span class="string">&#x27;快乐的意义是什么我也不知道？难道只有钱嘛？&#x27;</span>,</span><br><span class="line">        comment=<span class="string">&#x27;生命在于努力，在于创造，有限的时间里创造出属于自己的价值&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> session:</span><br><span class="line">        session.add(news)</span><br><span class="line">        session.commit()  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 映射表结构</span></span><br><span class="line">    Base.metadata.create_all()</span><br><span class="line">    add_data()        </span><br></pre></td></tr></table></figure><h2 id="Column常用参数"><a href="#Column常用参数" class="headerlink" title="Column常用参数"></a>Column常用参数</h2><p><strong>primary_key：</strong>True设置某个字段为主键。</p><p><strong>autoincrement：</strong>True设置这个字段为自动增长的。</p><p><strong>default：</strong>设置某个字段的默认值。在发表时间这些字段上面经常用。</p><p><strong>nullable：</strong>指定某个字段是否为空。默认值是True，就是可以为空。</p><p><strong>unique：</strong>指定某个字段的值是否唯一。默认是False。</p><p><strong>onupdate：</strong>在数据更新的时候会调用这个参数指定的值或者函数.在第一次插入这条数据的时候,不会用onupdate的值，只会使用default的值。常用于是 update_time 字段（每次更新数据的时候都要更新该字段值）。</p><p><strong>name：</strong>指定ORM模型中某个属性映射到表中的字段名。如果不指定，那么会使用这个属性的名字来作为字段名。如果指定了，就会使用指定的这个值作为表字段名。这个参数也可以当作位置参数，在第1个参数来指定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title =Column(String(<span class="number">50</span>),name=<span class="string">&#x27;title&#x27;</span>,nullable=<span class="literal">False</span>)</span><br><span class="line">title =Column(<span class="string">&#x27;my_title&#x27;</span>,String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>封装Base基类和Session对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">DATABASE = <span class="string">&#x27;flask_db&#x27;</span></span><br><span class="line">USER = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">PWD = <span class="string">&#x27;pwd&#x27;</span></span><br><span class="line"><span class="comment"># 数据库url的构建形式:DB_URL = F&#x27;数据库的名字+驱动名://&#123;USER&#125;:&#123;PWD&#125;@&#123;HOST&#125;:&#123;PORT&#125;/&#123;DATABASE&#125;&#x27;</span></span><br><span class="line">DB_URL = <span class="string">f&#x27;mysql+pymysql://<span class="subst">&#123;USER&#125;</span>:<span class="subst">&#123;PWD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DATABASE&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">engine = create_engine(DB_URL)</span><br><span class="line"><span class="comment"># 创建一个基类</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line">Session = sessionmaker(engine)</span><br></pre></td></tr></table></figure><p>常用参数示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, Integer, DateTime</span><br><span class="line"><span class="keyword">from</span> db_utils <span class="keyword">import</span> Base, Session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_news5&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    phone = Column(String(<span class="number">11</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">32</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    read_count = Column(Integer, default=<span class="number">1</span>)</span><br><span class="line">    create_time = Column(DateTime, default=datetime.now)</span><br><span class="line">    update_time = Column(DateTime, default=datetime.now, onupdate=datetime.now)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增数据    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data</span>():</span><br><span class="line">    news = News(phone=<span class="string">&#x27;18170894234&#x27;</span>, title=<span class="string">&#x27;昨天今天明天&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> session:</span><br><span class="line">        session.add(news)</span><br><span class="line">        session.commit()    </span><br><span class="line"><span class="comment"># 改变默认值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_default_data</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> session:</span><br><span class="line">        news = session.query(News).first()</span><br><span class="line">        news.read_count = <span class="number">2</span></span><br><span class="line">        session.commit()        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Base.metadata.create_all()</span><br><span class="line">    create_data()</span><br><span class="line">    change_default_data()        </span><br></pre></td></tr></table></figure><h2 id="query函数的使用"><a href="#query函数的使用" class="headerlink" title="query函数的使用"></a>query函数的使用</h2><p>通过模型名；指定查找这个模型中所有的属性(对应查询表为全表查询)。</p><p>通过模型中的属性；可以指定只查找某个模型的其中几个属性。</p><p><strong>聚合函数：</strong></p><p>func.count：统计数量。</p><p>func.avg：求平均值。<br>func.max：求最大值。<br>func.min：求最小值。<br>func.sum：求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Integer, String, Column, func</span><br><span class="line"><span class="keyword">from</span> db_utils <span class="keyword">import</span> Base, Session</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_item6&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">32</span>))</span><br><span class="line">    price = Column(Integer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> title:<span class="subst">&#123;self.title&#125;</span> price:<span class="subst">&#123;self.price&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">            item = Item(title=<span class="string">f&#x27;产品<span class="subst">&#123;i&#125;</span>&#x27;</span>, price=randint(<span class="number">29</span>, <span class="number">99</span>))</span><br><span class="line">            ses.add(item)</span><br><span class="line">        ses.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过模型对象。指定查找这个模型的所有对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_model</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        model = ses.query(Item).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> model:</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过字段</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_model_attr</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        model = ses.query(Item.title, Item.price).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> model:</span><br><span class="line">            <span class="built_in">print</span>(m.title, m.price)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 聚合函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_by_func</span>():</span><br><span class="line">    <span class="comment"># 统计指定的字段列</span></span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        model = ses.query(func.count(Item.<span class="built_in">id</span>)).first()</span><br><span class="line">        <span class="comment"># model = ses.query(func.max(Item.price)).first()</span></span><br><span class="line">        <span class="comment"># model = ses.query(func.avg(Item.price)).first()</span></span><br><span class="line">        <span class="comment"># model = ses.query(func.sum(Item.price)).first()</span></span><br><span class="line">        <span class="built_in">print</span>(model)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Base.metadata.create_all()</span><br><span class="line">    create_data()</span><br><span class="line">    <span class="comment"># query_model()</span></span><br><span class="line">    <span class="comment"># query_model_attr()</span></span><br><span class="line">    <span class="comment"># query_by_func()</span></span><br></pre></td></tr></table></figure><h2 id="filter过滤数据"><a href="#filter过滤数据" class="headerlink" title="filter过滤数据"></a>filter过滤数据</h2><p>过滤是数据提取的一个很重要的功能，以下对一些常用的过滤条件进行解释，并且这些过滤条件都是只能通过filter方法实现：</p><p><strong>equals：</strong>判断是否相等逻辑符号为”&#x3D;&#x3D;”</p><p><strong>not equals：</strong>判断是否不相等逻辑符号为”!&#x3D;”</p><p><strong>like &amp; ilike</strong> [不区分大小写]：模糊匹配</p><p><strong>in：</strong>是否为其成员</p><p><strong>not in：</strong>是否不为其成员</p><p><strong>is null：</strong>判断是否为空</p><p><strong>is not null：</strong>判断是否不为空</p><p><strong>and：</strong>逻辑且</p><p><strong>or：</strong>逻辑或</p><p><strong>~：</strong>逻辑非</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Integer, String, Column, Text, and_, or_</span><br><span class="line"><span class="keyword">from</span> db_utils <span class="keyword">import</span> Base, Session</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_article7&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">32</span>))</span><br><span class="line">    price = Column(Integer)</span><br><span class="line">    content = Column(Text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Article (id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> title:<span class="subst">&#123;self.title&#125;</span> price:<span class="subst">&#123;self.price&#125;</span> content:<span class="subst">&#123;self.content&#125;</span>)&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                article = Article(title=<span class="string">f&#x27;title<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&#x27;</span>, price=randint(<span class="number">29</span>, <span class="number">99</span>), content=uuid4())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                article = Article(title=<span class="string">f&#x27;TITLE<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&#x27;</span>, price=randint(<span class="number">29</span>, <span class="number">99</span>))</span><br><span class="line">            ses.add(article)</span><br><span class="line">        ses.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询一条，建议使用基于模型对象的类属性</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># article=ses.query(Article).filter_by(id=1).first()</span></span><br><span class="line">        article = ses.query(Article).<span class="built_in">filter</span>(Article.<span class="built_in">id</span> == <span class="number">1</span>).first()</span><br><span class="line">        <span class="built_in">print</span>(article)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># equal</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_equal</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        article = ses.query(Article).<span class="built_in">filter</span>(Article.title == <span class="string">&#x27;title1&#x27;</span>).first()</span><br><span class="line">        <span class="built_in">print</span>(article)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># not equal</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_not_equal</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        article = ses.query(Article).<span class="built_in">filter</span>(Article.title != <span class="string">&#x27;title2&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> art <span class="keyword">in</span> article:</span><br><span class="line">            <span class="built_in">print</span>(art)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># like</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_like</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># select * from t_article7 where title like &#x27;title%&#x27;;</span></span><br><span class="line">        article = ses.query(Article).<span class="built_in">filter</span>(Article.title.like(<span class="string">&#x27;title%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> art <span class="keyword">in</span> article:</span><br><span class="line">            <span class="built_in">print</span>(art)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># in_</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_in</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        article = ses.query(Article).<span class="built_in">filter</span>(Article.title.in_([<span class="string">&#x27;title1&#x27;</span>, <span class="string">&#x27;title3&#x27;</span>, <span class="string">&#x27;title6&#x27;</span>])).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> art <span class="keyword">in</span> article:</span><br><span class="line">            <span class="built_in">print</span>(art)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># not in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_not_in</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># article = ses.query(Article).filter(Article.title.notin_([&#x27;title1&#x27;, &#x27;title3&#x27;, &#x27;title6&#x27;])).all()</span></span><br><span class="line">        article = ses.query(Article).<span class="built_in">filter</span>(~Article.title.in_([<span class="string">&#x27;title1&#x27;</span>, <span class="string">&#x27;title3&#x27;</span>, <span class="string">&#x27;title6&#x27;</span>])).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> art <span class="keyword">in</span> article:</span><br><span class="line">            <span class="built_in">print</span>(art)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  not null</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_not_null</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># article = ses.query(Article).filter(Article.content != None).all()</span></span><br><span class="line">        article = ses.query(Article).<span class="built_in">filter</span>(Article.content <span class="keyword">is</span> <span class="literal">None</span>).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> art <span class="keyword">in</span> article:</span><br><span class="line">            <span class="built_in">print</span>(art)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># and_</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_and</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># article = ses.query(Article).filter(Article.title != &#x27;title4&#x27;, Article.price &gt; 50).all()</span></span><br><span class="line">        article = ses.query(Article).<span class="built_in">filter</span>(and_(Article.title != <span class="string">&#x27;title4&#x27;</span>, Article.price &gt; <span class="number">50</span>)).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> art <span class="keyword">in</span> article:</span><br><span class="line">            <span class="built_in">print</span>(art)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># or_</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_or</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        article = ses.query(Article).<span class="built_in">filter</span>(or_(Article.title != <span class="string">&#x27;title4&#x27;</span>, Article.price &gt; <span class="number">50</span>)).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> art <span class="keyword">in</span> article:</span><br><span class="line">            <span class="built_in">print</span>(art)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># not ~</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_not</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        article = ses.query(Article).<span class="built_in">filter</span>(~(Article.price &gt; <span class="number">50</span>)).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> art <span class="keyword">in</span> article:</span><br><span class="line">            <span class="built_in">print</span>(art)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Base.metadata.create_all()</span><br><span class="line">    <span class="comment"># create_data()</span></span><br><span class="line">    query_data()</span><br><span class="line">    <span class="comment"># query_data_equal()</span></span><br><span class="line">    <span class="comment"># query_data_not_equal()</span></span><br><span class="line">    <span class="comment"># query_data_like()</span></span><br><span class="line">    <span class="comment"># query_data_in()</span></span><br><span class="line">    <span class="comment"># query_data_not_in()</span></span><br><span class="line">    <span class="comment"># query_data_not_null()</span></span><br><span class="line">    <span class="comment"># query_data_and()</span></span><br><span class="line">    <span class="comment"># query_data_or()</span></span><br><span class="line">    <span class="comment"># query_data_not()</span></span><br></pre></td></tr></table></figure><h2 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h2><p>表之间的关系存在三种：一对一、一对多、多对多。而SQLAlchemy中的ORM也可以模拟这三种关系。因为一对一其实在SQLAlchemy中底层是通过一对多的方式模拟的，所以先来看下一对多的关系：</p><p><strong>外键：</strong>使用SQLAlchemy创建外键非常简单。在从表中增加一个字段，指定这个字段外键的是哪个表的哪个字段就可以了。从表中外键的字段，必须和主表的主键字段类型保持一致。</p><p><strong>外键约束：</strong></p><p>RESTRICT：若子表中有父表对应的关联数据，删除父表对应数据，会阻止删除。默认项<br>NO ACTION：在MySQL中，同RESTRICT。<br>CASCADE：级联删除。<br>SET NULL：父表对应数据被删除，子表对应数据项会设置为NULL。</p><p><strong>ORM层面删除数据注意事项</strong></p><p>ORM层面删除数据，会无视mysql级别的外键约束。直接会将对应的数据删除，然后将从表中的那个外键设置为NULL，也就是数据库的 SET NULL 。如果想要避免这种行为，应该将从表中的外键的 nullable&#x3D;False 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> db_utils <span class="keyword">import</span> Base, Session</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, Integer, Text, ForeignKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_user8&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    uname = Column(String(<span class="number">8</span>), nullable=<span class="literal">False</span>, name=<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;User name:<span class="subst">&#123;self.uname&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_news8&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">32</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    content = Column(Text)</span><br><span class="line">    uid = Column(Integer, ForeignKey(<span class="string">&#x27;t_user8.id&#x27;</span>))  <span class="comment"># 默认不让删除主表</span></span><br><span class="line">    uid = Column(Integer, ForeignKey(<span class="string">&#x27;t_user8.id&#x27;</span>, ondelete=<span class="string">&#x27;RESTRICT&#x27;</span>))  <span class="comment"># 默认策略不让删</span></span><br><span class="line">    uid = Column(Integer, ForeignKey(<span class="string">&#x27;t_user8.id&#x27;</span>, ondelete=<span class="string">&#x27;NO ACTION&#x27;</span>))  <span class="comment"># 不让删</span></span><br><span class="line">    uid = Column(Integer, ForeignKey(<span class="string">&#x27;t_user8.id&#x27;</span>, ondelete=<span class="string">&#x27;CASCADE&#x27;</span>))  <span class="comment"># 级联删除</span></span><br><span class="line">    uid = Column(Integer, ForeignKey(<span class="string">&#x27;t_user8.id&#x27;</span>, ondelete=<span class="string">&#x27;SET NULL&#x27;</span>))  <span class="comment"># 主表被删时，子表只删除相关联的字段中的内容，设置为空。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;News (id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> title:<span class="subst">&#123;self.title&#125;</span>)&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data</span>():</span><br><span class="line">    user = User(uname=<span class="string">&#x27;keven&#x27;</span>)</span><br><span class="line">    news1 = News(title=<span class="string">&#x27;python&#x27;</span>, content=<span class="string">&#x27;flask&#x27;</span>, uid=<span class="number">1</span>)</span><br><span class="line">    news2 = News(title=<span class="string">&#x27;mysql&#x27;</span>, content=<span class="string">&#x27;sql&#x27;</span>, uid=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        ses.add(user)</span><br><span class="line">        ses.commit()</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        ses.add(news1)</span><br><span class="line">        ses.add(news2)</span><br><span class="line">        ses.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># Base.metadata.create_all()</span></span><br><span class="line">    <span class="comment"># Base.metadata.drop_all()</span></span><br><span class="line">    create_data()</span><br></pre></td></tr></table></figure><p><strong>一对多</strong></p><p>mysql级别的外键,必须拿到一个表的外键，然后通过这个外键再去另外一张表中查找,这样太麻烦了;SQLAlchemy提供了一个 relationship ，这个类可以定义属性，以后在访问相关联的表的时候就直接可以通过属性访问的方式就可以访问得到了。另外，可以通过 backref 来指定反向访问的属性名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> db_utils <span class="keyword">import</span> Base, Session</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, Integer, Text, ForeignKey</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_user9&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    uname = Column(String(<span class="number">8</span>), nullable=<span class="literal">False</span>, name=<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;User name:<span class="subst">&#123;self.uname&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1对多 ForeignKey的关键字建议建立在多一边</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_news9&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">32</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    content = Column(Text)</span><br><span class="line">    uid = Column(Integer, ForeignKey(<span class="string">&#x27;t_user9.id&#x27;</span>))  <span class="comment"># 默认不让删除主表</span></span><br><span class="line">    <span class="comment"># 映射到User模型,将主表的数据注入到这个字段里面。</span></span><br><span class="line">    user = relationship(<span class="string">&#x27;User&#x27;</span>, backref=<span class="string">&#x27;news&#x27;</span>)  <span class="comment"># 反向引用，将News的信息注入到news中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;News (id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> title:<span class="subst">&#123;self.title&#125;</span> uid:<span class="subst">&#123;self.uid&#125;</span>)&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data</span>():</span><br><span class="line">    user = User(uname=<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line">    news1 = News(title=<span class="string">&#x27;python&#x27;</span>, content=<span class="string">&#x27;flask&#x27;</span>, uid=<span class="number">1</span>)</span><br><span class="line">    news2 = News(title=<span class="string">&#x27;mysql&#x27;</span>, content=<span class="string">&#x27;sql&#x27;</span>, uid=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        ses.add(user)</span><br><span class="line">        ses.commit()</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        ses.add(news1)</span><br><span class="line">        ses.add(news2)</span><br><span class="line">        ses.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># sql: sql: select u.id,u.name from t_user u where id=(select uid where id=1);</span></span><br><span class="line">        news = ses.query(News).first()</span><br><span class="line">        uid = news.uid</span><br><span class="line">        user = ses.query(User).filter_by(<span class="built_in">id</span>=uid).first()</span><br><span class="line">        <span class="built_in">print</span>(user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据文章查询用户</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data2</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        news = ses.query(News).first()</span><br><span class="line">        <span class="built_in">print</span>(news.user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据用户看文章。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data3</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        user = ses.query(User).first()</span><br><span class="line">        <span class="built_in">print</span>(user.news)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Base.metadata.create_all()</span><br><span class="line">    <span class="comment"># Base.metadata.drop_all()</span></span><br><span class="line">    <span class="comment"># create_data()</span></span><br><span class="line">    <span class="comment"># query_data()</span></span><br><span class="line">    <span class="comment"># query_data2()</span></span><br><span class="line">    query_data3()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>一对一</strong></p><p>在sqlalchemy中，如果想要将两个模型映射成一对一的关系，那么应该在父模型中，指定引用的时候,要传递一个 uselist&#x3D;False 这个参数进去。就是告诉父模型,以后引用这个从模型的时候，不再是一个列表了,而是一个对象了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, Integer, Text, ForeignKey</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship, backref</span><br><span class="line"><span class="keyword">from</span> db_utils <span class="keyword">import</span> Base, Session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginUser</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_login10&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    uname = Column(String(<span class="number">16</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    pwd = Column(String(<span class="number">16</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># login = relationship(&#x27;UserInfo&#x27;,uselist=False)  # 不建议的写法,写一边</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;LoginUser id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> uname:<span class="subst">&#123;self.uname&#125;</span> &gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_user10&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">8</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    gender = Column(String(<span class="number">1</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    address = Column(String(<span class="number">64</span>))</span><br><span class="line">    login_id = Column(Integer, ForeignKey(<span class="string">&#x27;t_login10.id&#x27;</span>))</span><br><span class="line">    login_user = relationship(<span class="string">&#x27;LoginUser&#x27;</span>, backref=backref(<span class="string">&#x27;user&#x27;</span>, uselist=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;LoginUser id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span>  name:<span class="subst">&#123;self.name&#125;</span> gender:<span class="subst">&#123;self.gender&#125;</span> address:<span class="subst">&#123;self.address&#125;</span> &gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data</span>():</span><br><span class="line">    <span class="comment"># # 建立关联关系</span></span><br><span class="line">    </span><br><span class="line">    login = LoginUser(uname=<span class="string">&#x27;tommy&#x27;</span>, pwd=<span class="string">&#x27;digital&#x27;</span>)</span><br><span class="line">    user = UserInfo(name=<span class="string">&#x27;若昭&#x27;</span>, gender=<span class="string">&#x27;男&#x27;</span>, address=<span class="string">&#x27;贵溪市滨江区&#x27;</span>)</span><br><span class="line">    user.login_user = login</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        ses.add(user)</span><br><span class="line">        ses.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_by_login</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        login = ses.query(LoginUser).first()</span><br><span class="line">        <span class="built_in">print</span>(login.user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_by_user</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        user = ses.query(UserInfo).first()</span><br><span class="line">        <span class="built_in">print</span>(user.login_user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Base.metadata.create_all()</span><br><span class="line">    <span class="comment"># Base.metadata.drop_all()</span></span><br><span class="line">    <span class="comment"># create_data()</span></span><br><span class="line">    <span class="comment"># query_data_by_login()</span></span><br><span class="line">    query_data_by_user()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>多对多</strong></p><p>多对多的关系需要通过一张中间表来绑定他们之间的关系。先把两个需要做多对多的模型定义出来；使用Table定义一个中间表，中间表一般就是包含两个模型的外键字段就可以了，并且让他们两个来作为一个“复合主键”；在两个需要做多对多的模型中随便选择一个模型，定义一个relationship属性，来绑定三者之间的关系，在使用relationship的时候，需要传入一个secondary&#x3D;中间表对象名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship, backref</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, Integer, ForeignKey, Table</span><br><span class="line"><span class="keyword">from</span> db_utils <span class="keyword">import</span> Base, Session</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立第三张表关联两张表的数据</span></span><br><span class="line">news_tag = Table(<span class="string">&#x27;t_news_tag&#x27;</span>,</span><br><span class="line">                 Base.metadata,</span><br><span class="line">                 Column(<span class="string">&#x27;news_id&#x27;</span>, Integer, ForeignKey(<span class="string">&#x27;t_news11.id&#x27;</span>), primary_key=<span class="literal">True</span>),</span><br><span class="line">                 Column(<span class="string">&#x27;tags_id&#x27;</span>, Integer, ForeignKey(<span class="string">&#x27;t_tag11.id&#x27;</span>), primary_key=<span class="literal">True</span>),</span><br><span class="line">                 )</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_news11&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">32</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    tags = relationship(<span class="string">&#x27;Tags&#x27;</span>, backref=<span class="string">&#x27;news&#x27;</span>, secondary=news_tag)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;News id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> title:<span class="subst">&#123;self.title&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tags</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_tag11&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">32</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;News id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> name:<span class="subst">&#123;self.name&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data_by_news</span>():</span><br><span class="line">    news1 = News(title=<span class="string">&#x27;电脑端python&#x27;</span>)</span><br><span class="line">    news2 = News(title=<span class="string">&#x27;电子信息工程科技&#x27;</span>)</span><br><span class="line">    tag1 = Tags(name=<span class="string">&#x27;it新闻&#x27;</span>)</span><br><span class="line">    tag2 = Tags(name=<span class="string">&#x27;电子科技&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    news1.tags.append(tag1)</span><br><span class="line">    news1.tags.append(tag2)</span><br><span class="line">    news2.tags.append(tag1)</span><br><span class="line">    news2.tags.append(tag2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        ses.add(news1)</span><br><span class="line">        ses.add(news2)</span><br><span class="line">        ses.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data_by_tags</span>():</span><br><span class="line">    news1 = News(title=<span class="string">&#x27;电脑端java&#x27;</span>)</span><br><span class="line">    news2 = News(title=<span class="string">&#x27;互联网工程科技&#x27;</span>)</span><br><span class="line">    tag1 = Tags(name=<span class="string">&#x27;电脑新闻&#x27;</span>)</span><br><span class="line">    tag2 = Tags(name=<span class="string">&#x27;电脑科技&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    tag1.news.append(news1)</span><br><span class="line">    tag1.news.append(news2)</span><br><span class="line">    tag2.news.append(news1)</span><br><span class="line">    tag2.news.append(news2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        ses.add(tag1)</span><br><span class="line">        ses.add(tag2)</span><br><span class="line">        ses.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># news = ses.query(News).all()</span></span><br><span class="line">        new = ses.query(News).first()</span><br><span class="line">        <span class="built_in">print</span>(new.tags)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Base.metadata.create_all()</span><br><span class="line">    create_data_by_news()</span><br><span class="line">    create_data_by_tags()</span><br><span class="line">    query_data()</span><br></pre></td></tr></table></figure><p><strong>ORM层面的relationship方法中cascade属性值</strong></p><p>在SQLAlchemy，只要将一个数据添加到session中，和他相关联的数据都可以一起存入到数据库中了。这些是怎么设置的呢？其实是通过relationship的时候，有一个关键字参数cascade可以设置这些属性</p><p><strong>save-update：</strong>默认选项。在添加一条数据的时候，会把其他和他相关联的数据都添加到数据库中。这种行为就是save-update属性影响的。<br><strong>delete：</strong>表示当删除某一个模型中的数据的时候，是否也删掉使用relationship和他关联的数据。<br><strong>delete-orphan：</strong>表示当对一个ORM对象解除了父表中的关联对象的时候，自己便会被删除掉。当然如果父表中的数据被删除，自己也会被删除。这个选项只能用在一对多上，并且还需要在子模型中的relationship中，增加一个single_parent&#x3D;True的参数。<br><strong>merge：</strong>默认选项。当在使用session.merge，合并一个对象的时候，会将使用了relationship相关联的对象也进行merge操作。<br><strong>expunge：</strong>移除操作的时候，会将相关联的对象也进行移除。这个操作只是从session中移除，并不会真正的从数据库中删除。<br><strong>all：</strong>是对save-update, merge, refresh-expire, expunge, delete几种的缩写。</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>order_by方法排序：可以指定根据模型中某个属性进行排序，”模型名.属性名.desc()”代表的是降序排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = ses.query(User).order_by(User.age).<span class="built_in">all</span>() <span class="comment"># 升序</span></span><br><span class="line">user = ses.query(User).order_by(User.age.desc()).<span class="built_in">all</span>()  <span class="comment"># 降序</span></span><br></pre></td></tr></table></figure><p>relationship的方法中order_by属性：在指定relationship方法的时候，添加order_by属性来指定排序的字段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship, backref</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, Integer, ForeignKey, Text</span><br><span class="line"><span class="keyword">from</span> db_utils <span class="keyword">import</span> Base, Session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_user14&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">8</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    age = Column(Integer, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;User name:<span class="subst">&#123;self.name&#125;</span> age&quot;<span class="subst">&#123;self.age&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_news14&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">32</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    content = Column(Text, nullable=<span class="literal">False</span>)</span><br><span class="line">    read_count = Column(Integer)</span><br><span class="line">    uid = Column(Integer, ForeignKey(<span class="string">&#x27;t_user14.id&#x27;</span>), nullable=<span class="literal">False</span>)  <span class="comment"># &quot;Column &#x27;uid&#x27; cannot be null&quot;</span></span><br><span class="line">    <span class="comment"># 映射到User模型,将主表的数据注入到这个字段里面。</span></span><br><span class="line">    user = relationship(<span class="string">&#x27;User&#x27;</span>, backref=backref(<span class="string">&#x27;news&#x27;</span>, order_by=read_count))  <span class="comment"># 反向引用，将News的信息注入到news中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;News (id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> title:<span class="subst">&#123;self.title&#125;</span> content:<span class="subst">&#123;self.content&#125;</span> read_count:<span class="subst">&#123;self.read_count&#125;</span>)&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data</span>():</span><br><span class="line">    Base.metadata.drop_all()</span><br><span class="line">    Base.metadata.create_all()</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            user = User(name=<span class="string">f&#x27;name<span class="subst">&#123;i&#125;</span>&#x27;</span>, age=random.randint(<span class="number">17</span>, <span class="number">40</span>))</span><br><span class="line">            ses.add(user)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            news = News(title=<span class="string">f&#x27;title<span class="subst">&#123;k&#125;</span>&#x27;</span>, content=<span class="string">f&#x27;快乐的种子<span class="subst">&#123;random.randint(<span class="number">10</span>, <span class="number">40</span>)&#125;</span>号&#x27;</span>,read_count=random.randint(<span class="number">182</span>, <span class="number">402</span>))</span><br><span class="line">            user.news.append(news)</span><br><span class="line">        ses.commit()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_news</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        user = ses.query(User).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> new <span class="keyword">in</span> user[-<span class="number">1</span>].news:</span><br><span class="line">            <span class="built_in">print</span>(new) </span><br><span class="line"><span class="comment"># 查询结果以read_count升序的新闻对象</span></span><br></pre></td></tr></table></figure><h2 id="limit、offset、slice使用"><a href="#limit、offset、slice使用" class="headerlink" title="limit、offset、slice使用"></a>limit、offset、slice使用</h2><p><strong>limit：</strong>可以限制查询的时候只查询前几条数据。 属top-N查询</p><p><strong>offset：</strong>可以限制查找数据的时候过滤掉前面多少条。可指定开始查询时的偏移量。可组合limit限制条数</p><p><strong>slice：</strong>切片；可以对Query对象使用切片操作，来获取想要的数据。可以使用 slice(start,stop) 方法来做切片操作；也可以使用 [start:stop] 的方式来进行切片操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, Integer, Text</span><br><span class="line"><span class="keyword">from</span> db_utils <span class="keyword">import</span> Base, Session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_news15&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">32</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    content = Column(Text, nullable=<span class="literal">False</span>)</span><br><span class="line">    read_count = Column(Integer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;News (id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> title:<span class="subst">&#123;self.title&#125;</span> content:<span class="subst">&#123;self.content&#125;</span> read_count:<span class="subst">&#123;self.read_count&#125;</span>)&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data</span>():</span><br><span class="line">    Base.metadata.drop_all()</span><br><span class="line">    Base.metadata.create_all()</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            news = News(title=<span class="string">f&#x27;title<span class="subst">&#123;k + <span class="number">1</span>&#125;</span>&#x27;</span>, content=<span class="string">f&#x27;快乐的种子<span class="subst">&#123;random.randint(<span class="number">10</span>, <span class="number">40</span>)&#125;</span>号&#x27;</span>,read_count=random.randint(<span class="number">182</span>, <span class="number">402</span>))</span><br><span class="line">            ses.add(news)</span><br><span class="line">        ses.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_by_limit</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># 限制三条</span></span><br><span class="line">        news = ses.query(News).limit(<span class="number">3</span>).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> new <span class="keyword">in</span> news:</span><br><span class="line">            <span class="built_in">print</span>(new)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过（过滤）多少条</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_by_offset</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># 过滤前三条偏移五条数据</span></span><br><span class="line">        <span class="comment"># news = ses.query(News).offset(3).limit(5).all()</span></span><br><span class="line">        news = ses.query(News).offset(<span class="number">3</span>).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> new <span class="keyword">in</span> news:</span><br><span class="line">            <span class="built_in">print</span>(new)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_by_page</span>(<span class="params">page, count</span>):</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> page:</span><br><span class="line">            news = ses.query(News).limit(count).offset(i * count).<span class="built_in">all</span>()</span><br><span class="line">            <span class="keyword">for</span> new <span class="keyword">in</span> news:</span><br><span class="line">                <span class="built_in">print</span>(new)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_by_slice</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># 根据下标切片;左闭右开</span></span><br><span class="line">        news = ses.query(News).<span class="built_in">slice</span>(<span class="number">4</span>, <span class="number">8</span>).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> new <span class="keyword">in</span> news:</span><br><span class="line">            <span class="built_in">print</span>(new)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_by_slice2</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># 根据结果切片;左闭右开</span></span><br><span class="line">        news = ses.query(News).<span class="built_in">all</span>()[<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line">        <span class="keyword">for</span> new <span class="keyword">in</span> news:</span><br><span class="line">            <span class="built_in">print</span>(new)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    create_data()</span><br><span class="line">    <span class="comment"># query_by_limit()</span></span><br><span class="line">    <span class="comment"># query_by_offset()</span></span><br><span class="line">    <span class="comment"># query_by_page(range(5),2)</span></span><br><span class="line">    <span class="comment"># query_by_slice()</span></span><br><span class="line">    <span class="comment"># query_by_slice2()                    </span></span><br></pre></td></tr></table></figure><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>​在一对多,或者多对多关系的时候,如果想要获取多的一方这一部分的数据的时候,往往能通过一个属性就可以全部获取了。如有一个作者,想要这个作者的所有文章,通过user.articles就可以获取所有;但有时候我们不想获取所有的数据，如只想获取这个作者今天发表的文章,那么这时候我们可以给relationship方法添加属性lazy&#x3D;’dynamic’ ，以后通过 user.articles 获取到的就不是一个列表,而是一个AppenderQuery对象了。这样就可以对这个对象再进行一层过滤和排序等操作通过 lazy&#x3D;’dynamic’ ，获取出来的多的那一部分的数据,就是一个AppenderQuery对象了。这种对象既可以添加新数据，也可以跟 Query 一样，可以再进行一层过滤。</p><p><strong>lazy可配置的参数选项</strong></p><p><strong>select ：</strong> (默认) 后台会用select语句一次性加载所有数据，即访问到属性的时候，就会全部加载该属性的数据。</p><p><strong>joined：</strong>数据会被JOIN语句加载，即对关联的两个表进行join操作，从而获取到所有相关的对象。</p><p><strong>subquery：</strong>数据被用subquery子查询SQL语句加载。</p><p><strong>dynamic ：</strong>这个也是懒加载。在访问属性的时候，并不在内存中加载数据，而是返回一个 AppenderQuery 对象, 需要执行相应方法才可以获取对象。适用于数据量大的时候。</p><p><strong>注意：</strong>lazy&#x3D;”dynamic” 只可以用在一对多和多对对关系中，不可以用在一对一和多对一中。</p><p>这样也合理：如果返回结果很少的话，就没必要延迟加载数据了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前部分代码与前面一致</span></span><br><span class="line"><span class="comment"># 反向引用，将News的信息注入到news中,开启懒加载</span></span><br><span class="line">user = relationship(<span class="string">&#x27;User&#x27;</span>, backref=backref(<span class="string">&#x27;news&#x27;</span>, lazy=<span class="string">&#x27;dynamic&#x27;</span>))  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        user = ses.query(User)</span><br><span class="line">        <span class="built_in">print</span>(user)</span><br><span class="line">        <span class="comment"># &lt;class &#x27;sqlalchemy.orm.query.Query&#x27;&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(user))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data2</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        user = ses.query(User).<span class="built_in">all</span>()</span><br><span class="line">        <span class="built_in">print</span>(user[-<span class="number">1</span>].news)</span><br><span class="line">        <span class="comment"># &lt;class &#x27;sqlalchemy.orm.dynamic.AppenderQuery&#x27;&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(user[-<span class="number">1</span>].news))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data3</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        user = ses.query(User).<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># 可再次过滤</span></span><br><span class="line">        news = user[-<span class="number">1</span>].news.<span class="built_in">filter</span>(News.read_count &gt; <span class="number">300</span>).<span class="built_in">all</span>()</span><br><span class="line">        <span class="built_in">print</span>(news)</span><br></pre></td></tr></table></figure><h2 id="分组group-by和过滤分组having"><a href="#分组group-by和过滤分组having" class="headerlink" title="分组group_by和过滤分组having"></a>分组group_by和过滤分组having</h2><p><strong>group_by：</strong>根据某个字段进行分组。</p><p><strong>having：</strong>是对分组查找结果作进一步过滤。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, Integer, func</span><br><span class="line"><span class="keyword">from</span> db_utils <span class="keyword">import</span> Base, Session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_user17&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">32</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    age = Column(Integer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;News (id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> name:<span class="subst">&#123;self.name&#125;</span> age:<span class="subst">&#123;self.age&#125;</span> )&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data</span>():</span><br><span class="line">    Base.metadata.drop_all()</span><br><span class="line">    Base.metadata.create_all()</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            user = User(name=<span class="string">f&#x27;title<span class="subst">&#123;k + <span class="number">1</span>&#125;</span>&#x27;</span>, age=random.randint(<span class="number">18</span>, <span class="number">40</span>))</span><br><span class="line">            ses.add(user)</span><br><span class="line">        ses.commit()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># 通过用户年纪分组并统计年纪个数</span></span><br><span class="line">        result = ses.query(User.age, func.count(User.age))</span><br><span class="line">        .group_by(User.age).order_by(<span class="string">&#x27;age&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_age_over_eighteen</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        result = ses.query(User.age, func.count(User.age)).group_by(User.age)</span><br><span class="line">        .having(User.age &gt; <span class="number">28</span>).order_by( <span class="string">&#x27;age&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">        <span class="built_in">print</span>(result)        </span><br></pre></td></tr></table></figure><h2 id="join的使用-高级查询之多表查询"><a href="#join的使用-高级查询之多表查询" class="headerlink" title="join的使用_高级查询之多表查询"></a>join的使用_高级查询之多表查询</h2><p><strong>mysql中的外连接、内连接</strong></p><p><strong>left join(左链接)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span>  b <span class="keyword">ON</span> a.aID <span class="operator">=</span>b.bID</span><br></pre></td></tr></table></figure><p>left join是以A表的记录为基础的,A可以看成左表,B可以看成右表,leftjoin是以左表为准的.B表记录不足的地方均为NULL。</p><p><strong>right join(右连接)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  * FROM a RIGHT JOIN b ON a.aID = b.bID</span><br></pre></td></tr></table></figure><p>和left join的结果刚好相反,这次是以右表(B)为基础的,A表不足的地方用NULL填充.</p><p><strong>inner join(相等连接或内连接)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM  a INNER JOIN  b ON a.aID =b.bID</span><br></pre></td></tr></table></figure><p>等同于如下语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM a,b WHERE a.aID = b.bID</span><br></pre></td></tr></table></figure><p>说明inner join并不以谁为基础,它只显示符合条件的记录.</p><p><strong>join的使用</strong></p><ol><li>join分为left join（左外连接）和right join（右外连接）以及内连接（等值连接）。</li><li>在sqlalchemy中，使用join来完成内连接。在写join的时候，如果不写join的条件，那么默认将使用外键来作为条件连接。</li><li>查询出来的字段，跟join后面的东西无关，而是取决于query方法中传了什么参数。（模型名&#x3D;全表；模型名.属性&#x3D;表名.字段）。</li><li>在sqlalchemy中，使用outer join来完成外连接（默认是左外连接）。</li></ol><p>找到(所有的用户，新闻的数量)，按照发表的新闻的数量进行排序</p><p>sql实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> u.name,<span class="built_in">count</span>(u.id) <span class="keyword">from</span> t_user18 u <span class="keyword">join</span> t_news18 n <span class="keyword">on</span> u.id<span class="operator">=</span> n.uid <span class="keyword">group</span> <span class="keyword">by</span>(u.id) <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(n.id);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启懒加载，做二次过滤</span></span><br><span class="line">user = relationship(<span class="string">&#x27;User&#x27;</span>, backref=backref(<span class="string">&#x27;news&#x27;</span>, lazy=<span class="string">&#x27;dynamic&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_join</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># join里面放类模型结构时，默认会以外键做关联条件.</span></span><br><span class="line">        user = ses.query(User.name, func.count(News.<span class="built_in">id</span>)).join(News).</span><br><span class="line">        group_by(User.<span class="built_in">id</span>).order_by(func.count(News.<span class="built_in">id</span>)).<span class="built_in">all</span>()</span><br><span class="line">        <span class="built_in">print</span>(user)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_join_by_self</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># 写两个条件（一个是哪个对象模型，另一个是关联条件）</span></span><br><span class="line">        user = ses.query(User.name, func.count(News.<span class="built_in">id</span>)).join(News, News.uid == User.<span class="built_in">id</span>).</span><br><span class="line">        group_by(User.<span class="built_in">id</span>).order_by(func.count(News.<span class="built_in">id</span>)).<span class="built_in">all</span>()</span><br><span class="line">        <span class="built_in">print</span>(user)        </span><br></pre></td></tr></table></figure><h2 id="subquery的使用-高级查询之子查询"><a href="#subquery的使用-高级查询之子查询" class="headerlink" title="subquery的使用_高级查询之子查询"></a>subquery的使用_高级查询之子查询</h2><p>子查询即select语句中还有select。那么在sqlalchemy中，要实现一个子查询，需以下几个步骤：</p><ol><li>将子查询按照传统的方式写好查询代码，然后在 query 对象后面执行 subquery 方法，将这个查询变成一个子查询。</li><li>在子查询中，将以后需要用到的字段通过 label 方法，取个别名。</li><li>在父查询中，如果想要使用子查询的字段，那么可以通过子查询的返回值上的 c 属性拿到（c&#x3D;Column）。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统方式获取结果再去查询。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data</span>():</span><br><span class="line">    <span class="comment"># 获取一个名为 kobe 并且和他同名同年纪的人</span></span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        u = ses.query(User).<span class="built_in">filter</span>(User.name == <span class="string">&#x27;kobe&#x27;</span>).first()</span><br><span class="line">        user = ses.query(User).<span class="built_in">filter</span>(User.name == u.name, User.age == u.age).<span class="built_in">all</span>()</span><br><span class="line">        <span class="built_in">print</span>(user)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 开启子查询        </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_query</span>():</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        <span class="comment"># label将数据库字段重命名</span></span><br><span class="line">        sub_sql = ses.query(User.name.label(<span class="string">&#x27;uname&#x27;</span>), User.age.label(<span class="string">&#x27;user_age&#x27;</span>))</span><br><span class="line">        .<span class="built_in">filter</span>(User.name == <span class="string">&#x27;kobe&#x27;</span>).limit(<span class="number">1</span>).subquery()</span><br><span class="line">        <span class="comment"># print(sub_sql)</span></span><br><span class="line">        <span class="comment"># &lt;class &#x27;sqlalchemy.sql.selectable.Subquery&#x27;&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(sub_sql))</span><br><span class="line">        <span class="comment"># 如果想要使用子查询的字段，那么可以通过子查询的对象(变量)上的&quot;c&quot;属性拿到</span></span><br><span class="line">        user = ses.query(User).<span class="built_in">filter</span>(User.name == sub_sql.c.uname, User.age == sub_sql.c.user_age).<span class="built_in">all</span>()</span><br><span class="line">        <span class="built_in">print</span>(user)        </span><br></pre></td></tr></table></figure><h2 id="aliased的函数-高级查询之别名使用"><a href="#aliased的函数-高级查询之别名使用" class="headerlink" title="aliased的函数_高级查询之别名使用"></a>aliased的函数_高级查询之别名使用</h2><p>当多表关联查询或者自关联的时候,有时候同一个表要用到多次,这时候用别名就可以方便的解决命名冲突的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> aliased</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, Integer</span><br><span class="line"><span class="keyword">from</span> db_utils <span class="keyword">import</span> Base, Session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">City</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_city20&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">8</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    pid = Column(Integer, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;User id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> name:<span class="subst">&#123;self.name&#125;</span> pid:<span class="subst">&#123;self.pid&#125;</span>&gt;&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data</span>():</span><br><span class="line">    Base.metadata.drop_all()</span><br><span class="line">    Base.metadata.create_all()</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        city1 = City(<span class="built_in">id</span>=<span class="number">1</span>, name=<span class="string">&#x27;河北省&#x27;</span>, pid=<span class="number">0</span>)</span><br><span class="line">        city2 = City(<span class="built_in">id</span>=<span class="number">11</span>, name=<span class="string">&#x27;石家庄&#x27;</span>, pid=<span class="number">1</span>)</span><br><span class="line">        city3 = City(<span class="built_in">id</span>=<span class="number">12</span>, name=<span class="string">&#x27;廊坊&#x27;</span>, pid=<span class="number">1</span>)</span><br><span class="line">        city4 = City(<span class="built_in">id</span>=<span class="number">2</span>, name=<span class="string">&#x27;广东省&#x27;</span>, pid=<span class="number">0</span>)</span><br><span class="line">        city5 = City(<span class="built_in">id</span>=<span class="number">21</span>, name=<span class="string">&#x27;广州&#x27;</span>, pid=<span class="number">2</span>)</span><br><span class="line">        city6 = City(<span class="built_in">id</span>=<span class="number">22</span>, name=<span class="string">&#x27;深圳&#x27;</span>, pid=<span class="number">2</span>)</span><br><span class="line">    ses.add_all([city1, city2, city3, city4, city5, city6, ])</span><br><span class="line">    ses.commit()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_city</span>():</span><br><span class="line">    <span class="comment"># 将表名重命名</span></span><br><span class="line">    c = aliased(City)</span><br><span class="line">    <span class="keyword">with</span> Session() <span class="keyword">as</span> ses:</span><br><span class="line">        cities = ses.query(City.<span class="built_in">id</span>, City.name, City.pid, c.name, c.pid)</span><br><span class="line">        .join(c, City.<span class="built_in">id</span> == c.pid).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">for</span> city <span class="keyword">in</span> cities:</span><br><span class="line">            <span class="built_in">print</span>(city)    </span><br></pre></td></tr></table></figure><h2 id="Flask-SQLAlchemy的使用"><a href="#Flask-SQLAlchemy的使用" class="headerlink" title="Flask-SQLAlchemy的使用"></a>Flask-SQLAlchemy的使用</h2><p> Flask-SQLAlchemy是对SQLAlchemy进行了简单的封装的一个插件，使其在flask中使用sqlalchemy更加的简单。</p><p>安装插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask<span class="literal">-sqlalchemy</span></span><br></pre></td></tr></table></figure><p><strong>Flask-SQLAlchemy的使用要点</strong></p><p><strong>数据库连接</strong></p><p>数据库初始化不再是通过create_engine。跟sqlalchemy一样，定义好数据库连接字符串DB_URI。将这个定义好的数据库连接字符串DB_URI，通过SQLALCHEMY_DATABASE_URI 这个key名配置到 app.config 中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&quot;SQLALCHEMY_DATABASE_URI&quot;</span>] = DB_URI</span><br></pre></td></tr></table></figure><p>使用flask_sqlalchemy.SQLAlchemy 这个类定义一个对象，并将 app 传入进去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><p><strong>创建ORM模型类</strong></p><p>之前都是通过Base &#x3D; declarative_base()来初始化一个基类，然后再继承，在Flask-SQLAlchemy中更加简单了;</p><ol><li>还是跟使用sqlalchemy一样，定义模型。现在不再是需要使用 delarative_base 来创建一个基类。而是使用 db.Model 来作为基类.</li><li>在模型类中， Column 、 String 、 Integer 以及 relationship 等，都不需要导入了，直接使用 db下面相应的属性名就可以了.</li><li>在定义模型的时候，可以不写 <code>__tablename__</code> ，那么 flask_sqlalchemy 会默认使用当前的模型的名字转换成小写来作为表的名字,并且如果这个模型的名字用到了多个单词并且使用了驼峰命名法，那么会在多个单词之间使用下划线来进行连接，</li></ol><p><strong>将ORM模型映射到数据库表</strong></p><p>写完模型类后，要将模型映射到数据库的表中；删除数据库表： db.drop_all()；创建数据库表： db.create_all()</p><p><strong>session的使用</strong></p><p>以后session也不需要使用 sessionmaker 来创建了，直接使用 db.session 就可以了，操作这个session的时候就跟之前的 sqlalchemy 的 session 是一样一样的。</p><p><strong>添加数据</strong></p><p>这时候就可以在数据库中看到已经生成了对应表了;添加数据和之前的没有区别，只是session成为了一个db的属性</p><p><strong>查询数据</strong></p><p>单表查询：查询数据不再是之前的session.query方法了，而是将query属性放在了db.Model上，所以查询就是通过“模型名.query”的方式进行查询了， query 就跟之前的sqlalchemy中的query方法是一样用的。</p><p>多表查询：如果查找数据涉及多个模型，只能使用db.session.query(模型名).all() 这种方式</p><p><strong>修改数据</strong></p><p>修改数据和之前的没有区别，只是session成为了一个db的属性</p><p><strong>删除数据</strong></p><p>删除数据和之前的没有区别，只是session成为了一个db的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库的变量</span></span><br><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">DATABASE = <span class="string">&#x27;flask_db&#x27;</span></span><br><span class="line">USER = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">PWD = <span class="string">&#x27;lmmzty&#x27;</span></span><br><span class="line"><span class="comment"># 数据库url的构建形式:DB_URL = F&#x27;数据库的名字+驱动名://&#123;USER&#125;:&#123;PWD&#125;@&#123;HOST&#125;:&#123;PORT&#125;/&#123;DATABASE&#125;&#x27;</span></span><br><span class="line">DB_URI = <span class="string">f&#x27;mysql+pymysql://<span class="subst">&#123;USER&#125;</span>:<span class="subst">&#123;PWD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DATABASE&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DB_URI</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模型类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">8</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;User id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> name&quot;<span class="subst">&#123;self.name&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_news&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    content = db.Column(db.String(<span class="number">100</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    uid = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;t_user.id&#x27;</span>))</span><br><span class="line">    user = db.relationship(<span class="string">&#x27;User&#x27;</span>, backref=<span class="string">&#x27;news&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;User id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> content:<span class="subst">&#123;self.content&#125;</span> uid&quot;<span class="subst">&#123;self.uid&#125;</span>&gt;&#x27;</span>    </span><br><span class="line"><span class="comment"># 增加数据    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_data</span>():</span><br><span class="line">    user = User(name=<span class="string">&#x27;keven&#x27;</span>)</span><br><span class="line">    news = News(content=<span class="string">&#x27;花朵的绽放!&#x27;</span>)</span><br><span class="line">    user.news.append(news)</span><br><span class="line">    db.session.add(user)</span><br><span class="line">    db.session.commit()    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 查询单表数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_one</span>():</span><br><span class="line">    user = User.query.<span class="built_in">all</span>()</span><br><span class="line">    <span class="built_in">print</span>(user)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 查询多表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_data_many</span>():</span><br><span class="line">    result = db.session.query(User, News).join(News, News.uid == User.<span class="built_in">id</span>).<span class="built_in">all</span>()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数据    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_data</span>():</span><br><span class="line">    user = User.query.first()</span><br><span class="line">    user.name = <span class="string">&#x27;durant&#x27;</span></span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_data</span>():</span><br><span class="line">    news = News.query.first()</span><br><span class="line">    db.session.delete(news)</span><br><span class="line">    db.session.commit()    </span><br></pre></td></tr></table></figure><h2 id="数据库迁移工具alembic使用"><a href="#数据库迁移工具alembic使用" class="headerlink" title="数据库迁移工具alembic使用"></a>数据库迁移工具alembic使用</h2><p>alembic是sqlalchemy的作者开发的，用来做ORM模型与数据库的迁移与映射，alembic使用方式跟git有点了类似,alembic的所有命令都是以alembic开头，alembic的迁移文件也是通过版本进行控制的，</p><p>alembic安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install alembic</span><br></pre></td></tr></table></figure><p><strong>alembic使用流程</strong></p><p>创建模型–&gt;初始化仓库–&gt;修改配置文件–&gt;生成迁移文件–&gt;映射数据库</p><p>1.初始化仓库：alembic init </p><p>2.文件夹名修改配置文件alembic.ini中的sqlalchemy.url&#x3D;driver:&#x2F;&#x2F;user:pass@localhost&#x2F;dbname,</p><p>env.py配置为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line">sys.path.append(os.path.dirname(os.path.dirname(__file__)))</span><br><span class="line"><span class="keyword">import</span> models</span><br><span class="line">target_metadata = models.Base.metadata</span><br></pre></td></tr></table></figure><p>3.使用alembic revision –autogenerate -m “提示信息”将当前模型中的状态生成迁移文件</p><p>4.使用alembic upgrade head将刚刚生成的迁移文件，真正映射到数据库中。</p><p>注意：如果想要使用alembic，则需要先进入到安装了alembic的虚拟环境中，不然就找不到这个命令。</p><p>另外，在你第一次执行upgrade的时候，就会在数据库中创建一个名叫alembic_version表，这个表只会有一条数据，记录当前数据库映射的是哪个版本的迁移文件。</p><p><strong>Flask-SQLAlchemy和alembic结合使用</strong></p><p>env.py文件target_metadata配置为：target_metadata &#x3D; models.db.Model.metadata即可，其他步骤一致。</p><h2 id="Flask-Migrate"><a href="#Flask-Migrate" class="headerlink" title="Flask-Migrate"></a>Flask-Migrate</h2><p>flask-migrate是flask的一个扩展模块，主要是扩展数据库表结构的。flask-migrate是基于Alembic进行的一个封装，并集成到Flask中，所有的迁移操作其实都是Alembic做的，他能跟踪模型的变化，并将变化映射到数据库中</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask<span class="literal">-migrate</span></span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">DATABASE = <span class="string">&#x27;flask_db&#x27;</span></span><br><span class="line">USER = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">PWD = <span class="string">&#x27;pwd&#x27;</span></span><br><span class="line"><span class="comment"># 数据库url的构建形式:DB_URL = F&#x27;数据库的名字+驱动名://&#123;USER&#125;:&#123;PWD&#125;@&#123;HOST&#125;:&#123;PORT&#125;/&#123;DATABASE&#125;&#x27;</span></span><br><span class="line">DB_URI = <span class="string">f&#x27;mysql+pymysql://<span class="subst">&#123;USER&#125;</span>:<span class="subst">&#123;PWD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DATABASE&#125;</span>&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DB_URI</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_user24&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">8</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    age = db.Column(db.Integer, nullable=<span class="literal">False</span>)</span><br><span class="line">    city = db.Column(db.String(<span class="number">8</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;User id:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> name&quot;<span class="subst">&#123;self.name&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">Migrate(app, db)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">终端下进入项目文件夹,设置flask app文件后初始化仓库，在进行相关命令</span></span><br><span class="line"><span class="string">set FLASK_APP=app.py</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>创建迁移仓库</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask db init</span><br></pre></td></tr></table></figure><p>这个命令会创建migrations文件夹，所有迁移文件都放在里面。</p><p><strong>生成脚本文件</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask db migrate</span><br></pre></td></tr></table></figure><p><strong>更新数据库</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask db upgrade</span><br></pre></td></tr></table></figure><p><strong>返回以前的版本</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask db downgrade version_</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FLASK高级</title>
      <link href="/2022/10/22/FLASK%E9%AB%98%E7%BA%A7/"/>
      <url>/2022/10/22/FLASK%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="Cookie的介绍"><a href="#Cookie的介绍" class="headerlink" title="Cookie的介绍"></a>Cookie的介绍</h2><h3 id="使用Cookie的原因"><a href="#使用Cookie的原因" class="headerlink" title="使用Cookie的原因"></a>使用Cookie的原因</h3><p>​Web应用程序是使用HTTP协议传输数据的。HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭。再次交换数据需要建立新的连接，这就意味着服务器无法从连接上跟踪会话。必须引入一种机制，让服务器记住用户。Cookie就是这样的一种机制。它可以弥补HTTP协议无状态的不足。在Session出现之前，基本上所有的网站都采用Cookie来跟踪会话。</p><h3 id="Cookie是什么？"><a href="#Cookie是什么？" class="headerlink" title="Cookie是什么？"></a>Cookie是什么？</h3><p>​Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。</p><h3 id="Cookie的工作原理"><a href="#Cookie的工作原理" class="headerlink" title="Cookie的工作原理"></a>Cookie的工作原理</h3><p>​当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。</p><p>注意：尽量保证cookie的数量以及相应的大小。cookie个数最好 &lt;20~30个；cookie大小最好 &lt; 4K</p><h2 id="Flask中使用Cookie"><a href="#Flask中使用Cookie" class="headerlink" title="Flask中使用Cookie"></a>Flask中使用Cookie</h2><h3 id="设置Cookie"><a href="#设置Cookie" class="headerlink" title="设置Cookie"></a>设置Cookie</h3><p>​设置cookie是在Response的对象上设置。flask.Response 对象有一个 set_cookie 方法，可以通过这个方法来设置 cookie信息。以key,value形式设置Cookie信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/cookie&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cookie</span>():</span><br><span class="line">    resp = make_response(<span class="string">&#x27;set cookie ok&#x27;</span>)</span><br><span class="line">    resp.set_cookie(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><h3 id="查看Cookie"><a href="#查看Cookie" class="headerlink" title="查看Cookie"></a>查看Cookie</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_cookie&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>():</span><br><span class="line">    resp = request.cookies.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><h3 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/delete_cookie&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_cookie</span>():</span><br><span class="line">    response = make_response(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">    response.delete_cookie(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h3 id="Cookie的有效期"><a href="#Cookie的有效期" class="headerlink" title="Cookie的有效期"></a>Cookie的有效期</h3><p>默认的过期时间：如果没有显示的指定过期时间，那么这个cookie将会在浏览器关闭后过期。</p><p>max_age：以秒为单位，距离现在多少秒后cookie会过期。</p><p>expires：为datetime类型。这个时间需要设置为格林尼治时间，相对北京时间来说 会自动+8小时</p><p>如果max_age和expires都设置了，那么这时候以max_age为标准。</p><p>注意：max_age在IE8以下的浏览器是不支持的;expires虽然在新版的HTTP协议中是被废弃了,但是到目前为止，所有的浏览器都还是能够支持，所以如果想要兼容IE8以下的浏览器，那么应该使用expires，否则可以使max_age。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,Response</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;Hello！！&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有设置有效期，默认会在浏览器关闭的时候，让cookie过期</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/create_cookie/defualt/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_cookie1</span>():</span><br><span class="line">  resp = Response(<span class="string">&#x27;通过默认值，设置cookie有效期&#x27;</span>)</span><br><span class="line">   resp.set_cookie(<span class="string">&#x27;uname&#x27;</span>,<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line">   <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="comment"># max_age以秒为单位设置cookie的有效期</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/create_cookie/max_age/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_cookie2</span>():</span><br><span class="line">   resp = Response(<span class="string">&#x27;通过max_age，设置cookie有效期&#x27;</span>)</span><br><span class="line">   age = <span class="number">60</span>*<span class="number">60</span>*<span class="number">2</span></span><br><span class="line">  resp.set_cookie(<span class="string">&#x27;uname&#x27;</span>,<span class="string">&#x27;egon&#x27;</span>,max_age=age)</span><br><span class="line">   <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="comment"># expires 以指定时间为cookie的有效期</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/create_cookie/expires/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_cookie3</span>():</span><br><span class="line">   resp = Response(<span class="string">&#x27;通过expires，设置cookie有效期&#x27;</span>)</span><br><span class="line">   tmp_time = datetime(<span class="number">2022</span>, <span class="number">11</span>,<span class="number">11</span>,hour=<span class="number">18</span>,minute=<span class="number">0</span>,second=<span class="number">0</span>)</span><br><span class="line">resp.set_cookie(<span class="string">&#x27;uname&#x27;</span>,<span class="string">&#x27;python&#x27;</span>,expires=tmp_time)</span><br><span class="line">   <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="comment"># expires 以指定时间为cookie的有效期</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/create_cookie/expires2/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_cookie4</span>():</span><br><span class="line">   resp = Response(<span class="string">&#x27;通过expires，设置cookie有效期&#x27;</span>)</span><br><span class="line">   tmp_time = datetime.now() +timedelta(days=<span class="number">2</span>)</span><br><span class="line">resp.set_cookie(<span class="string">&#x27;uname&#x27;</span>,<span class="string">&#x27;python_sql&#x27;</span>,expires=tmp_time)</span><br><span class="line">   <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/create_cookie/exp_max/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_cookie5</span>():</span><br><span class="line">   resp = Response(<span class="string">&#x27;通过expires与max_age，设置cookie有效期&#x27;</span>)</span><br><span class="line">   <span class="comment"># expires 与max_age同时设置了，会以max_age为准</span></span><br><span class="line">   tmp_time = datetime.now() +timedelta(days=<span class="number">2</span>)</span><br><span class="line">  resp.set_cookie(<span class="string">&#x27;uname&#x27;</span>,<span class="string">&#x27;python_sql&#x27;</span>,expires=tmp_time,max_age = <span class="number">60</span>*<span class="number">60</span>*<span class="number">2</span>)</span><br><span class="line">   <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)                 </span><br></pre></td></tr></table></figure><h2 id="Session的介绍"><a href="#Session的介绍" class="headerlink" title="Session的介绍"></a>Session的介绍</h2><p>Session和Cookie的作用类似，都是为了存储用户相关的信息，都是为了解决http协议无状态的这个特点。<br>不同的是Cookie保存在客户端浏览器中，Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以。</p><h3 id="使用session的原因"><a href="#使用session的原因" class="headerlink" title="使用session的原因"></a>使用session的原因</h3><p>​Session的出现，是为了解决cookie存储数据不安全的问题的。如果说Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。</p><h3 id="session的工作流程"><a href="#session的工作流程" class="headerlink" title="session的工作流程"></a>session的工作流程</h3><p><img src="/2022/10/22/FLASK%E9%AB%98%E7%BA%A7/1.png" alt="1"></p><p>存储在服务器的数据会更加的安全，不容易被窃取。但存储在服务器也有一定的弊端，就是会占用服务器的资源，（所以后面来了token）但现在服务器已经发展至今，一些session信息还是绰绰有余的.</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>若客户端禁用了浏览器的Cookie功能，session功能想继续保留，该咋整？给出你的实现思路(能代码实现最好)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>URL地址携带SessionID --url重写</span><br><span class="line"><span class="number">2.</span>表单隐藏字段</span><br><span class="line"><span class="number">3.</span>上述两种方式都有弊端，所以还得token来.</span><br></pre></td></tr></table></figure><h2 id="Flask中使用Session"><a href="#Flask中使用Session" class="headerlink" title="Flask中使用Session"></a>Flask中使用Session</h2><p>需要先设置SECRET_KEY,设置SECRET_KEY的几种方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultConfig</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    SECRET_KEY = <span class="string">&#x27;fih9fh9eh9gh2&#x27;</span></span><br><span class="line">app.config.from_object(DefaultConfig)</span><br><span class="line"></span><br><span class="line">app.secret_key=<span class="string">&#x27;xihwidfw9efw&#x27;</span></span><br><span class="line"></span><br><span class="line">app.config.secret_key=<span class="string">&#x27;huayeshigeren&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="设置、修改session"><a href="#设置、修改session" class="headerlink" title="设置、修改session"></a>设置、修改session</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_session/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_session</span>():</span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;set session ok&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="读取session"><a href="#读取session" class="headerlink" title="读取session"></a>读取session</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_session/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_session</span>():</span><br><span class="line">    username = session.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;get session username&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(username)</span><br></pre></td></tr></table></figure><h3 id="删除session"><a href="#删除session" class="headerlink" title="删除session"></a>删除session</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/del_session/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_session</span>():</span><br><span class="line">    <span class="comment">#删除指定的key的session</span></span><br><span class="line">    <span class="comment"># session.pop(&#x27;uname&#x27;)</span></span><br><span class="line">    <span class="comment">#删除session中的所有的key 【删除所有】</span></span><br><span class="line">    session.clear()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;删除session成功&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Flask设置Session的有效期"><a href="#Flask设置Session的有效期" class="headerlink" title="Flask设置Session的有效期"></a>Flask设置Session的有效期</h3><p>如果没有设置session的有效期。那么默认就是浏览器关闭后过期。</p><p>如果设置session.permanent&#x3D;True，那么就会默认在31天后过期。如果不想在31天后过期，按如下步骤操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">&#x27;sdfdfdsfsss&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>] =timedelta(days=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;Hello！！&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_session/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_session</span>():</span><br><span class="line">    <span class="comment"># 设置session的持久化,默认是增加了31天</span></span><br><span class="line">    session.permanent = <span class="literal">True</span></span><br><span class="line">    session[<span class="string">&#x27;uname&#x27;</span>] = <span class="string">&#x27;10001&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;设置一个Session的信息&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_session/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_session</span>():</span><br><span class="line">    <span class="comment"># 如果服务器关闭掉了，session的有效期，依然是之前系统保存日期</span></span><br><span class="line">    <span class="comment"># 如果secret_key设置是一个固定的值，那么服务器重启不会影响session的有效期</span></span><br><span class="line">    <span class="comment"># 如果secret_key设置不是一个固定的值，那么服务器之前设置的session将全部过期</span></span><br><span class="line">    <span class="keyword">return</span> session.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Session实战实现用户免登录"><a href="#Session实战实现用户免登录" class="headerlink" title="Session实战实现用户免登录"></a>Session实战实现用户免登录</h3><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    &#123;% if msg %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是个人主页信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session,request,redirect,url_for,views,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个基于方法调度的 类视图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(views.MethodView):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__jump</span>(<span class="params">self,msg=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>,msg = msg)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        msg = request.args.get(<span class="string">&#x27;msg&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__jump(msg)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        uname = request.form.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">        pwd = request.form.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> uname == <span class="string">&quot;sxt&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123&quot;</span>:</span><br><span class="line">            session[<span class="string">&#x27;uname&#x27;</span>] = uname</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__jump(msg=<span class="string">&quot;用户名或者密码错误&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    uname = session.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> uname:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这个是主页！！&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>,msg=<span class="string">&#x27;请先登录&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 注册类视图</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/login/&#x27;</span>,view_func=LoginView.as_view(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.secret_key = <span class="string">&#x27;xihwidfw9efw&#x27;</span></span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="Local对象"><a href="#Local对象" class="headerlink" title="Local对象"></a>Local对象</h2><p>​要实现并发效果, 每一个请求进来的时候我们都开启一个进程, 这显然是不合理的, 于是就可以使用线程;但是线程中数据互相不隔离，存在修改数据的时候数据不安全的问题.</p><p><img src="/2022/10/22/FLASK%E9%AB%98%E7%BA%A7/2.png" alt="2"></p><h3 id="werkzeug-local-Local对象"><a href="#werkzeug-local-Local对象" class="headerlink" title="werkzeug.local.Local对象"></a>werkzeug.local.Local对象</h3><p>​在Flask中，类似于 request 对象，其实是绑定到了一个 werkzeug.local.Local对象上。这样，即使是同一个对象，那么在多个线程中都是隔离的。类似的对象还有 session 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flask=werkzeug + sqlalchemy + jinja2</span></span><br><span class="line"><span class="keyword">from</span> werkzeug.local <span class="keyword">import</span> Local</span><br><span class="line"><span class="keyword">from</span> thread <span class="keyword">import</span> Thread</span><br><span class="line">local = Local()</span><br><span class="line">local.request =<span class="string">&#x27;具体用户的请求对象&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        local.request = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;子线程：&#x27;</span>,local.request)</span><br><span class="line">        </span><br><span class="line">mythread = MyThread()</span><br><span class="line">mythread.start()</span><br><span class="line">mythread.join()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主线程：&#x27;</span>,local.request)</span><br><span class="line"><span class="comment"># 子线程的内容:jason 主线程的内容:具体用户的请求对象</span></span><br></pre></td></tr></table></figure><h3 id="ThreadLocal变量"><a href="#ThreadLocal变量" class="headerlink" title="ThreadLocal变量"></a>ThreadLocal变量</h3><p>​Python提供了ThreadLocal 变量，它本身是一个全局变量，但是每个线程却可以利用它来保存属于自己的私有数据，这些私有数据对其他线程也是不可见的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,local</span><br><span class="line">local =local()</span><br><span class="line">local.request =<span class="string">&#x27;具体用户的请求对象&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        local.request = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;子线程：&#x27;</span>,local.request)</span><br><span class="line">        </span><br><span class="line">mythread = MyThread()</span><br><span class="line">mythread.start()</span><br><span class="line">mythread.join()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主线程：&#x27;</span>,local.request)</span><br><span class="line"><span class="comment"># 子线程的内容:jason 主线程的内容:具体用户的请求对象</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​只要满足绑定到”local”或”Local”对象上的属性，在每个线程中都是隔离的，那么他就叫做 ThreadLocal 对象,也叫’ThreadLocal’变量。</p><h2 id="Flask-app上下文"><a href="#Flask-app上下文" class="headerlink" title="Flask app上下文"></a>Flask app上下文</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a:<span class="built_in">int</span>,b:<span class="built_in">int</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>​上下文(感性的理解)：每一段程序都有很多外部变量，只有像add这种简单的函数才是没有外部变量的。 一旦一段程序有了外部变量，这段程序就不完整，不能独立运行。为了能让这段程序可以运行，就要给所有的外部变量一个一个设置一些值。就些值所在的集合就是叫上下文。并且上下文这一概念在中断任务的场景下具有重大意义，其中任务在被中断后，处理器保存上下文并提供中断处理，因些在这之后，任务可以在同一个地方继续执行(上下文越小，延迟越小)。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>​运行的Flask项目，每一个路由映射的内容片段，都不可以单独拿出来使用。当获取到了APP_Context以后，就可以直接通过程序映射的地址访问逻辑，并且可以重复使用。上下文的一个典型应用场景就是用来缓存一些我们需要在发生请求之前或者要使用的资源。举个例子，比如数据库连接。当我们在应用上下文中来存储东西的时候你得选择一个唯一的名字，这是因为应用上下文为 Flask 应用和扩展所共享。</p><h3 id="应用上下文"><a href="#应用上下文" class="headerlink" title="应用上下文"></a>应用上下文</h3><p>​App上下文，也叫应用上下文;应用上下文是存放到一个 LocalStack 的栈中。和应用app相关的操作就必须要用到应用上下文;例如通过 current_app 获取当前的这个 app 名字。</p><p><img src="/2022/10/22/FLASK%E9%AB%98%E7%BA%A7/3.png" alt="3"></p><p>​在视图函数中，不用担心(应用&#x2F;请求)上下文的问题。因为视图函数要执行，那么肯定是通过访问url的方式执行的，那么这种情况下，Flask底层就已经自动的帮我们把应用上下文都推入到了相应的栈中。</p><p>如果想要在视图函数外面执行相关的操作，比如: 获取当前的app名称，那么就必须要手动推入应用上下文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方式：便于理解的写法,推入栈中</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,current_app</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># app上下文</span></span><br><span class="line">app_context = app.app_context()</span><br><span class="line">app_context.push()</span><br><span class="line"><span class="built_in">print</span>(current_app.name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="built_in">print</span>(current_app.name)  <span class="comment"># 获取应用的名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第二种方式：用with语句</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,current_app</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># app上下文</span></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">   <span class="built_in">print</span>(current_app.name)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="built_in">print</span>(current_app.name)  <span class="comment"># 获取应用的名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="Flask请求上下文详解"><a href="#Flask请求上下文详解" class="headerlink" title="Flask请求上下文详解"></a>Flask请求上下文详解</h2><p>请求上下文也是存放到一个 LocalStack 的栈中。和请求相关的操作就必须用到请求上下文，比如使用 url_for 反转视图函数。</p><p>如果想要在视图函数外面执行相关的操作，比如反转url，那么就必须要手动推入请求上下文;底层代码执行说明：</p><ol><li>推入请求上下文到栈中，会首先判断有没有应用上下文</li><li>如果没有那么就会先推入应用上下文到栈中</li><li>然后再推入请求上下文到栈中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    url = url_for(<span class="string">&#x27;test_url&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Hello！===<span class="subst">&#123;url&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_url</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;这个是为了测试请求上下文&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;test_url&#x27;</span>))  <span class="comment"># RuntimeError: Unable to build URLs outside an active request without &#x27;SERVER_NAME&#x27; configured. Also configure &#x27;APPLICATION_ROOT&#x27; and &#x27;PREFERRED_URL_SCHEME&#x27; as needed.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.test_request_context():</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;test&#x27;</span>))    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>为什么上下文需要放在栈中？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.应用上下文:Flask底层是基于werkzeug，werkzeug是可以包含多个app的，所以这时候用一个栈来保存。如果你在使用app1,那么app1应该是要在栈的顶部,如果用完了app1，那么app1应该从栈中删除。方便其他代码使用下面的app。</span><br><span class="line"></span><br><span class="line">2. 如果在写测试代码，或者离线脚本的时候，我们有时候可能需要创建多个请求上下文，这时候就需要存放到一个栈中了。使用哪个请求上下文的时候，就把对应的请求上下文放到栈的顶部，用完了就要把这个请求上下文从栈中移除掉。</span><br></pre></td></tr></table></figure><h2 id="Flask线程隔离的g对象"><a href="#Flask线程隔离的g对象" class="headerlink" title="Flask线程隔离的g对象"></a>Flask线程隔离的g对象</h2><p><strong>保存为全局对象g对象的好处：</strong><br>    g对象是在整个Flask应用运行期间都是可以使用的。并且也跟request一样，是线程隔离的。这个对象是专门用来存储开发者自己定义的一些数据，方便在整个Flask程序中都可以使用。一般使用就是，将一些经常会用到的数据绑定到上面，以后就直接从g上面取就可以了，而不需要通过传参的形式，这样更加方便。</p><p><strong>g对象使用场景</strong>：有一个工具类utils.py 和 用户办理业务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">funa</span>(<span class="params">uname</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;funa <span class="subst">&#123;uname&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funb</span>(<span class="params">uname</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;funb <span class="subst">&#123;uname&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">from</span>  utils <span class="keyword">import</span>  funa,funb,func</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/profile/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_profile</span>():</span><br><span class="line">    uname = request.args.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">    <span class="comment">#调用功能函数办理业务</span></span><br><span class="line">    funa(uname)</span><br><span class="line">    funb(uname)</span><br><span class="line">    <span class="comment">#每次都得传参 麻烦，引入g对象进行优化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;办理业务成功&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>优化工具类utils.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> g</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funa</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;funa <span class="subst">&#123;g.uname&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funb</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;funb <span class="subst">&#123;g.uname&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,g</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span>  funa,funb,func</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Flask_线程隔离的g对象使用</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/profile/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_profile</span>():</span><br><span class="line">    uname = request.args.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">    <span class="comment">#每次都得传参 麻烦，引入g对象进行优化</span></span><br><span class="line">    g.uname = uname</span><br><span class="line">    funa()</span><br><span class="line">    funb()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;办理业务成功&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="Flask钩子函数"><a href="#Flask钩子函数" class="headerlink" title="Flask钩子函数"></a>Flask钩子函数</h2><p><strong>钩子函数概念</strong>：在Flask中钩子函数是使用特定的装饰器装饰的函数。为什么叫做钩子函数呢，是因为钩子函数可以在正常执行的代码中，插入一段自己想要执行的代码。那么这种函数就叫做钩子函数。</p><h3 id="Flask常见钩子函数"><a href="#Flask常见钩子函数" class="headerlink" title="Flask常见钩子函数"></a>Flask常见钩子函数</h3><p><strong>before_first_request</strong>：处理项目的第一次请求之前执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first_request</span>():      </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;first time request&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>before_request</strong>：在每次请求之前执行。通常可以用这个装饰器来给视图函数增加一些变量。请求已经到达了Flask，但是还没有进入到具体的视图函数之前调用。一般这个就是在视图函数之前，我们可以把一些后面需要用到的数据先处理好，方便视图函数使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, g, session</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;skidhfikshighsd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(g, <span class="string">&#x27;uname&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;用户已登录！用户名是：<span class="subst">&#123;g.uname&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;用户没有登录！&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before_request</span>():</span><br><span class="line">    uname = session.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> uname:</span><br><span class="line">        g.uname = uname</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这个是每次请求时，需要执行的逻辑！！！&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>teardown_appcontext</strong>：不管是否有异常，注册的函数都会在每次请求之后执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.teardown_appcontext    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">exc=<span class="literal">None</span></span>):      </span><br><span class="line">    <span class="keyword">if</span> exc <span class="keyword">is</span> <span class="literal">None</span>:        </span><br><span class="line">        db.session.commit()      </span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        db.session.rollback()      </span><br><span class="line">        db.session.remove()</span><br></pre></td></tr></table></figure><p><strong>template_filter</strong>：在使用Jinja2模板的时候自定义过滤器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_filter(<span class="params"><span class="string">&quot;upper&quot;</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upper_filter</span>(<span class="params">s</span>):    </span><br><span class="line">    <span class="keyword">return</span> s.upper()</span><br></pre></td></tr></table></figure><p><strong>context_processor</strong>：上下文处理器。使用这个钩子函数，必须返回一个字典。这个字典中的值在所有模版中都可以使用。</p><p><strong>使用场景</strong>：这个钩子函数的函数是，如果一些在很多模版中都要用到的变量，那么就可以使用这个钩子函数来返回，而不用在每个视图函数中的 render_template 中去写，这样可以让代码更加简洁和好维护。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,session,current_app,url_for,g,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>]=os.urandom(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    session[<span class="string">&#x27;uname&#x27;</span>]=<span class="string">&quot;jason&quot;</span></span><br><span class="line">    <span class="keyword">return</span>  render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/li&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mylist</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(g,<span class="string">&quot;user&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;条件取出&quot;</span>, g.user)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;list.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before_request</span>():</span><br><span class="line">    uname = session.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> uname:</span><br><span class="line">        g.user = uname</span><br><span class="line">场景：若用户已经登录了，验证时把用户名放入session中,之后取出来，放入钩子函数，以后访问的视图函数中可直接取出来使用</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.context_processor</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">context_processor</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(g,<span class="string">&#x27;user&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;current_user&quot;</span>:g.user&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>errorhandler</strong>：errorhandler接收状态码，可以自定义返回这种状态码的响应的处理方法。在发生一些异常的时候，比如404错误，比如500错误,那么如果想要优雅的处理这些错误，就可以使用 errorhandler。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, abort, g</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(g.uname)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello !&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span></span>)</span></span><br><span class="line"><span class="comment"># 可以使用flask.abort(状态码)来契合钩子函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    abort(<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="comment"># 装饰的钩子函数下必须写一个参数接受错误信息，建议返回一个状态码;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_handler</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;404.html&#x27;</span>), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">500</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_handler</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;500.html&#x27;</span>), <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="Flask信号机制"><a href="#Flask信号机制" class="headerlink" title="Flask信号机制"></a>Flask信号机制</h2><p> flask中的信号使用的是一个第三方插件，叫做blinker。使用如下命令进行安装：pip install blinker</p><h3 id="自定义信号步骤"><a href="#自定义信号步骤" class="headerlink" title="自定义信号步骤"></a>自定义信号步骤</h3><p>创建一个信号–&gt;监听一个信号–&gt;发送一个信号</p><p>创建信号：定义信号需要使用到blinker这个包的Namespace类来创建一个命名空间。比如定义一个在访问了某个视图函数的时候的信号。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Namespace的作用：为了防止多人开发的时候，信号名字冲突的问题</span></span><br><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> Namespace</span><br><span class="line">space = Namespace()</span><br><span class="line">signal1 = space.signal(<span class="string">&#x27;信号名称&#x27;</span>)</span><br></pre></td></tr></table></figure><p>监听信号：监听信号使用signal1对象的connect方法，在这个方法中需要传递一个函数，用来监听到这个信号后做该做的事情。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">sender,uname</span>):</span><br><span class="line">    <span class="built_in">print</span>(sender)</span><br><span class="line">    <span class="built_in">print</span>(uname)</span><br><span class="line">    </span><br><span class="line">signal1.connect(func1)</span><br></pre></td></tr></table></figure><p>发送信号：发送信号使用signal1对象的send方法，这个方法可以传递一些其他参数过去。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signal1.send(uname=<span class="string">&#x27;jason&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="信号使用场景-存储用户登录日志"><a href="#信号使用场景-存储用户登录日志" class="headerlink" title="信号使用场景-存储用户登录日志"></a>信号使用场景-存储用户登录日志</h3><p>编写一个signals.py文件创建登录信号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker  <span class="keyword">import</span>  Namespace</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request,g</span><br><span class="line">namespace = Namespace()</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建登录信号</span></span><br><span class="line">login_signal = namespace.signal(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_log</span>(<span class="params">sender</span>):</span><br><span class="line">    <span class="comment"># 用户名 登录时间 ip地址</span></span><br><span class="line">    now = datetime.now()</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    log_data = <span class="string">&quot;&#123;uname&#125;*&#123;now&#125;*&#123;ip&#125;&quot;</span>.<span class="built_in">format</span>(uname=g.uname, now=now, ip=ip)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;login_log.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(log_data + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        f.close()</span><br><span class="line">        </span><br><span class="line"><span class="comment">#监听信号</span></span><br><span class="line">login_signal.connect(login_log)</span><br></pre></td></tr></table></figure><p>使用信号存储用户登录日志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,g</span><br><span class="line"><span class="keyword">from</span> signals <span class="keyword">import</span>  login_signal</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="comment"># 通过查询字符串的形式来传递uname这个参数</span></span><br><span class="line">    uname = request.args.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">    g.uname = uname</span><br><span class="line">        <span class="comment"># 发送信号</span></span><br><span class="line">        login_signal.send()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;登录成功！&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;请输入用户名！&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Flask内置信号"><a href="#Flask内置信号" class="headerlink" title="Flask内置信号"></a>Flask内置信号</h3><p>1 template_rendered：模版渲染完成后的信号。<br>2 before_render_template：模版渲染之前的信号。<br>3 request_started：请求开始之前，在到达视图函数之前发送信号。<br>4 request_finished：请求结束时，在响应发送给客户端之前发送信号。<br>5 request_tearing_down：请求对象被销毁时发送的信号，即使在请求过程中发生异常也会发送信号。<br>6 got_request_exception：在请求过程中抛出异常时发送信号，异常本身会通过exception传递到订阅（监听）的函数中。一般可以监听这个信号，来记录网站异常信息。<br>7 appcontext_tearing_down：应用上下文被销毁时发送的信号。<br>8 appcontext_pushed：应用上下文被推入到栈上时发送的信号。<br>9 appcontext_popped：应用上下文被推出栈时发送的信号。<br>10 message_flashed：调用了Flask的 flash 方法时发送的信号。</p><h3 id="template-rendered的使用"><a href="#template-rendered的使用" class="headerlink" title="template_rendered的使用"></a>template_rendered的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,template_rendered</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello!!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;home.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_function</span>(<span class="params">sender,template,context</span>):</span><br><span class="line">    <span class="built_in">print</span>(sender)</span><br><span class="line">    <span class="built_in">print</span>(template)</span><br><span class="line">    <span class="built_in">print</span>(context)</span><br><span class="line">    </span><br><span class="line">template_rendered.connect(render_function)</span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="got-request-exception的使用"><a href="#got-request-exception的使用" class="headerlink" title="got_request_exception的使用"></a>got_request_exception的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask importFlask,request,got_request_exception,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置信号got_request_exception：在请求过程中抛出异常时发送信号，异常本身会通过exception传递到订阅（监听）的函数中。一般可以监听这个信号，来记录网站异常信息。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">request_exception_log</span>(<span class="params">sender,exception</span>):</span><br><span class="line">    <span class="built_in">print</span>(sender)</span><br><span class="line">    <span class="built_in">print</span>(exception) <span class="comment"># division by zero</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    a = <span class="number">1</span>/<span class="number">0</span>  <span class="comment"># 制造bug</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>,data=<span class="string">&quot;momo&quot;</span>)</span><br><span class="line"></span><br><span class="line">got_request_exception.connect(request_exception_log)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="WTForms介绍和基本使用"><a href="#WTForms介绍和基本使用" class="headerlink" title="WTForms介绍和基本使用"></a>WTForms介绍和基本使用</h2><p>Flask-WTF是简化了WTForms操作的一个第三方库。WTForms表单的两个主要功能是验证用户提交数据的合法性以及渲染模板。而Flask-WTF还包括一些其他的功能：CSRF保护，文件上传等;</p><p>安装Flask-WTF默认也会安装WTForms，因此使用以下命令来安装Flask-WTF和WTForms:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-wtf</span><br></pre></td></tr></table></figure><h3 id="WTForms表单验证的基本使用"><a href="#WTForms表单验证的基本使用" class="headerlink" title="WTForms表单验证的基本使用"></a>WTForms表单验证的基本使用</h3><p>1.自定义一个表单类，继承自wtforms.Form类。<br>2.定义好需要验证的字段，字段的名字必须和模版中那些需要验证的input标签的name属性值保持一致。<br>3.在需要验证的字段上，需要指定好具体的数据类型。<br>4.在相关的字段上，指定验证器。<br>5.以后在视图函数中，只需要使用这个表单类的对象，并且把需要验证的数据，也就是request.form传给这个表单类，再调用表单类对象.validate()方法进行，如果返回True，那么代表用户输入的数据都是符合格式要求的，Flase则代表用户输入的数据是有问题的。如果验证失败了，那么可以通过表单类对象.errors来获取具体的错误信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form, StringField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Length, EqualTo</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;home18.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterForm</span>(<span class="title class_ inherited__">Form</span>):</span><br><span class="line">    uname = StringField(validators=[Length(<span class="built_in">min</span>=<span class="number">2</span>, <span class="built_in">max</span>=<span class="number">10</span>, message=<span class="string">&#x27;用户名长度需要在两位到十位之间&#x27;</span>)])</span><br><span class="line">    pwd=StringField(validators=[Length(<span class="built_in">min</span>=<span class="number">8</span>,<span class="built_in">max</span>=<span class="number">16</span>,message=<span class="string">&#x27;密码长度需要在八位到十六位之间&#x27;</span>)</span><br><span class="line">                               ])</span><br><span class="line">    pwd2=StringField(validators=[Length(<span class="built_in">min</span>=<span class="number">6</span>,<span class="built_in">max</span>=<span class="number">16</span>,message=<span class="string">&#x27;两次密码不一致&#x27;</span>)</span><br><span class="line">                                 ,EqualTo(<span class="string">&#x27;pwd&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;register20.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = RegisterForm(request.form)</span><br><span class="line">        <span class="keyword">if</span> form.validate():  <span class="comment"># 验证成功True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;验证成功&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            errors = form.errors</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;验证失败<span class="subst">&#123;errors&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="WTForms常用验证器"><a href="#WTForms常用验证器" class="headerlink" title="WTForms常用验证器"></a>WTForms常用验证器</h3><p>页面把数据提交上来，需要经过表单验证，进而需要借助验证器来进行验证，以下是常用的内置验证器：</p><p>1.Length：字符串长度限制，有min和max两个值进行限制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = StringField(validators=[Length(<span class="built_in">min</span>=<span class="number">3</span>,<span class="built_in">max</span>=<span class="number">10</span>,message=<span class="string">&quot;用户名长度必须在3到10位之间&quot;</span>)])</span><br></pre></td></tr></table></figure><p>2.EqualTo：验证数据是否和另外一个字段相等，常用的就是密码和确认密码两个字段是否相等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password_repeat = StringField(validators=[Length(<span class="built_in">min</span>=<span class="number">6</span>,<span class="built_in">max</span>=<span class="number">10</span>),EqualTo(<span class="string">&quot;password&quot;</span>)])</span><br></pre></td></tr></table></figure><p>3.Email：验证上传的数据是否为邮箱格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">email = StringField(validators=[Email()])</span><br></pre></td></tr></table></figure><p>4.InputRequired：验证该项数据为必填项，即要求该项非空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = StringField(validators=[input_required()])</span><br></pre></td></tr></table></figure><p>5.NumberRange：数值的区间，有min和max两个值限制，如果处在这两个数字之间则满足。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = IntegerField(validators=[NumberRange(<span class="number">12</span>,<span class="number">18</span>)])</span><br></pre></td></tr></table></figure><p>6.Regexp：定义正则表达式进行验证，如验证手机号码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phone = StringField(validators=[Regexp(<span class="string">r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;</span>)])</span><br></pre></td></tr></table></figure><p>7.URL：必须是URL的形式 如<a href="http://www.baidu.com/">http://www.baidu.com</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">home_page = StringField(validators=[URL()])</span><br></pre></td></tr></table></figure><p>8.UUID：验证数据是UUID类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uuid = StringField(validators=[UUID()])</span><br></pre></td></tr></table></figure><p>数据项的类型，一般常用的有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form,StringField,IntegerField</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterForm2</span>(<span class="title class_ inherited__">Form</span>):</span><br><span class="line">    uname = StringField(validators=[InputRequired()])</span><br><span class="line">    age = IntegerField(validators=[NumberRange(<span class="number">18</span>,<span class="number">40</span>)])</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册页面--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄:<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>手机号码:<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>个人主页:<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;homepage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>uuid:<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uuid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>forms_check.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, IntegerField, Form</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Length, NumberRange, Email, InputRequired, Regexp,URL,UUID</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterForm</span>(<span class="title class_ inherited__">Form</span>):</span><br><span class="line">    email = StringField(validators=[Email()])</span><br><span class="line">    uname = StringField(validators=[InputRequired(), Length(<span class="built_in">min</span>=<span class="number">3</span>, <span class="built_in">max</span>=<span class="number">10</span>)])</span><br><span class="line">    age = IntegerField(validators=[NumberRange(<span class="built_in">min</span>=<span class="number">6</span>, <span class="built_in">max</span>=<span class="number">66</span>)])</span><br><span class="line">    phone = StringField(validators=[Regexp(<span class="string">&#x27;^1[3-9]\d&#123;9&#125;$&#x27;</span>)])</span><br><span class="line">    homepage = StringField(validators=[URL()])</span><br><span class="line">    uuid = StringField(validators=[UUID()])    </span><br></pre></td></tr></table></figure><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">from</span> forms_check <span class="keyword">import</span> RegisterForm</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = RegisterForm(request.form)</span><br><span class="line">        <span class="keyword">if</span> form.validate():</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;注册成功&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;form.errors&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="WTForms自定义验证器"><a href="#WTForms自定义验证器" class="headerlink" title="WTForms自定义验证器"></a>WTForms自定义验证器</h3><p>​只有当WTForms内置的验证器不够使的时候，才需要使用自定义验证器。如果想要对表单中的某个字段进行更细化的验证，那么可以针对这个字段进行单独的验证。</p><p><strong>自定义验证器步骤如下：</strong></p><p>1 定义一个方法，方法的名字规则是： validate_字段名(self,field) 。<br>2 在方法中，使用 field.data 可以获取到这个字段的具体的值。<br>3 验证时，如果数据满足条件，那么可以什么都不做。如果验证失败，那么应该抛出一个wtforms.validators.ValidationError 的异常，并且把验证失败的信息传到这个异常类中。</p><p><strong>场景：验证码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, Form</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, session</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Length, ValidationError</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;huayedemao&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginForm</span>(<span class="title class_ inherited__">Form</span>):</span><br><span class="line">    code = StringField(validators=[Length(<span class="built_in">min</span>=<span class="number">4</span>, <span class="built_in">max</span>=<span class="number">4</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_code</span>(<span class="params">self, field</span>):</span><br><span class="line">        font_code = field.data</span><br><span class="line">        server_code = session.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;前端数据为<span class="subst">&#123;font_code&#125;</span>=======后端数据为<span class="subst">&#123;server_code&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> font_code != server_code:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;验证码错误，请重新输入！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        code = <span class="built_in">str</span>(random.randint(<span class="number">100</span>, <span class="number">999</span>)) + <span class="built_in">chr</span>(random.randint(<span class="number">97</span>, <span class="number">122</span>))</span><br><span class="line">        session[<span class="string">&#x27;code&#x27;</span>] = code</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, code=code)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = LoginForm(request.form)</span><br><span class="line">        <span class="keyword">if</span> form.validate():</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;注册成功&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;form.errors&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="WTForms渲染模版"><a href="#WTForms渲染模版" class="headerlink" title="WTForms渲染模版"></a>WTForms渲染模版</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Length, NumberRange</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, Form, BooleanField, SelectField, IntegerField</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginForm</span>(<span class="title class_ inherited__">Form</span>):</span><br><span class="line">    uname = StringField(label=<span class="string">&#x27;用户名:&#x27;</span>, validators=[Length(<span class="built_in">min</span>=<span class="number">1</span>, <span class="built_in">max</span>=<span class="number">8</span>)])</span><br><span class="line">    remember = BooleanField(label=<span class="string">&#x27;记住我: &#x27;</span>)</span><br><span class="line">    age = IntegerField(label=<span class="string">&#x27;年龄&#x27;</span>, validators=[NumberRange(<span class="number">8</span>, <span class="number">55</span>)])</span><br><span class="line">    address = SelectField(label=<span class="string">&#x27;城市：&#x27;</span>, choices=[(<span class="string">&#x27;bj&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>), (<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>), (<span class="string">&#x27;gz&#x27;</span>, <span class="string">&#x27;广州&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/info&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        form = LoginForm()</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;info23.html&#x27;</span>, form=form)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;提交成功!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.user</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; form.uname.label &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; form.uname(class=&#x27;user&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; form.age.label &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; form.age() &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; form.remember.label &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; form.remember() &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; form.address.label &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; form.address() &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Flask安全上传文件-访问文件"><a href="#Flask安全上传文件-访问文件" class="headerlink" title="Flask安全上传文件_访问文件"></a>Flask安全上传文件_访问文件</h3><p><strong>上传文件步骤：</strong></p><ol><li>在模版html中，表单需要指定 enctype&#x3D;’multipart&#x2F;form-data’ 才能上传文件。</li><li>在后台如果想要获取上传的文件，那么应该使用 request.files.get(‘文件名’) 来获取。</li><li>保存文件之前，先要使用 werkzeug.utils.secure_filename 来对上传上来的文件名进行一个过滤。能保证不会有安全问题。</li><li>获取到上传上来的文件后，使用 文件对象.save(路径) 方法来保存文件。路径&#x3D;完整路径&#x3D;路径名+文件名</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>头像<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>描述信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>保存和读取文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, send_from_directory</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 保存上传文件</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        avatar = request.files.get(<span class="string">&#x27;avatar&#x27;</span>)</span><br><span class="line">        <span class="comment"># 考虑安全性,在保存文件前,先使用&quot;werkzeug.utils.secure_filename&quot;来对上传的文件名来进行过滤</span></span><br><span class="line">        filename = secure_filename(avatar.filename)</span><br><span class="line">        <span class="comment"># 获取到上传文件后，使用&quot;avatar.save(路径)&quot;来保存文件</span></span><br><span class="line">        <span class="comment"># os.path.join(path,name) 连接目录与文件名</span></span><br><span class="line">        <span class="comment"># os.path.dirname(path) 获取文件或文件夹的路径</span></span><br><span class="line">        UPLOAD_PATH = os.path.join(os.path.dirname(__file__), <span class="string">&#x27;upload&#x27;</span>)</span><br><span class="line">        avatar.save(os.path.join(UPLOAD_PATH, filename))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;上传成功&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/images/&lt;filename&gt;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_images</span>(<span class="params">filename</span>):</span><br><span class="line">    UPLOAD_PATH = os.path.join(os.path.dirname(__file__), <span class="string">&#x27;upload&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用&quot;send_from_directory(文件的目录,文件名)&quot;来获取.</span></span><br><span class="line">    <span class="keyword">return</span> send_from_directory(UPLOAD_PATH, filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="利用flask-wtf验证上传的文件"><a href="#利用flask-wtf验证上传的文件" class="headerlink" title="利用flask-wtf验证上传的文件"></a>利用flask-wtf验证上传的文件</h3><p><strong>关键点：</strong><br>1.定义验证表单类的时候，对文件类型的字段，需要采用 FileField 这个类型，即wtforms.FileField<br>2.验证器需要从 flask_wtf.file 中导入。 flask_wtf.file.FileRequired 和 flask_wtf.file.FileAllowed<br>3.flask_wtf.file.FileRequired 是用来验证文件上传不能为空。<br>4.flask_wtf.file.FileAllowed 用来验证上传的文件的后缀名， 如常见图片后缀 .jpg 和.png以及.gif等。<br>5.在视图函数中，需要使用 from werkzeug.datastructures import CombinedMultiDict 来把request.form 与 request.files 来进行合并。<br>6.最后使用表单验证对象.validate()进行验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form,FileField,StringField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> InputRequired</span><br><span class="line"><span class="keyword">from</span> flask_wtf.file <span class="keyword">import</span> FileRequired,FileAllowed</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">from</span> werkzeug.datastructures <span class="keyword">import</span> CombinedMultiDict</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadForm</span>(<span class="title class_ inherited__">Form</span>):</span><br><span class="line">    <span class="comment"># 使用 Flask-WTF提供的FileRequired、FileAllowed验证函数</span></span><br><span class="line">    avatar = FileField(validators=[FileRequired(), FileAllowed([<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>])])</span><br><span class="line">    desc = StringField(validators=[InputRequired()])</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = UploadForm(CombinedMultiDict([request.form, request.files]))</span><br><span class="line">        <span class="keyword">if</span> form.validate():</span><br><span class="line">            <span class="comment"># 通过form.字段名.data来获取数据</span></span><br><span class="line">            desc = form.desc.data</span><br><span class="line">            avatar = form.avatar.data</span><br><span class="line">            filename = secure_filename(avatar.filename)</span><br><span class="line">            UPLOAD_PATH = os.path.join(os.path.dirname(__file__), <span class="string">&#x27;upload&#x27;</span>)</span><br><span class="line">            avatar.save(os.path.join(UPLOAD_PATH, filename))</span><br><span class="line">            <span class="built_in">print</span>(os.path.join(UPLOAD_PATH, filename))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;上传成功&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;上传失败<span class="subst">&#123;form.errors&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)    </span><br></pre></td></tr></table></figure><h2 id="Restful使用"><a href="#Restful使用" class="headerlink" title="Restful使用"></a>Restful使用</h2><h3 id="Restful介绍"><a href="#Restful介绍" class="headerlink" title="Restful介绍"></a>Restful介绍</h3><ol><li><p>RESTful是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。</p></li><li><p>.适用场景：一个系统的数据库数据，展现的平台有PC端、移动端、app端、ios端。</p></li><li><p>协议：用http或者https协议(尽量采用https)</p></li><li><p>数据传输格式：数据传输的格式应该都用json格式。</p></li><li><p>url链接规则：url链接中,不能有动词,只能有名词。并且对于一些名词，如果出现复数，那么应该在后面加s。</p></li><li><p>HTTP请求方式：GET;POST;PUT;PATCH;DELETE。</p></li><li><p>状态码(部分举例)</p><table><thead><tr><th>状态码</th><th>原因描述</th><th>描述</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>服务器成功响应客户端的请求</td></tr><tr><td>400</td><td>INVALID REQUEST</td><td>用户发出的请求有错误，服务器没有进行新建或修改数据的操作</td></tr><tr><td>401</td><td>Unauthorized</td><td>用户没有权限访问这个请求</td></tr><tr><td>403</td><td>Forbidden</td><td>因为某些原因禁止访问这个请求</td></tr><tr><td>404</td><td>Not Found</td><td>用户请求的url不存在</td></tr><tr><td>406</td><td>Not Acceptable</td><td>用户请求不被服务器接收(比如服务器期望客户端发送某个字段，但是没有发送)</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误</td></tr></tbody></table></li></ol><h3 id="Restful基本使用"><a href="#Restful基本使用" class="headerlink" title="Restful基本使用"></a>Restful基本使用</h3><p> Flask-Restful是一个专门用来写restful api的一个插件。使用它可以快速的集成restful api接口功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-restful</span><br></pre></td></tr></table></figure><p><strong>使用步骤</strong></p><ol><li>从 flask_restful 中导入 Api ，来创建一个 api 对象。</li><li>写一个类视图，让他继承自 Resource 类，然后在这个里面，使用你想要的请求方式来定义相应的方法，比如你想要将这个类视图只能采用 post 请求，那么就定义一个 post 方法。</li><li>使用 api.add_resource 来添加类视图与 url</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Resource,Api</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立Api对象，并绑定应用APP</span></span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承自 Resource 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;flag&quot;</span>:<span class="literal">True</span>&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;flag&quot;</span>:<span class="literal">False</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 建立路由映射,可以使用多个url指定这个视图类</span></span><br><span class="line">api.add_resource(LoginView,<span class="string">&#x27;/login/&#x27;</span>,<span class="string">&#x27;/login2/&#x27;</span>,endpoint=<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> app.test_request_context():</span><br><span class="line">    <span class="comment"># 默认没有写endpoint反向url_for函数通过小写视图类名;如果有多个url，会默认返回第1个URL</span></span><br><span class="line">    <span class="comment"># print(url_for(&#x27;loginview&#x27;))</span></span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Flask-RESTful参数验证"><a href="#Flask-RESTful参数验证" class="headerlink" title="Flask_RESTful参数验证"></a>Flask_RESTful参数验证</h3><p>参数验证也叫参数解析;Flask-Restful插件提供了类似WTForms来验证提交的数据是否合法的包,叫做reqparse</p><p>使用用法：</p><p>​1 通过 flask_restful.reqparse 中 RequestParser 建立解析器<br>​2 通过 RequestParser 中的 add_argument 方法定义字段与解析规则<br>​3 通过 RequestParser 中的 parse_args 来解析参数<br>​1 解析正确，返回正确参数<br>​2 解析错误，返回错误信息给前端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api,Resource</span><br><span class="line"><span class="keyword">from</span> flask_restful.reqparse <span class="keyword">import</span> RequestParser</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterView</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 建立解析器</span></span><br><span class="line">        parser = RequestParser()</span><br><span class="line">        <span class="comment"># 定义数据的解析规则</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;uname&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,required=<span class="literal">True</span>,<span class="built_in">help</span>=<span class="string">&#x27;用户名验证错误&#x27;</span>)</span><br><span class="line">        <span class="comment"># 解析数据; 正确，直接获取参数; 错误，回馈到前端</span></span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        <span class="built_in">print</span>(args)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;注册成功！！&#x27;</span>&#125;  <span class="comment"># 响应数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立映射关系</span></span><br><span class="line">api.add_resource(RegisterView,<span class="string">&#x27;/register/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="add-argument参数详解"><a href="#add-argument参数详解" class="headerlink" title="add_argument参数详解"></a>add_argument参数详解</h3><p>add_argument方法可以指定这个字段的名字，这个字段的数据类型等，验证错误提示信息等，具体如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">default：默认值，如果这个参数没有值，那么将使用这个参数指定的默认值。</span><br><span class="line">required：是否必须。默认为False，如果设置为True，那么这个参数就必须提交上来。</span><br><span class="line">type：这个参数的数据类型，如果指定，那么将使用指定的数据类型来强制转换提交上来的值。可以使用python自带的一些数据类型(如str或者int)，也可以使用flask_restful.inputs下的一些特定的数据类型来强制转换。</span><br><span class="line">url：会判断这个参数的值是否是一个url，如果不是，那么就会抛出异常。</span><br><span class="line">regex：正则表达式。</span><br><span class="line">date：将这个字符串转换为datetime.date数据类型。如果转换不成功，则会抛出一个异常.</span><br><span class="line"></span><br><span class="line">choices：固定选项。提交上来的值只有满足这个选项中的值才符合验证通过，否则验证不通过。</span><br><span class="line">help：错误信息。如果验证失败后，将会使用这个参数指定的值作为错误信息。</span><br><span class="line">trim：是否要去掉前后的空格。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_restful.reqparse <span class="keyword">import</span> RequestParser</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api, Resource, inputs</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">api = Api(app)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterView</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 建立解析器</span></span><br><span class="line">        parser = RequestParser()</span><br><span class="line">        <span class="comment"># 定义数据字段与解析规则</span></span><br><span class="line">        parser.add_argument(<span class="string">&#x27;uname&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;用户名验证错误&#x27;</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&#x27;pwd&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;密码错误&#x27;</span>, default=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&#x27;age&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&#x27;年龄不符合标准&#x27;</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&#x27;gender&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, choices=[<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;保密 &#x27;</span>])</span><br><span class="line">        parser.add_argument(<span class="string">&#x27;birthday&#x27;</span>, <span class="built_in">type</span>=inputs.date)</span><br><span class="line">        parser.add_argument(<span class="string">&#x27;phone&#x27;</span>, <span class="built_in">type</span>=inputs.regex(<span class="string">&#x27;^1[3-9]\d&#123;9&#125;$&#x27;</span>), <span class="built_in">help</span>=<span class="string">&#x27;手机号不符合标准&#x27;</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&#x27;homepage&#x27;</span>, <span class="built_in">type</span>=inputs.url, <span class="built_in">help</span>=<span class="string">&#x27;主页地址错误&#x27;</span>)</span><br><span class="line">        <span class="comment"># 解析数据（参数）</span></span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        <span class="built_in">print</span>(args)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;验证成功&#x27;</span>&#125;</span><br><span class="line">    </span><br><span class="line">api.add_resource(RegisterView,<span class="string">&#x27;/register/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)    </span><br></pre></td></tr></table></figure><h3 id="Flask-RESTful规范返回值"><a href="#Flask-RESTful规范返回值" class="headerlink" title="Flask_RESTful规范返回值"></a>Flask_RESTful规范返回值</h3><p>​对于一个类视图，可以指定好一些字段做标准化用于返回。以后使用ORM模型或者自定义模型的时候，他会自动的获取模型中的相应的字段，生成json格式数据，然后再返回给客户端。</p><p>​使用方法：导入 flask_restful.marshal_with 装饰器；定义一个字典变量来指定需要返回的标准化字段，以及该字段的数据类型；在请求方法中，返回自定义对象的时候，flask_restful会自动的读取对象模型上的所有属性。组装成一个符合标准化参数的json格式字符串返回给客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Resource, Api, fields, marshal_with</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,code,msg,state,content</span>):</span><br><span class="line">        self.code = code</span><br><span class="line">        self.msg = msg</span><br><span class="line">        self.state1 =state</span><br><span class="line">        self.content = content</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterView</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    并且需要写一个字典，来指示需要返回的字段，以及该字段的数据类型。</span></span><br><span class="line"><span class="string">    fields可以指定的数据类型 [&quot;String&quot;, &quot;FormattedString&quot;, &quot;Url&quot;, &quot;DateTime&quot;, &quot;Float&quot;,</span></span><br><span class="line"><span class="string">    &quot;Integer&quot;, &quot;Arbitrary&quot;, &quot;Nested&quot;, &quot;List&quot;, &quot;Raw&quot;, &quot;Boolean&quot;,&quot;Fixed&quot;, &quot;Price&quot;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    resource_field = &#123;</span><br><span class="line">        <span class="string">&#x27;code&#x27;</span>: fields.Integer,</span><br><span class="line">        <span class="string">&#x27;msg&#x27;</span>: fields.String,</span><br><span class="line">        <span class="string">&#x27;state&#x27;</span>: fields.String</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">resource_field</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;访问成功&#x27;</span>, <span class="string">&#x27;state&#x27;</span>: <span class="string">&#x27;移动端&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">resource_field</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 在返回对象时，会自动在对象中获取与约定好的字段，并获取封装成json。</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;发送成功&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">resource_field</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 规范化返回的是一个json数据，如果想返回一个对象呢?</span></span><br><span class="line">        new = News(<span class="number">404</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;客户端&#x27;</span>, <span class="string">&#x27;凯文&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line">    </span><br><span class="line">api.add_resource(NewsView,<span class="string">&#x27;/news/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Flask-RESTful规范返回值-参数设置"><a href="#Flask-RESTful规范返回值-参数设置" class="headerlink" title="Flask_RESTful规范返回值-参数设置"></a>Flask_RESTful规范返回值-参数设置</h3><p><strong>设置重命名属性和默认值</strong></p><p>问题：规范给出的属性名和模型内部的属性名不相同；某些字段，没有值，但想给一个值做为默认值</p><p>解决方案：使用 attribute 配置这种映射,比如： fields.String(attribute&#x3D;’username’)使用 default 指定默认值，比如： fields.String(default&#x3D;’jason’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span></span><br><span class="line">Api,Resource,fields,marshal_with</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,code,msg,info</span>):</span><br><span class="line">        self.code = code</span><br><span class="line">        self.msg = msg</span><br><span class="line">        self.info = info</span><br><span class="line">        self.state = <span class="number">1000</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsView</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    resouce_fields =&#123;</span><br><span class="line">        <span class="string">&#x27;code&#x27;</span>:fields.Integer(default=<span class="number">200</span>),  <span class="comment">#通过参数default来设置默认值</span></span><br><span class="line">        <span class="string">&#x27;msg&#x27;</span>:fields.String,</span><br><span class="line">      <span class="string">&#x27;content&#x27;</span>:fields.String(attribute=<span class="string">&#x27;info&#x27;</span>),  <span class="comment"># 通过参数attribute来设置提取数据的字段</span></span><br><span class="line">        <span class="string">&#x27;state&#x27;</span>:fields.Integer(default=<span class="number">2000</span>)  <span class="comment"># 优先级不如真实数据里面的高</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">resouce_fields</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        news = News(<span class="number">200</span>,<span class="string">&#x27;访问成功！&#x27;</span>,<span class="string">&#x27;移动&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> news</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">resouce_fields</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;增加数据成功！&#x27;</span>,<span class="string">&#x27;info&#x27;</span>:<span class="string">&#x27;联通&#x27;</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">resouce_fields</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self</span>):</span><br><span class="line">        news = News(<span class="number">200</span>,<span class="string">&#x27;访问成功！&#x27;</span>,<span class="string">&#x27;移动&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> news</span><br><span class="line">    </span><br><span class="line">api.add_resource(NewsView,<span class="string">&#x27;/news/&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Flask-RESTFul规范返回值-类型设置"><a href="#Flask-RESTFul规范返回值-类型设置" class="headerlink" title="Flask_RESTFul规范返回值-类型设置"></a>Flask_RESTFul规范返回值-类型设置</h3><p>返回的值有json或列表数据，这时可以通过如下字段实现：fields.List 放置一个列表;fields.Nested放置一个字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewsView</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    resouce_fields =&#123;</span><br><span class="line">        <span class="string">&#x27;code&#x27;</span>:fields.Integer,</span><br><span class="line">        <span class="string">&#x27;msg&#x27;</span>:fields.String,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>:fields.Nested(&#123;</span><br><span class="line">            <span class="string">&#x27;uname&#x27;</span>:fields.String</span><br><span class="line">       &#125;),</span><br><span class="line">        <span class="string">&#x27;news_info&#x27;</span>:fields.<span class="type">List</span>(fields.Nested(&#123;</span><br><span class="line">            <span class="string">&#x27;news&#x27;</span>:fields.String</span><br><span class="line">       &#125;))</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Flask-RESTful结合蓝图使用"><a href="#Flask-RESTful结合蓝图使用" class="headerlink" title="Flask_RESTful结合蓝图使用"></a>Flask_RESTful结合蓝图使用</h3><p>在蓝图中，如果使用Flask_RESTful，创建Api对象的时候，传入蓝图对象即可，不再是传入 app 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user/__init__.py</span></span><br><span class="line"><span class="keyword">from</span> flask.blueprints <span class="keyword">import</span> Blueprint</span><br><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__)</span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="comment"># user/views.py</span></span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> user_bp</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api,Resource</span><br><span class="line"><span class="comment"># 传入蓝图对象</span></span><br><span class="line">api = Api(user_bp)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;注册成功！！&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 建立映射关系</span></span><br><span class="line">api.add_resource(LoginView,<span class="string">&#x27;/login/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> user_bp</span><br><span class="line">app.register_blueprint(user_bp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Flask-RESTful渲染模版"><a href="#Flask-RESTful渲染模版" class="headerlink" title="Flask_RESTful渲染模版"></a>Flask_RESTful渲染模版</h3><p>渲染模版是在Flask_RESTful的类视图中要返回html片段代码，或者整个html文件代码。如果需要浏览器渲染模板内容应使用api.representation这个装饰器定义一个函数，在这个函数中，应该对html代码进行封装，再返回。</p><p><strong>注意</strong>：api.representation装饰器修饰的函数必须返回一个Response对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,Response</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api,Resource</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 1.解决中文编码问题</span></span><br><span class="line">app.config[<span class="string">&#x27;RESTFUL_JSON&#x27;</span>] = <span class="built_in">dict</span>(ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">api = Api(app)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeView</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;这个是个人主页&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IndexView</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">api.add_resource(IndexView,<span class="string">&#x27;/index/&#x27;</span>)</span><br><span class="line">api.add_resource(HomeView,<span class="string">&#x27;/home/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@api.representation(<span class="params"><span class="string">&#x27;text/html&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">out_html</span>(<span class="params">data,code,headers</span>):</span><br><span class="line">    <span class="comment"># 必须返回一个response对象</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">str</span>):</span><br><span class="line">        resp = Response(data)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(json.dumps(data,ensure_ascii=<span class="literal">False</span>).encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FLASK视图</title>
      <link href="/2022/10/17/FLASK%E8%A7%86%E5%9B%BE/"/>
      <url>/2022/10/17/FLASK%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="add-url-rule与app-route"><a href="#add-url-rule与app-route" class="headerlink" title="add_url_rule与app.route"></a>add_url_rule与app.route</h2><h3 id="add-url-rule"><a href="#add-url-rule" class="headerlink" title="add_url_rule"></a>add_url_rule</h3><p>add_url_rule(rule,endpoint&#x3D;None,view_func&#x3D;None)用来添加url与视图函数的映射;如果没有填写endpoint ,那么默认会使用 view_func 的名字作为endpoint ;在使用 url_for 的时候，就要看在映射的时候有没有传递 endpoint 参数，如果传递了，那么就应该使用 endpoint 指定的字符串,如果没有传递,那么就应该使用view_func 的名字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">name</span>():</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;我是帅气&quot;</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/name/&#x27;</span>,endpoint=<span class="string">&#x27;jason&#x27;</span>,view_func=name)</span><br></pre></td></tr></table></figure><h3 id="app-route原理剖析"><a href="#app-route原理剖析" class="headerlink" title="app.route原理剖析"></a>app.route原理剖析</h3><p>这个装饰器底层，其实也是使用 add_url_rule 来实现url与视图函数映射的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,endpoint=<span class="string">&#x27;index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;show&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_me</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;这是介绍信息.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># endpoint 没有设置，url_for中就写函数的名字，如果设置了，就写endpoint的值</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/show_me&#x27;</span>,view_func=show_me,endpoint=<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line"><span class="comment"># @app.route 底层就是使用的 add_url_rule</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="类视图-CBV"><a href="#类视图-CBV" class="headerlink" title="类视图(CBV)"></a>类视图(CBV)</h2><p>之前的视图都是函数，所以一般简称函数视图。其实视图也可以基于类来实现，类视图的好处是支持继承，但是类视图不能跟函数视图一样，写完类视图还需要通过app.add_url_rule(url_rule,view_func) 来进行注册.</p><h3 id="标准类视图使用步骤"><a href="#标准类视图使用步骤" class="headerlink" title="标准类视图使用步骤"></a>标准类视图使用步骤</h3><p>1.标准类视图，必须继承自 flask.views.View</p><p>2.必须实现 dispatch_request 方法，以后请求过来后，都会执行这个方法。这个方法的返回值就相当于是之前的视图函数一样。也必须返回Response 或者子类的对象，或者是字符串，或者是元组。</p><p>3.必须通过 app.add_url_rule(rule,endpoint,view_func) 来做url与视图的映射。view_func 这个参数，需要使用类视图下的 as_view 类方法类转换：ListView.as_view(‘list’) 。</p><p>4.如果指定了 endpoint ，那么在使用 url_for 反转的时候就必须使用endpoint 指定的那个值。如果没有指定 endpoint ，那么就可以使用as_view(视图名字) 中指定的视图名字来作为反转。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> app.test_request_context():</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;mylist&#x27;</span>))  <span class="comment"># 用作测试</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for</span><br><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> View</span><br><span class="line">app= Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># print(url_for(&#x27;mylist&#x27;))</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 指定endpoint后的格式</span></span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;my&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch_request</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;返回了一个List的内容！！&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#app.add_url_rule(&#x27;/list&#x27;,view_func=ListView.as_view(&#x27;mylist&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定endpoint</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/list&#x27;</span>,endpoint=<span class="string">&#x27;my&#x27;</span>,view_func=ListView.as_view(<span class="string">&#x27;mylist&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于测试</span></span><br><span class="line"><span class="keyword">with</span> app.test_request_context():</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;my&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="类视图的好处"><a href="#类视图的好处" class="headerlink" title="类视图的好处"></a>类视图的好处</h3><p>1.可以继承，把一些共性的东西抽取出来放到父视图中,子视图直接拿来用就可以了。<br>2.但是也不是说所有的视图都要使用类视图，这个要根据情况而定。视图函数用得最多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,jsonify</span><br><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：返回的结果都必须是json数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch_request</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> jsonify(self.get_data())</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JsonView</span>(<span class="title class_ inherited__">BaseView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;uname&#x27;</span>:<span class="string">&#x27;吕布&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Json2View</span>(<span class="title class_ inherited__">BaseView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">           &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;后端&#x27;</span>,<span class="string">&#x27;lua&#x27;</span>:<span class="string">&#x27;Python&#x27;</span>&#125;,</span><br><span class="line">           &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;lua&#x27;</span>:<span class="string">&#x27;JavaScript&#x27;</span>&#125;,</span><br><span class="line">       ]</span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/base&#x27;</span>,view_func=BaseView.as_view(<span class="string">&#x27;base&#x27;</span>))</span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/json&#x27;</span>,view_func=JsonView.as_view(<span class="string">&#x27;json&#x27;</span>))</span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/json2&#x27;</span>,view_func=Json2View.as_view(<span class="string">&#x27;json2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="类试图使用场景"><a href="#类试图使用场景" class="headerlink" title="类试图使用场景"></a>类试图使用场景</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> View</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.msg = &#123;</span><br><span class="line">            <span class="string">&#x27;main&#x27;</span>:<span class="string">&#x27;百战课程又更新了！！123&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">BaseView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch_request</span>(<span class="params">self</span>):</span><br><span class="line">        my_msg =<span class="string">&#x27;神奇的登录功能&#x27;</span></span><br><span class="line">        self.msg[<span class="string">&#x27;my_msg&#x27;</span>] = <span class="string">&#x27;神奇的登录功能&#x27;</span></span><br><span class="line">        <span class="comment"># return render_template(&#x27;login.html&#x27;,msg=self.msg.get(&#x27;main&#x27;),my_msg = my_msg)</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>,**self.msg)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterView</span>(<span class="title class_ inherited__">BaseView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch_request</span>(<span class="params">self</span>):</span><br><span class="line">        self.msg[<span class="string">&#x27;my_msg&#x27;</span>] = <span class="string">&#x27;快捷的注册功能&#x27;</span></span><br><span class="line">        <span class="comment"># return render_template(&#x27;register.html&#x27;,msg=self.msg.get(&#x27;main&#x27;),my_msg=my_msg)</span></span><br><span class="line">        returnrender_template(<span class="string">&#x27;register.html&#x27;</span>,**self.msg)</span><br><span class="line">        </span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/login&#x27;</span>,view_func=LoginView.as_view(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/register&#x27;</span>,view_func=RegisterView.as_view(<span class="string">&#x27;register&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="基于调度方法的类视图"><a href="#基于调度方法的类视图" class="headerlink" title="基于调度方法的类视图"></a>基于调度方法的类视图</h3><p>​基于方法的类视图，是根据请求的 method 来执行不同的方法的。如果用户是发送的 get 请求，那么将会执行这个类的 get 方法。如果用户发送的是 post 请求，那么将会执行这个类的 post 方法。其他的method类似，比如 delete 、 put；这种方式，可以让代码更加简洁。所有和 get 请求相关的代码都放在 get 方法中，所有和 post 请求相关的代码都放在 post 方法中。就不需要跟之前的函数一样，通过 request.method &#x3D;&#x3D; ‘GET’；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login/&quot;</span>  <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>账号：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span><span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                密码：</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span><span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span><span class="attr">value</span>=<span class="string">&quot;立即登录&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">               &#123;# <span class="tag">&lt;<span class="name">font</span>  <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>&#123;&#123;error &#125;&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span>#&#125;</span><br><span class="line">               &#123;# 优化写法 ：判断 #&#125;</span><br><span class="line">               &#123;% if msg %&#125;</span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基于FBV</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login5.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        uname = request.form.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">        pwd=request.form.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> uname == <span class="string">&#x27;zs&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;登陆成功&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;login5.html&#x27;</span>,msg=<span class="string">&#x27;密码或用户名错误！&#x27;</span>)</span><br></pre></td></tr></table></figure><p>基于CBV</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">MethodView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login5.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        uname = request.form.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">        pwd = request.form.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">        <span class="comment"># 模拟实现;拿到前端页面传过来的 账号 和密码 去数据库做查询操作 查询到 (跳转主页面) ,反之跳转到login.html页面并给出错误提示信息</span></span><br><span class="line">        <span class="keyword">if</span> uname == <span class="string">&#x27;zs&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;登陆成功&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;login5.html&#x27;</span>, msg=<span class="string">&#x27;密码或用户名错误!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/login&#x27;</span>, view_func=LoginView.as_view(<span class="string">&#x27;login&#x27;</span>))</span><br></pre></td></tr></table></figure><p>优化写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">MethodView</span>):</span><br><span class="line">    <span class="comment"># 封装一个方法让其调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">self, msg=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login5.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 从数据库获取数据; sql; 执行;从游标获取数据; 重新封装数据</span></span><br><span class="line">        <span class="keyword">return</span> self.jump()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        uname = request.form.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">        pwd = request.form.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> uname == <span class="string">&#x27;zs&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;登陆成功&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.jump(msg=<span class="string">&#x27;密码或用户名错误!&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/login&#x27;</span>, view_func=LoginView.as_view(<span class="string">&#x27;login&#x27;</span>))        </span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>​装饰器是用于拓展原来函数功能的一种函数，这个函数的特殊之处在于它的返回值也是一个函数，好处在于不用更改原函数的代码前提下给函数增加新的功能。</p><p>在视图函数中使用自定义装饰器，那么自定义的装饰器必须放在 app.route 下面。</p><p>需求：查看设置个人信息时，只有检测到用户已经登录了才能查看，若没有登录，则无法查看并给出提示信息.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login_required</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*arg,**kwargs</span>):</span><br><span class="line">        uname = request.args.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">        pwd = request.args.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> uname == <span class="string">&#x27;zs&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            logging.info(<span class="string">f&#x27;<span class="subst">&#123;uname&#125;</span>:登录成功&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> func(*arg,**kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.info(<span class="string">f&#x27;<span class="subst">&#123;uname&#125;</span>:尝试登录，但没成功&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;请先登录&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/settings/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@login_requierd</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">settings</span>():    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;这是登录后才能访问的界面&#x27;</span></span><br></pre></td></tr></table></figure><p>​在类视图中使用装饰器,需要重写类视图的一个类属性 decorators ，这个类属性是一个列表或者元组都可以，里面装的就是所有的装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">ProfileView</span>(views.View):    </span><br><span class="line">    decorators = [login_requierd]    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch_request</span>(<span class="params">self</span>):        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这是登录后才能访问的界面&#x27;</span></span><br><span class="line">  </span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/profile/&#x27;</span>,view_func=ProfileView.as_view(<span class="string">&#x27;profile&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h2><p>在Flask中，使用蓝图Blueprint来分模块组织管理,降低耦合;蓝图实际可以理解为是存储一组视图方法的容器对象，其具有如下特点：</p><ul><li>一个应用可以具有多个Blueprint</li><li>可以将一个Blueprint注册到任何一个未使用的URL下比如 “&#x2F;user” 、 “&#x2F;goods”</li><li>Blueprint可以单独具有自己的模板、静态文件或者其它的通用操作方法，它并不是必须要实现应用的视图和函数的</li><li>在一个应用初始化时，就应该要注册需要使用的Blueprint</li></ul><p>Blueprint并不是一个完整的应用，它不能独立于应用运行，而必须要注册到某一个应用中;</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li><p>创建一个蓝图对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_bp=Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__)</span><br></pre></td></tr></table></figure></li><li><p>视图路由依附在这个蓝图对象上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_profile</span>():</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&#x27;user_profile&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在应用对象上注册这个蓝图对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.register_blueprint(user_bp)</span><br></pre></td></tr></table></figure></li></ol><h3 id="单文件蓝图"><a href="#单文件蓝图" class="headerlink" title="单文件蓝图"></a>单文件蓝图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> flask.blueprints <span class="keyword">import</span> Blueprint</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    logging.info(<span class="string">&#x27;输出了Hello!!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"></span><br><span class="line">user = Blueprint(<span class="string">&#x27;user&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@user.route(<span class="params"><span class="string">&#x27;/user&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;用户模板&#x27;</span></span><br><span class="line"></span><br><span class="line">app.register_blueprint(user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>指定蓝图的url前缀;在应用中注册蓝图时使用 url_prefix 参数指定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.register_blueprint(user_bp,url_prefix=<span class="string">&#x27;/user&#x27;</span>)</span><br><span class="line">app.register_blueprint(goods_bp,url_prefix=<span class="string">&#x27;/goods&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="蓝图的目录结构"><a href="#蓝图的目录结构" class="headerlink" title="蓝图的目录结构"></a>蓝图的目录结构</h3><p>根据功能模块<br>对于一个打算包含多个文件的蓝图，通常将创建蓝图对象放到Python包的 <strong>init</strong>.py 文件中;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--------- project # 工程目录</span><br><span class="line">  |------ main.py # 启动文件</span><br><span class="line">  |------ user  #用户蓝图</span><br><span class="line">  |  |--- __init__.py  # 此处创建蓝图对象</span><br><span class="line">  |  |--- view.py  </span><br><span class="line">  |  |--- ...</span><br><span class="line">  |------ goods # 商品蓝图</span><br><span class="line">  |  |--- __init__.py</span><br><span class="line">  |  |--- ...</span><br><span class="line">  |...</span><br></pre></td></tr></table></figure><p>根据技术模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--------- project # 工程目录</span><br><span class="line">  |------ main.py # 启动文件</span><br><span class="line">  |------ view  #用户蓝图</span><br><span class="line">  |  |--- user.py  # 此处创建蓝图对象</span><br><span class="line">  |  |--- item.py  </span><br><span class="line">  |  |--- view.py</span><br><span class="line">  |  |--- ...</span><br><span class="line">  |...</span><br></pre></td></tr></table></figure><p>main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    logging.info(<span class="string">&#x27;输出了Hello!!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> user</span><br><span class="line">app.register_blueprint(user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>init</strong>.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.blueprints <span class="keyword">import</span> Blueprint</span><br><span class="line">user = Blueprint(<span class="string">&#x27;user&#x27;</span>, __name__)</span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> view</span><br></pre></td></tr></table></figure><p>view.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> user</span><br><span class="line"><span class="meta">@user.route(<span class="params"><span class="string">&#x27;/user&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;用户模板&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="蓝图中模版文件"><a href="#蓝图中模版文件" class="headerlink" title="蓝图中模版文件"></a>蓝图中模版文件</h3><p>​寻找规则:如果项目中的templates文件夹中有相应的模版文件，就直接使用了。如果项目中的templates文件夹中没有相应的模版文件，那么就到在定义蓝图的时候指定的路径中寻找。并且蓝图中指定的路径可以为相对路径，相对的是当前这个蓝图文件所在的目录。</p><p><img src="/2022/10/17/FLASK%E8%A7%86%E5%9B%BE/2.png" alt="2"></p><p>因为这个蓝图文件是在user&#x2F;view.py，那么就会到blueprints这个文件夹下的user_page文件夹中寻找模版文件.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_bp =Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__,url_prefix=<span class="string">&#x27;/user&#x27;</span>,template_folder=<span class="string">&#x27;user_page&#x27;</span>)</span><br></pre></td></tr></table></figure><p>1 个性化coder喜欢在【创建蓝图对象的时候】指定模版文件的查找路径,如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">news_bp =Blueprint(<span class="string">&#x27;news&#x27;</span>,__name__,url_prefix=<span class="string">&#x27;/news&#x27;</span>,template_folder=<span class="string">&#x27;news_page&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2 只有确定templates目录下没有对应的 html文件名的时候，才会去蓝图文件指定的目录下查找，指定才会生效.<br>3 若templates目录下，有一个与蓝图文件指定的目录下同名的一个 html文件时，优先走templates目录下的东西</p><h3 id="蓝图中静态文件"><a href="#蓝图中静态文件" class="headerlink" title="蓝图中静态文件"></a>蓝图中静态文件</h3><p>蓝图对象创建时不会默认注册静态目录的路由。需要我们在创建时指定 static_folder 参数。</p><p>下面的示例将蓝图所在目录下的 user_static目录设置为静态目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user=Blueprint(<span class="string">&quot;user&quot;</span>,__name__,static_folder=<span class="string">&#x27;user_static&#x27;</span>)</span><br><span class="line">app.register_blueprint(admin,url_prefix=<span class="string">&#x27;/user&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>模板静态文件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;/user/user_static/aaa.mp4&quot;</span><span class="attr">autoplay</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span><span class="attr">muted</span>=<span class="string">&#x27;muted&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可通过 static_url_path 改变访问路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user=Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__,template_folder=<span class="string">&#x27;user_page&#x27;</span>,static_folder=<span class="string">&#x27;user_static&#x27;</span>,static_url_path=<span class="string">&#x27;/static&#x27;</span>)</span><br><span class="line">app.register_blueprint(user,url_prefix=<span class="string">&#x27;/user&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>模板静态文件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;/user/static/aaa.mp4&quot;</span><span class="attr">autoplay</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span><span class="attr">muted</span>=<span class="string">&#x27;muted&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查找静态文件的方式"><a href="#查找静态文件的方式" class="headerlink" title="查找静态文件的方式"></a>查找静态文件的方式</h3><p>1.查找静态文件时，正常情况下，会以static为根目录进行查找</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;/蓝图前缀url/static/aaa.mp4&quot;</span><span class="attr">autoplay</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span><span class="attr">muted</span>=<span class="string">&#x27;muted&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.特殊情况下，,需要用url_for(‘蓝图的名字.static’,filename&#x3D;’xxx’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__,url_prefix=<span class="string">&#x27;/user&#x27;</span>,static_folder=<span class="string">&#x27;user_statics&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123;url_for(&#x27;user<span class="selector-class">.static</span>&#x27;,filename=&#x27;test<span class="selector-class">.css</span>&#x27;)&#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="蓝图结合url-for"><a href="#蓝图结合url-for" class="headerlink" title="蓝图结合url_for"></a>蓝图结合url_for</h3><p>如果使用蓝图，那么以后想要反转蓝图中的视图函数为url，就应该在使用url_for的时候指定这个蓝图名字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;user.user_list&#x27;)&#125;&#125;&quot;</span>&gt;</span>新闻列表 OK写法<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;# <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;user_list&#x27;)&#125;&#125;&quot;</span>&gt;</span>新闻列表 错误写法<span class="tag">&lt;/<span class="name">a</span>&gt;</span>#&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span></span><br><span class="line">Blueprint,render_template,url_for</span><br><span class="line">user_bp=Blueprint(<span class="string">&#x27;news&#x27;</span>,__name__,url_prefix=<span class="string">&#x27;/user&#x27;</span>,template_folder=<span class="string">&#x27;user_page&#x27;</span>,</span><br><span class="line">                  static_folder=<span class="string">&#x27;user_static&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/list/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_list</span>():</span><br><span class="line">    <span class="comment">#如下写法：才找得到 url_for(&#x27;蓝图名称.方法名&#x27;)</span></span><br><span class="line">  <span class="built_in">print</span>(url_for(<span class="string">&#x27;user.user_list&#x27;</span>)) <span class="comment">#/user/list/    </span></span><br><span class="line">  <span class="built_in">print</span>(url_for(<span class="string">&#x27;user.user_detail&#x27;</span>)) <span class="comment">#/user/detail/    </span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;user_list.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/detail/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_detail</span>():    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;用户详情页面&#x27;</span></span><br></pre></td></tr></table></figure><p>蓝图实现子域名</p><p>在创建蓝图对象的时候，需要传递一个 subdomain 参数，来指定这个子域名的前缀。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cms_bp=Blueprint(<span class="string">&#x27;cms&#x27;</span>,__name__,subdomain=<span class="string">&#x27;cms&#x27;</span>)</span><br></pre></td></tr></table></figure><p>需要在主app文件中，需要配置app.config的SERVER_NAME参数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;SERVER_NAME&#x27;</span>]=<span class="string">&#x27;xxx.com:5000&#x27;</span></span><br></pre></td></tr></table></figure><p>在windows: C:\Windows\System32\drivers\etc 下，找到hosts文件，然后添加域名与本机的映射。Linux: &#x2F;etc&#x2F;hosts;域名和子域名都需要做映射:</p><p>127.0.0.1 xxx.com<br>127.0.0.1 python.xxx.com</p>]]></content>
      
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FLASK模板</title>
      <link href="/2022/10/13/FLASK%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/10/13/FLASK%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="模板的使用"><a href="#模板的使用" class="headerlink" title="模板的使用"></a>模板的使用</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>创建模板:在应用同级目录下创建模板文件夹 templates . 文件夹名称固定写法，也可以通过template_folder指定文件夹;通过render_template返回模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="模板-传参"><a href="#模板-传参" class="headerlink" title="模板-传参"></a>模板-传参</h2><p>在使用 render_template 渲染模版的时候，可以传递关键字参数（命名参数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,uname=<span class="string">&#x27;jason&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     从模版中渲染的数据</span><br><span class="line">     <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     &#123;&#123; uname&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">&#x27;uname&#x27;</span>: <span class="string">&#x27;momo&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;country&#x27;</span>: <span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;childrens&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;mjz&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;height&#x27;</span>: <span class="string">&#x27;62cm&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    如果你的参数项过多，那么可以将所有的参数放到一个字典中，在传字典的时候，将字典打散成关键字参数;</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,**context)</span><br><span class="line">获取方式是： &#123;&#123;childrens.name&#125;&#125; 或者 &#123;&#123;childrens[<span class="string">&#x27;name&#x27;</span>]&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="模板使用url-for函数"><a href="#模板使用url-for函数" class="headerlink" title="模板使用url_for函数"></a>模板使用url_for函数</h2><p><img src="/2022/10/13/FLASK%E6%A8%A1%E6%9D%BF/1.png" alt="1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/accounts/login/&lt;name&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;通过URL_FOR定位过来的！！！&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">模版中也可使用 url_for ,和后台视图函数中的url_for 使用起来基本是一模一样的。在模板中使用函数，需要在函数 左右两边加上 &#123;&#123;&#125;&#125;; 例如： &#123;&#123; url_for(func) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123;url_for(&#x27;login&#x27;,p1=&#x27;abc&#x27;,p2=&#x27;ddd&#x27;,name=&#x27;jason&#x27;) &#125;&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无论是路径参数还是查询式参数都可以直接传递</p><h2 id="过滤器介绍"><a href="#过滤器介绍" class="headerlink" title="过滤器介绍"></a>过滤器介绍</h2><p>​在模版中，过滤器相当于是一个函数，把当前的变量传入到过滤器中，然后过滤器根据自己的功能，再返回相应的值，之后再将结果渲染到页面中;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,postion=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>过滤器的基本使用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>位置的绝对值为[未使用过滤器]：&#123;&#123; postion&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>位置的绝对值为[使用过滤器]：&#123;&#123;postion|abs&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Jinja2模板自带过滤器"><a href="#Jinja2模板自带过滤器" class="headerlink" title="Jinja2模板自带过滤器"></a>Jinja2模板自带过滤器</h2><p>过滤器是通过管道符号 | 使用的，例如： { name|length }} 将返回name的长度。Jinja2中内置了许多过滤器;</p><p>abs(value)：返回一个数值的绝对值</p><p>int(value)：将值转换为int类型</p><p>float(value)：将值转换为float类型</p><p>string(value)：将变量转换成字符串</p><p>default(value,default_value,boolean&#x3D;false)jason：如果当前变量没有值，则会使用参数中的值来代替。如果想使用python的形式判断是否为false，则可以传递boolean&#x3D;true。也可以使用or来替换</p><p>safe(value)：如果开启了全局转义，那么safe过滤器会将变量关掉转义</p><p>escape(value)或e：转义字符，会将&lt;、&gt;等符号转义成HTML中的符号</p><p>first(value)：返回一个序列的第一个元素</p><p>format(value,*arags,**kwargs)：格式化字符串</p><p>wordcount(s)：计算一个长字符串中单词的个数</p><p>last(value)：返回一个序列的最后一个元素</p><p>length(value)：返回一个序列或者字典的长度。</p><p>join(value,d&#x3D;’+’)：将一个序列用d这个参数的值拼接成字符串</p><p>lower(value)：将字符串转换为小写</p><p>upper(value)：将字符串转换为大写</p><p>replace(value,old,new)：将old替换为new的字符串</p><p>truncate(value,length&#x3D;255,killwords&#x3D;False)：截取length长度的字符串</p><p>trim：截取字符串前面和后面的空白字符</p><p>striptags(value)：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格</p><h3 id="defalut过滤器"><a href="#defalut过滤器" class="headerlink" title="defalut过滤器"></a>defalut过滤器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>default过滤器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    过滤前的昵称数据是：&#123;&#123;nick_name&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    过滤后的昵称数据是：&#123;&#123;nick_name | default(&#x27;用户1&#x27;,boolean=true)&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    过滤后的昵称数据是：&#123;&#123;nick_name or &#x27;用户2&#x27;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>转义字符过滤器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模板中默认 做了转义字符的效果 --&gt;</span></span><br><span class="line">    转义前的数据是：&#123;&#123; info | safe &#125;&#125;  <span class="comment">&lt;!-- 不转义：不将特殊字符转换成 &amp;lt;类似的数据 --&gt;</span></span><br><span class="line">   &#123;% autoescape true %&#125; <span class="comment">&lt;!-- false代表不再转义特殊字符 / true 转义特殊字符  &amp;lt;--&gt;</span></span><br><span class="line">   &#123;&#123;info &#125;&#125;  <span class="comment">&lt;!-- 转义：将特殊字符转换成 &amp;lt;类似的数据 --&gt;</span></span><br><span class="line">   &#123;% endautoescape %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他过滤器"><a href="#其他过滤器" class="headerlink" title="其他过滤器"></a>其他过滤器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>其它过滤器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    绝对值：&#123;&#123; -6 | abs &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    小数: &#123;&#123; 6 | float &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    字符串：&#123;&#123; 6 | string &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    格式化:&#123;&#123;&#x27;%s--%s&#x27; | format(&#x27;我&#x27;,&#x27;你&#x27;)&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    长度：&#123;&#123;&#x27;我是九，你是三，除了你，还是你&#x27;|length&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    最后一个：&#123;&#123;&#x27;我是九，你是三，除了你，还是你&#x27;|last&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    第一个：&#123;&#123;&#x27;我是九，你是三，除了你，还是你&#x27;|first&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    统计次数： &#123;&#123;&#x27;我是九，你是三，除了你，还是你&#x27; |wordcount &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    替换：&#123;&#123;&#x27;===我是九，你是三，除了你，还是你====&#x27; |replace(&#x27;我是九，你是三，除了你，还是你&#x27;,&#x27;拿着,这个无限额度的黑卡，随便刷&#x27;)&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="默认自动转义功能"><a href="#默认自动转义功能" class="headerlink" title="默认自动转义功能"></a>默认自动转义功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">safe 过滤器：可以关闭一个字符串的自动转义</span><br><span class="line">escape 过滤器：对某一个字符串进行转义</span><br><span class="line">autoescape 标签，可以对他包含的代码块关闭或开启自动转义</span><br><span class="line">&#123;% autoescape true/false %&#125; 代码块 &#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>只有当系统提供的过滤器不符合需求后,才须自定义过滤器;过滤器本质上就是一个函数.如果在模版中调用这个过滤器,那么就会将这个变量的值作为第一个参数传给过滤器这个函数,然后函数的返回值会作为这个过滤器的返回值。</p><p>需要使用到一个装饰器： @app.template_filter(‘过滤器名称’)</p><h3 id="自定义数据替换过滤器"><a href="#自定义数据替换过滤器" class="headerlink" title="自定义数据替换过滤器"></a>自定义数据替换过滤器</h3><p>例如：将新闻中出现的 所有“ 我是九你是三，除了你还是你” 换成”你不用多好，我喜欢就好”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;TEMPLATES_AUTO_RELOAD&#x27;</span>]=<span class="literal">True</span></span><br><span class="line"><span class="meta">@app.template_filter(<span class="params"><span class="string">&#x27;cut&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">value</span>):</span><br><span class="line">    value=value.replace(<span class="string">&quot;我是九你是三，除了你还是你&quot;</span>,<span class="string">&#x27;你不用多好，我喜欢就好&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用自定义过滤器：&#123;&#123;新闻内容值|cut&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义时间过滤器"><a href="#自定义时间过滤器" class="headerlink" title="自定义时间过滤器"></a>自定义时间过滤器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment">#需求：操作发布新闻 与现在的时间间隔</span></span><br><span class="line"><span class="meta">@app.template_filter(<span class="params"><span class="string">&#x27;handle_time&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_time</span>(<span class="params">time</span>):</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       time距离现在的时间间隔</span></span><br><span class="line"><span class="string">       1. 如果时间间隔小于1分钟以内，那么就显示“刚刚”</span></span><br><span class="line"><span class="string">       2. 如果是大于1分钟小于1小时，那么就显示“xx分钟前”</span></span><br><span class="line"><span class="string">       3. 如果是大于1小时小于24小时，那么就显示“xx小时前”</span></span><br><span class="line"><span class="string">       4. 如果是大于24小时小于30天以内，那么就显示“xx天前”</span></span><br><span class="line"><span class="string">       5. 否则就是显示具体的时间 2030/10/20 16:15</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(time, datetime):</span><br><span class="line">          now = datetime.now()</span><br><span class="line">          timestamp = (now -time).total_seconds()</span><br><span class="line">          <span class="keyword">if</span> timestamp &lt; <span class="number">60</span>:</span><br><span class="line">             <span class="keyword">return</span> <span class="string">&quot;刚刚&quot;</span></span><br><span class="line">         <span class="keyword">elif</span> <span class="number">60</span> &lt; tmp_time &lt; <span class="number">3600</span>:</span><br><span class="line">        minute = <span class="built_in">int</span>(tmp_time / <span class="number">60</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;minute&#125;</span>分钟前&#x27;</span></span><br><span class="line">      <span class="keyword">elif</span> <span class="number">3600</span> &lt; tmp_time &lt; <span class="number">24</span> * <span class="number">3600</span>:</span><br><span class="line">        hours = <span class="built_in">int</span>(tmp_time / <span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;hours&#125;</span>小时前&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">24</span> * <span class="number">3600</span> &lt; tmp_time &lt; <span class="number">30</span> * <span class="number">24</span> * <span class="number">3600</span>:</span><br><span class="line">        day = <span class="built_in">int</span>(tmp_time / (<span class="number">3600</span> * <span class="number">24</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;day&#125;</span>天前&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> datetime.strftime(time, <span class="string">&#x27;%Y/%m/%d %H:%M:%S&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="流程控制-选择结构"><a href="#流程控制-选择结构" class="headerlink" title="流程控制-选择结构"></a>流程控制-选择结构</h2><p>if：if语句和python中的类似，可以使用 &gt;，&lt;，&lt;&#x3D;，&gt;&#x3D;，&#x3D;&#x3D;，!&#x3D; 来进行判断，也可以通过 and，or，not，() 来进行逻辑合并操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>选择结构<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% if uname == &#x27;jason&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>鸡哥<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if uname == &#x27;user&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>汉堡<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>炸鸡<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if uname == &#x27;user&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>吃午饭<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% elif uname == &#x27;jason&#x27;%&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>吃晚饭<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>吃早饭<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if age &gt;= 18 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; age &#125;&#125;岁，成年人，可以通宵打游戏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; age &#125;&#125;岁，未成年人，可以通宵学习<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    uname = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,uname = uname)</span><br></pre></td></tr></table></figure><h3 id="流程控制-选择结构练习"><a href="#流程控制-选择结构练习" class="headerlink" title="流程控制-选择结构练习"></a>流程控制-选择结构练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    user = request.args.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,user= user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>中国大陆<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   &#123;% if not user %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123;url_for(&#x27;login&#x27;,user=&#x27;吕布&#x27;)&#125;&#125;&quot;</span>&gt;</span>亲,请登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>免费注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; user &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>手机淘宝<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="流程控制-循环结构"><a href="#流程控制-循环结构" class="headerlink" title="流程控制-循环结构"></a>流程控制-循环结构</h2><p>for…in…  for循环可以遍历任何一个序列包括列表、字典、元组。并且可以进行反向遍历，以下将用几个例子进行解释：</p><h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   &#123;% for user in users%&#125;</span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; user&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">   &#123;% for key in person.keys() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; key&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">   &#123;% for val in person.values() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; val&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">   &#123;% for item in person.items() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">   &#123;% for key,value in person.items() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; value&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">如果序列中没有值的时候，进入else</span><br></pre></td></tr></table></figure><h3 id="反向遍历用过滤器-reverse"><a href="#反向遍历用过滤器-reverse" class="headerlink" title="反向遍历用过滤器 reverse"></a>反向遍历用过滤器 reverse</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   &#123;% for user in users|reverse %&#125;</span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; user&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>没有任何用户<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且Jinja2中的for循环还包含以下变量，可以用来获取当前的遍历状态</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>loop.index</td><td>当前迭代的索引（从1开始）</td></tr><tr><td>loop.index0</td><td>当前迭代的索引（从0开始）</td></tr><tr><td>loop.first</td><td>是否是第一次迭代，返回True或False</td></tr><tr><td>loop.last</td><td>是否是最后一次迭代，返回True或False</td></tr><tr><td>loop.length</td><td>序列的长度</td></tr></tbody></table><h3 id="流程控制-循环练习"><a href="#流程控制-循环练习" class="headerlink" title="流程控制-循环练习"></a>流程控制-循环练习</h3><p>实现一个9x9的乘法口诀表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for x in range(1,10) %&#125;</span><br><span class="line">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">       &#123;% for y in range(1,x + 1) %&#125;</span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">             &#123;&#123;y&#125;&#125;*&#123;&#123;x&#125;&#125;=&#123;&#123; x*y &#125;&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">       &#123;% endfor %&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h2 id="宏的使用"><a href="#宏的使用" class="headerlink" title="宏的使用"></a>宏的使用</h2><p>模板中的宏跟python中的函数类似，可以传递参数，但是不能有返回值;可以将一些经常用到的代码片段放到宏中，然后把一些不固定的值抽取出来当成一个变量.</p><h3 id="定义宏"><a href="#定义宏" class="headerlink" title="定义宏"></a>定义宏</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro inp(type=&quot;text&quot;,name=&quot;&quot;,value=&quot;&quot;) %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;&#123;&#123; type &#125;&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&#123;&#123; name &#125;&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; value &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><h3 id="使用宏"><a href="#使用宏" class="headerlink" title="使用宏"></a>使用宏</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; input(&#x27;username&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">           &#123;&#123; input(&#x27;pwd&#x27;,type=&#x27;password&#x27;)&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; input(value=&#x27;提交&#x27;,type=&#x27;submit&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际开发中，不会把宏在一个页面内定义 并直接使用一般把宏定义放到一个专门的文件夹中，方便进行统一管理之后，哪一个页面需要使用某个宏，需要导入宏才能使用.</p><h3 id="导入宏方式"><a href="#导入宏方式" class="headerlink" title="导入宏方式"></a>导入宏方式</h3><p>1.from ‘宏文件的路径’ import 宏的名字 [as xxx]。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% from &quot;users/users.html&quot; import input as inp %&#125;</span><br></pre></td></tr></table></figure><p>2.import “宏文件的路径” as xxx [with context]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;users/users.html&quot; as usr  with context %&#125;</span><br></pre></td></tr></table></figure><p>1.宏文件路径，不要以相对路径去寻找，都要以 templates 作为绝对路径去找</p><p>2.如果想在导入宏的时候,就把当前模版的一些参数传给宏所在的模版,那么就应该在导入的时候使用 with context</p><h2 id="导入模板include"><a href="#导入模板include" class="headerlink" title="导入模板include"></a>导入模板include</h2><p>1.这个标签相当于是直接将指定的模版中的代码复制粘贴到当前位置。</p><p>2.include 标签，如果想要使用父模版中的变量，直接用就可以了，不需要使用 with context 。</p><p>3.include 的路径，也是跟 import 一样，直接从 templates 根目录下去找，不要以相对路径去找。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>include的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>include的使用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过include 引入顶部信息--&gt;</span>    </span><br><span class="line">&#123;% include &#x27;common/header.html&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span>主题信息<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过include 引入底部版权信息--&gt;</span>    </span><br><span class="line">&#123;% include &#x27;common/footer.html&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="set与with标签"><a href="#set与with标签" class="headerlink" title="set与with标签"></a>set与with标签</h2><h3 id="set的使用"><a href="#set的使用" class="headerlink" title="set的使用"></a>set的使用</h3><p>在模版中，可以使用 set 语句来定义变量,后面的代码中，都可以使用这个变量;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--set语句来定义变量，之后，那么在后面的代码中，都可以使用这个变量--&gt;</span></span><br><span class="line">&#123;% set uname=&#x27;jason&#x27;%&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：&#123;&#123; uname &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="with语句的使用"><a href="#with语句的使用" class="headerlink" title="with语句的使用"></a>with语句的使用</h3><p>with 语句定义的变量，只能在 with 语句块中使用，超过了这个代码块，就不能再使用了；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% with classroom=&#x27;202&#x27;%&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>班级：&#123;&#123; classroom &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><p>关于定义的变量， with 语句也不一定要跟一个变量，可以定义一个空的 with 语句，需要在指定的区域才能使用的情况，可以set与with组合使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% with %&#125;</span><br><span class="line"> &#123;% set  pname=&#x27;李思思&#x27; %&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>娱乐县县长：&#123;&#123; pname &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>静态文件：css文件 js文件 图片文件等；文件加载静态文件使用的是 url_for 函数。然后第一个参数需要为 static ,第二个参数需要为一个关键字参数 filename&#x3D;’路径’ ;也可以通过static_folder指定文件夹.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(&quot;static&quot;,filename=&#x27;xxx&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure><p>注意:路径查找，要以当前项目的 static 目录作为根目录</p><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><pre><code>模版继承可以把一些公用的代码单独抽取出来放到一个父模板中以后子模板直接继承就可以使用了。这样可以重复的利用代码，并且以后修改起来也比较方便.</code></pre><h3 id="模版继承语法"><a href="#模版继承语法" class="headerlink" title="模版继承语法"></a>模版继承语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用extends语句，来指明继承的父模板。父模板的路径，也是相对于 templates 文件夹下的绝对路径</span><br><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br></pre></td></tr></table></figure><h3 id="block语法"><a href="#block语法" class="headerlink" title="block语法"></a>block语法</h3><pre><code>一般在父模版中，定义一些公共的代码。子模板可能要根据具体的需求实现不同的代码。这时候父模版就应该有能力提供一个接口，让子模板来实现。从而实现具体业务需求的功能。</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">父模板</span><br><span class="line">&#123;% block block的名字 %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">子模板</span><br><span class="line">&#123;% block 父模板block的名字 %&#125;</span><br><span class="line">子模板中的代码</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="调用父模版代码block中的代码"><a href="#调用父模版代码block中的代码" class="headerlink" title="调用父模版代码block中的代码"></a>调用父模版代码block中的代码</h3><pre><code>默认情况下，子模板如果实现了父模版定义的block。那么子模板block中的代码就会覆盖掉父模板中的代码。如果想要在子模板中仍然保持父模板中的代码，那么可以使用 &#123;&#123; super() &#125;&#125; 来实现.</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block block_body %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;background-color: blue&quot;</span>&gt;</span>我是 父模版block_body处的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block block_body%&#125;</span><br><span class="line">     &#123;&#123; super() &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;background-color: green&quot;</span>&gt;</span>我是子模版block_body处的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="调用另外一个block中的代码"><a href="#调用另外一个block中的代码" class="headerlink" title="调用另外一个block中的代码"></a>调用另外一个block中的代码</h3><pre><code>如果想要在另外一个模版中使用其他模版中的代码。那么可以通过 &#123;&#123;self.其他block名字() &#125;&#125; 就可以了.</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125;</span><br><span class="line">     首页</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block block_body%&#125;</span><br><span class="line">   &#123;&#123; self.title() &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;background-color: green&quot;</span>&gt;</span>我是子模版block_body处的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FLASK入门</title>
      <link href="/2022/10/08/FLASK%E5%85%A5%E9%97%A8/"/>
      <url>/2022/10/08/FLASK%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟环境安装"><a href="#虚拟环境安装" class="headerlink" title="虚拟环境安装"></a>虚拟环境安装</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.安装好python环境</span><br><span class="line"><span class="number">2</span>.来到cmd，安装虚拟环境</span><br><span class="line">pip install virtualenv</span><br><span class="line"><span class="number">3</span>.安装虚拟环境管理包</span><br><span class="line">pip install virtualenvwrapper<span class="literal">-win</span></span><br><span class="line">配置环境变量:新建变量 WORKON_HOME 值为所在路径例如：D:\python_env</span><br><span class="line"><span class="number">4</span>.创建虚拟环境</span><br><span class="line">mkvirtualenv flask<span class="literal">-env</span></span><br><span class="line"><span class="number">5</span>.激活虚拟环境</span><br><span class="line">workon flask<span class="literal">-env</span></span><br><span class="line"><span class="number">6</span>.安装flask</span><br><span class="line">pip install flask</span><br><span class="line"><span class="number">7</span>.退出虚拟环境</span><br><span class="line">deactivate</span><br><span class="line"><span class="number">8</span>.删除虚拟环境</span><br><span class="line">rmvirtualenv env_name</span><br></pre></td></tr></table></figure><h2 id="URL组成部分"><a href="#URL组成部分" class="headerlink" title="URL组成部分"></a>URL组成部分</h2><p>url – 统一资源定位符</p><p>一个url由以下几部分组成:</p><p>scheme:&#x2F;&#x2F;host:port&#x2F;path?query-stringxxx#anchor</p><p>.scheme:代表的是访问的协议，一般为https,http,ftp等</p><p>.host:主机名,域名,<a href="http://比如www.baidu.com/">比如www.baidu.com</a></p><p>.port:端口号</p><p>.path:查找路径</p><p>.query-string:查询字符串</p><h2 id="web服务器-应用服务器-web应用框架"><a href="#web服务器-应用服务器-web应用框架" class="headerlink" title="web服务器+应用服务器+web应用框架"></a>web服务器+应用服务器+web应用框架</h2><p>web服务器:负责处理http请求，响应静态文件，常见的由Apache，Nginx以及微软的IIS.</p><p>应用服务器:负责处理逻辑的服务器。比如php,python的代码，是不能通过nginx这种服务器来处理的，只能通过应用服务器来处理，常见的应用服务器有uwsgi，Tomact等</p><p>web应用框架:一般使用某语言，封装了常用的web功能的框架就是web应用框架，flask，django框架都是web应用框架</p><h2 id="Flask的使用"><a href="#Flask的使用" class="headerlink" title="Flask的使用"></a>Flask的使用</h2><h3 id="第一个Flask程序"><a href="#第一个Flask程序" class="headerlink" title="第一个Flask程序"></a>第一个Flask程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从flask包中导入Flask类</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Flask对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># @app.route:是一个装饰器</span></span><br><span class="line"><span class="comment"># @app.route(&#x27;/&#x27;)就是将url中 / 映射到hello_world这个视图函数上面</span></span><br><span class="line"><span class="comment"># 以后你访问我这个网站的 / 目录的时候 会执行hello_world这个函数，然后将这个函数的返回值返回给浏览器</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动这个WEB服务</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 默认为5000端口</span></span><br><span class="line">    app.run()  <span class="comment"># app.run(port=8000)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python helloworld.py</span><br></pre></td></tr></table></figure><p><img src="/2022/10/08/FLASK%E5%85%A5%E9%97%A8/1.png" alt="1"></p><h3 id="运行-启动-方式"><a href="#运行-启动-方式" class="headerlink" title="运行(启动)方式"></a>运行(启动)方式</h3><h4 id="通过对象运行"><a href="#通过对象运行" class="headerlink" title="通过对象运行"></a>通过对象运行</h4><p>运行程序时，可以指定运行的主机IP地址，端口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>) <span class="comment"># 127.0.0.1</span></span><br></pre></td></tr></table></figure><h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4><p>host:主机IP地址,可以不传默认localhost.</p><p>port:端口号，可以不传,默认5000.</p><h4 id="通过Python运行方式运行"><a href="#通过Python运行方式运行" class="headerlink" title="通过Python运行方式运行"></a>通过Python运行方式运行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python helloworld.py</span><br></pre></td></tr></table></figure><p>如果想在同一个局域网下的其他电脑访问自己电脑上的Flask网站，需要设置 host&#x3D;’0.0.0.0’ 才能访问得到</p><h4 id="通过Flask自带命令运行"><a href="#通过Flask自带命令运行" class="headerlink" title="通过Flask自带命令运行"></a>通过Flask自带命令运行</h4><p>Windows下</p><p>​set FLASK_APP&#x3D;helloword</p><p>​flask run</p><p>Linux&#x2F;git bash下</p><p>​$ export FLASK_APP&#x3D;helloworld<br>​$ flask run</p><p>例如：flask run -h 0.0.0.0 -p 8000</p><h3 id="Debug模式与配置参数加载"><a href="#Debug模式与配置参数加载" class="headerlink" title="Debug模式与配置参数加载"></a>Debug模式与配置参数加载</h3><p>在代码中制作一个错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">  a = <span class="number">1</span></span><br><span class="line">  b = <span class="number">0</span></span><br><span class="line">  c = a/b</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  app.run()</span><br></pre></td></tr></table></figure><p>控制台倒是给出了错误提示信息，但是我们希望在浏览器也能有相应的提示信息</p><h4 id="开启Debug模式运行时传递参数"><a href="#开启Debug模式运行时传递参数" class="headerlink" title="开启Debug模式运行时传递参数"></a>开启Debug模式运行时传递参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="通过-app-deubg-参数设置"><a href="#通过-app-deubg-参数设置" class="headerlink" title="通过 app.deubg 参数设置"></a>通过 app.deubg 参数设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><h4 id="通过修改配置参数-config"><a href="#通过修改配置参数-config" class="headerlink" title="通过修改配置参数 config"></a>通过修改配置参数 config</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.config.update(DEBUG=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># app.config[&#x27;DEBUG&#x27;] = True</span></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><h4 id="通过mapping加载"><a href="#通过mapping加载" class="headerlink" title="通过mapping加载"></a>通过mapping加载</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.config.from_mapping(&#123;<span class="string">&#x27;DEBUG&#x27;</span>:<span class="literal">True</span>&#125;)</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>通过配置对象设置 config</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>:</span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line">app.config.from_object(config)</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><h4 id="通过配置文件设置-config"><a href="#通过配置文件设置-config" class="headerlink" title="通过配置文件设置 config"></a>通过配置文件设置 config</h4><p>config.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>config.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;DEBUG&quot;</span><span class="punctuation">:</span><span class="string">&quot;True&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.config.from_pyfile(<span class="string">&#x27;config.py&#x27;</span>, slient=<span class="literal">False</span>)</span><br><span class="line">silent=<span class="literal">False</span>如果不存在，则会报错;silent=<span class="literal">True</span>，如果文件不存在，则不会报错</span><br><span class="line">app.config.from_json(<span class="string">&#x27;config.json&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="通过环境变量"><a href="#通过环境变量" class="headerlink" title="通过环境变量"></a>通过环境变量</h4><p>DEBUG&#x3D;True</p><p>app.config.from_envvar(‘DEBUG’)</p><h3 id="URL与函数的映射-动态路由"><a href="#URL与函数的映射-动态路由" class="headerlink" title="URL与函数的映射(动态路由)"></a>URL与函数的映射(动态路由)</h3><h4 id="URL路径参数"><a href="#URL路径参数" class="headerlink" title="URL路径参数"></a>URL路径参数</h4><p>比如，有一个请求访问的接口地址为 &#x2F;users&#x2F;11001 ，其中 11001 实际上为具体的请求参数，表明请求 11001 号用户的信息。此时如何从url中提取出 11001 的数据？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/users/&lt;user_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">user_id</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(user_id))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello user&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(user_id)</span><br></pre></td></tr></table></figure><p>其中  ，尖括号是固定写法，语法为 &lt; variable&gt; ,默认的数据类型是字符串。</p><p>如果需要指定类型，则要写成 converter:variable ，其中converter 就是类型名称，可以有以下几种：</p><p>1 string:如果没有指定具体的数据类型，那么默认就是使用 string 数据类型。<br>2 int:数据类型只能传递 int 类型。<br>3 float:数据类型只能传递 float 类型。<br>4 path:数据类型和 string 有点类似，都是可以接收任意的字符串，但是 path 可以接收路径，也就<br>是说可以包含斜杠。<br>5 uuid:数据类型只能接收符合 uuid 的字符串。 uuid 是一个全宇宙都唯一的字符串，一般可以用来<br>作为表的主键。<br>6 any:数据类型可以在一个 url 中指定多个路径。例如：@app.route(‘&#x2F;&lt;any(user,item):tmp&gt;&#x2F;<a href="int:id">int:id</a>‘)</p><p>将上面的例子以整型匹配数据，可以如下使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/users/&lt;int:user_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">user_id</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(user_id))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;正在获取 ID <span class="subst">&#123;user_id&#125;</span> 的用户信息&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/users/&lt;int(min=1):user_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">user_id</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(user_id))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;hello user <span class="subst">&#123;user_id&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="自定义转换器"><a href="#自定义转换器" class="headerlink" title="自定义转换器"></a>自定义转换器</h3><p>​如果遇到需要匹配提取 &#x2F;sms_codes&#x2F;1688888888 中的手机号数据，Flask内置的转换器就无法满足需求，此时需要自定义转换器。</p><p>1.创建转换器类，保存匹配时的正则表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MobileConverter</span>(<span class="title class_ inherited__">BaseConverter</span>):</span><br><span class="line">    regex = <span class="string">&#x27;^1[3-9]\d&#123;9&#125;$&#x27;</span></span><br></pre></td></tr></table></figure><p>注意:regex 名字是固定的</p><p>2.将自定义的转换器告知Flask应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.url_map.converters[<span class="string">&#x27;mobile&#x27;</span>] = MobileConverter</span><br></pre></td></tr></table></figure><p>3.在使用转换器的地方定义使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/PhoneNumber/&lt;mobile:tel&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">tel</span>):</span><br><span class="line">    <span class="built_in">print</span>(tel)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;您的电话号码为：<span class="subst">&#123;tel&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="to-python"><a href="#to-python" class="headerlink" title="to_python"></a>to_python</h4><p>在转换器类中，实现 to_python(self,value) 方法，这个方法的返回值，将会传递到 view函数中作为参数</p><h4 id="to-url"><a href="#to-url" class="headerlink" title="to_url"></a>to_url</h4><p>在转换器类中，实现 to_url(self,values) 方法，这个方法的返回值，将会在调用url_for函数的时候生成符合要求的URL形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LiConverter</span>(<span class="title class_ inherited__">BaseConverter</span>):</span><br><span class="line">    <span class="comment"># 1.在转换器类中,实现to_python(self,value)方法,这个方法的返回值,将会传递到 view函数中作为参数。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_python</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">return</span>  value.split(<span class="string">&#x27;+&#x27;</span>)   <span class="comment"># 可以对value进行加工后再返回</span></span><br><span class="line">    <span class="comment"># 2.在转换器类中，实现to_url(self,values)方法，这个方法的返回值，将会在调用url_for函数的时候生成符合要求的URL形式。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_url</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="comment"># return &quot;hello&quot;</span></span><br><span class="line">        <span class="comment">#[&#x27;hots&#x27;,&#x27;enter&#x27;]----&gt;hots+enter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;+&quot;</span>.join(value)</span><br><span class="line">app.url_map.converters[<span class="string">&#x27;li&#x27;</span>]=LiConverter</span><br></pre></td></tr></table></figure><h3 id="查询参数的获取"><a href="#查询参数的获取" class="headerlink" title="查询参数的获取"></a>查询参数的获取</h3><p>?wd&#x3D;python&amp;ie&#x3D;ok</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    wd = request.args.get(<span class="string">&#x27;wd&#x27;</span>)</span><br><span class="line">    ie = request.values.get(<span class="string">&#x27;ie&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello! <span class="subst">&#123;wd&#125;</span> == <span class="subst">&#123;ie&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>通过request.args.get()和request.values.get()</p><h3 id="请求体参数的获取"><a href="#请求体参数的获取" class="headerlink" title="请求体参数的获取"></a>请求体参数的获取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    uname = request.form.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">    pwd = request.values.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    age = request.form.get(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello! <span class="subst">&#123;uname&#125;</span> == <span class="subst">&#123;pwd&#125;</span> ==<span class="subst">&#123;age&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过request.form.get()和request.values.get()</p><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>客户端上传图片到服务器，并保存到服务器中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    f = request.files[<span class="string">&#x27;pic&#x27;</span>]</span><br><span class="line">    <span class="comment"># with open(&#x27;./image/demo.png&#x27;, &#x27;wb&#x27;) as new_file:</span></span><br><span class="line">    <span class="comment">#     new_file.write(f.read())</span></span><br><span class="line">    f.save(<span class="string">&#x27;./demo.png&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;上传成功！&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="其它参数"><a href="#其它参数" class="headerlink" title="其它参数"></a>其它参数</h3><p>如果想要获取其他参数,通过Flask提供的request对象来读取.不同位置的参数都存放在request的不同属性中.</p><table><thead><tr><th>属性</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>values</td><td>记录请求的数据，并转换为字符串</td><td>*</td></tr><tr><td>form</td><td>记录请求中的表单数据</td><td>MultiDict</td></tr><tr><td>args</td><td>记录请求中的查询参数</td><td>MultiDict</td></tr><tr><td>cookies</td><td>记录请求中的cookie信息</td><td>Dict</td></tr><tr><td>headers</td><td>记录请求中的报文头</td><td>EnvironHeaders</td></tr><tr><td>method</td><td>记录请求使用的HTTP方法</td><td>GET&#x2F;POST</td></tr><tr><td>url</td><td>记录请求的URL地址</td><td>string</td></tr><tr><td>files</td><td>记录请求上传的文件</td><td>*</td></tr></tbody></table><h4 id="常用属性使用"><a href="#常用属性使用" class="headerlink" title="常用属性使用"></a>常用属性使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/args&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">args</span>():</span><br><span class="line">    cookies = request.cookies.get(<span class="string">&#x27;uid&#x27;</span>)</span><br><span class="line">    headers = request.headers.get(<span class="string">&#x27;ContentType&#x27;</span>)</span><br><span class="line">    url = request.url</span><br><span class="line">    method = request.method</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;上传成功！！ <span class="subst">&#123;cookies&#125;</span> ==</span></span><br><span class="line"><span class="string"><span class="subst">&#123;headers&#125;</span> ==<span class="subst">&#123;url&#125;</span> == <span class="subst">&#123;method&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="url-for-函数"><a href="#url-for-函数" class="headerlink" title="url_for 函数"></a>url_for 函数</h3><p>一般我们通过一个 URL就可以执行到某一个函数。如果反过来,我们知道一个函数,怎么去获得这个 URL呢？</p><p>​url_for 函数就可以帮我们实现这个功能。url_for 函数可以接收1个及以上的参数，他接收函数名作为第一个参数;如果还出现其他的参数，则会添加到 URL 的后面作为查询参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/list/&lt;page&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_list</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;my list&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> url_for(<span class="string">&#x27;my_list&#x27;</span>,page=<span class="number">2</span>,num=<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># return &quot;/post/list/2?num=8&quot;</span></span><br></pre></td></tr></table></figure><h4 id="使用url-for函数原因"><a href="#使用url-for函数原因" class="headerlink" title="使用url_for函数原因"></a>使用url_for函数原因</h4><p>1 将来如果修改了 URL ，但没有修改该 URL 对应的函数名，就不用到处去替换URL 了<br>2 url_for() 函数会转义一些特殊字符和 unicode 字符串，这些事情 url_for 会自动的帮我们处理.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;login&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line"> <span class="keyword">return</span> url_for(<span class="string">&#x27;login&#x27;</span>, <span class="built_in">next</span>=<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment"># /login/?next=/</span></span><br><span class="line">    <span class="comment"># 会自动的将/编码，不需要手动去处理。</span></span><br><span class="line">    <span class="comment"># url=/login/?next=%2F</span></span><br></pre></td></tr></table></figure><h3 id="响应-重定向"><a href="#响应-重定向" class="headerlink" title="响应-重定向"></a>响应-重定向</h3><p>永久性重定向：301</p><p>暂时性重定向：302</p><h4 id="flask中重定向"><a href="#flask中重定向" class="headerlink" title="flask中重定向"></a>flask中重定向</h4><p>​重定向是通过 redirect(location,code&#x3D;302) 这个函数来实现的, location表示需要重定向到的 URL, 应该配合之前讲的 url_for() 函数来使用，code 表示采用哪个重定向，默认是 302 也即 暂时性重定向, 可以修改成 301 来实现永久性重定向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span></span><br><span class="line">Flask,request,url_for,redirect</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;这是登录页面&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#falsk中重定向</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/profile/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proflie</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;name&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;个人中心页面&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># return redirect(url_for(&#x27;login&#x27;))</span></span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>),code=<span class="number">302</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="响应-响应内容"><a href="#响应-响应内容" class="headerlink" title="响应-响应内容"></a>响应-响应内容</h3><h4 id="返回字符串"><a href="#返回字符串" class="headerlink" title="返回字符串"></a>返回字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/return_str&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">return_str</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;你好，少年&quot;</span></span><br></pre></td></tr></table></figure><h4 id="返回JSON"><a href="#返回JSON" class="headerlink" title="返回JSON"></a>返回JSON</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="comment"># 阻止jsonify将内容转为ASCII进行返回</span></span><br><span class="line">app.config[<span class="string">&#x27;JSON_AS_ASCII&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/return_json1&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">return_json1</span>():</span><br><span class="line">    json_dict = &#123;</span><br><span class="line">        <span class="string">&quot;msg_int&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&quot;msg_str&quot;</span>: <span class="string">&quot;你好，少年&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(json_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/return_json2&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">return_json2</span>():</span><br><span class="line">    json_dict = &#123;</span><br><span class="line">        <span class="string">&quot;msg_int&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&quot;msg_str&quot;</span>: <span class="string">&quot;你好，少年&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> json_dict</span><br></pre></td></tr></table></figure><h4 id="元组方式"><a href="#元组方式" class="headerlink" title="元组方式"></a>元组方式</h4><p>可以返回一个元组，元组中必须至少包含一个项目，且项目应当由(response, status) 、(response, headers) 或者 (response, status, headers) 组成.status的值会重载状态代码,headers 是一个由额外头部值组成的列表或字典.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/demo1&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo1</span>():</span><br><span class="line">    <span class="comment"># return &#x27;状态码为 666&#x27;, 666</span></span><br><span class="line">    <span class="comment"># return &#x27;状态码为 666&#x27;, 666,[(&#x27;language&#x27;, &#x27;Python&#x27;)]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;状态码为 666&#x27;</span>, <span class="number">666</span>, &#123;<span class="string">&#x27;language&#x27;</span>:<span class="string">&#x27;Python&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="响应-自定义响应"><a href="#响应-自定义响应" class="headerlink" title="响应-自定义响应"></a>响应-自定义响应</h3><h4 id="创建Response"><a href="#创建Response" class="headerlink" title="创建Response"></a>创建Response</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/return_str&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">return_str</span>():</span><br><span class="line">    <span class="keyword">return</span> Response(<span class="string">&quot;你好，少年&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="make-response方式"><a href="#make-response方式" class="headerlink" title="make_response方式"></a>make_response方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/demo2&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo2</span>():</span><br><span class="line">    resp = make_response(<span class="string">&#x27;make response测试&#x27;</span>)</span><br><span class="line">    resp.headers[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line">    resp.status = <span class="string">&#x27;404 not found&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLAlchemy</title>
      <link href="/2022/09/30/SQLAlchemy/"/>
      <url>/2022/09/30/SQLAlchemy/</url>
      
        <content type="html"><![CDATA[<h1 id="SQLAlchemy"><a href="#SQLAlchemy" class="headerlink" title="SQLAlchemy"></a>SQLAlchemy</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>SQLAlchemy是一个基于Python实现的ORM框架。该框架建立在 DB API之上，使用关系对象映射进行数据库操作，简言之便是：将类和对象转换成SQL，然后使用数据API执行SQL并获取执行结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install sqlalchemy</span><br></pre></td></tr></table></figure><p>组成部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Engine，框架的引擎</span><br><span class="line">Connection Pooling ，数据库连接池</span><br><span class="line">Dialect，选择连接数据库的DB API种类</span><br><span class="line">Schema/Types，架构和类型</span><br><span class="line">SQL Exprression Language，SQL表达式语言</span><br></pre></td></tr></table></figure><p>SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MySQL-Python</span><br><span class="line">    mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line">    </span><br><span class="line">pymysql</span><br><span class="line">    mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;]</span><br><span class="line">    </span><br><span class="line">MySQL-Connector</span><br><span class="line">    mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line">    </span><br><span class="line">cx_Oracle</span><br><span class="line">    oracle+cx_oracle://user:<span class="keyword">pass</span>@host:port/dbname[?key=value&amp;key=value...]</span><br><span class="line">    </span><br><span class="line">更多：http://docs.sqlalchemy.org/en/latest/dialects/index.html</span><br></pre></td></tr></table></figure><p><strong>django中如何反向生成models</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py inspectdb &gt; app/models.py</span><br></pre></td></tr></table></figure><h2 id="2-简单使用（能创建表，删除表，不能修改表）"><a href="#2-简单使用（能创建表，删除表，不能修改表）" class="headerlink" title="2.简单使用（能创建表，删除表，不能修改表）"></a>2.简单使用（能创建表，删除表，不能修改表）</h2><p>修改表：在数据库添加字段，类对应上</p><p>1执行原生sql（不常用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line">engine = create_engine(</span><br><span class="line">    <span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/test?charset=utf8&quot;</span>,</span><br><span class="line">    max_overflow=<span class="number">0</span>,  <span class="comment"># 超过连接池大小外最多创建的连接</span></span><br><span class="line">    pool_size=<span class="number">5</span>,  <span class="comment"># 连接池大小</span></span><br><span class="line">    pool_timeout=<span class="number">30</span>,  <span class="comment"># 池中没有线程最多等待的时间，否则报错</span></span><br><span class="line">    pool_recycle=-<span class="number">1</span>  <span class="comment"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">arg</span>):</span><br><span class="line">    conn = engine.raw_connection()</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(</span><br><span class="line">        <span class="string">&quot;select * from app01_book&quot;</span></span><br><span class="line">    )</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    t = threading.Thread(target=task, args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>2 orm使用</p><p>models.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, Text, ForeignKey, DateTime, UniqueConstraint, Index</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Users</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span>  <span class="comment"># 数据库表名称</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)  <span class="comment"># id 主键</span></span><br><span class="line">    name = Column(String(<span class="number">32</span>), index=<span class="literal">True</span>, nullable=<span class="literal">False</span>)  <span class="comment"># name列，索引，不可为空</span></span><br><span class="line">    <span class="comment"># email = Column(String(32), unique=True)</span></span><br><span class="line">    <span class="comment">#datetime.datetime.now不能加括号，加了括号，以后永远是当前时间</span></span><br><span class="line">    <span class="comment"># ctime = Column(DateTime, default=datetime.datetime.now)</span></span><br><span class="line">    <span class="comment"># extra = Column(Text, nullable=True)</span></span><br><span class="line"></span><br><span class="line">    __table_args__ = (</span><br><span class="line">        <span class="comment"># UniqueConstraint(&#x27;id&#x27;, &#x27;name&#x27;, name=&#x27;uix_id_name&#x27;), #联合唯一</span></span><br><span class="line">        <span class="comment"># Index(&#x27;ix_id_name&#x27;, &#x27;name&#x27;, &#x27;email&#x27;), #索引</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_db</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据类创建数据库表</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    engine = create_engine(</span><br><span class="line">        <span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/aaa?charset=utf8&quot;</span>,</span><br><span class="line">        max_overflow=<span class="number">0</span>,  <span class="comment"># 超过连接池大小外最多创建的连接</span></span><br><span class="line">        pool_size=<span class="number">5</span>,  <span class="comment"># 连接池大小</span></span><br><span class="line">        pool_timeout=<span class="number">30</span>,  <span class="comment"># 池中没有线程最多等待的时间，否则报错</span></span><br><span class="line">        pool_recycle=-<span class="number">1</span>  <span class="comment"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    Base.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drop_db</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据类删除数据库表</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    engine = create_engine(</span><br><span class="line">        <span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/aaa?charset=utf8&quot;</span>,</span><br><span class="line">        max_overflow=<span class="number">0</span>,  <span class="comment"># 超过连接池大小外最多创建的连接</span></span><br><span class="line">        pool_size=<span class="number">5</span>,  <span class="comment"># 连接池大小</span></span><br><span class="line">        pool_timeout=<span class="number">30</span>,  <span class="comment"># 池中没有线程最多等待的时间，否则报错</span></span><br><span class="line">        pool_recycle=-<span class="number">1</span>  <span class="comment"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    Base.metadata.drop_all(engine)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># drop_db()</span></span><br><span class="line">    init_db()</span><br></pre></td></tr></table></figure><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Users</span><br><span class="line"><span class="comment">#&quot;mysql+pymysql://root@127.0.0.1:3306/aaa&quot;</span></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/aaa&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Connection = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次执行数据库操作时，都需要创建一个Connection</span></span><br><span class="line">con = Connection()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ############# 执行ORM操作 #############</span></span><br><span class="line">obj1 = Users(name=<span class="string">&quot;lqz&quot;</span>)</span><br><span class="line">con.add(obj1)</span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">con.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭session，其实是将连接放回连接池</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure><h2 id="3-一对多关系"><a href="#3-一对多关系" class="headerlink" title="3.一对多关系"></a>3.一对多关系</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hobby</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;hobby&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    caption = Column(String(<span class="number">50</span>), default=<span class="string">&#x27;篮球&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;person&#x27;</span></span><br><span class="line">    nid = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">32</span>), index=<span class="literal">True</span>, nullable=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># hobby指的是tablename而不是类名，uselist=False</span></span><br><span class="line">    hobby_id = Column(Integer, ForeignKey(<span class="string">&quot;hobby.id&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 跟数据库无关，不会新增字段，只用于快速链表操作</span></span><br><span class="line">    <span class="comment"># 类名，backref用于反向查询</span></span><br><span class="line">    hobby=relationship(<span class="string">&#x27;Hobby&#x27;</span>,backref=<span class="string">&#x27;pers&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-多对多关系"><a href="#4-多对多关系" class="headerlink" title="4.多对多关系"></a>4.多对多关系</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Boy2Girl</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;boy2girl&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    girl_id = Column(Integer, ForeignKey(<span class="string">&#x27;girl.id&#x27;</span>))</span><br><span class="line">    boy_id = Column(Integer, ForeignKey(<span class="string">&#x27;boy.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">64</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boy</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;boy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    hostname = Column(String(<span class="number">64</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 与生成表结构无关，仅用于查询方便,放在哪个单表中都可以</span></span><br><span class="line">    servers = relationship(<span class="string">&#x27;Girl&#x27;</span>, secondary=<span class="string">&#x27;boy2girl&#x27;</span>, backref=<span class="string">&#x27;boys&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="5-操作数据表"><a href="#5-操作数据表" class="headerlink" title="5.操作数据表"></a>5.操作数据表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Users</span><br><span class="line">  </span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/aaa&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 每次执行数据库操作时，都需要创建一个session</span></span><br><span class="line">session = Session()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># ############# 执行ORM操作 #############</span></span><br><span class="line">obj1 = Users(name=<span class="string">&quot;jason&quot;</span>)</span><br><span class="line">session.add(obj1)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">session.commit()</span><br><span class="line"><span class="comment"># 关闭session</span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="6-基于scoped-session实现线程安全"><a href="#6-基于scoped-session实现线程安全" class="headerlink" title="6.基于scoped_session实现线程安全"></a>6.基于scoped_session实现线程安全</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> scoped_session</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Users</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 线程安全，基于本地线程实现每个线程用同一个session</span></span><br><span class="line"><span class="string"># 特殊的：scoped_session中有原来方法的Session中的一下方法：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">public_methods = (</span></span><br><span class="line"><span class="string">    &#x27;__contains__&#x27;, &#x27;__iter__&#x27;, &#x27;add&#x27;, &#x27;add_all&#x27;, &#x27;begin&#x27;, &#x27;begin_nested&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;close&#x27;, &#x27;commit&#x27;, &#x27;connection&#x27;, &#x27;delete&#x27;, &#x27;execute&#x27;, &#x27;expire&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;expire_all&#x27;, &#x27;expunge&#x27;, &#x27;expunge_all&#x27;, &#x27;flush&#x27;, &#x27;get_bind&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;is_modified&#x27;, &#x27;bulk_save_objects&#x27;, &#x27;bulk_insert_mappings&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;bulk_update_mappings&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;merge&#x27;, &#x27;query&#x27;, &#x27;refresh&#x27;, &#x27;rollback&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;scalar&#x27;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#scoped_session类并没有继承Session,但是却又它的所有方法</span></span><br><span class="line">session = scoped_session(Session)</span><br><span class="line"><span class="comment"># ############# 执行ORM操作 #############</span></span><br><span class="line">obj1 = Users(name=<span class="string">&quot;alex1&quot;</span>)</span><br><span class="line">session.add(obj1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">session.commit()</span><br><span class="line"><span class="comment"># 关闭session</span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="7-基本增删查改"><a href="#7-基本增删查改" class="headerlink" title="7.基本增删查改"></a>7.基本增删查改</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ################ 添加 ################</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">obj1 = Users(name=&quot;wupeiqi&quot;)</span></span><br><span class="line"><span class="string">session.add(obj1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session.add_all([</span></span><br><span class="line"><span class="string">    Users(name=&quot;lqz&quot;),</span></span><br><span class="line"><span class="string">    Users(name=&quot;egon&quot;),</span></span><br><span class="line"><span class="string">    Hosts(name=&quot;c1.com&quot;),</span></span><br><span class="line"><span class="string">])</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ################ 删除 ################</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">session.query(Users).filter(Users.id &gt; 2).delete()</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># ################ 修改 ################</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#传字典</span></span><br><span class="line"><span class="string">session.query(Users).filter(Users.id &gt; 0).update(&#123;&quot;name&quot; : &quot;lqz&quot;&#125;)</span></span><br><span class="line"><span class="string">#类似于django的F查询</span></span><br><span class="line"><span class="string">session.query(Users).filter(Users.id &gt; 0).update(&#123;Users.name: Users.name + &quot;099&quot;&#125;, synchronize_session=False)</span></span><br><span class="line"><span class="string">session.query(Users).filter(Users.id &gt; 0).update(&#123;&quot;age&quot;: Users.age + 1&#125;, synchronize_session=&quot;evaluate&quot;)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># ################ 查询 ################</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">r1 = session.query(Users).all()</span></span><br><span class="line"><span class="string">#只取age列，把name重命名为xx</span></span><br><span class="line"><span class="string">r2 = session.query(Users.name.label(&#x27;xx&#x27;), Users.age).all()</span></span><br><span class="line"><span class="string">#filter传的是表达式，filter_by传的是参数</span></span><br><span class="line"><span class="string">r3 = session.query(Users).filter(Users.name == &quot;lqz&quot;).all()</span></span><br><span class="line"><span class="string">r4 = session.query(Users).filter_by(name=&#x27;lqz&#x27;).all()</span></span><br><span class="line"><span class="string">r5 = session.query(Users).filter_by(name=&#x27;lqz&#x27;).first()</span></span><br><span class="line"><span class="string">#:value 和:name 相当于占位符，用params传参数</span></span><br><span class="line"><span class="string">r6 = session.query(Users).filter(text(&quot;id&lt;:value and name=:name&quot;)).params(value=224, name=&#x27;fred&#x27;).order_by(Users.id).all()</span></span><br><span class="line"><span class="string">#自定义查询sql</span></span><br><span class="line"><span class="string">r7 = session.query(Users).from_statement(text(&quot;SELECT * FROM users where name=:name&quot;)).params(name=&#x27;ed&#x27;).all()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#增，删，改都要commit()</span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="8-常用操作"><a href="#8-常用操作" class="headerlink" title="8.常用操作"></a>8.常用操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#　条件</span></span><br><span class="line">ret = session.query(Users).filter_by(name=<span class="string">&#x27;lqz&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#表达式，and条件连接</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.<span class="built_in">id</span> &gt; <span class="number">1</span>, Users.name == <span class="string">&#x27;eric&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.<span class="built_in">id</span>.between(<span class="number">1</span>, <span class="number">3</span>), Users.name == <span class="string">&#x27;eric&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#注意下划线</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.<span class="built_in">id</span>.in_([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>])).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#~非，除。。外</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(~Users.<span class="built_in">id</span>.in_([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>])).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#二次筛选</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.<span class="built_in">id</span>.in_(session.query(Users.<span class="built_in">id</span>).filter_by(name=<span class="string">&#x27;eric&#x27;</span>))).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_, or_</span><br><span class="line"><span class="comment">#or_包裹的都是or条件，and_包裹的都是and条件</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(and_(Users.<span class="built_in">id</span> &gt; <span class="number">3</span>, Users.name == <span class="string">&#x27;eric&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(or_(Users.<span class="built_in">id</span> &lt; <span class="number">2</span>, Users.name == <span class="string">&#x27;eric&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(</span><br><span class="line">    or_(</span><br><span class="line">        Users.<span class="built_in">id</span> &lt; <span class="number">2</span>,</span><br><span class="line">        and_(Users.name == <span class="string">&#x27;eric&#x27;</span>, Users.<span class="built_in">id</span> &gt; <span class="number">3</span>),</span><br><span class="line">        Users.extra != <span class="string">&quot;&quot;</span></span><br><span class="line">    )).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通配符，以e开头，不以e开头</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.name.like(<span class="string">&#x27;e%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(~Users.name.like(<span class="string">&#x27;e%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制，用于分页，区间</span></span><br><span class="line">ret = session.query(Users)[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序，根据name降序排列（从大到小）</span></span><br><span class="line">ret = session.query(Users).order_by(Users.name.desc()).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#第一个条件重复后，再按第二个条件升序排</span></span><br><span class="line">ret = session.query(Users).order_by(Users.name.desc(), Users.<span class="built_in">id</span>.asc()).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line">ret = session.query(Users).group_by(Users.extra).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#分组之后取最大id，id之和，最小id</span></span><br><span class="line">ret = session.query(</span><br><span class="line">    func.<span class="built_in">max</span>(Users.<span class="built_in">id</span>),</span><br><span class="line">    func.<span class="built_in">sum</span>(Users.<span class="built_in">id</span>),</span><br><span class="line">    func.<span class="built_in">min</span>(Users.<span class="built_in">id</span>)).group_by(Users.name).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#haviing筛选</span></span><br><span class="line">ret = session.query(</span><br><span class="line">    func.<span class="built_in">max</span>(Users.<span class="built_in">id</span>),</span><br><span class="line">    func.<span class="built_in">sum</span>(Users.<span class="built_in">id</span>),</span><br><span class="line">    func.<span class="built_in">min</span>(Users.<span class="built_in">id</span>)).group_by(Users.name).having(func.<span class="built_in">min</span>(Users.<span class="built_in">id</span>) &gt;<span class="number">2</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连表（默认用forinkey关联）</span></span><br><span class="line"></span><br><span class="line">ret = session.query(Users, Favor).<span class="built_in">filter</span>(Users.<span class="built_in">id</span> == Favor.nid).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#join表，默认是inner join</span></span><br><span class="line">ret = session.query(Person).join(Favor).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#isouter=True 外连，表示Person left join Favor，没有右连接，反过来即可</span></span><br><span class="line">ret = session.query(Person).join(Favor, isouter=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#打印原生sql</span></span><br><span class="line">aa=session.query(Person).join(Favor, isouter=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(aa)</span><br><span class="line"><span class="comment"># 自己指定on条件（连表条件）,第二个参数，支持on多个条件，用and_,同上</span></span><br><span class="line">ret = session.query(Person).join(Favor,Person.<span class="built_in">id</span>==Favor.<span class="built_in">id</span>, isouter=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># 组合（了解）UNION 操作符用于合并两个或多个 SELECT 语句的结果集</span></span><br><span class="line"><span class="comment">#union和union all的区别？</span></span><br><span class="line">q1 = session.query(Users.name).<span class="built_in">filter</span>(Users.<span class="built_in">id</span> &gt; <span class="number">2</span>)</span><br><span class="line">q2 = session.query(Favor.caption).<span class="built_in">filter</span>(Favor.nid &lt; <span class="number">2</span>)</span><br><span class="line">ret = q1.union(q2).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">q1 = session.query(Users.name).<span class="built_in">filter</span>(Users.<span class="built_in">id</span> &gt; <span class="number">2</span>)</span><br><span class="line">q2 = session.query(Favor.caption).<span class="built_in">filter</span>(Favor.nid &lt; <span class="number">2</span>)</span><br><span class="line">ret = q1.union_all(q2).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><h2 id="9-执行原生sql"><a href="#9-执行原生sql" class="headerlink" title="9.执行原生sql"></a>9.执行原生sql</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.result <span class="keyword">import</span> ResultProxy</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="comment"># cursor = session.execute(&#x27;select * from users&#x27;)</span></span><br><span class="line"><span class="comment"># result = cursor.fetchall()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">cursor = session.execute(<span class="string">&#x27;insert into users(name) values(:value)&#x27;</span>,params=&#123;<span class="string">&quot;value&quot;</span>:<span class="string">&#x27;lqz&#x27;</span>&#125;)</span><br><span class="line">session.commit()</span><br><span class="line"><span class="built_in">print</span>(cursor.lastrowid)</span><br><span class="line"></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="10-一对多"><a href="#10-一对多" class="headerlink" title="10.一对多"></a>10.一对多</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.result <span class="keyword">import</span> ResultProxy</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts, Hobby, Person</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">session.add_all([</span></span><br><span class="line"><span class="string">    Hobby(caption=&#x27;乒乓球&#x27;),</span></span><br><span class="line"><span class="string">    Hobby(caption=&#x27;羽毛球&#x27;),</span></span><br><span class="line"><span class="string">    Person(name=&#x27;张三&#x27;, hobby_id=3),</span></span><br><span class="line"><span class="string">    Person(name=&#x27;李四&#x27;, hobby_id=4),</span></span><br><span class="line"><span class="string">])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">person = Person(name=&#x27;张九&#x27;, hobby=Hobby(caption=&#x27;姑娘&#x27;))</span></span><br><span class="line"><span class="string">session.add(person)</span></span><br><span class="line"><span class="string">#添加二</span></span><br><span class="line"><span class="string">hb = Hobby(caption=&#x27;人妖&#x27;)</span></span><br><span class="line"><span class="string">hb.pers = [Person(name=&#x27;文飞&#x27;), Person(name=&#x27;博雅&#x27;)]</span></span><br><span class="line"><span class="string">session.add(hb)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用relationship正向查询</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">v = session.query(Person).first()</span></span><br><span class="line"><span class="string">print(v.name)</span></span><br><span class="line"><span class="string">print(v.hobby.caption)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用relationship反向查询</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">v = session.query(Hobby).first()</span></span><br><span class="line"><span class="string">print(v.caption)</span></span><br><span class="line"><span class="string">print(v.pers)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#方式一，自己链表</span></span><br><span class="line"><span class="comment"># person_list=session.query(models.Person.name,models.Hobby.caption).join(models.Hobby,isouter=True).all()</span></span><br><span class="line">person_list=session.query(models.Person,models.Hobby).join(models.Hobby,isouter=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> person_list:</span><br><span class="line">    <span class="comment"># print(row.name,row.caption)</span></span><br><span class="line">    <span class="built_in">print</span>(row[<span class="number">0</span>].name,row[<span class="number">1</span>].caption)</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：通过relationship</span></span><br><span class="line"></span><br><span class="line">person_list=session.query(models.Person).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> person_list:</span><br><span class="line">    <span class="built_in">print</span>(row.name,row.hobby.caption)</span><br><span class="line"><span class="comment">#查询喜欢姑娘的所有人</span></span><br><span class="line">obj=session.query(models.Hobby).<span class="built_in">filter</span>(models.Hobby.<span class="built_in">id</span>==<span class="number">1</span>).first()</span><br><span class="line">persons=obj.pers</span><br><span class="line"><span class="built_in">print</span>(persons)</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="11-多对多"><a href="#11-多对多" class="headerlink" title="11.多对多"></a>11.多对多</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.result <span class="keyword">import</span> ResultProxy</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts, Hobby, Person, Group, Server, Server2Group</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">session.add_all([</span></span><br><span class="line"><span class="string">    Server(hostname=&#x27;c1.com&#x27;),</span></span><br><span class="line"><span class="string">    Server(hostname=&#x27;c2.com&#x27;),</span></span><br><span class="line"><span class="string">    Group(name=&#x27;A组&#x27;),</span></span><br><span class="line"><span class="string">    Group(name=&#x27;B组&#x27;),</span></span><br><span class="line"><span class="string">])</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">s2g = Server2Group(server_id=1, group_id=1)</span></span><br><span class="line"><span class="string">session.add(s2g)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">gp = Group(name=&#x27;C组&#x27;)</span></span><br><span class="line"><span class="string">gp.servers = [Server(hostname=&#x27;c3.com&#x27;),Server(hostname=&#x27;c4.com&#x27;)]</span></span><br><span class="line"><span class="string">session.add(gp)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ser = Server(hostname=&#x27;c6.com&#x27;)</span></span><br><span class="line"><span class="string">ser.groups = [Group(name=&#x27;F组&#x27;),Group(name=&#x27;G组&#x27;)]</span></span><br><span class="line"><span class="string">session.add(ser)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用relationship正向查询</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">v = session.query(Group).first()</span></span><br><span class="line"><span class="string">print(v.name)</span></span><br><span class="line"><span class="string">print(v.servers)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用relationship反向查询</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">v = session.query(Server).first()</span></span><br><span class="line"><span class="string">print(v.hostname)</span></span><br><span class="line"><span class="string">print(v.groups)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="12-其它"><a href="#12-其它" class="headerlink" title="12.其它"></a>12.其它</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text, func</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.result <span class="keyword">import</span> ResultProxy</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts, Hobby, Person, Group, Server, Server2Group</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联子查询:correlate(Group)表示跟Group表做关联，as_scalar相当于对该sql加括号，用于放在后面当子查询</span></span><br><span class="line">subqry = session.query(func.count(Server.<span class="built_in">id</span>).label(<span class="string">&quot;sid&quot;</span>)).<span class="built_in">filter</span>(Server.<span class="built_in">id</span> == Group.<span class="built_in">id</span>).correlate(Group).as_scalar()</span><br><span class="line">result = session.query(Group.name, subqry)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SELECT `group`.name AS group_name, (SELECT count(server.id) AS sid </span></span><br><span class="line"><span class="string">FROM server </span></span><br><span class="line"><span class="string">WHERE server.id = `group`.id) AS anon_1 </span></span><br><span class="line"><span class="string">FROM `group`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select * from tb where id in [select id from xxx];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select id,</span></span><br><span class="line"><span class="string">name,</span></span><br><span class="line"><span class="string">#必须保证此次查询只有一个值</span></span><br><span class="line"><span class="string">(select max(id) from xxx) as mid</span></span><br><span class="line"><span class="string">from tb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">例如，第三个字段只能有一个值</span></span><br><span class="line"><span class="string">id name  mid</span></span><br><span class="line"><span class="string">1  lqz   1，2  不合理</span></span><br><span class="line"><span class="string">2  egon   2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">成绩表：</span></span><br><span class="line"><span class="string">id sid    cid    score</span></span><br><span class="line"><span class="string">1  1      物理      99 </span></span><br><span class="line"><span class="string">2  1      化学      88</span></span><br><span class="line"><span class="string">3  2      物理      95</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">学生表：</span></span><br><span class="line"><span class="string">id   name  每个学生总分数</span></span><br><span class="line"><span class="string">1     xx      88</span></span><br><span class="line"><span class="string">2     yy       77</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select id，name,</span></span><br><span class="line"><span class="string">(select avr(score) from 成绩表 where 成绩表.sid=学生表.id) as x</span></span><br><span class="line"><span class="string">from 学生表</span></span><br><span class="line"><span class="string">subqry = session.query(func.count(成绩表.scort).label(&quot;sc&quot;)).filter(学生表.id == 成绩表.sid).correlate(学生表).as_scalar()</span></span><br><span class="line"><span class="string">result = session.query(学生表.name, subqry)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原生SQL</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 查询</span></span><br><span class="line"><span class="string">cursor = session.execute(&#x27;select * from users&#x27;)</span></span><br><span class="line"><span class="string">result = cursor.fetchall()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 添加</span></span><br><span class="line"><span class="string">cursor = session.execute(&#x27;insert into users(name) values(:value)&#x27;,params=&#123;&quot;value&quot;:&#x27;wupeiqi&#x27;&#125;)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">print(cursor.lastrowid)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="13-Flask-SQLAlchemy"><a href="#13-Flask-SQLAlchemy" class="headerlink" title="13.Flask-SQLAlchemy"></a>13.Flask-SQLAlchemy</h2><p>flask和SQLAchemy的管理者，通过他把他们做连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db = SQLAlchemy()</span><br><span class="line">- 包含配置</span><br><span class="line">- 包含ORM基类</span><br><span class="line">- 包含create_all</span><br><span class="line">- engine</span><br><span class="line">- 创建连接</span><br></pre></td></tr></table></figure><p>离线脚本，创建表</p><p>详见代码</p><p>flask-migrate<br>python3 manage.py db init 初始化：只执行一次</p><p>python3 manage.py db migrate 等同于 makemigartions<br>python3 manage.py db upgrade 等同于migrate</p>]]></content>
      
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask入门到入土</title>
      <link href="/2022/09/25/Flask%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
      <url>/2022/09/25/Flask%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="Flask简介"><a href="#Flask简介" class="headerlink" title="Flask简介"></a>Flask简介</h2><p>​Flask是一个基于Python开发并且依赖jinja2模板和Werkzeug WSGI服务的一个微型框架，对于Werkzeug本质是Socket服务端，其用于接收http请求并对请求进行预处理，然后触发Flask框架，开发人员基于Flask框架提供的功能对请求进行相应的处理，并返回给用户，如果要返回给用户复杂的内容时，需要借助jinja2模板来实现对模板的处理，即：将模板和数据进行渲染，将渲染后的字符串返回给用户浏览器。</p><p>​“微”(micro) 并不表示你需要把整个 Web 应用塞进单个 Python 文件（虽然确实可以 ），也不意味着 Flask 在功能上有所欠缺。微框架中的“微”意味着 Flask 旨在保持核心简单而易于扩展。Flask 不会替你做出太多决策——比如使用何种数据库。而那些 Flask 所选择的——比如使用何种模板引擎——则很容易替换。除此之外的一切都由可由你掌握。如此，Flask 可以与您珠联璧合。默认情况下，Flask 不包含数据库抽象层、表单验证，或是其它任何已有多种库可以胜任的功能。然而，Flask 支持用扩展来给应用添加这些功能，如同是 Flask 本身实现的一样。众多的扩展提供了数据库集成、表单验证、上传处理、各种各样的开放认证技术等功能。Flask 也许是“微小”的，但它已准备好在需求繁杂的生产环境中投入使用。</p><h3 id="安装flask"><a href="#安装flask" class="headerlink" title="安装flask"></a>安装flask</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><h2 id="wsgiref"><a href="#wsgiref" class="headerlink" title="wsgiref"></a>wsgiref</h2><p>​最简单的Web应用就是先把HTML用文件保存好，用一个现成的HTTP服务器软件，接收用户请求，从文件中读取HTML，返回。如果要动态生成HTML，就需要把上述步骤自己来实现。不过，接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。</p><p>​正确的做法是底层代码由专门的服务器软件实现，我们用Python专注于生成HTML文档。因为我们不希望接触到TCP连接、HTTP原始请求和响应格式，所以，需要一个统一的接口协议来实现这样的服务器软件，让我们专心用Python编写Web业务。这个接口就是WSGI：Web Server Gateway Interface。而wsgiref模块就是python基于wsgi协议开发的服务模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    <span class="built_in">print</span>(environ)</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line">    <span class="keyword">if</span> environ.get(<span class="string">&#x27;PATH_INFO&#x27;</span>) == <span class="string">&#x27;/index&#x27;</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data=f.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> environ.get(<span class="string">&#x27;PATH_INFO&#x27;</span>) == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;login.html&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data=<span class="string">b&#x27;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> [data]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    myserver = make_server(<span class="string">&#x27;&#x27;</span>, <span class="number">8001</span>, func)</span><br><span class="line">    myserver.serve_forever()</span><br><span class="line"></span><br><span class="line"><span class="comment"># wsgiref简单应用</span></span><br></pre></td></tr></table></figure><h2 id="werkzeug简介"><a href="#werkzeug简介" class="headerlink" title="werkzeug简介"></a>werkzeug简介</h2><p>Werkzeug是一个WSGI工具包，他可以作为一个Web框架的底层库。这里稍微说一下， werkzeug 不是一个web服务器，也不是一个web框架，而是一个工具包，官方的介绍说是一个 WSGI 工具包，它可以作为一个 Web 框架的底层库，因为它封装好了很多 Web 框架的东西，例如 Request，Response 等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.wrappers <span class="keyword">import</span> Request, Response</span><br><span class="line"></span><br><span class="line"><span class="meta">@Request.application</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> Response(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line">    run_simple(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">4000</span>, hello)</span><br></pre></td></tr></table></figure><h2 id="flask快速使用"><a href="#flask快速使用" class="headerlink" title="flask快速使用"></a>flask快速使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="comment"># 实例化产生一个Flask对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 将 &#x27;/&#x27;和视图函数hello_workd的对应关系添加到路由中</span></span><br><span class="line"><span class="comment"># 1. v=app.route(&#x27;/&#x27;) 2. v(hello_world)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>) </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run() <span class="comment"># 最终调用了run_simple()</span></span><br></pre></td></tr></table></figure><p><strong>栗子：登录，显示用户信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request,redirect,session,url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line">app.secret_key = <span class="string">&#x27;helloeveryone&#x27;</span></span><br><span class="line"></span><br><span class="line">USERS = &#123;</span><br><span class="line">    <span class="number">1</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;text&#x27;</span>:<span class="string">&quot;道路千万条&quot;</span>&#125;,</span><br><span class="line">    <span class="number">2</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">28</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;text&#x27;</span>:<span class="string">&quot;安全第一条&quot;</span>&#125;,</span><br><span class="line">    <span class="number">3</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;text&#x27;</span>:<span class="string">&quot;行车不规范&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/detail/&lt;int:nid&gt;&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">nid</span>):</span><br><span class="line">    user = session.get(<span class="string">&#x27;user_info&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    info = USERS.get(nid)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;detail.html&#x27;</span>,info=info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    user = session.get(<span class="string">&#x27;user_info&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        <span class="comment"># return redirect(&#x27;/login&#x27;)</span></span><br><span class="line">        url = url_for(<span class="string">&#x27;l1&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,user_dict=USERS)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>],endpoint=<span class="string">&#x27;l1&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># request.query_string</span></span><br><span class="line">        user = request.form.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">        pwd = request.form.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&#x27;cxw&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            session[<span class="string">&#x27;user_info&#x27;</span>] = user</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>,error=<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--detail.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>详细信息 &#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;info.text&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% for k,v in user_dict.items() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;k&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v[&#x27;name&#x27;]&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.get(&#x27;name&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/detail/&#123;&#123;k&#125;&#125;&quot;</span>&gt;</span>查看详细<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--login.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span>&#123;&#123;error&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">flask中的配置文件是一个flask.config.Config对象（继承字典）,默认配置为：</span><br><span class="line"> &#123;</span><br><span class="line">        <span class="string">&#x27;DEBUG&#x27;</span>:                                get_debug_flag(default=<span class="literal">False</span>),  是否开启Debug模式</span><br><span class="line">        <span class="string">&#x27;TESTING&#x27;</span>:                              <span class="literal">False</span>,                          是否开启测试模式</span><br><span class="line">        <span class="string">&#x27;PROPAGATE_EXCEPTIONS&#x27;</span>:                 <span class="literal">None</span>,                          </span><br><span class="line">        <span class="string">&#x27;PRESERVE_CONTEXT_ON_EXCEPTION&#x27;</span>:        <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;SECRET_KEY&#x27;</span>:                           <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>:           timedelta(days=<span class="number">31</span>),</span><br><span class="line">        <span class="string">&#x27;USE_X_SENDFILE&#x27;</span>:                       <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&#x27;LOGGER_NAME&#x27;</span>:                          <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;LOGGER_HANDLER_POLICY&#x27;</span>:               <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SERVER_NAME&#x27;</span>:                          <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;APPLICATION_ROOT&#x27;</span>:                     <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;SESSION_COOKIE_NAME&#x27;</span>:                  <span class="string">&#x27;session&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SESSION_COOKIE_DOMAIN&#x27;</span>:                <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;SESSION_COOKIE_PATH&#x27;</span>:                  <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;SESSION_COOKIE_HTTPONLY&#x27;</span>:              <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;SESSION_COOKIE_SECURE&#x27;</span>:                <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&#x27;SESSION_REFRESH_EACH_REQUEST&#x27;</span>:         <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>:                   <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;SEND_FILE_MAX_AGE_DEFAULT&#x27;</span>:            timedelta(hours=<span class="number">12</span>),</span><br><span class="line">        <span class="string">&#x27;TRAP_BAD_REQUEST_ERRORS&#x27;</span>:              <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&#x27;TRAP_HTTP_EXCEPTIONS&#x27;</span>:                 <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&#x27;EXPLAIN_TEMPLATE_LOADING&#x27;</span>:             <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&#x27;PREFERRED_URL_SCHEME&#x27;</span>:                 <span class="string">&#x27;http&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;JSON_AS_ASCII&#x27;</span>:                        <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;JSON_SORT_KEYS&#x27;</span>:                       <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;JSONIFY_PRETTYPRINT_REGULAR&#x27;</span>:          <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;JSONIFY_MIMETYPE&#x27;</span>:                     <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;TEMPLATES_AUTO_RELOAD&#x27;</span>:                <span class="literal">None</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;DEBUG&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">PS： 由于Config对象本质上是字典，所以还可以使用app.config.update(...)</span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过py文件配置</span></span><br><span class="line">app.config.from_pyfile(<span class="string">&quot;python文件名称&quot;</span>)</span><br><span class="line">settings.py</span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line">app.config.from_pyfile(<span class="string">&quot;settings.py&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过环境变量配置</span></span><br><span class="line">app.config.from_envvar(<span class="string">&quot;环境变量名称&quot;</span>)</span><br><span class="line"><span class="comment">#app.config.from_pyfile(os.environ[&#x27;YOURAPPLICATION_SETTINGS&#x27;])</span></span><br><span class="line">环境变量的值为python文件名称名称，内部调用from_pyfile方法</span><br><span class="line"></span><br><span class="line">app.config.from_json(<span class="string">&quot;json文件名称&quot;</span>)</span><br><span class="line">JSON文件名称，必须是json格式，因为内部会执行json.loads</span><br><span class="line"></span><br><span class="line">app.config.from_mapping(&#123;<span class="string">&#x27;DEBUG&#x27;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line">字典格式</span><br><span class="line"></span><br><span class="line">app.config.from_object(<span class="string">&quot;python类或类的路径&quot;</span>)</span><br><span class="line"></span><br><span class="line">app.config.from_object(<span class="string">&#x27;pro_flask.settings.TestingConfig&#x27;</span>)</span><br><span class="line"></span><br><span class="line">settings.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    DEBUG = <span class="literal">False</span></span><br><span class="line">    TESTING = <span class="literal">False</span></span><br><span class="line">    DATABASE_URI = <span class="string">&#x27;sqlite://:memory:&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductionConfig</span>(<span class="title class_ inherited__">Config</span>):</span><br><span class="line">    DATABASE_URI = <span class="string">&#x27;mysql://user@localhost/foo&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DevelopmentConfig</span>(<span class="title class_ inherited__">Config</span>):</span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestingConfig</span>(<span class="title class_ inherited__">Config</span>):</span><br><span class="line">    TESTING = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">PS: 从sys.path中已经存在路径开始写</span><br><span class="line"></span><br><span class="line">PS: settings.py文件默认路径要放在程序root_path目录，如果instance_relative_config为<span class="literal">True</span>，则就是instance_path目录（Flask对象init方法的参数）</span><br></pre></td></tr></table></figure><h2 id="路由系统"><a href="#路由系统" class="headerlink" title="路由系统"></a>路由系统</h2><h3 id="典型写法"><a href="#典型写法" class="headerlink" title="典型写法"></a>典型写法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/detail/&lt;int:nid&gt;&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>],endpoint=<span class="string">&#x27;detail&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure><h3 id="默认转换器"><a href="#默认转换器" class="headerlink" title="默认转换器"></a>默认转换器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_CONVERTERS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>:          UnicodeConverter,</span><br><span class="line">    <span class="string">&#x27;string&#x27;</span>:           UnicodeConverter,</span><br><span class="line">    <span class="string">&#x27;any&#x27;</span>:              AnyConverter,</span><br><span class="line">    <span class="string">&#x27;path&#x27;</span>:             PathConverter,</span><br><span class="line">    <span class="string">&#x27;int&#x27;</span>:              IntegerConverter,</span><br><span class="line">    <span class="string">&#x27;float&#x27;</span>:            FloatConverter,</span><br><span class="line">    <span class="string">&#x27;uuid&#x27;</span>:             UUIDConverter,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由系统本质"><a href="#路由系统本质" class="headerlink" title="路由系统本质"></a>路由系统本质</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. decorator = app.route(&#x27;/&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;],endpoint=&#x27;n1&#x27;)</span></span><br><span class="line"><span class="string">    def route(self, rule, **options):</span></span><br><span class="line"><span class="string">        # app对象</span></span><br><span class="line"><span class="string">        # rule= /</span></span><br><span class="line"><span class="string">        # options = &#123;methods=[&#x27;GET&#x27;,&#x27;POST&#x27;],endpoint=&#x27;n1&#x27;&#125;</span></span><br><span class="line"><span class="string">        def decorator(f):</span></span><br><span class="line"><span class="string">            endpoint = options.pop(&#x27;endpoint&#x27;, None)</span></span><br><span class="line"><span class="string">            self.add_url_rule(rule, endpoint, f, **options)</span></span><br><span class="line"><span class="string">            return f</span></span><br><span class="line"><span class="string">        return decorator</span></span><br><span class="line"><span class="string">2. @decorator</span></span><br><span class="line"><span class="string">    decorator(index)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;登录&#x27;</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;n2&#x27;</span>, login, methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&quot;POST&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#django与flask路由：flask路由基于装饰器，本质是基于：add_url_rule</span></span><br><span class="line"><span class="comment">#add_url_rule 源码中，endpoint如果为空，endpoint = _endpoint_from_view_func(view_func)，最终取view_func.__name__（函数名）</span></span><br></pre></td></tr></table></figure><h3 id="CBV-源码分析"><a href="#CBV-源码分析" class="headerlink" title="CBV(源码分析)"></a>CBV(源码分析)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">auth</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;before&#x27;</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;after&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IndexView</span>(views.View):</span><br><span class="line">    methods = [<span class="string">&#x27;GET&#x27;</span>]</span><br><span class="line">    decorators = [auth, ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch_request</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Index!&#x27;</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/index&#x27;</span>, view_func=IndexView.as_view(name=<span class="string">&#x27;index&#x27;</span>))  <span class="comment"># name=endpoint</span></span><br><span class="line"><span class="comment">#或者，通常用此方式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IndexView</span>(views.MethodView):</span><br><span class="line">    methods = [<span class="string">&#x27;GET&#x27;</span>]</span><br><span class="line">    decorators = [auth, ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Index.GET&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Index.POST&#x27;</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/index&#x27;</span>, view_func=IndexView.as_view(name=<span class="string">&#x27;index&#x27;</span>)) <span class="comment"># name = endpoint</span></span><br></pre></td></tr></table></figure><h3 id="app-add-url-rule参数"><a href="#app-add-url-rule参数" class="headerlink" title="app.add_url_rule参数"></a>app.add_url_rule参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route和app.add_url_rule参数:</span></span><br><span class="line">rule, URL规则</span><br><span class="line">view_func, 视图函数名称</span><br><span class="line">defaults = <span class="literal">None</span>, 默认值, 当URL中无参数，函数需要参数时，使用defaults = &#123;<span class="string">&#x27;k&#x27;</span>: <span class="string">&#x27;v&#x27;</span>&#125;</span><br><span class="line">为函数提供参数</span><br><span class="line">endpoint = <span class="literal">None</span>, 名称，用于反向生成URL，即： url_for(<span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">methods = <span class="literal">None</span>, 允许的请求方式，如：[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span><br><span class="line"><span class="comment">#对URL最后的 / 符号是否严格要求</span></span><br><span class="line">strict_slashes = <span class="literal">None</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        @app.route(&#x27;/index&#x27;, strict_slashes=False)</span></span><br><span class="line"><span class="string">        #访问http://www.xx.com/index/ 或http://www.xx.com/index均可</span></span><br><span class="line"><span class="string">        @app.route(&#x27;/index&#x27;, strict_slashes=True)</span></span><br><span class="line"><span class="string">        #仅访问http://www.xx.com/index</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#重定向到指定地址</span></span><br><span class="line">redirect_to = <span class="literal">None</span>, </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        @app.route(&#x27;/index/&lt;int:nid&gt;&#x27;, redirect_to=&#x27;/home/&lt;nid&gt;&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#子域名访问</span></span><br><span class="line">subdomain = <span class="literal">None</span>, </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    #C:\Windows\System32\drivers\etc\hosts</span></span><br><span class="line"><span class="string">    127.0.0.1       www.baidu.com</span></span><br><span class="line"><span class="string">127.0.0.1       admin.baidu.com</span></span><br><span class="line"><span class="string">127.0.0.1       buy.baidu.com</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    from flask import Flask, views, url_for</span></span><br><span class="line"><span class="string">    app = Flask(import_name=__name__)</span></span><br><span class="line"><span class="string">    app.config[&#x27;SERVER_NAME&#x27;] = &#x27;baidu.com:5000&#x27;</span></span><br><span class="line"><span class="string">    @app.route(&quot;/&quot;, subdomain=&quot;admin&quot;)</span></span><br><span class="line"><span class="string">    def static_index():</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;Flask supports static subdomains</span></span><br><span class="line"><span class="string">        This is available at static.your-domain.tld&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return &quot;static.your-domain.tld&quot;</span></span><br><span class="line"><span class="string">    #可以传入任意的字符串，如传入的字符串为aa，显示为 aa.baidu.com</span></span><br><span class="line"><span class="string">    @app.route(&quot;/dynamic&quot;, subdomain=&quot;&lt;username&gt;&quot;)</span></span><br><span class="line"><span class="string">    def username_index(username):</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;Dynamic subdomains are also supported</span></span><br><span class="line"><span class="string">        Try going to user1.your-domain.tld/dynamic&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return username + &quot;.your-domain.tld&quot;</span></span><br><span class="line"><span class="string">    if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="string">        app.run()</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    访问：</span></span><br><span class="line"><span class="string">    http://www.baidu.com:5000/dynamic</span></span><br><span class="line"><span class="string">    http://admin.baidu.com:5000/dynamic</span></span><br><span class="line"><span class="string">    http://buy.baidu.com:5000/dynamic</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="支持正则"><a href="#支持正则" class="headerlink" title="支持正则"></a>支持正则</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 写类，继承BaseConverter</span></span><br><span class="line"><span class="comment">#2 注册：app.url_map.converters[&#x27;regex&#x27;] = RegexConverter</span></span><br><span class="line"><span class="comment"># 3 使用：@app.route(&#x27;/index/&lt;regex(&quot;\d+&quot;):nid&gt;&#x27;)  正则表达式会当作第二个参数传递到类中</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, views, url_for</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line">app = Flask(import_name=__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegexConverter</span>(<span class="title class_ inherited__">BaseConverter</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义URL匹配正则表达式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">map</span>, regex</span>):</span><br><span class="line">        <span class="built_in">super</span>(RegexConverter, self).__init__(<span class="built_in">map</span>)</span><br><span class="line">        self.regex = regex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_python</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        路由匹配时，匹配成功后传递给视图函数中参数的值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_url</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        使用url_for反向生成URL时，传递的参数经过该方法处理，返回的值用于生成URL中的参数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        val = <span class="built_in">super</span>(RegexConverter, self).to_url(value)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"><span class="comment"># 添加到flask中</span></span><br><span class="line">app.url_map.converters[<span class="string">&#x27;regex&#x27;</span>] = RegexConverter</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&lt;regex(&quot;\d+&quot;):nid&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">nid</span>):</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;index&#x27;</span>, nid=<span class="string">&#x27;888&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="渲染变量"><a href="#渲染变量" class="headerlink" title="渲染变量"></a>渲染变量</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% for k,v in user_dict.items() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;k&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v[&#x27;name&#x27;]&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.get(&#x27;name&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/detail/&#123;&#123;k&#125;&#125;&quot;</span>&gt;</span>查看详细<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="变量循环"><a href="#变量循环" class="headerlink" title="变量循环"></a>变量循环</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% for k,v in user_dict.items() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;k&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v[&#x27;name&#x27;]&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.get(&#x27;name&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/detail/&#123;&#123;k&#125;&#125;&quot;</span>&gt;</span>查看详细<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% if name %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比django中多可以加括号，执行函数，传参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,Markup,jsonify,make_response</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="keyword">return</span> Markup(<span class="string">&quot;&lt;input type=&#x27;text&#x27; value=&#x27;%s&#x27; /&gt;&quot;</span> %(arg,))</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,ff = func1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;&#123;ff(&#x27;六五&#x27;)&#125;&#125;</span><br><span class="line">&#123;&#123;ff(&#x27;六五&#x27;)|safe&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.Markup等价django的mark_safe ,</p><p>2.extends,include一模一样</p><h2 id="请求响应"><a href="#请求响应" class="headerlink" title="请求响应"></a>请求响应</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"> <span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"> <span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"> <span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"> <span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"></span><br><span class="line"> app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"> @app.route(<span class="params"><span class="string">&#x27;/login.html&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 请求相关信息</span></span><br><span class="line">     <span class="comment"># request.method  提交的方法</span></span><br><span class="line">     <span class="comment"># request.args  get请求提及的数据</span></span><br><span class="line">     <span class="comment"># request.form   post请求提交的数据</span></span><br><span class="line">     <span class="comment"># request.values  post和get提交的数据总和</span></span><br><span class="line">     <span class="comment"># request.cookies  客户端所带的cookie</span></span><br><span class="line">     <span class="comment"># request.headers  请求头</span></span><br><span class="line">     <span class="comment"># request.path     不带域名，请求路径</span></span><br><span class="line">     <span class="comment"># request.full_path  不带域名，带参数的请求路径</span></span><br><span class="line">     <span class="comment"># request.script_root  </span></span><br><span class="line">     <span class="comment"># request.url           带域名带参数的请求路径</span></span><br><span class="line">     <span class="comment"># request.base_url带域名请求路径</span></span><br><span class="line">     <span class="comment"># request.url_root      域名</span></span><br><span class="line">     <span class="comment"># request.host_url域名</span></span><br><span class="line">     <span class="comment"># request.host127.0.0.1:500</span></span><br><span class="line">     <span class="comment"># request.files</span></span><br><span class="line">     <span class="comment"># obj = request.files[&#x27;the_file_name&#x27;]</span></span><br><span class="line">     <span class="comment"># obj.save(&#x27;/var/www/uploads/&#x27; + secure_filename(f.filename))</span></span><br><span class="line"></span><br><span class="line">     <span class="comment"># 响应相关信息</span></span><br><span class="line">     <span class="comment"># return &quot;字符串&quot;</span></span><br><span class="line">     <span class="comment"># return render_template(&#x27;html模板路径&#x27;,**&#123;&#125;)</span></span><br><span class="line">     <span class="comment"># return redirect(&#x27;/index.html&#x27;)</span></span><br><span class="line">     <span class="comment"># return jsonify(&#123;&#x27;k1&#x27;:&#x27;v1&#x27;&#125;)</span></span><br><span class="line"></span><br><span class="line">     <span class="comment"># response = make_response(render_template(&#x27;index.html&#x27;))</span></span><br><span class="line">     <span class="comment"># response是flask.wrappers.Response类型</span></span><br><span class="line">     <span class="comment"># response.delete_cookie(&#x27;key&#x27;)</span></span><br><span class="line">     <span class="comment"># response.set_cookie(&#x27;key&#x27;, &#x27;value&#x27;)</span></span><br><span class="line">     <span class="comment"># response.headers[&#x27;X-Something&#x27;] = &#x27;A value&#x27;</span></span><br><span class="line">     <span class="comment"># return response</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;内容&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     app.run()</span><br></pre></td></tr></table></figure><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>cookie:存放在客户端的键值对<br>session：存放在客户端的键值对<br>token:存放在客户端，通过算法来校验</p><p>在flask中在使用session之前必须现在设置一下密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.secret_key=<span class="string">&quot;danger&quot;</span> <span class="comment">#值随便</span></span><br></pre></td></tr></table></figure><p>除请求对象之外，还有一个 session 对象。它允许你在不同请求间存储特定用户的信息。它是在 Cookies 的基础上实现的，并且对 Cookies 进行密钥签名要使用会话，你需要设置一个密钥。 (app.session_interface对象)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">设置：session[<span class="string">&#x27;username&#x27;</span>] ＝ <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="comment">#在django中发什么三件事，1，生成一个随机的字符串 2 往数据库存 3 写入cookie返回浏览器</span></span><br><span class="line"><span class="comment">#在flask中他没有数据库，但session是怎样实现的？ 生成一个密钥写入这个cookie,然后下次请求的时候，通过这个cookie解密，然后赋值给session,我们通过app.session_interface来查看</span></span><br><span class="line"></span><br><span class="line">删除：</span><br><span class="line">session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h3 id="app-session-interface中save-session的参数（设置cookie的参数）"><a href="#app-session-interface中save-session的参数（设置cookie的参数）" class="headerlink" title="app.session_interface中save_session的参数（设置cookie的参数）"></a>app.session_interface中save_session的参数（设置cookie的参数）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">key, 键</span><br><span class="line">value=<span class="string">&#x27;&#x27;</span>, 值</span><br><span class="line">max_age=<span class="literal">None</span>, 超时时间 cookie需要延续的时间（以秒为单位）如果参数是\ <span class="literal">None</span>`` ，这个cookie会延续到浏览器关闭为止</span><br><span class="line">expires=<span class="literal">None</span>, 超时时间(IE requires expires, so <span class="built_in">set</span> it <span class="keyword">if</span> hasn<span class="string">&#x27;t been already.)</span></span><br><span class="line"><span class="string">path=&#x27;</span>/<span class="string">&#x27;, Cookie生效的路径，/ 表示根路径，特殊的：根路径的cookie可以被任何url的页面访问，浏览器只会把cookie回传给带有该路径的页面，这样可以避免将cookie传给站点中的其他的应用。</span></span><br><span class="line"><span class="string">domain=None, Cookie生效的域名 你可用这个参数来构造一个跨站cookie。如,domain=&quot;.example.com&quot;所构造的cookie对下面这些站点都是可读的：www.example.com、www2.example.com和an.other.sub.domain.example.com 。如果该参数设置为 None ，cookie只能由设置它的站点读取</span></span><br><span class="line"><span class="string">secure=False, 浏览器将通过HTTPS来回传cookie</span></span><br><span class="line"><span class="string">httponly=False 只能http协议传输，无法被JavaScript获取（不是绝对，底层抓包可以获取到也可以被覆盖）</span></span><br></pre></td></tr></table></figure><h3 id="session源码的执行流程"><a href="#session源码的执行流程" class="headerlink" title="session源码的执行流程"></a>session源码的执行流程</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-save_seesion</span></span><br><span class="line">-响应的时候，把session中的值加密序列化放大到了cookie中，返回到浏览器中</span><br><span class="line"><span class="deletion">-open_session</span></span><br><span class="line">-请求来了，从cookie中取出值，反解，生成session对象，以后再视图函数中直接用sessoin就可以了。</span><br></pre></td></tr></table></figure><h2 id="闪现-message"><a href="#闪现-message" class="headerlink" title="闪现(message)"></a>闪现(message)</h2><p>-设置:flash(‘aaa’)<br>-取值：get_flashed_message()<br>-假设在a页面操作出错，跳转到b页面，在b页面显示a页面的错误信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,flash,get_flashed_messages,request,redirect</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;asdfasdf&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># 从某个地方获取设置过的所有值，并清除。</span></span><br><span class="line">    val = request.args.get(<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> val == <span class="string">&#x27;oldboy&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">    flash(<span class="string">&#x27;超时错误&#x27;</span>,category=<span class="string">&quot;x1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ssdsdsdfsd&quot;</span></span><br><span class="line">    <span class="comment"># return redirect(&#x27;/error&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/error&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    展示错误信息</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    如果get_flashed_messages(with_category=True)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = get_flashed_messages(category_filter=[<span class="string">&#x27;x1&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        msg = data[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg = <span class="string">&quot;...&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;错误信息：%s&quot;</span> %(msg,)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="请求扩展-钩子函数"><a href="#请求扩展-钩子函数" class="headerlink" title="请求扩展(钩子函数)"></a>请求扩展(钩子函数)</h2><h3 id="before-first-request"><a href="#before-first-request" class="headerlink" title="before_first_request"></a>before_first_request</h3><p>第一次请求时,跟浏览器无关</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第一次访问&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="before-request"><a href="#before-request" class="headerlink" title="before_request"></a>before_request</h3><p>类比django中间件中的process_request，在请求收到之前绑定一个函数做一些事情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基于它做用户登录认证</span></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="keyword">if</span> request.path == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    user = session.get(<span class="string">&#x27;user_info&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="after-request"><a href="#after-request" class="headerlink" title="after_request"></a>after_request</h3><p>类比django中间件中的process_response，每一个请求之后绑定一个函数，如果请求没有异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_response1</span>(<span class="params">response</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;process_response1 走了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h3 id="teardown-request"><a href="#teardown-request" class="headerlink" title="teardown_request"></a>teardown_request</h3><p>每一个请求之后绑定一个函数，即使遇到了异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.teardown_request </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ter</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="errorhandler"><a href="#errorhandler" class="headerlink" title="errorhandler"></a>errorhandler</h3><p>路径不存在时404，服务器内部错误500</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_404</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;404错误了&quot;</span></span><br></pre></td></tr></table></figure><h3 id="template-global"><a href="#template-global" class="headerlink" title="template_global"></a>template_global</h3><p>标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a1, a2</span>):</span><br><span class="line">    <span class="keyword">return</span> a1 + a2</span><br><span class="line"><span class="comment">#&#123;&#123;add(1,2)&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="template-filter"><a href="#template-filter" class="headerlink" title="template_filter"></a>template_filter</h3><p>过滤器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db</span>(<span class="params">a1, a2, a3</span>):</span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + a3</span><br><span class="line"><span class="comment">#&#123;&#123; 1|db(2,3)&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="中间件-了解"><a href="#中间件-了解" class="headerlink" title="中间件(了解)"></a>中间件(了解)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="comment"># 模拟中间件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Md</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,old_wsgi_app</span>):</span><br><span class="line">        self.old_wsgi_app = old_wsgi_app</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self,  environ, start_response</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;开始之前&#x27;</span>)</span><br><span class="line">        ret = self.old_wsgi_app(environ, start_response)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;结束之后&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#1 我们发现当执行app.run方法的时候，最终执行run_simple，最后执行app(),也就是在执行app.__call__方法</span></span><br><span class="line">    <span class="comment">#2 在__call__里面，执行的是self.wsgi_app().那我们希望在执行他本身的wsgi之前做点事情。</span></span><br><span class="line">    <span class="comment">#3 所以我们先用Md类中__init__，保存之前的wsgi,然后我们用将app.wsgi转化成Md的对象。</span></span><br><span class="line">    <span class="comment">#4 那执行新的的app.wsgi_app，就是执行Md的__call__方法。</span></span><br><span class="line">    <span class="comment">#把原来的wsgi_app替换为自定义的，</span></span><br><span class="line">    app.wsgi_app = Md(app.wsgi_app)</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>请求所有的流程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ctx = self.request_context(environ)</span><br><span class="line">        error = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ctx.push()</span><br><span class="line">                <span class="comment">#根据路径去执行视图函数，视图类</span></span><br><span class="line">                response = self.full_dispatch_request()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                error = e</span><br><span class="line">                response = self.handle_exception(e)</span><br><span class="line">            <span class="keyword">except</span>:  <span class="comment"># noqa: B001</span></span><br><span class="line">                error = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment">#不管出不出异常，都会走这里</span></span><br><span class="line">            <span class="keyword">if</span> self.should_ignore_error(error):</span><br><span class="line">                error = <span class="literal">None</span></span><br><span class="line">            ctx.auto_pop(error)</span><br></pre></td></tr></table></figure><h2 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h2><p>对程序进行目录结构划分</p><h3 id="不使用蓝图，自己分文件"><a href="#不使用蓝图，自己分文件" class="headerlink" title="不使用蓝图，自己分文件"></a>不使用蓝图，自己分文件</h3><p>目录结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-templates</span><br><span class="line">-views</span><br><span class="line">-__init__.py</span><br><span class="line">    -user.py</span><br><span class="line">    -order.py</span><br><span class="line">-app.py</span><br></pre></td></tr></table></figure><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>init.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#不导入这个不行</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> account</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> order</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> user</span><br></pre></td></tr></table></figure><p>user.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> app</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;user&#x27;</span></span><br></pre></td></tr></table></figure><p>order.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> app</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/order&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;order&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="使用蓝图之中小型系统"><a href="#使用蓝图之中小型系统" class="headerlink" title="使用蓝图之中小型系统"></a>使用蓝图之中小型系统</h3><p>目录结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-flask_pro</span><br><span class="line">-flask_test</span><br><span class="line">    -__init__.py</span><br><span class="line">    -static</span><br><span class="line">        -templates</span><br><span class="line">        -views</span><br><span class="line">        -order.py</span><br><span class="line">            -user.py</span><br><span class="line">     -manage.py        </span><br></pre></td></tr></table></figure><p><em>init</em>.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span>  Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="keyword">from</span> flask_test.views <span class="keyword">import</span> user</span><br><span class="line"><span class="keyword">from</span> flask_test.views <span class="keyword">import</span> order</span><br><span class="line">app.register_blueprint(user.us)</span><br><span class="line">app.register_blueprint(order.<span class="built_in">ord</span>)</span><br></pre></td></tr></table></figure><p>manage.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_test <span class="keyword">import</span>  app</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="number">8008</span>)</span><br></pre></td></tr></table></figure><p>user.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line">us=Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@us.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;login&#x27;</span></span><br></pre></td></tr></table></figure><p>order.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"><span class="built_in">ord</span>=Blueprint(<span class="string">&#x27;order&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@ord.route(<span class="params"><span class="string">&#x27;/test&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;order test</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_bp = Blueprint(&#x27;login&#x27;, __name__, url_prefix=&#x27;/login&#x27;, static_folder=&#x27;user_page&#x27;)</span><br></pre></td></tr></table></figure><h2 id="请求上下文-源码分析"><a href="#请求上下文-源码分析" class="headerlink" title="请求上下文(源码分析)"></a>请求上下文(源码分析)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">第一阶段：将ctx(request,session)放到Local对象上</span><br><span class="line">   </span><br><span class="line">第二阶段：视图函数导入：request/session </span><br><span class="line">request.method</span><br><span class="line">-LocalProxy对象.method,执行<span class="built_in">getattr</span>方法，<span class="built_in">getattr</span>(self._get_current_object(), name)</span><br><span class="line">-self._get_current_object()返回<span class="keyword">return</span> self.__local()，self.__local()，在LocakProxy实例化的时候,<span class="built_in">object</span>.__setattr__(self, <span class="string">&#x27;_LocalProxy__local&#x27;</span>, local),此处local就是：partial(_lookup_req_object, <span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"></span><br><span class="line">-<span class="keyword">def</span> <span class="title function_">_lookup_req_object</span>(<span class="params">name</span>):</span><br><span class="line">top = _request_ctx_stack.top <span class="comment">#_request_ctx_stack 就是LocalStack()对象，top方法把ctx取出来</span></span><br><span class="line"><span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">getattr</span>(top, name)<span class="comment">#获取ctx中的request或session对象</span></span><br><span class="line"></span><br><span class="line">第三阶段：请求处理完毕</span><br><span class="line">- 获取session并保存到cookie</span><br><span class="line">- 将ctx删除</span><br></pre></td></tr></table></figure><p>程序运行，两个LocalStack()对象，一个里面放request和session，另一个放g和current_app</p><h2 id="g对象"><a href="#g对象" class="headerlink" title="g对象"></a>g对象</h2><p>专门用来存储用户信息的g对象，g的全称的为global；g对象在一次请求中的所有的代码的地方，都是可以使用的.</p><h3 id="g对象和session的区别"><a href="#g对象和session的区别" class="headerlink" title="g对象和session的区别"></a>g对象和session的区别</h3><p>session对象是可以跨request的，只要session还未失效，不同的request的请求会获取到同一个session，但是g对象不是，g对象不需要管过期时间，请求一次就g对象就改变了一次，或者重新赋值了一次;</p><h2 id="flask-session"><a href="#flask-session" class="headerlink" title="flask-session"></a>flask-session</h2><p>作用：将默认保存的签名cookie中的值 保存到 redis&#x2F;memcached&#x2F;file&#x2F;Mongodb&#x2F;SQLAlchemy</p><p>安装：pip3 install flask-session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session</span><br><span class="line"><span class="keyword">from</span> flask_session <span class="keyword">import</span> RedisSessionInterface</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">conn=redis.Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">6379</span>)</span><br><span class="line"><span class="comment">#use_signer是否对key签名</span></span><br><span class="line">app.session_interface=RedisSessionInterface(conn,key_prefix=<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    session[<span class="string">&#x27;name&#x27;</span>]=<span class="string">&#x27;jason&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>使用2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">from</span> flask.ext.session <span class="keyword">import</span> Session</span><br><span class="line">app.config[<span class="string">&#x27;SESSION_TYPE&#x27;</span>] = <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SESSION_REDIS&#x27;</span>] = Redis(host=<span class="string">&#x27;192.168.0.94&#x27;</span>,port=<span class="string">&#x27;6379&#x27;</span>)</span><br><span class="line">Session(app)</span><br></pre></td></tr></table></figure><h2 id="数据库链接池"><a href="#数据库链接池" class="headerlink" title="数据库链接池"></a>数据库链接池</h2><h3 id="pymsql链接数据库"><a href="#pymsql链接数据库" class="headerlink" title="pymsql链接数据库"></a>pymsql链接数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;123456&#x27;</span>, db=<span class="string">&#x27;s8day127db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"><span class="comment"># cursor.execute(&quot;select id,name from users where name=%s and pwd=%s&quot;,[&#x27;jason&#x27;,&#x27;123&#x27;,])</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select id,name from users where name=%(user)s and pwd=%(pwd)s&quot;</span>,&#123;<span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;)</span><br><span class="line">obj = cursor.fetchone()</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj)</span><br></pre></td></tr></table></figure><h3 id="数据库连接池版"><a href="#数据库连接池版" class="headerlink" title="数据库连接池版"></a>数据库连接池版</h3><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB, SharedDBConnection</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line">    SECRET_KEY = <span class="string">&quot;umsuldfsdflskjdf&quot;</span></span><br><span class="line">    PERMANENT_SESSION_LIFETIME = timedelta(minutes=<span class="number">20</span>)</span><br><span class="line">    SESSION_REFRESH_EACH_REQUEST= <span class="literal">True</span></span><br><span class="line">    SESSION_TYPE = <span class="string">&quot;redis&quot;</span></span><br><span class="line">    PYMYSQL_POOL = PooledDB(</span><br><span class="line">        creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">        maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">        mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span></span><br><span class="line">        maxcached=<span class="number">5</span>,  <span class="comment"># 链接池中最多闲置的链接，0和None不限制</span></span><br><span class="line">        maxshared=<span class="number">3</span>,</span><br><span class="line">        <span class="comment"># 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span></span><br><span class="line">        blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">        maxusage=<span class="literal">None</span>,  <span class="comment"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class="line">        setsession=[],  <span class="comment"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class="line">        ping=<span class="number">0</span>,</span><br><span class="line">        <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">        host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password=<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        database=<span class="string">&#x27;s8day127db&#x27;</span>,</span><br><span class="line">        charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductionConfig</span>(<span class="title class_ inherited__">Config</span>):</span><br><span class="line">    SESSION_REDIS = Redis(host=<span class="string">&#x27;192.168.0.94&#x27;</span>, port=<span class="string">&#x27;6379&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DevelopmentConfig</span>(<span class="title class_ inherited__">Config</span>):</span><br><span class="line">    SESSION_REDIS = Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="string">&#x27;6379&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestingConfig</span>(<span class="title class_ inherited__">Config</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>utils\sql.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SQLHelper</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open</span>(<span class="params">cursor</span>):</span><br><span class="line">        POOL = Config.PYMYSQL_POOL</span><br><span class="line">        conn = POOL.connection()</span><br><span class="line">        cursor = conn.cursor(cursor=cursor)</span><br><span class="line">        <span class="keyword">return</span> conn,cursor</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">conn,cursor</span>):</span><br><span class="line">        conn.commit()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fetch_one</span>(<span class="params">cls,sql,args,cursor =pymysql.cursors.DictCursor</span>):</span><br><span class="line">        conn,cursor = cls.<span class="built_in">open</span>(cursor)</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        obj = cursor.fetchone()</span><br><span class="line">        cls.close(conn,cursor)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fetch_all</span>(<span class="params">cls,sql, args,cursor =pymysql.cursors.DictCursor</span>):</span><br><span class="line">        conn, cursor = cls.<span class="built_in">open</span>(cursor)</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        obj = cursor.fetchall()</span><br><span class="line">        cls.close(conn, cursor)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><p>使用:</p><p>obj &#x3D; SQLHelper.fetch_one(“select id,name from users where name&#x3D;%(user)s and pwd&#x3D;%(pwd)s”,form.data)</p><h2 id="wtforms"><a href="#wtforms" class="headerlink" title="wtforms"></a>wtforms</h2><p>安装:pip3 install wtforms</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form</span><br><span class="line"><span class="keyword">from</span> wtforms.fields <span class="keyword">import</span> simple</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> validators</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> widgets</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">&#x27;templates&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginForm</span>(<span class="title class_ inherited__">Form</span>):</span><br><span class="line">    <span class="comment"># 字段（内部包含正则表达式）</span></span><br><span class="line">    name = simple.StringField(</span><br><span class="line">        label=<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;用户名不能为空.&#x27;</span>),</span><br><span class="line">            validators.Length(<span class="built_in">min</span>=<span class="number">6</span>, <span class="built_in">max</span>=<span class="number">18</span>, message=<span class="string">&#x27;用户名长度必须大于%(min)d且小于%(max)d&#x27;</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.TextInput(), <span class="comment"># 页面上显示的插件</span></span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 字段（内部包含正则表达式）</span></span><br><span class="line">    pwd = simple.PasswordField(</span><br><span class="line">        label=<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;密码不能为空.&#x27;</span>),</span><br><span class="line">            validators.Length(<span class="built_in">min</span>=<span class="number">8</span>, message=<span class="string">&#x27;用户名长度必须大于%(min)d&#x27;</span>),</span><br><span class="line">            validators.Regexp(regex=<span class="string">&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&amp;])[A-Za-z\d$@$!%*?&amp;]&#123;8,&#125;&quot;</span>,</span><br><span class="line">                              message=<span class="string">&#x27;密码至少8个字符，至少1个大写字母，1个小写字母，1个数字和1个特殊字符&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.PasswordInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        form = LoginForm()</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, form=form)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = LoginForm(formdata=request.form)</span><br><span class="line">        <span class="keyword">if</span> form.validate():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;用户提交数据通过格式验证，提交的值为：&#x27;</span>, form.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, form=form)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;form.name.label&#125;&#125; &#123;&#123;form.name&#125;&#125; &#123;&#123;form.name.errors[0] &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;form.pwd.label&#125;&#125; &#123;&#123;form.pwd&#125;&#125; &#123;&#123;form.pwd.errors[0] &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form</span><br><span class="line"><span class="keyword">from</span> wtforms.fields <span class="keyword">import</span> core</span><br><span class="line"><span class="keyword">from</span> wtforms.fields <span class="keyword">import</span> html5</span><br><span class="line"><span class="keyword">from</span> wtforms.fields <span class="keyword">import</span> simple</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> validators</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> widgets</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">&#x27;templates&#x27;</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterForm</span>(<span class="title class_ inherited__">Form</span>):</span><br><span class="line">    name = simple.StringField(</span><br><span class="line">        label=<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired()</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.TextInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;,</span><br><span class="line">        default=<span class="string">&#x27;jason&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pwd = simple.PasswordField(</span><br><span class="line">        label=<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;密码不能为空.&#x27;</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.PasswordInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pwd_confirm = simple.PasswordField(</span><br><span class="line">        label=<span class="string">&#x27;重复密码&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;重复密码不能为空.&#x27;</span>),</span><br><span class="line">            validators.EqualTo(<span class="string">&#x27;pwd&#x27;</span>, message=<span class="string">&quot;两次密码输入不一致&quot;</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.PasswordInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    email = html5.EmailField(</span><br><span class="line">        label=<span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;邮箱不能为空.&#x27;</span>),</span><br><span class="line">            validators.Email(message=<span class="string">&#x27;邮箱格式错误&#x27;</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.TextInput(input_type=<span class="string">&#x27;email&#x27;</span>),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    gender = core.RadioField(</span><br><span class="line">        label=<span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">        choices=(</span><br><span class="line">            (<span class="number">1</span>, <span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        coerce=<span class="built_in">int</span> <span class="comment"># “1” “2”</span></span><br><span class="line">     )</span><br><span class="line">    city = core.SelectField(</span><br><span class="line">        label=<span class="string">&#x27;城市&#x27;</span>,</span><br><span class="line">        choices=(</span><br><span class="line">            (<span class="string">&#x27;bj&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">            (<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>),</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    hobby = core.SelectMultipleField(</span><br><span class="line">        label=<span class="string">&#x27;爱好&#x27;</span>,</span><br><span class="line">        choices=(</span><br><span class="line">            (<span class="number">1</span>, <span class="string">&#x27;篮球&#x27;</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">&#x27;足球&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        coerce=<span class="built_in">int</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    favor = core.SelectMultipleField(</span><br><span class="line">        label=<span class="string">&#x27;喜好&#x27;</span>,</span><br><span class="line">        choices=(</span><br><span class="line">            (<span class="number">1</span>, <span class="string">&#x27;篮球&#x27;</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">&#x27;足球&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        widget=widgets.ListWidget(prefix_label=<span class="literal">False</span>),</span><br><span class="line">        option_widget=widgets.CheckboxInput(),</span><br><span class="line">        coerce=<span class="built_in">int</span>,</span><br><span class="line">        default=[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(RegisterForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.favor.choices = ((<span class="number">1</span>, <span class="string">&#x27;篮球&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;足球&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;羽毛球&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_pwd_confirm</span>(<span class="params">self, field</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        自定义pwd_confirm字段规则，例：与pwd字段是否一致</span></span><br><span class="line"><span class="string">        :param field:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 最开始初始化时，self.data中已经有所有的值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> field.data != self.data[<span class="string">&#x27;pwd&#x27;</span>]:</span><br><span class="line">            <span class="comment"># raise validators.ValidationError(&quot;密码不一致&quot;) # 继续后续验证</span></span><br><span class="line">            <span class="keyword">raise</span> validators.StopValidation(<span class="string">&quot;密码不一致&quot;</span>)  <span class="comment"># 不再继续后续验证</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        form = RegisterForm(data=&#123;<span class="string">&#x27;gender&#x27;</span>: <span class="number">2</span>,<span class="string">&#x27;hobby&#x27;</span>:[<span class="number">1</span>,]&#125;) <span class="comment"># initial</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, form=form)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = RegisterForm(formdata=request.form)</span><br><span class="line">        <span class="keyword">if</span> form.validate():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;用户提交数据通过格式验证，提交的值为：&#x27;</span>, form.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, form=form)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>register.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">novalidate</span> <span class="attr">style</span>=<span class="string">&quot;padding:0  50px&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for field in form %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;field.label&#125;&#125;: &#123;&#123;field&#125;&#125; &#123;&#123;field.errors[0] &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p>Flask框架中的信号基于blinker，其主要就是让开发者可是在flask请求过程中定制一些用户行为</p><p>安装：<code>pip3 install blinker</code></p><p>内置信号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">request_started = _signals.signal(<span class="string">&#x27;request-started&#x27;</span>)                <span class="comment"># 请求到来前执行</span></span><br><span class="line">request_finished = _signals.signal(<span class="string">&#x27;request-finished&#x27;</span>)              <span class="comment"># 请求结束后执行</span></span><br><span class="line"> </span><br><span class="line">before_render_template = _signals.signal(<span class="string">&#x27;before-render-template&#x27;</span>)  <span class="comment"># 模板渲染前执行</span></span><br><span class="line">template_rendered = _signals.signal(<span class="string">&#x27;template-rendered&#x27;</span>)            <span class="comment"># 模板渲染后执行</span></span><br><span class="line"> </span><br><span class="line">got_request_exception = _signals.signal(<span class="string">&#x27;got-request-exception&#x27;</span>)    <span class="comment"># 请求执行出现异常时执行</span></span><br><span class="line"> </span><br><span class="line">request_tearing_down = _signals.signal(<span class="string">&#x27;request-tearing-down&#x27;</span>)      <span class="comment"># 请求执行完毕后自动执行（无论成功与否）</span></span><br><span class="line">appcontext_tearing_down = _signals.signal(<span class="string">&#x27;appcontext-tearing-down&#x27;</span>)<span class="comment"># 应用上下文执行完毕后自动执行（无论成功与否）</span></span><br><span class="line"> </span><br><span class="line">appcontext_pushed = _signals.signal(<span class="string">&#x27;appcontext-pushed&#x27;</span>)            <span class="comment"># 应用上下文push时执行</span></span><br><span class="line">appcontext_popped = _signals.signal(<span class="string">&#x27;appcontext-popped&#x27;</span>)            <span class="comment"># 应用上下文pop时执行</span></span><br><span class="line">message_flashed = _signals.signal(<span class="string">&#x27;message-flashed&#x27;</span>)                <span class="comment"># 调用flask在其中添加数据时，自动触发</span></span><br></pre></td></tr></table></figure><p>使用信号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,signals,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 往信号中注册函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;触发型号&#x27;</span>,args,kwargs)</span><br><span class="line">signals.request_started.connect(func)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发信号： signals.request_started.send()</span></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before_first1</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before_first2</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before_first3</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;视图&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.wsgi_app</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>一个流程中的信号触发点（了解）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a. before_first_request</span><br><span class="line">b. 触发 request_started 信号</span><br><span class="line">c. before_request</span><br><span class="line">d. 模板渲染</span><br><span class="line">渲染前的信号 before_render_template.send(app, template=template, context=context)</span><br><span class="line">rv = template.render(context) <span class="comment"># 模板渲染</span></span><br><span class="line">渲染后的信号 template_rendered.send(app, template=template, context=context)</span><br><span class="line">e. after_request</span><br><span class="line">f. session.save_session()</span><br><span class="line">g. 触发 request_finished信号</span><br><span class="line">如果上述过程出错：</span><br><span class="line">触发错误处理信号 got_request_exception.send(self, exception=e)</span><br><span class="line"></span><br><span class="line">h. 触发信号 request_tearing_down</span><br></pre></td></tr></table></figure><p>自定义信号(了解)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app, flash, render_template</span><br><span class="line"><span class="keyword">from</span> flask.signals <span class="keyword">import</span> _signals</span><br><span class="line">app = Flask(import_name=__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义信号</span></span><br><span class="line">xxxxx = _signals.signal(<span class="string">&#x27;xxxxx&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">sender, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(sender)</span><br><span class="line"><span class="comment"># 自定义信号中注册函数</span></span><br><span class="line">xxxxx.connect(func)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/x&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># 触发信号</span></span><br><span class="line">    xxxxx.send(<span class="string">&#x27;123123&#x27;</span>, k1=<span class="string">&#x27;v1&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index&#x27;</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="多app应用"><a href="#多app应用" class="headerlink" title="多app应用"></a>多app应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.wsgi <span class="keyword">import</span> DispatcherMiddleware</span><br><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app</span><br><span class="line">app1 = Flask(<span class="string">&#x27;app01&#x27;</span>)</span><br><span class="line">app2 = Flask(<span class="string">&#x27;app02&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app1.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;app01&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app2.route(<span class="params"><span class="string">&#x27;/index2&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;app2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http://www.oldboyedu.com/index</span></span><br><span class="line"><span class="comment"># http://www.oldboyedu.com/sec/index2</span></span><br><span class="line">dm = DispatcherMiddleware(app1, &#123;</span><br><span class="line">    <span class="string">&#x27;/sec&#x27;</span>: app2,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    run_simple(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">5000</span>, dm)</span><br></pre></td></tr></table></figure><h2 id="flask-script"><a href="#flask-script" class="headerlink" title="flask-script"></a>flask-script</h2><p>用于实现类似于django中 python3 manage.py runserver …类似的命令</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-script</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">manager=Manager(app)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    manager.run()</span><br><span class="line"><span class="comment">#以后在执行，直接：python3 manage.py runserver</span></span><br><span class="line"><span class="comment">#python3 manage.py runserver --help</span></span><br></pre></td></tr></table></figure><h3 id="自定制命令"><a href="#自定制命令" class="headerlink" title="自定制命令"></a>自定制命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义命令</span></span><br><span class="line"><span class="string">    python manage.py custom 123</span></span><br><span class="line"><span class="string">    :param arg:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.option(<span class="params"><span class="string">&#x27;-n&#x27;</span>, <span class="string">&#x27;--name&#x27;</span>, dest=<span class="string">&#x27;name&#x27;</span></span>)</span></span><br><span class="line"><span class="comment">#@manager.option(&#x27;-u&#x27;, &#x27;--url&#x27;, dest=&#x27;url&#x27;)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">name, url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义命令（-n也可以写成--name）</span></span><br><span class="line"><span class="string">    执行： python manage.py  cmd -n jason -u http://www.baidu.com</span></span><br><span class="line"><span class="string">    执行： python manage.py  cmd --name jason --url http://www.baidu.com</span></span><br><span class="line"><span class="string">    :param name:</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(name, url)</span><br><span class="line"><span class="comment">#有什么用？ 把excel的数据导入数据库，定制个命令，去执行</span></span><br></pre></td></tr></table></figure><h2 id="flask-admin"><a href="#flask-admin" class="headerlink" title="flask-admin"></a>flask-admin</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask_admin</span><br></pre></td></tr></table></figure><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_admin <span class="keyword">import</span> Admin</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#将app注册到admin中</span></span><br><span class="line">admin = Admin(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;mian&quot;</span>:</span><br><span class="line"></span><br><span class="line">app.run()</span><br><span class="line"><span class="comment">#访问</span></span><br><span class="line"><span class="comment">#127.0.0.1:5000/admin端口，会得到一个空白的页面</span></span><br></pre></td></tr></table></figure><h3 id="将表模型注册到admin中"><a href="#将表模型注册到admin中" class="headerlink" title="将表模型注册到admin中"></a>将表模型注册到admin中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在将表注册之前应该对app进行配置</span></span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&quot;mysql+pymysql://root:@127.0.0.1:3307/py9api?charset=utf8mb4&quot;</span></span><br><span class="line">SQLALCHEMY_POOL_SIZE = <span class="number">5</span></span><br><span class="line">SQLALCHEMY_POOL_TIMEOUT = <span class="number">30</span></span><br><span class="line">SQLALCHEMY_POOL_RECYCLE = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入models文件的中的表模型</span></span><br><span class="line"><span class="keyword">from</span> flask_admin.contrib.sqla <span class="keyword">import</span> ModelView</span><br><span class="line"><span class="keyword">from</span> api.models <span class="keyword">import</span> Stock,Product,Images,Category,Wxuser,Banner</span><br><span class="line"></span><br><span class="line">admin.add_view(ModelView(Stock, db.session))</span><br><span class="line">admin.add_view(ModelView(Product, db.session))</span><br><span class="line"></span><br><span class="line">admin.add_view(ModelView(Category, db.session))</span><br></pre></td></tr></table></figure><h3 id="如果有个字段是图片字段"><a href="#如果有个字段是图片字段" class="headerlink" title="如果有个字段是图片字段"></a>如果有个字段是图片字段</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置上传文件的路径</span></span><br><span class="line"><span class="comment">#导入from flask_admin.contrib.fileadmin import FileAdmin</span></span><br><span class="line"><span class="keyword">from</span> flask_admin.contrib.fileadmin <span class="keyword">import</span> FileAdmin,form</span><br><span class="line">file_path = op.join(op.dirname(__file__), <span class="string">&#x27;static&#x27;</span>)</span><br><span class="line">admin = Admin(app)</span><br><span class="line">admin.add_view(FileAdmin(file_path, <span class="string">&#x27;/static/&#x27;</span>, name=<span class="string">&#x27;文件&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果有个字段要是上传文件重写该方法的modleView类，假设imgae_url是文件图片的字段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImagesView</span>(<span class="title class_ inherited__">ModelView</span>):</span><br><span class="line"></span><br><span class="line">    form_extra_fields = &#123;</span><br><span class="line">        <span class="string">&#x27;image_url&#x27;</span>: form.ImageUploadField(<span class="string">&#x27;Image&#x27;</span>,</span><br><span class="line">                                          base_path=file_path,</span><br><span class="line">                                          relative_path=<span class="string">&#x27;uploadFile/&#x27;</span></span><br><span class="line">                                          )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">admin.add_view(ImagesView(Images, db.session))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker介绍</title>
      <link href="/2022/09/18/Docker%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/09/18/Docker%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h3><h4 id="什么是虚拟化"><a href="#什么是虚拟化" class="headerlink" title="什么是虚拟化"></a>什么是虚拟化</h4><p>​在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术,是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件;对资源充分利用<br>​虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</p><h4 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h4><p>​Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 <a href="https://github.com/docker/docker">GitHub</a> 上进行维护。</p><p>​Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。<br>​在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p><p>为什么选择Docker?</p><p>（1）上手快。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。</span><br></pre></td></tr></table></figure><p>随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。</p><p>（2）职责的逻辑分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”</span><br></pre></td></tr></table></figure><p>（3）快速高效的开发生命周期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。）</span><br></pre></td></tr></table></figure><p>（4）鼓励使用面向服务的架构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序）</span><br></pre></td></tr></table></figure><h4 id="容器与虚拟机比较"><a href="#容器与虚拟机比较" class="headerlink" title="容器与虚拟机比较"></a>容器与虚拟机比较</h4><p>下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现</p><p><img src="/2022/09/18/Docker%E4%BB%8B%E7%BB%8D/1.png" alt="1"></p><p>与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</p><h3 id="Docker组件"><a href="#Docker组件" class="headerlink" title="Docker组件"></a>Docker组件</h3><h4 id="Docker服务器与客户端"><a href="#Docker服务器与客户端" class="headerlink" title="Docker服务器与客户端"></a>Docker服务器与客户端</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。</span><br></pre></td></tr></table></figure><p><img src="/2022/09/18/Docker%E4%BB%8B%E7%BB%8D/2.png" alt="2"></p><h4 id="Docker镜像与容器"><a href="#Docker镜像与容器" class="headerlink" title="Docker镜像与容器"></a>Docker镜像与容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如：</span><br></pre></td></tr></table></figure><p>添加一个文件；执行一个命令；打开一个窗口。</p><p>也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。  容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务。</span><br></pre></td></tr></table></figure><p>所以Docker容器就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个镜像格式；一些列标准操作；一个执行环境。</span><br><span class="line">Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件。</span><br></pre></td></tr></table></figure><p>和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。</p><p>Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。</p><h4 id="Registry-注册中心"><a href="#Registry-注册中心" class="headerlink" title="Registry(注册中心)"></a>Registry(注册中心)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢，可以自己构建私有的Registry）。https://hub.docker.com/</span><br></pre></td></tr></table></figure><h3 id="Docker安装与启动"><a href="#Docker安装与启动" class="headerlink" title="Docker安装与启动"></a>Docker安装与启动</h3><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</span><br></pre></td></tr></table></figure><p>（1）yum 包更新到最新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum remove docker docker-common  docker-selinux docker-engine</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">rm</span> -rf /var/lib/docker</span></span><br><span class="line"></span><br><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><p>（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>（3）设置yum源为阿里云</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>（4）安装docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><p>（5）安装后查看docker版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h4 id="设置ustc的镜像"><a href="#设置ustc的镜像" class="headerlink" title="设置ustc的镜像"></a>设置ustc的镜像</h4><p>ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。</p><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p><p>编辑该文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json  </span><br></pre></td></tr></table></figure><p>在该文件中输入如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Docker的启动与停止"><a href="#Docker的启动与停止" class="headerlink" title="Docker的启动与停止"></a>Docker的启动与停止</h4><p><strong>systemctl</strong>命令是系统服务管理器指令</p><p>启动docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>停止docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>重启docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>查看docker状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p>开机启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>查看docker概要信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p>查看docker帮助文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h4><h5 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>REPOSITORY：镜像名称</p><h5 id="TAG：镜像标签"><a href="#TAG：镜像标签" class="headerlink" title="TAG：镜像标签"></a>TAG：镜像标签</h5><p>IMAGE ID：镜像ID</p><p>CREATED：镜像的创建日期（不是获取该镜像的日期）</p><p>SIZE：镜像大小</p><p>这些镜像都是存储在Docker宿主机的&#x2F;var&#x2F;lib&#x2F;docker目录下</p><h5 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h5><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure><p>NAME：仓库名称</p><p>DESCRIPTION：镜像描述</p><p>STARS：用户评价，反应一个镜像的受欢迎程度</p><p>OFFICIAL：是否官方</p><p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p><h5 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h5><p>拉取镜像就是从中央仓库中下载镜像到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure><p>例如，我要下载centos7镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:7</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>按镜像ID删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像ID</span><br></pre></td></tr></table></figure><p>删除所有镜像</p><p>删除所有镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi `docker images -q`</span><br></pre></td></tr></table></figure><h4 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h4><h5 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h5><p>查看正在运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>查看所有容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps –a</span><br></pre></td></tr></table></figure><p>查看最后一次运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps –l</span><br></pre></td></tr></table></figure><p>查看停止的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -f status=exited</span><br></pre></td></tr></table></figure><h5 id="创建与启动容器"><a href="#创建与启动容器" class="headerlink" title="创建与启动容器"></a>创建与启动容器</h5><p>创建容器常用的参数说明：</p><p>创建容器命令：docker run</p><p>-i：表示运行容器</p><p>-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</p><p>–name :为创建的容器命名。</p><p>-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p><p>-d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</p><p>-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</p><p>（1）交互式方式创建容器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -it --name=容器名称 镜像名称:标签 /bin/bash</span></span><br></pre></td></tr></table></figure><p>这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态</p><p>退出当前容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>（2）守护式方式创建容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=容器名称 镜像名称:标签</span><br></pre></td></tr></table></figure><p>登录守护式容器方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器名称 (或者容器ID)  /bin/bash</span><br></pre></td></tr></table></figure><h5 id="停止与启动容器"><a href="#停止与启动容器" class="headerlink" title="停止与启动容器"></a>停止与启动容器</h5><p>停止容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名称（或者容器ID）</span><br></pre></td></tr></table></figure><p>启动容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名称（或者容器ID）</span><br></pre></td></tr></table></figure><h5 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h5><p>如果我们需要将文件拷贝到容器内可以使用cp命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 需要拷贝的文件或目录 容器名称:容器目录</span><br></pre></td></tr></table></figure><p>也可以将文件从容器内拷贝出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 容器名称:容器目录 需要拷贝的文件或目录</span><br></pre></td></tr></table></figure><h5 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h5><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。<br>创建容器 添加-v参数 后边为 宿主机目录:容器目录，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos3 centos:7</span><br></pre></td></tr></table></figure><p>如果你共享的是多级的目录，可能会出现权限不足的提示。</p><p>这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数 –privileged&#x3D;true 来解决挂载的目录没有权限的问题</p><h5 id="查看容器IP地址"><a href="#查看容器IP地址" class="headerlink" title="查看容器IP地址"></a>查看容器IP地址</h5><p>我们可以通过以下命令查看容器运行的各种数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名称（容器ID） </span><br></pre></td></tr></table></figure><p>也可以直接执行下面的命令直接输出IP地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; 容器名称（容器ID）</span><br></pre></td></tr></table></figure><h5 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h5><p>删除指定的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器名称（容器ID）</span><br></pre></td></tr></table></figure><h3 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h3><h4 id="MySQL部署"><a href="#MySQL部署" class="headerlink" title="MySQL部署"></a>MySQL部署</h4><p>（1）拉取mysql镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos/mysql-57-centos7</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure><p>-p 代表端口映射，格式为 宿主机映射端口:容器运行端口</p><p>-e 代表添加环境变量 MYSQL_ROOT_PASSWORD 是root用户的登陆密码</p><p>（3）远程登录mysql</p><p>连接宿主机的IP ,指定端口为33306</p><h4 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h4><p>（1）拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p>（2）创建Nginx容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=mynginx -p 80:80 nginx</span><br></pre></td></tr></table></figure><h4 id="Redis部署"><a href="#Redis部署" class="headerlink" title="Redis部署"></a>Redis部署</h4><p>（1）拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -di --name=myredis -p 6379:6379 redis</span></span><br><span class="line"></span><br><span class="line">bind <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">daemonize NO</span><br><span class="line">protected-mode no</span><br><span class="line">requirepass <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -p 6379:6379 --name redis_6379 -v /home/docker/reids/conf/redis.conf:/etc/redis/redis.conf -v /home/docker/reids/data:/data -d redis:alpine3.11 redis-server /etc/redis/redis.conf --appendonly <span class="built_in">yes</span></span></span><br></pre></td></tr></table></figure><h3 id="迁移与备份"><a href="#迁移与备份" class="headerlink" title="迁移与备份"></a>迁移与备份</h3><h4 id="容器保存为镜像"><a href="#容器保存为镜像" class="headerlink" title="容器保存为镜像"></a>容器保存为镜像</h4><p>我们可以通过以下命令将容器保存为镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit mynginx mynginx_i</span><br></pre></td></tr></table></figure><h4 id="镜像备份"><a href="#镜像备份" class="headerlink" title="镜像备份"></a>镜像备份</h4><p>我们可以通过以下命令将镜像保存为tar 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker  save -o mynginx.tar mynginx_i</span><br></pre></td></tr></table></figure><h4 id="镜像恢复与迁移"><a href="#镜像恢复与迁移" class="headerlink" title="镜像恢复与迁移"></a>镜像恢复与迁移</h4><p>首先我们先删除掉mynginx_img镜像 然后执行此命令进行恢复</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i mynginx.tar</span><br></pre></td></tr></table></figure><p>-i 输入的文件;执行后再次查看镜像，可以看到镜像已经恢复</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><h4 id="什么是Dockerfile"><a href="#什么是Dockerfile" class="headerlink" title="什么是Dockerfile"></a>什么是Dockerfile</h4><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p><p>1、对于开发人员：可以为开发团队提供一个完全一致的开发环境；<br>2、对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了；<br>3、对于运维人员：在部署时，可以实现应用的无缝移植。</p><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>FROM image_name:tag</td><td>定义了使用哪个基础镜像启动构建流程</td></tr><tr><td>MAINTAINER user_name</td><td>声明镜像的创建者</td></tr><tr><td>ENV key value</td><td>设置环境变量 (可以写多条)</td></tr><tr><td>RUN command</td><td>是Dockerfile的核心部分(可以写多条)</td></tr><tr><td>ADD source_dir&#x2F;file dest_dir&#x2F;file</td><td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td></tr><tr><td>source_dir&#x2F;file dest_dir&#x2F;file</td><td>和ADD相似，但是如果有压缩文件并不能解压</td></tr><tr><td>WORKDIR path_dir</td><td>设置工作目录</td></tr></tbody></table><h4 id="使用脚本创建镜像"><a href="#使用脚本创建镜像" class="headerlink" title="使用脚本创建镜像"></a>使用脚本创建镜像</h4><p>步骤：</p><p>（1）创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> –p /usr/local/dockerdjango</span><br></pre></td></tr></table></figure><p>（2）下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的&#x2F;usr&#x2F;local&#x2F;dockerjdk8目录</p><p>（3）创建文件Dockerfile <code>vi Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#依赖镜像名称和ID</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="comment">#指定镜像创建者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> TEST</span><br><span class="line"><span class="comment">#切换工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr</span></span><br></pre></td></tr></table></figure><p>（4）执行命令构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=<span class="string">&#x27;django2.0&#x27;</span> .</span><br></pre></td></tr></table></figure><p>注意后边的空格和点，不要省略</p><p>（5）查看镜像是否建立完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="基于ubuntu构建redis镜像"><a href="#基于ubuntu构建redis镜像" class="headerlink" title="基于ubuntu构建redis镜像"></a>基于ubuntu构建redis镜像</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步：编辑Dockerfile</span></span><br><span class="line">vi Dockerfile</span><br><span class="line"><span class="comment"># 第二步：写入</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:lunar-<span class="number">20230415</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> lqz</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /soft</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install wget make build-essential -y</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget https://github.com/redis/redis/archive/7.0.11.tar.gz &amp;&amp; tar -xzvf 7.0.11.tar.gz</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /soft/redis-7.0.11</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> make &amp;&amp; make install</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;./redis.conf&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步：构建镜像</span></span><br><span class="line">docker build -t=<span class="string">&#x27;ubuntu_redis&#x27;</span> .</span><br><span class="line"><span class="comment"># 第四步：运行镜像成容器</span></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -<span class="built_in">id</span> --name redis -p 6379:6379 ubuntu_redis</span></span><br></pre></td></tr></table></figure><h3 id="Docker私有仓库"><a href="#Docker私有仓库" class="headerlink" title="Docker私有仓库"></a>Docker私有仓库</h3><h4 id="私有仓库搭建与配置"><a href="#私有仓库搭建与配置" class="headerlink" title="私有仓库搭建与配置"></a>私有仓库搭建与配置</h4><p>（1）拉取私有仓库镜像（此步省略）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><p>（2）启动私有仓库容器</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di <span class="comment">--name=registry -p 5000:5000 registry</span></span><br></pre></td></tr></table></figure><p>（3）打开浏览器 输入地址<a href="http://192.168.1.12:5000/v2/_catalog%E7%9C%8B%E5%88%B0%60%7B%22repositories%22:[]%7D%60">http://192.168.1.12:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`</a> 表示私有仓库搭建成功并且内容为空</p><p>（4）修改daemon.json</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>添加以下内容，保存退出。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;192.168.1.12:5000&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><p>此步用于让 docker信任私有仓库地址</p><p>（5）重启docker 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="镜像上传至私有仓库"><a href="#镜像上传至私有仓库" class="headerlink" title="镜像上传至私有仓库"></a>镜像上传至私有仓库</h4><p>（1）标记此镜像为私有仓库的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag django2.0 192.168.1.12:5000/django2.0</span><br></pre></td></tr></table></figure><p>（2）再次启动私服容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start registry</span><br></pre></td></tr></table></figure><p>（3）上传标记的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.1.12:5000/django2.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos部署DRF+NGINX+UWSGI</title>
      <link href="/2022/09/14/Centos%E9%83%A8%E7%BD%B2DRF-NGINX-UWSGI/"/>
      <url>/2022/09/14/Centos%E9%83%A8%E7%BD%B2DRF-NGINX-UWSGI/</url>
      
        <content type="html"><![CDATA[<h2 id="Centos部署DRF-NGINX-UWSGI"><a href="#Centos部署DRF-NGINX-UWSGI" class="headerlink" title="Centos部署DRF+NGINX+UWSGI"></a>Centos部署DRF+NGINX+UWSGI</h2><h3 id="上线前配置"><a href="#上线前配置" class="headerlink" title="上线前配置"></a>上线前配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.前端项目：npm run build打包成一个dist文件夹,并上传到服务器</span><br></pre></td></tr></table></figure><h3 id="更新系统软件包"><a href="#更新系统软件包" class="headerlink" title="更新系统软件包"></a>更新系统软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">采用centos7.6</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> ~</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: yum update -y</span>   </span><br></pre></td></tr></table></figure><h3 id="安装软件管理包和可能使用的依赖"><a href="#安装软件管理包和可能使用的依赖" class="headerlink" title="安装软件管理包和可能使用的依赖"></a>安装软件管理包和可能使用的依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel psmisc libffi-devel</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: yum -y groupinstall <span class="string">&quot;Development tools&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="检测是否成功：会将git作为依赖安装好"><a href="#检测是否成功：会将git作为依赖安装好" class="headerlink" title="检测是否成功：会将git作为依赖安装好"></a>检测是否成功：会将git作为依赖安装好</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: git显示命令则成功</span></span><br></pre></td></tr></table></figure><h3 id="安装MySQL5-7"><a href="#安装MySQL5-7" class="headerlink" title="安装MySQL5.7"></a>安装MySQL5.7</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1）前往用户根目录</span><br><span class="line">&gt;: <span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line">2）下载mysql57</span><br><span class="line">&gt;: wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line">3）安装mysql57</span><br><span class="line">&gt;: yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">&gt;: yum -y install mysql-community-server</span><br><span class="line">yum install mysql-community-server --nogpgcheck -y(这一步看机器是否需要)</span><br><span class="line"></span><br><span class="line">4）启动mysql57并查看启动状态</span><br><span class="line">&gt;: systemctl start mysqld.service</span><br><span class="line">&gt;: systemctl status mysqld.service  显示active则成功</span><br><span class="line"></span><br><span class="line">5）查看默认密码并登录</span><br><span class="line">&gt;: grep <span class="string">&quot;password&quot;</span> /var/log/mysqld.log</span><br><span class="line">&gt;: mysql -uroot -p</span><br><span class="line"></span><br><span class="line">6）修改密码</span><br><span class="line">&gt;: ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;new password&#x27;</span>;</span><br><span class="line">&gt;: ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Owen1234?&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装redis5-0-5"><a href="#安装redis5-0-5" class="headerlink" title="安装redis5.0.5"></a>安装redis5.0.5</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1）前往用户根目录</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> ~</span></span><br><span class="line"></span><br><span class="line">2）下载redis-5.0.5</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span></span><br><span class="line"></span><br><span class="line">3）解压安装包</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: tar -xf redis-5.0.5.tar.gz</span></span><br><span class="line">4）进入目标文件</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> redis-5.0.5</span></span><br><span class="line"></span><br><span class="line">5）编译环境</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: make</span></span><br><span class="line"></span><br><span class="line">6）复制环境到指定路径完成安装</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cp</span> -r ~/redis-5.0.5 /usr/local/redis</span></span><br><span class="line"></span><br><span class="line">7）建立软连接</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">ln</span> -s /usr/local/redis/src/redis-server /usr/bin/redis-server</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">ln</span> -s /usr/local/redis/src/redis-cli /usr/bin/redis-cli</span></span><br><span class="line">8)查看后台 &gt;:ps -aux|grep redis-server</span><br><span class="line"></span><br><span class="line">9）后台运行redis</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> /usr/local/redis</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: redis-server &amp;</span></span><br><span class="line"></span><br><span class="line">10）测试redis环境</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: redis-cli</span></span><br><span class="line">ctrl + c</span><br><span class="line"></span><br><span class="line">11）关闭redis服务</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: pkill -f redis -9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">源码安装python，依赖一些第三方zlib* libffi-devel</span></span><br><span class="line">yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel psmisc libffi-devel zlib* libffi-devel  -y</span><br><span class="line">1 前往用户根目录</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> ~</span></span><br><span class="line"></span><br><span class="line">2 下载 或 上传 Python3.8.1 </span><br><span class="line">wget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tar.xz</span><br><span class="line"></span><br><span class="line">3  解压安装包</span><br><span class="line">tar -xf Python-3.8.1.tar.xz</span><br><span class="line"></span><br><span class="line">4 进入目标文件</span><br><span class="line">cd Python-3.8.1</span><br><span class="line"></span><br><span class="line">5 配置安装路径：/usr/local/python3</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: ./configure --prefix=/usr/local/python3</span></span><br><span class="line"></span><br><span class="line">6）编译并安装</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: make &amp;&amp; sudo make install</span></span><br><span class="line"></span><br><span class="line">7）建立软连接：终端命令 python3，pip3</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">ln</span> -s /usr/local/python3/bin/python3.8 /usr/bin/python3</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">ln</span> -s /usr/local/python3/bin/pip3.8 /usr/bin/pip3</span></span><br><span class="line"></span><br><span class="line">8）删除安装包与文件(可忽略)：</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">rm</span> -rf Python-3.8.1</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">rm</span> -rf Python-3.8.1.tar.xz</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1）前往用户根目录</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> ~</span></span><br><span class="line"></span><br><span class="line">2）下载nginx1.13.7</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: wget http://nginx.org/download/nginx-1.13.7.tar.gz</span></span><br><span class="line"></span><br><span class="line">3）解压安装包</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: tar -xf nginx-1.13.7.tar.gz</span></span><br><span class="line"></span><br><span class="line">4）进入目标文件</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> nginx-1.13.7</span></span><br><span class="line"></span><br><span class="line">5）配置安装路径：/usr/local/nginx</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: ./configure --prefix=/usr/local/nginx</span></span><br><span class="line"></span><br><span class="line">6）编译并安装</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: make &amp;&amp; sudo make install</span></span><br><span class="line"></span><br><span class="line">7）建立软连接：终端命令 nginx</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">ln</span> -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</span></span><br><span class="line"></span><br><span class="line">8）删除安装包与文件(可忽略)：</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> ~</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">rm</span> -rf nginx-1.13.7</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">rm</span> -rf nginx-1.13.7.tar.xz</span></span><br><span class="line"></span><br><span class="line">9）测试Nginx环境，服务器运行nginx，本地访问服务器ip</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: nginx</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: 服务器绑定的域名 或 ip:80</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Nginx命令</span></span><br><span class="line">1）启动</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: nginx</span></span><br><span class="line"></span><br><span class="line">2）关闭nginx</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: nginx -s stop</span></span><br><span class="line"></span><br><span class="line">3）重启nginx</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: nginx -s reload</span></span><br><span class="line"></span><br><span class="line">4）查看端口，强行关闭</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: ps -aux|grep nginx</span></span><br></pre></td></tr></table></figure><h3 id="Nginx转发静态文件"><a href="#Nginx转发静态文件" class="headerlink" title="Nginx转发静态文件"></a>Nginx转发静态文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1.先通过Xshell或Xftp上传打包好的前端文件</span><br><span class="line">cd ~</span><br><span class="line">1 mv ~/dist /home/html</span><br><span class="line">2 cd /usr/local/nginx/conf</span><br><span class="line">mv nginx.conf nginx.conf.bak</span><br><span class="line">3 vim nginx.conf</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name  127.0.0.1; # 改为自己的域名，没域名修改为127.0.0.1:80</span><br><span class="line">        charset utf-8;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /home/html; # html访问路径</span><br><span class="line">            index index.html; # html文件名称</span><br><span class="line">            try_files $uri $uri/ /index.html; # 解决单页面应用刷新404问题</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">esc</span><br><span class="line">:wq   # 保存并推出</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启nginx(访问服务器公网ip即可看到前端项目)</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="转发动态请求（uwsgi-django项目"><a href="#转发动态请求（uwsgi-django项目" class="headerlink" title="转发动态请求（uwsgi+django项目)"></a>转发动态请求（uwsgi+django项目)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1 <span class="built_in">mkdir</span> /home/project</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2 <span class="built_in">cd</span> /home/project</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3 git <span class="built_in">clone</span> xxxx（码云）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4 安装虚拟环境，创建虚拟环境，安装项目依赖</span></span><br><span class="line">pip3 install virtualenv</span><br><span class="line">pip3 install virtualenvwrapper</span><br><span class="line">2）建立虚拟环境软连接</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">ln</span> -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv</span></span><br><span class="line">3）配置虚拟环境：填入下方内容</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">~/ 表示用户家路径：root用户，就是在/root/.bash_profile</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: vim ~/.bash_profile</span>   </span><br><span class="line">填写内容    </span><br><span class="line">VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line">source /usr/local/python3/bin/virtualenvwrapper.sh  </span><br><span class="line">6）更新（执行）配置文件内容</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">source</span> ~/.bash_profile</span></span><br><span class="line">创建虚拟环境：mkvirtualenv happy    </span><br><span class="line">    </span><br><span class="line">pip install -r requirements.txt  （在指定的目录下）</span><br><span class="line">pip install uwsgi （虚拟和真实环境都需要安装）</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">:deactivate</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">:pip3 install uwsgi</span></span><br><span class="line"></span><br><span class="line">进行uwsgi服务配置，内容如下</span><br><span class="line">vim happy.xml</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">:i</span></span><br><span class="line">&lt;uwsgi&gt;    </span><br><span class="line">   &lt;socket&gt;127.0.0.1:8808&lt;/socket&gt; &lt;!-- 内部端口，自定义 --&gt; </span><br><span class="line">   &lt;chdir&gt;/home/project/happy/&lt;/chdir&gt; &lt;!-- 项目路径 --&gt;            </span><br><span class="line">   &lt;module&gt;happyapi.wsgi&lt;/module&gt;  &lt;!-- luffyapi为wsgi.py所在目录名--&gt; </span><br><span class="line">   &lt;processes&gt;4&lt;/processes&gt; &lt;!-- 进程数 --&gt;     </span><br><span class="line">   &lt;daemonize&gt;uwsgi.log&lt;/daemonize&gt; &lt;!-- 日志文件 --&gt;</span><br><span class="line">&lt;/uwsgi&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">:ESC</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: :wq</span></span><br><span class="line">1）启动uwsgi</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: uwsgi -x /home/project/happy/happy.xml</span></span><br><span class="line">关闭 uwsgi，重新启动 uwsgi</span><br><span class="line">pkill -f uwsgi -9</span><br><span class="line">2）重启nginx</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: nginx -s reload</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7 去向Nginx配置目录，备份配置，完全更新配置：填入下方内容</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name  127.0.0.1; # 改为自己的域名，没域名修改为127.0.0.1:80</span><br><span class="line">        charset utf-8;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /home/html; # html访问路径</span><br><span class="line">            index index.html; # html文件名称</span><br><span class="line">            try_files $uri $uri/ /index.html; # 解决单页面应用刷新404问题</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    # 新增的server</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8000;</span><br><span class="line">        server_name  127.0.0.1; # 改为自己的域名，没域名修改为127.0.0.1:80</span><br><span class="line">        charset utf-8;</span><br><span class="line">        location / &#123;</span><br><span class="line">           include uwsgi_params;</span><br><span class="line">           uwsgi_pass 127.0.0.1:8808;  # 端口要和uwsgi里配置的一样</span><br><span class="line">           uwsgi_param UWSGI_SCRIPT happyapi.wsgi;  #wsgi.py所在的目录名+.wsgi</span><br><span class="line">           uwsgi_param UWSGI_CHDIR /home/project/happy/; # 项目路径</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">9 mysql的root用户，登录，创建表luffyapi，创建用户，授权</span></span><br><span class="line">    1）管理员连接数据库</span><br><span class="line">    &gt;: mysql -uroot -p</span><br><span class="line"></span><br><span class="line">    2）创建数据库</span><br><span class="line">    &gt;: create database luffyapi default charset=utf8;</span><br><span class="line">        create database happyapi default charset=utf8;</span><br><span class="line"></span><br><span class="line">    3）设置权限账号密码：账号密码要与项目中配置的一致</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">:grant all privileges on happyapi.* to <span class="string">&#x27;happy&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;Happyapi123?&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">:grant all privileges on happyapi.* to <span class="string">&#x27;happy&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;Happyapi123?&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: flush privileges;</span></span><br><span class="line">    4）退出mysql</span><br><span class="line">    &gt;: quit;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">10 数据迁移创建超级用户</span></span><br><span class="line">python manage_pro.py makemigraions</span><br><span class="line">python manage_pro.py migrate</span><br><span class="line">python manage_pro.py createsuperuser</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">11 启动uwsgi和nginx（后端项目就可以了）</span></span><br><span class="line">    1）启动uwsgi</span><br><span class="line">    &gt;: uwsgi -x /home/project/happy/happyapi.xml</span><br><span class="line">    2）重启nginx</span><br><span class="line">    &gt;: nginx -s reload</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">千万要注意数据库版本：哭死测试环境用的8.x生产环境用的5.7，导入数据的时候直接把表删除了，但是数据还没导进去，结果又得胡乱一通，支付宝回调界面不能使用扫码，只能输入用户名和密码进行回调。</span><br><span class="line">Django版本降级,mysqlclient死活安装不上，可惜开发环境使用的django2.x，只能降低到django2.0.7</span><br><span class="line">后续django3.x可以忽略这个问题了，Ubuntu随便装mysqlclient，centos哭唧唧，鼓鼓捣捣又是一天,哭的出鼻血.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx,UWSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>celery的介绍与使用</title>
      <link href="/2022/09/11/celery%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/09/11/celery%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Celery异步任务框架"><a href="#Celery异步任务框架" class="headerlink" title="Celery异步任务框架"></a>Celery异步任务框架</h3><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><p>Celery 官网：<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a></p><p>Celery 官方文档英文版：<a href="http://docs.celeryproject.org/en/latest/index.html">http://docs.celeryproject.org/en/latest/index.html</a></p><p>Celery 官方文档中文版：<a href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1）可以不依赖任何服务器，通过自身命令，启动服务(内部支持socket)</span></span><br><span class="line"><span class="string">2）celery服务为为其他项目服务提供异步解决任务需求的</span></span><br><span class="line"><span class="string">注：会有两个服务同时运行，一个是项目服务，一个是celery服务，项目服务将需要异步处理的任务交给celery服务，celery就会在需要时异步完成项目的需求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">人是一个独立运行的服务 | 医院也是一个独立运行的服务</span></span><br><span class="line"><span class="string">正常情况下,人可以完成所有健康情况的动作,不需要医院的参与；但当人生病时，就会被医院接收，解决人生病问题</span></span><br><span class="line"><span class="string">人生病的处理方案交给医院来解决，所有人不生病时，医院独立运行，人生病时，医院就来解决人生病的需求</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="celery架构"><a href="#celery架构" class="headerlink" title="celery架构"></a>celery架构</h4><p>Celery的架构由三部分组成，消息中间件（message broker）、任务执行单元（worker）和 任务执行结果存储（task result store）组成。</p><p><img src="/2022/09/11/celery%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/1.png" alt="1"></p><h5 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h5><p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等</p><h5 id="任务执行单元"><a href="#任务执行单元" class="headerlink" title="任务执行单元"></a>任务执行单元</h5><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p><h5 id="任务结果存储"><a href="#任务结果存储" class="headerlink" title="任务结果存储"></a>任务结果存储</h5><p>Task result store用来存储Worker执行的任务的结果,Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>异步执行：解决耗时任务</p><p>延迟执行：解决延迟任务</p><p>定时执行：解决周期(周期)任务</p><h4 id="celery包封装结构"><a href="#celery包封装结构" class="headerlink" title="celery包封装结构"></a>celery包封装结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">    ├── celery_task  <span class="comment"># celery包</span></span><br><span class="line">    │   ├── __init__.py <span class="comment"># 包文件</span></span><br><span class="line">    │   ├── celery.py   <span class="comment"># celery连接和配置相关文件，且名字必须交celery.py</span></span><br><span class="line">    │   └── tasks.py    <span class="comment"># 所有任务函数</span></span><br><span class="line">    ├── add_task.py  <span class="comment"># 添加任务</span></span><br><span class="line">    └── get_result.py   <span class="comment"># 获取结果</span></span><br></pre></td></tr></table></figure><h4 id="celery基本使用"><a href="#celery基本使用" class="headerlink" title="celery基本使用"></a>celery基本使用</h4><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install celery </span><br><span class="line"><span class="comment"># windows下需要额外安装一个依赖</span></span><br><span class="line">pip install eventlet</span><br></pre></td></tr></table></figure><h5 id="celery-py"><a href="#celery-py" class="headerlink" title="celery.py"></a>celery.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1）创建app + 任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2）启动celery(app)服务：</span></span><br><span class="line"><span class="comment"># 非windows</span></span><br><span class="line"><span class="comment"># 命令：celery worker -A celery_task -l info</span></span><br><span class="line"><span class="comment"># windows：</span></span><br><span class="line"><span class="comment"># pip3 install eventlet</span></span><br><span class="line"><span class="comment"># celery worker -A celery_task -l info -P eventlet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3）添加任务：手动添加，要自定义添加任务的脚本，右键执行脚本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4）获取结果：手动获取，要自定义获取任务的脚本，右键执行脚本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line">broker = <span class="string">&#x27;redis://127.0.0.1:6379/1&#x27;</span></span><br><span class="line">backend = <span class="string">&#x27;redis://127.0.0.1:6379/2&#x27;</span></span><br><span class="line">app = Celery(broker=broker, backend=backend, include=[<span class="string">&#x27;celery_task.tasks&#x27;</span>])</span><br></pre></td></tr></table></figure><h5 id="tasks-py"><a href="#tasks-py" class="headerlink" title="tasks.py"></a>tasks.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">n, m</span>):</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n+m的结果：%s&#x27;</span> % (n + m))</span><br><span class="line">    <span class="keyword">return</span> n + m</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">low</span>(<span class="params">n, m</span>):</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n-m的结果：%s&#x27;</span> % (n - m))</span><br><span class="line">    <span class="keyword">return</span> n - m</span><br></pre></td></tr></table></figure><h5 id="add-task-py"><a href="#add-task-py" class="headerlink" title="add_task.py"></a>add_task.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_task <span class="keyword">import</span> tasks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加立即执行任务</span></span><br><span class="line">t1 = tasks.add.delay(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">t2 = tasks.low.delay(<span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(t1.<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加延迟任务</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line">eta=datetime.utcnow() + timedelta(seconds=<span class="number">10</span>)</span><br><span class="line">tasks.low.apply_async(args=(<span class="number">200</span>, <span class="number">50</span>), eta=eta)</span><br></pre></td></tr></table></figure><h5 id="get-result-py"><a href="#get-result-py" class="headerlink" title="get_result.py"></a>get_result.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_task.celery <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> = <span class="string">&#x27;21325a40-9d32-44b5-a701-9a31cc3c74b5&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">async</span> = AsyncResult(<span class="built_in">id</span>=<span class="built_in">id</span>, app=app)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">async</span>.successful():</span><br><span class="line">        result = <span class="keyword">async</span>.get()</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">async</span>.failed():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;任务失败&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">&#x27;PENDING&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;任务等待中被执行&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">&#x27;RETRY&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;任务异常后正在重试&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">&#x27;STARTED&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;任务已经开始被执行&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h4><h5 id="celery-py-1"><a href="#celery-py-1" class="headerlink" title="celery.py"></a>celery.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1）创建app + 任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2）启动celery(app)服务：</span></span><br><span class="line"><span class="comment"># 非windows</span></span><br><span class="line"><span class="comment"># 命令：celery worker -A celery_task -l info</span></span><br><span class="line"><span class="comment"># windows：</span></span><br><span class="line"><span class="comment"># pip3 install eventlet</span></span><br><span class="line"><span class="comment"># celery worker -A celery_task -l info -P eventlet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3）添加任务：自动添加任务，所以要启动一个添加任务的服务</span></span><br><span class="line"><span class="comment"># 命令：celery beat -A celery_task -l info</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4）获取结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">broker = <span class="string">&#x27;redis://127.0.0.1:6379/1&#x27;</span></span><br><span class="line">backend = <span class="string">&#x27;redis://127.0.0.1:6379/2&#x27;</span></span><br><span class="line">app = Celery(broker=broker, backend=backend, include=[<span class="string">&#x27;celery_task.tasks&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区</span></span><br><span class="line">app.conf.timezone = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="comment"># 是否使用UTC</span></span><br><span class="line">app.conf.enable_utc = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务的定时配置</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line">app.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;low-task&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;celery_task.tasks.low&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: timedelta(seconds=<span class="number">3</span>),</span><br><span class="line">        <span class="comment"># &#x27;schedule&#x27;: crontab(hour=8, day_of_week=1),  # 每周一早八点</span></span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="number">300</span>, <span class="number">150</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="tasks-py-1"><a href="#tasks-py-1" class="headerlink" title="tasks.py"></a>tasks.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">n, m</span>):</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n+m的结果：%s&#x27;</span> % (n + m))</span><br><span class="line">    <span class="keyword">return</span> n + m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">low</span>(<span class="params">n, m</span>):</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n-m的结果：%s&#x27;</span> % (n - m))</span><br><span class="line">    <span class="keyword">return</span> n - m</span><br></pre></td></tr></table></figure><h5 id="get-result-py-1"><a href="#get-result-py-1" class="headerlink" title="get_result.py"></a>get_result.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_task.celery <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> = <span class="string">&#x27;21325a40-9d32-44b5-a701-9a31cc3c74b5&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">async</span> = AsyncResult(<span class="built_in">id</span>=<span class="built_in">id</span>, app=app)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">async</span>.successful():</span><br><span class="line">        result = <span class="keyword">async</span>.get()</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">async</span>.failed():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;任务失败&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">&#x27;PENDING&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;任务等待中被执行&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">&#x27;RETRY&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;任务异常后正在重试&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">&#x27;STARTED&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;任务已经开始被执行&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="django中使用"><a href="#django中使用" class="headerlink" title="django中使用"></a>django中使用</h4><h5 id="celery-py-2"><a href="#celery-py-2" class="headerlink" title="celery.py"></a>celery.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">celery框架django项目工作流程</span></span><br><span class="line"><span class="string">1）加载django配置环境</span></span><br><span class="line"><span class="string">2）创建Celery框架对象app，配置broker和backend，得到的app就是worker</span></span><br><span class="line"><span class="string">3）给worker对应的app添加可处理的任务函数，用include配置给worker的app</span></span><br><span class="line"><span class="string">4）完成提供的任务的定时配置app.conf.beat_schedule</span></span><br><span class="line"><span class="string">5）启动celery服务，运行worker，执行任务</span></span><br><span class="line"><span class="string">6）启动beat服务，运行beat，添加任务</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">重点：由于采用了django的反射机制，使用celery.py所在的celery_task包必须放置项目的根目录下</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一、加载django配置环境</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;luffyapi.settings.dev&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二、加载celery配置环境</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="comment"># broker</span></span><br><span class="line">broker = <span class="string">&#x27;redis://127.0.0.1:6379/0&#x27;</span></span><br><span class="line"><span class="comment"># backend</span></span><br><span class="line">backend = <span class="string">&#x27;redis://127.0.0.1:6379/1&#x27;</span></span><br><span class="line"><span class="comment"># worker</span></span><br><span class="line">app = Celery(broker=broker, backend=backend, include=[<span class="string">&#x27;celery_task.tasks&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区</span></span><br><span class="line">app.conf.timezone = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="comment"># 是否使用UTC</span></span><br><span class="line">app.conf.enable_utc = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务的定时配置</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line">app.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;update-banner-list&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;celery_task.tasks.update_banner_list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: timedelta(seconds=<span class="number">10</span>),</span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="tasks-py-2"><a href="#tasks-py-2" class="headerlink" title="tasks.py"></a>tasks.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="keyword">from</span> home <span class="keyword">import</span> models, serializers</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_banner_list</span>():</span><br><span class="line">    queryset = models.Banner.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, is_show=<span class="literal">True</span>).order_by(<span class="string">&#x27;-orders&#x27;</span>)[:settings.BANNER_COUNT]</span><br><span class="line">    banner_list = serializers.BannerSerializer(queryset, many=<span class="literal">True</span>).data</span><br><span class="line">    <span class="comment"># 拿不到request对象，所以头像的连接base_url要自己组装</span></span><br><span class="line">    <span class="keyword">for</span> banner <span class="keyword">in</span> banner_list:</span><br><span class="line">        banner[<span class="string">&#x27;image&#x27;</span>] = <span class="string">&#x27;http://127.0.0.1:8000%s&#x27;</span> % banner[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    cache.<span class="built_in">set</span>(<span class="string">&#x27;banner_list&#x27;</span>, banner_list, <span class="number">86400</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy Education</title>
      <link href="/2022/09/09/Happy-Education/"/>
      <url>/2022/09/09/Happy-Education/</url>
      
        <content type="html"><![CDATA[<h3 id="更换pip源"><a href="#更换pip源" class="headerlink" title="更换pip源"></a>更换pip源</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1、采用国内源，加速下载模块的速度</span></span><br><span class="line"><span class="string">2、常用pip源：</span></span><br><span class="line"><span class="string">-- 豆瓣：https://pypi.douban.com/simple</span></span><br><span class="line"><span class="string">-- 阿里：https://mirrors.aliyun.com/pypi/simple</span></span><br><span class="line"><span class="string">3、加速安装的命令：</span></span><br><span class="line"><span class="string">-- &gt;: pip install -i https://pypi.douban.com/simple 模块名</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1、文件管理器文件路径地址栏敲：%APPDATA% 回车，快速进入 C:\Users\电脑用户\AppData\Roaming 文件夹中</span></span><br><span class="line"><span class="string">2、新建 pip 文件夹并在文件夹中新建 pip.ini 配置文件</span></span><br><span class="line"><span class="string">3、新增 pip.ini 配置文件内容</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="MacOS、Linux"><a href="#MacOS、Linux" class="headerlink" title="MacOS、Linux"></a>MacOS、Linux</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1、在用户根目录下 ~ 下创建 .pip 隐藏文件夹，如果已经有了可以跳过</span></span><br><span class="line"><span class="string">-- mkdir ~/.pip</span></span><br><span class="line"><span class="string">2、进入 .pip 隐藏文件夹并创建 pip.conf 配置文件</span></span><br><span class="line"><span class="string">-- cd ~/.pip &amp;&amp; touch pip.conf</span></span><br><span class="line"><span class="string">3、启动 Finder(访达) 按 cmd+shift+g 来的进入，输入 ~/.pip 回车进入</span></span><br><span class="line"><span class="string">4、新增 pip.conf 配置文件内容</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[global]</span></span><br><span class="line"><span class="string">index-url = http://pypi.douban.com/simple</span></span><br><span class="line"><span class="string">[install]</span></span><br><span class="line"><span class="string">use-mirrors =true</span></span><br><span class="line"><span class="string">mirrors =http://pypi.douban.com/simple/</span></span><br><span class="line"><span class="string">trusted-host =pypi.douban.com</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[global]</span></span><br><span class="line"><span class="string">index-url = https://mirrors.aliyun.com/pypi/simple</span></span><br><span class="line"><span class="string">[install]</span></span><br><span class="line"><span class="string">use-mirrors =true</span></span><br><span class="line"><span class="string">mirrors =https://mirrors.aliyun.com/pypi/simple</span></span><br><span class="line"><span class="string">trusted-host =mirrors.aliyun.com</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper<span class="literal">-win</span></span><br><span class="line"><span class="comment"># 添加系统环境变量</span></span><br><span class="line"><span class="comment"># 变量名：WORKON_HOME  变量值：自定义存放虚拟环境的绝对路径</span></span><br></pre></td></tr></table></figure><h3 id="DJango项目的创建"><a href="#DJango项目的创建" class="headerlink" title="DJango项目的创建"></a>DJango项目的创建</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv happy</span><br><span class="line">workon happy</span><br><span class="line">pip install django==<span class="number">2.2</span>.<span class="number">2</span></span><br><span class="line">pip install djangorestframework</span><br><span class="line">pip install mysqlclient</span><br><span class="line">django<span class="literal">-admin</span> startproject happyapi</span><br></pre></td></tr></table></figure><p>使用pycharm打开项目，并选择提前备好的虚拟环境</p><h3 id="重构后台项目目录"><a href="#重构后台项目目录" class="headerlink" title="重构后台项目目录"></a>重构后台项目目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">├── happyapi</span></span><br><span class="line"><span class="string">├── logs/# 项目运行时/开发时日志目录 </span></span><br><span class="line"><span class="string">    ├── manage.py# 脚本文件</span></span><br><span class="line"><span class="string">    ├── happyapi/      # 项目主应用，开发时的代码保存 - 包</span></span><br><span class="line"><span class="string">     ├── apps/      # 开发者的代码保存目录，以模块[子应用]为目录保存 - 包</span></span><br><span class="line"><span class="string">        ├── libs/      # 第三方类库的保存目录[第三方组件、模块] - 包</span></span><br><span class="line"><span class="string">    ├── settings/  # 配置目录 - 包</span></span><br><span class="line"><span class="string">├── dev.py   # 项目开发时的本地配置</span></span><br><span class="line"><span class="string">└── prod.py  # 项目上线时的运行配置</span></span><br><span class="line"><span class="string">├── urls.py    # 总路由</span></span><br><span class="line"><span class="string">└── utils/     # 多个模块[子应用]的公共函数类库[自己开发的组件]</span></span><br><span class="line"><span class="string">    └── scripts/       # 保存项目运营时的脚本文件 - 文件夹</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.修改 wsgi.py 与 manage.py 两个文件：</span></span><br><span class="line"><span class="string"># manage.py</span></span><br><span class="line"><span class="string">os.environ.setdefault(&#x27;DJANGO_SETTINGS_MODULE&#x27;, &#x27;happyapi.settings.dev&#x27;)</span></span><br><span class="line"><span class="string"># wsgi.py</span></span><br><span class="line"><span class="string">os.environ.setdefault(&#x27;DJANGO_SETTINGS_MODULE&#x27;, &#x27;happyapi.settings.prod&#x27;)</span></span><br><span class="line"><span class="string"># manage_prod.py 复制manage.py的内容修改部分,后续上线使用的版本</span></span><br><span class="line"><span class="string">os.environ.setdefault(&#x27;DJANGO_SETTINGS_MODULE&#x27;, &#x27;happyapi.settings.prod&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.将settings.py删除或改名，内容拷贝到settings/dev.py中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.修改dev.py文件内容</span></span><br><span class="line"><span class="string">LANGUAGE_CODE = &#x27;zh-hans&#x27;</span></span><br><span class="line"><span class="string">TIME_ZONE = &#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">USE_TZ = False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4.在任何一个__init__.py文件中测试默认配置文件是否是dev.py文件</span></span><br><span class="line"><span class="string">from django.conf import settings</span></span><br><span class="line"><span class="string">print(settings)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><h5 id="dev-py"><a href="#dev-py" class="headerlink" title="dev.py"></a>dev.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境变量操作：happyapi包、BASE_DIR与apps文件夹都要添加到环境变量</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, BASE_DIR)</span><br><span class="line">APPS_DIR = os.path.join(BASE_DIR, <span class="string">&#x27;apps&#x27;</span>)</span><br><span class="line">sys.path.insert(<span class="number">1</span>, APPS_DIR)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="封装logger日志"><a href="#封装logger日志" class="headerlink" title="封装logger日志"></a>封装logger日志</h4><h5 id="dev-py-1"><a href="#dev-py-1" class="headerlink" title="dev.py"></a>dev.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 真实项目上线后，日志文件打印级别不能过低，因为一次日志记录就是一次文件io操作</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;verbose&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;%(levelname)s %(module)s %(lineno)d %(message)s&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;filters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;require_debug_true&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;()&#x27;</span>: <span class="string">&#x27;django.utils.log.RequireDebugTrue&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># 实际开发建议使用WARNING</span></span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filters&#x27;</span>: [<span class="string">&#x27;require_debug_true&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;simple&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;file&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># 实际开发建议使用ERROR</span></span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,</span><br><span class="line">            <span class="comment"># 日志位置,日志文件名,日志保存目录必须手动创建，注：这里的文件路径要注意BASE_DIR代表的是小happyapi</span></span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: os.path.join(os.path.dirname(BASE_DIR), <span class="string">&quot;logs&quot;</span>, <span class="string">&quot;happy.log&quot;</span>),</span><br><span class="line">            <span class="comment"># 日志文件的最大值,这里我们设置300M</span></span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">300</span> * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">            <span class="comment"># 日志文件的数量,设置最大日志数量为100</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="comment"># 日志格式:详细格式</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;verbose&#x27;</span>,</span><br><span class="line">            <span class="comment"># 文件内容编码</span></span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 日志对象</span></span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;django&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>, <span class="string">&#x27;file&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>, <span class="comment"># 是否让日志信息继续冒泡给其他的日志处理系统</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="happyapi-x2F-utils-x2F-logging-py"><a href="#happyapi-x2F-utils-x2F-logging-py" class="headerlink" title="happyapi&#x2F;utils&#x2F;logging.py"></a>happyapi&#x2F;utils&#x2F;logging.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># 名字跟development日志对象下的名字对应</span></span><br><span class="line">log = logging.getLogger(<span class="string">&#x27;django&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="封装项目异常处理"><a href="#封装项目异常处理" class="headerlink" title="封装项目异常处理"></a>封装项目异常处理</h4><h5 id="utils-x2F-exceptions-py"><a href="#utils-x2F-exceptions-py" class="headerlink" title="utils&#x2F;exceptions.py"></a>utils&#x2F;exceptions.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler <span class="keyword">as</span> drf_exception_handler</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> utils.logging <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exception_handler</span>(<span class="params">exc, context</span>):</span><br><span class="line">    response = drf_exception_handler(exc, context)</span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 记录服务器异常</span></span><br><span class="line">        logger.critical(<span class="string">&#x27;%s&#x27;</span> % exc)</span><br><span class="line">        response = Response(&#123;<span class="string">&#x27;detail&#x27;</span>: <span class="string">&#x27;服务器异常，请重试...&#x27;</span>&#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h5 id="dev-py-2"><a href="#dev-py-2" class="headerlink" title="dev.py"></a>dev.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;happyapi.utils.exception.exception_handler&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装全局Response对象"><a href="#封装全局Response对象" class="headerlink" title="封装全局Response对象"></a>封装全局Response对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APIResponse</span>(<span class="title class_ inherited__">Response</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, code=<span class="number">200</span>, msg=<span class="string">&#x27;成功&#x27;</span>, result=<span class="literal">None</span>, status=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 headers=<span class="literal">None</span>, content_type=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">        back_dic = &#123;</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>: code,</span><br><span class="line">            <span class="string">&#x27;msg&#x27;</span>: msg,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;result&#x27;</span>] = result</span><br><span class="line">        back_dic.update(kwargs)</span><br><span class="line">        <span class="built_in">super</span>().__init__(data=back_dic, status=status, headers=headers)</span><br></pre></td></tr></table></figure><h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.管理员连接数据库</span></span><br><span class="line"><span class="string">&gt;: mysql -uroot -proot</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.创建数据库</span></span><br><span class="line"><span class="string">&gt;: create database happyapi default charset=utf8mb4;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.查看用户</span></span><br><span class="line"><span class="string">&gt;: select user,host,password from mysql.user;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 5.7往后的版本</span></span><br><span class="line"><span class="string">&gt;: select user,host,authentication_string from mysql.user;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="指定数据库配置指定账户"><a href="#指定数据库配置指定账户" class="headerlink" title="指定数据库配置指定账户"></a>指定数据库配置指定账户</h4><h5 id="mysql5-7"><a href="#mysql5-7" class="headerlink" title="mysql5.7"></a>mysql5.7</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">设置权限账号密码</span></span><br><span class="line"><span class="string"># 授权账号命令：grant 权限(create, update) on 库.表 to &#x27;账号&#x27;@&#x27;host&#x27; identified by &#x27;密码&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.配置任意ip都可以连入数据库的账户</span></span><br><span class="line"><span class="string">&gt;: grant all privileges on happyapi.* to &#x27;happy&#x27;@&#x27;%&#x27; identified by &#x27;happyapi&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.由于数据库版本的问题，可能本地还连接不上，就给本地用户单独配置</span></span><br><span class="line"><span class="string">&gt;: grant all privileges on happyapi.* to &#x27;happy&#x27;@&#x27;localhost&#x27; identified by &#x27;happyapi&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.刷新一下权限</span></span><br><span class="line"><span class="string">&gt;: flush privileges;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">只能操作happyapi数据库的账户</span></span><br><span class="line"><span class="string">账号：happy</span></span><br><span class="line"><span class="string">密码：happyapi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="mysql8-0"><a href="#mysql8-0" class="headerlink" title="mysql8.0"></a>mysql8.0</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.创建一个新用户</span></span><br><span class="line"><span class="string">&gt;: create user happyapi@&#x27;localhost&#x27; identified by &#x27;要设置的密码&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.赋予一个库的所有操作权限例如happyapi库</span></span><br><span class="line"><span class="string">&gt;: grant all privileges on happyapi.* to &#x27;happy&#x27;@&#x27;localhost&#x27; with grant option;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.刷新一下权限</span></span><br><span class="line"><span class="string">&gt;: flush privileges;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">只能操作happyapi数据库的账户</span></span><br><span class="line"><span class="string">账号：happy</span></span><br><span class="line"><span class="string">密码：happyapi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="项目配置文件配置"><a href="#项目配置文件配置" class="headerlink" title="项目配置文件配置"></a>项目配置文件配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;happyapi&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;happy&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;happyapi&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Windows安装上 mysqlclient则无需处理</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h4 id="CentOS7-6安装mysqlclient"><a href="#CentOS7-6安装mysqlclient" class="headerlink" title="CentOS7.6安装mysqlclient"></a>CentOS7.6安装mysqlclient</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line">yum -y install mysql-devel</span><br><span class="line">pip3 install mysqlclient</span><br></pre></td></tr></table></figure><h3 id="创建用户模块"><a href="#创建用户模块" class="headerlink" title="创建用户模块"></a>创建用户模块</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">前提：在 happy 虚拟环境下</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>.终端从项目根目录进入apps目录</span><br><span class="line">&gt;: <span class="built_in">cd</span> happyapi &amp; <span class="built_in">cd</span> apps</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.创建app</span><br><span class="line">&gt;: python ../../manage.py startapp user</span><br></pre></td></tr></table></figure><h4 id="创建User表"><a href="#创建User表" class="headerlink" title="创建User表"></a>创建User表</h4><h5 id="apps-x2F-user-x2F-models-py"><a href="#apps-x2F-user-x2F-models-py" class="headerlink" title="apps&#x2F;user&#x2F;models.py"></a>apps&#x2F;user&#x2F;models.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 需要pillow包的支持</span></span><br><span class="line">    icon = models.ImageField(upload_to=<span class="string">&#x27;icon&#x27;</span>, default=<span class="string">&#x27;icon/default.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;happy_user&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;用户表&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure><h4 id="注册user模块配置User表"><a href="#注册user模块配置User表" class="headerlink" title="注册user模块配置User表"></a>注册user模块配置User表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义User表</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;user.User&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置media"><a href="#配置media" class="headerlink" title="配置media"></a>配置media</h4><h5 id="dev-py-3"><a href="#dev-py-3" class="headerlink" title="dev.py"></a>dev.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">&#x27;/media/&#x27;</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;media&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="media目录配置"><a href="#media目录配置" class="headerlink" title="media目录配置"></a>media目录配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">├── happyapi</span></span><br><span class="line"><span class="string">    └──happyapi/</span></span><br><span class="line"><span class="string">       └──media/  </span></span><br><span class="line"><span class="string">└──icon </span></span><br><span class="line"><span class="string">└── default.png</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="主路由配置"><a href="#主路由配置" class="headerlink" title="主路由配置"></a>主路由配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path, include</span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;home/&#x27;</span>, include(<span class="string">&#x27;home.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;user/&#x27;</span>, include(<span class="string">&#x27;user.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;course/&#x27;</span>, include(<span class="string">&#x27;course.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;order/&#x27;</span>, include(<span class="string">&#x27;order.urls&#x27;</span>)),</span><br><span class="line">    <span class="comment"># 暴露了media资源文件夹</span></span><br><span class="line">    re_path(<span class="string">&#x27;media/(?P&lt;path&gt;.*)&#x27;</span>, serve, &#123;<span class="string">&#x27;document_root&#x27;</span>: settings.MEDIA_ROOT&#125;)</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="子路由：user-x2F-urls-py"><a href="#子路由：user-x2F-urls-py" class="headerlink" title="子路由：user&#x2F;urls.py"></a>子路由：user&#x2F;urls.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> SimpleRouter</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">router = SimpleRouter()</span><br><span class="line">router.register(<span class="string">&#x27;&#x27;</span>, views.LoginView, basename=<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">router.register(<span class="string">&#x27;&#x27;</span>, views.SendSMSView, basename=<span class="string">&#x27;sendsms&#x27;</span>)</span><br><span class="line">router.register(<span class="string">&#x27;register&#x27;</span>, views.RegisterView, basename=<span class="string">&#x27;register&#x27;</span>)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1）去向项目根路径所在目录的终端</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2）安装pillow模块</span></span><br><span class="line"><span class="string">pip install pillow</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3）数据库迁移</span></span><br><span class="line"><span class="string">python manage.py makemigrations</span></span><br><span class="line"><span class="string">python manage.py migrate</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="创建后台主页模块"><a href="#创建后台主页模块" class="headerlink" title="创建后台主页模块"></a>创建后台主页模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">前提：在 happy 虚拟环境下</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>终端从项目根目录进入apps目录</span><br><span class="line">&gt;: cd happyapi &amp; cd apps</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>创建app</span><br><span class="line">&gt;: python ../../manage.py startapp home</span><br></pre></td></tr></table></figure><h4 id="Banner数据表model设计"><a href="#Banner数据表model设计" class="headerlink" title="Banner数据表model设计"></a>Banner数据表model设计</h4><h5 id="utils-x2F-model-py"><a href="#utils-x2F-model-py" class="headerlink" title="utils&#x2F;model.py"></a>utils&#x2F;model.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseModel</span>(models.Model):</span><br><span class="line">    created_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;创建时间&#x27;</span>)</span><br><span class="line">    updated_time = models.DateTimeField(auto_now=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;最后更新时间&#x27;</span>)</span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&#x27;是否删除&#x27;</span>)</span><br><span class="line">    is_show = models.BooleanField(default=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;是否上架&#x27;</span>)</span><br><span class="line">    orders = models.IntegerField(verbose_name=<span class="string">&#x27;优先级&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        abstract = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h5 id="home-x2F-models-py"><a href="#home-x2F-models-py" class="headerlink" title="home&#x2F;models.py"></a>home&#x2F;models.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.model <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Banner</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">16</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">    image = models.ImageField(upload_to=<span class="string">&#x27;banner&#x27;</span>, verbose_name=<span class="string">&#x27;图片&#x27;</span>)</span><br><span class="line">    link = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&#x27;跳转链接&#x27;</span>)</span><br><span class="line">    info = models.TextField(verbose_name=<span class="string">&#x27;详情&#x27;</span>)  <span class="comment"># 也可以用详情表，宽高出处</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;happy_banner&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;轮播图表&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><h4 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;: python manage.py makemigrations</span><br><span class="line">&gt;: python manage.py migrate</span><br></pre></td></tr></table></figure><h4 id="注册home模块"><a href="#注册home模块" class="headerlink" title="注册home模块"></a>注册home模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="设计Banner数据接口"><a href="#设计Banner数据接口" class="headerlink" title="设计Banner数据接口"></a>设计Banner数据接口</h4><h5 id="home-x2F-serializers-py"><a href="#home-x2F-serializers-py" class="headerlink" title="home&#x2F;serializers.py"></a>home&#x2F;serializers.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BannerSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Banner</span><br><span class="line">        fields = [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="string">&#x27;link&#x27;</span>]</span><br></pre></td></tr></table></figure><h5 id="home-x2F-views-py"><a href="#home-x2F-views-py" class="headerlink" title="home&#x2F;views.py"></a>home&#x2F;views.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models, serializers</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BannerViewSet</span>(ModelViewSet, mixins.ListModelMixin):</span><br><span class="line">    queryset = models.Banner.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, is_show=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serializers.BannerSerializer</span><br></pre></td></tr></table></figure><h5 id="home-x2F-urls-py"><a href="#home-x2F-urls-py" class="headerlink" title="home&#x2F;urls.py"></a>home&#x2F;urls.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> SimpleRouter</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">router = SimpleRouter()</span><br><span class="line">router.register(<span class="string">&#x27;banner&#x27;</span>, views.BannerView)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="接口缓存版本"><a href="#接口缓存版本" class="headerlink" title="接口缓存版本"></a>接口缓存版本</h4><h5 id="home-x2F-views-py-1"><a href="#home-x2F-views-py-1" class="headerlink" title="home&#x2F;views.py"></a>home&#x2F;views.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BannerView</span>(GenericViewSet, ListModelMixin):</span><br><span class="line">    queryset = models.Banner.objects.<span class="built_in">filter</span>(is_show=<span class="literal">True</span>, is_delete=<span class="literal">False</span>).order_by(<span class="string">&#x27;-orders&#x27;</span>)[:settings.BANNER_COUNTER]</span><br><span class="line">    serializer_class = serializer.BannerModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 先从缓存中拿数据</span></span><br><span class="line">        banner_list = cache.get(<span class="string">&#x27;banner_list&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> banner_list:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;走的数据库操作&#x27;</span>)</span><br><span class="line">            response = <span class="built_in">super</span>().<span class="built_in">list</span>(request, *args, **kwargs)</span><br><span class="line">            <span class="comment"># 拿到数据后设置到将response的data加入redis缓存中</span></span><br><span class="line">            cache.<span class="built_in">set</span>(<span class="string">&#x27;banner_list&#x27;</span>, response.data, <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>)</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">return</span> Response(data=banner_list)</span><br></pre></td></tr></table></figure><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><h5 id="自定义常量配置文件：settings-x2F-const-py"><a href="#自定义常量配置文件：settings-x2F-const-py" class="headerlink" title="自定义常量配置文件：settings&#x2F;const.py"></a>自定义常量配置文件：settings&#x2F;const.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义的常量配置文件，在settings中 from 该文件 import *，将名字全部丢给settings</span></span><br><span class="line">BANNER_COUNT = <span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="加载自定义配置名称空间：settings-x2F-dev-py"><a href="#加载自定义配置名称空间：settings-x2F-dev-py" class="headerlink" title="加载自定义配置名称空间：settings&#x2F;dev.py"></a>加载自定义配置名称空间：settings&#x2F;dev.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载自定义配置名称空间</span></span><br><span class="line"><span class="keyword">from</span> .const <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h5 id="在轮播图接口中应用：banner-x2F-views-py"><a href="#在轮播图接口中应用：banner-x2F-views-py" class="headerlink" title="在轮播图接口中应用：banner&#x2F;views.py"></a>在轮播图接口中应用：banner&#x2F;views.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BannerViewSet</span>(ModelViewSet, mixins.ListModelMixin):</span><br><span class="line">    queryset = models.Banner.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, is_show=<span class="literal">True</span>).order_by(<span class="string">&#x27;-orders&#x27;</span>)[:settings.BANNER_COUNT]</span><br><span class="line">    serializer_class = serializers.BannerSerializer</span><br></pre></td></tr></table></figure><h4 id="接口路由"><a href="#接口路由" class="headerlink" title="接口路由"></a>接口路由</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:<span class="number">8000</span>/home/banners/</span><br></pre></td></tr></table></figure><h3 id="xadmin后台管理"><a href="#xadmin后台管理" class="headerlink" title="xadmin后台管理"></a>xadmin后台管理</h3><h4 id="安装xadmin"><a href="#安装xadmin" class="headerlink" title="安装xadmin"></a>安装xadmin</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install https://codeload.github.com/sshwsfc/xadmin/zip/django2</span><br></pre></td></tr></table></figure><h4 id="注册xadmin"><a href="#注册xadmin" class="headerlink" title="注册xadmin"></a>注册xadmin</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="comment"># xadmin主体模块</span></span><br><span class="line">    <span class="string">&#x27;xadmin&#x27;</span>,</span><br><span class="line">    <span class="comment"># 渲染表格模块</span></span><br><span class="line">    <span class="string">&#x27;crispy_forms&#x27;</span>,</span><br><span class="line">    <span class="comment"># 为模型通过版本控制，可以回滚数据</span></span><br><span class="line">    <span class="string">&#x27;reversion&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="xadmin：需要自己的数据库模型类，完成数据库迁移"><a href="#xadmin：需要自己的数据库模型类，完成数据库迁移" class="headerlink" title="xadmin：需要自己的数据库模型类，完成数据库迁移"></a>xadmin：需要自己的数据库模型类，完成数据库迁移</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h4 id="设置主路由替换掉admin：主urls-py"><a href="#设置主路由替换掉admin：主urls-py" class="headerlink" title="设置主路由替换掉admin：主urls.py"></a>设置主路由替换掉admin：主urls.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xadmin的依赖</span></span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line">xadmin.autodiscover()</span><br><span class="line"><span class="comment"># xversion模块自动注册需要版本控制的 Model</span></span><br><span class="line"><span class="keyword">from</span> xadmin.plugins <span class="keyword">import</span> xversion</span><br><span class="line">xversion.register_models()</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    path(<span class="string">r&#x27;xadmin/&#x27;</span>, xadmin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目根目录下的终端</span></span><br><span class="line">python manage.py createsuperuser</span><br><span class="line"><span class="comment"># 账号密码设置：admin | admin123</span></span><br></pre></td></tr></table></figure><h4 id="完成xadmin全局配置：新建home-x2F-adminx-py"><a href="#完成xadmin全局配置：新建home-x2F-adminx-py" class="headerlink" title="完成xadmin全局配置：新建home&#x2F;adminx.py"></a>完成xadmin全局配置：新建home&#x2F;adminx.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># home/adminx.py</span></span><br><span class="line"><span class="comment"># xadmin全局配置</span></span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"><span class="keyword">from</span> xadmin <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GlobalSettings</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;xadmin的全局配置&quot;&quot;&quot;</span></span><br><span class="line">    site_title = <span class="string">&quot;快乐教育&quot;</span>  <span class="comment"># 设置站点标题</span></span><br><span class="line">    site_footer = <span class="string">&quot;韭菜教育有限公司&quot;</span>  <span class="comment"># 设置站点的页脚</span></span><br><span class="line">    menu_style = <span class="string">&quot;accordion&quot;</span>  <span class="comment"># 设置菜单折叠</span></span><br><span class="line"></span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSettings)</span><br></pre></td></tr></table></figure><h4 id="在adminx-py中注册model：home-x2F-adminx-py"><a href="#在adminx-py中注册model：home-x2F-adminx-py" class="headerlink" title="在adminx.py中注册model：home&#x2F;adminx.py"></a>在adminx.py中注册model：home&#x2F;adminx.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># 注册</span></span><br><span class="line">xadmin.site.register(models.Banner)</span><br></pre></td></tr></table></figure><h3 id="前后台分离跨域交互"><a href="#前后台分离跨域交互" class="headerlink" title="前后台分离跨域交互"></a>前后台分离跨域交互</h3><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><p>同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现</p><p>请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同;比如:我在本地上的域名是127.0.0.1:8000,请求另外一个域名：127.0.0.1:8001一段数据浏览器上就会报错，这个就是同源策略的保护,如果浏览器对javascript没有同源策略的保护,那么一些重要的机密网站将会很危险。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已拦截跨源请求：同源策略禁止读取位于 http://127.0.0.1:8001/SendAjax/ 的远程资源。（原因：CORS 头缺少 &#x27;Access-Control-Allow-Origin&#x27;）。</span><br></pre></td></tr></table></figure><p>但是注意，项目2中的访问已经发生了，说明是浏览器对非同源请求返回的结果做了拦截</p><h4 id="CORS（跨域资源共享）简介"><a href="#CORS（跨域资源共享）简介" class="headerlink" title="CORS（跨域资源共享）简介"></a>CORS（跨域资源共享）简介</h4><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p><h4 id="CORS基本流程"><a href="#CORS基本流程" class="headerlink" title="CORS基本流程"></a>CORS基本流程</h4><p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。<br>浏览器发出CORS简单请求，只需要在头信息之中增加一个Origin字段。浏览器发出CORS非简单请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</p><h4 id="CORS两种请求详解"><a href="#CORS两种请求详解" class="headerlink" title="CORS两种请求详解"></a>CORS两种请求详解</h4><p>只要同时满足以下两大条件，就属于简单请求。</p><ol><li>请求方法是以下三种方法之一：<br>HEAD<br>GET<br>POST<br>2）HTTP的头信息不超出以下几种字段：<br>Accept<br>Accept-Language<br>Content-Language<br>Last-Event-ID<br>Content-Type：只限于三个值application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</li></ol><p>凡是不同时满足上面两个条件，就属于非简单请求。浏览器对这两种请求的处理，是不一样的。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 简单请求和非简单请求的区别？</span><br><span class="line"></span><br><span class="line">   简单请求：一次请求</span><br><span class="line">   非简单请求：两次请求，在发送数据之前会先发一次请求用于做“预检”，只有“预检”通过后才再发送一次请求用于数据传输。</span><br><span class="line"><span class="bullet">*</span> 关于“预检”</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 请求方式：OPTIONS</span><br><span class="line"><span class="bullet">-</span> “预检”其实做检查，检查如果通过则允许传输数据，检查不通过则不再发送真正想要发送的消息</span><br><span class="line"><span class="bullet">-</span> 如何“预检”</span><br><span class="line"><span class="code">     =&gt; 如果复杂请求是PUT等请求，则服务端需要设置允许某请求，否则“预检”不通过</span></span><br><span class="line"><span class="code">        Access-Control-Request-Method</span></span><br><span class="line"><span class="code">     =&gt; 如果复杂请求设置了请求头，则服务端需要设置允许某请求头，否则“预检”不通过</span></span><br><span class="line"><span class="code">        Access-Control-Request-Headers</span></span><br></pre></td></tr></table></figure><p><strong>支持跨域，简单请求</strong></p><p>服务器设置响应头：Access-Control-Allow-Origin &#x3D; ‘域名’ 或 ‘*’</p><p><strong>支持跨域，复杂请求</strong></p><p>由于复杂请求时，首先会发送“预检”请求，如果“预检”成功，则发送真实数据。</p><ul><li>“预检”请求时，允许请求方式则需服务器设置响应头：Access-Control-Request-Method</li><li>“预检”请求时，允许请求头则需服务器设置响应头：Access-Control-Request-Headers</li></ul><h4 id="Django项目中支持CORS"><a href="#Django项目中支持CORS" class="headerlink" title="Django项目中支持CORS"></a>Django项目中支持CORS</h4><p>在返回的结果中加入允许信息（简单请求）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">request</span>):</span><br><span class="line">    obj=HttpResponse(json.dumps(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>&#125;))</span><br><span class="line">    <span class="comment"># obj[&#x27;Access-Control-Allow-Origin&#x27;]=&#x27;*&#x27;</span></span><br><span class="line">    obj[<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>]=<span class="string">&#x27;http://127.0.0.1:8001&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><h5 id="放到中间件处理复杂和简单请求："><a href="#放到中间件处理复杂和简单请求：" class="headerlink" title="放到中间件处理复杂和简单请求："></a>放到中间件处理复杂和简单请求：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CorsMiddleWare</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self,request,response</span>):</span><br><span class="line">        <span class="keyword">if</span> request.method==<span class="string">&quot;OPTIONS&quot;</span>:</span><br><span class="line">            response[<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>]=<span class="string">&quot;Content-Type&quot;</span></span><br><span class="line">        <span class="comment"># 可以加 *</span></span><br><span class="line">        response[<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>] = <span class="string">&quot;http://localhost:8080&quot;</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h4 id="使用django-cors-headers处理跨域"><a href="#使用django-cors-headers处理跨域" class="headerlink" title="使用django-cors-headers处理跨域"></a>使用django-cors-headers处理跨域</h4><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django<span class="literal">-cors-headers</span></span><br></pre></td></tr></table></figure><p>插件参考地址：<a href="https://github.com/ottoyiu/django-cors-headers/">https://github.com/ottoyiu/django-cors-headers/</a></p><h5 id="项目配置-dev-py"><a href="#项目配置-dev-py" class="headerlink" title="项目配置:dev.py"></a>项目配置:dev.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册app</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">...</span><br><span class="line"><span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加中间件</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">...</span><br><span class="line"><span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许跨域源</span></span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 允许的请求方法</span></span><br><span class="line">CORS_ALLOW_METHODS = (</span><br><span class="line"><span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;OPTIONS&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PATCH&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;VIEW&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 允许的请求头</span></span><br><span class="line">CORS_ALLOW_HEADERS = (</span><br><span class="line">    <span class="string">&quot;authorization&quot;</span>,</span><br><span class="line">    <span class="string">&quot;content-type&quot;</span>,</span><br><span class="line">    <span class="comment"># 额外允许的请求头</span></span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="登录注册接口分析"><a href="#登录注册接口分析" class="headerlink" title="登录注册接口分析"></a>登录注册接口分析</h3><h4 id="多方式登录"><a href="#多方式登录" class="headerlink" title="多方式登录"></a>多方式登录</h4><h5 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework<span class="literal">-jwt</span></span><br></pre></td></tr></table></figure><h5 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;login/&#x27;</span>, views.LoginViewSet.as_view(&#123;<span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;login&#x27;</span>&#125;)),</span><br></pre></td></tr></table></figure><h5 id="jwt配置"><a href="#jwt配置" class="headerlink" title="jwt配置"></a>jwt配置</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">7</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ViewSet</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> serializers, models</span><br><span class="line"><span class="keyword">from</span> utils.response <span class="keyword">import</span> APIResponse</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginViewSet</span>(<span class="title class_ inherited__">ViewSet</span>):</span><br><span class="line">    <span class="comment"># 局部禁用认证、权限组件</span></span><br><span class="line">    authentication_classes = ()</span><br><span class="line">    permission_classes = ()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        serializer = serializers.LoginSerializer(data=request.data, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            token = serializer.context.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 原来要一个个拿信息</span></span><br><span class="line">            <span class="comment"># username = serializer.context.get(&#x27;username&#x27;)</span></span><br><span class="line">            <span class="comment"># icon = serializer.context.get(&#x27;icon&#x27;)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 拿到登录用户，直接走序列化过程，将要返回给前台的数据直接序列化好给前台</span></span><br><span class="line">            user = serializer.context.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">            result = serializers.LoginSerializer(user, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;).data</span><br><span class="line">            result[<span class="string">&#x27;token&#x27;</span>] = token  <span class="comment"># id，username，icon，token</span></span><br><span class="line">            <span class="keyword">return</span> APIResponse(result=result)</span><br><span class="line">        <span class="keyword">return</span> APIResponse(<span class="number">1</span>, serializer.errors)</span><br></pre></td></tr></table></figure><h5 id="serializers-py"><a href="#serializers-py" class="headerlink" title="serializers.py"></a>serializers.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.serializers <span class="keyword">import</span> jwt_payload_handler, jwt_encode_handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 覆盖，避免login校验username有数据库唯一字段约束的限制</span></span><br><span class="line">    username = serializers.CharField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.User</span><br><span class="line">        <span class="comment"># username、password可以通过局部钩子指定详细的校验规则</span></span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;icon&#x27;</span>)</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;read_only&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;icon&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;read_only&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="comment"># 多方式得到user</span></span><br><span class="line">        user = self._get_user(attrs)</span><br><span class="line">        <span class="comment"># user签发token</span></span><br><span class="line">        token = self._get_token(user)</span><br><span class="line">        <span class="comment"># token用context属性携带给视图类</span></span><br><span class="line">        self.context[<span class="string">&#x27;token&#x27;</span>] = token</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; 自己将user的信息逐个处理，传给视图</span></span><br><span class="line"><span class="string">        # 前台可能不仅仅只需要登录成功的token，可能还需要用户名、用户头像等</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 将登录用户对象直接传给视图</span></span><br><span class="line">        self.context[<span class="string">&#x27;user&#x27;</span>] = user</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_user</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="keyword">import</span> re</span><br><span class="line">        username = attrs.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^1[3-9][0-9]&#123;9&#125;$&#x27;</span>, username):</span><br><span class="line">            user = models.User.objects.<span class="built_in">filter</span>(mobile=username).first()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user = models.User.objects.<span class="built_in">filter</span>(username=username).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.ValidationError(&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;username error&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        password = attrs.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user.check_password(password):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.ValidationError(&#123;<span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;password error&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_token</span>(<span class="params">self, user</span>):</span><br><span class="line">        payload = jwt_payload_handler(user)</span><br><span class="line">        token = jwt_encode_handler(payload)</span><br><span class="line">        <span class="keyword">return</span> token</span><br></pre></td></tr></table></figure><h4 id="手机号存在与否接口"><a href="#手机号存在与否接口" class="headerlink" title="手机号存在与否接口"></a>手机号存在与否接口</h4><h5 id="urls-py-1"><a href="#urls-py-1" class="headerlink" title="urls.py"></a>urls.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;mobile/&#x27;</span>, views.MobileViewSet.as_view(&#123;<span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;check&#x27;</span>&#125;)),</span><br></pre></td></tr></table></figure><h5 id="views-py-1"><a href="#views-py-1" class="headerlink" title="views.py"></a>views.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手机是否存在接口</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MobileViewSet</span>(<span class="title class_ inherited__">ViewSet</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        mobile = request.data.get(<span class="string">&#x27;mobile&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> mobile:</span><br><span class="line">            <span class="keyword">return</span> APIResponse(<span class="number">1</span>, <span class="string">&#x27;mobile field required&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^1[3-9][0-9]&#123;9&#125;$&#x27;</span>, mobile):</span><br><span class="line">            <span class="keyword">return</span> APIResponse(<span class="number">1</span>, <span class="string">&#x27;mobile field error&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            models.User.objects.get(mobile=mobile)</span><br><span class="line">            <span class="keyword">return</span> APIResponse(result=<span class="literal">True</span>)  <span class="comment"># 手机号存在</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> APIResponse(result=<span class="literal">False</span>)  <span class="comment"># 手机号不存在</span></span><br></pre></td></tr></table></figure><h4 id="腾讯云短信服务"><a href="#腾讯云短信服务" class="headerlink" title="腾讯云短信服务"></a>腾讯云短信服务</h4><h5 id="安装python的sdk"><a href="#安装python的sdk" class="headerlink" title="安装python的sdk"></a>安装python的sdk</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install qcloudsms_py</span><br></pre></td></tr></table></figure><p>官网sdk使用说明：<a href="https://cloud.tencent.com/document/product/382/11672">https://cloud.tencent.com/document/product/382/11672</a></p><h5 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qcloudsms_py <span class="keyword">import</span> SmsSingleSender</span><br><span class="line"><span class="keyword">from</span> qcloudsms_py.httpclient <span class="keyword">import</span> HTTPError</span><br><span class="line"></span><br><span class="line"><span class="comment"># 短信应用 SDK AppID</span></span><br><span class="line">appid = <span class="number">1400009099</span>  <span class="comment"># SDK AppID 以1400开头</span></span><br><span class="line"><span class="comment"># 短信应用 SDK AppKey</span></span><br><span class="line">appkey = <span class="string">&quot;9ff91d87c2cd7cd0ea762f141975d1df37481d48700d70ac37470aefc60f9bad&quot;</span></span><br><span class="line"><span class="comment"># 需要发送短信的手机号码</span></span><br><span class="line">phone_numbers = [<span class="string">&quot;21212313123&quot;</span>, <span class="string">&quot;12345678902&quot;</span>, <span class="string">&quot;12345678903&quot;</span>]</span><br><span class="line"><span class="comment"># 短信模板ID，需要在短信控制台中申请</span></span><br><span class="line">template_id = <span class="number">7839</span>  <span class="comment"># <span class="doctag">NOTE:</span> 这里的模板 ID`7839` 只是示例，真实的模板 ID 需要在短信控制台中申请</span></span><br><span class="line"><span class="comment"># 签名</span></span><br><span class="line">sms_sign = <span class="string">&quot;腾讯云&quot;</span>  <span class="comment"># <span class="doctag">NOTE:</span> 签名参数使用的是`签名内容`，而不是`签名ID`。这里的签名&quot;腾讯云&quot;只是示例，真实的签名需要在短信控制台中申请</span></span><br><span class="line"></span><br><span class="line">ssender = SmsSingleSender(appid, appkey)</span><br><span class="line">params = [<span class="string">&quot;5678&quot;</span>]  <span class="comment"># 当模板没有参数时，`params = []`</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = ssender.send_with_param(<span class="number">86</span>, phone_numbers[<span class="number">0</span>],</span><br><span class="line">                                     template_id, params, sign=sms_sign, extend=<span class="string">&quot;&quot;</span>, ext=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><h4 id="腾讯短信服务封装"><a href="#腾讯短信服务封装" class="headerlink" title="腾讯短信服务封装"></a>腾讯短信服务封装</h4><h5 id="在libs下创建-tx-sms-包"><a href="#在libs下创建-tx-sms-包" class="headerlink" title="在libs下创建 tx_sms 包"></a>在libs下创建 tx_sms 包</h5><h5 id="init-py"><a href="#init-py" class="headerlink" title="init.py"></a>init.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .sms <span class="keyword">import</span> get_code, send_code</span><br></pre></td></tr></table></figure><h5 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 申请的短信应用 SDK AppID</span><br><span class="line">APP_ID = 1400832522</span><br><span class="line"></span><br><span class="line"># 申请的短信应用 SDK AppKey</span><br><span class="line">APP_KEY = &quot;APP_KEY&quot;</span><br><span class="line"></span><br><span class="line"># 申请的短信模板ID，需要在短信控制台中申请</span><br><span class="line">TEMPLATE_ID = 1841430</span><br><span class="line"></span><br><span class="line"># 申请的签名，参数使用的是`签名内容`，而不是`签名ID`</span><br><span class="line">SIGN = &quot;煎熬QAQ公众号&quot;</span><br></pre></td></tr></table></figure><h5 id="sms-py"><a href="#sms-py" class="headerlink" title="sms.py"></a>sms.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_code</span>():</span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        code += <span class="built_in">str</span>(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> qcloudsms_py <span class="keyword">import</span> SmsSingleSender</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> utils.logging <span class="keyword">import</span> logger</span><br><span class="line">sender = SmsSingleSender(settings.APP_ID, settings.APP_KEY)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_code</span>(<span class="params">mobile, code, exp</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = sender.send_with_param(</span><br><span class="line">            <span class="number">86</span>,</span><br><span class="line">            mobile,</span><br><span class="line">            settings.TEMPLATE_ID,</span><br><span class="line">            (code, exp),</span><br><span class="line">            sign=settings.SIGN,</span><br><span class="line">            extend=<span class="string">&quot;&quot;</span>, ext=<span class="string">&quot;&quot;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> result <span class="keyword">and</span> result.get(<span class="string">&#x27;result&#x27;</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        logger.error(<span class="string">&#x27;短信发送失败：%s&#x27;</span> % result.get(<span class="string">&#x27;errmsg&#x27;</span>))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.critical(<span class="string">&#x27;短信发送异常：%s&#x27;</span> % e)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="腾讯短信服务封装v2版本"><a href="#腾讯短信服务封装v2版本" class="headerlink" title="腾讯短信服务封装v2版本"></a>腾讯短信服务封装v2版本</h4><h5 id="init-py-1"><a href="#init-py-1" class="headerlink" title="init.py"></a>init.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .sms <span class="keyword">import</span> get_code,send_sms_v2</span><br></pre></td></tr></table></figure><h5 id="settings-py-1"><a href="#settings-py-1" class="headerlink" title="settings.py"></a>settings.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 短信应用 SDK AppID</span></span><br><span class="line">APPID =   <span class="comment"># SDK AppID 以1400开头</span></span><br><span class="line"><span class="comment"># 短信应用 SDK AppKey</span></span><br><span class="line">APPKEY = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 需要发送短信的手机号码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 短信模板ID，需要在短信控制台中申请</span></span><br><span class="line">TEMPLATE_ID = <span class="number">1470213</span>  <span class="comment"># <span class="doctag">NOTE:</span> 这里的模板 ID`7839` 只是示例，真实的模板 ID 需要在短信控制台中申请</span></span><br><span class="line"><span class="comment"># 签名</span></span><br><span class="line">SMS_SIGN = <span class="string">&quot;咋啦叭呼&quot;</span>  <span class="comment"># <span class="doctag">NOTE:</span> 签名参数使用的是`签名内容`，而不是`签名ID`。这里的签名&quot;腾讯云&quot;只是示例，真实的签名需要在短信控制台中申请</span></span><br></pre></td></tr></table></figure><h5 id="sms-py-1"><a href="#sms-py-1" class="headerlink" title="sms.py"></a>sms.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成随机n位验证码的函数</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> qcloudsms_py <span class="keyword">import</span> SmsSingleSender</span><br><span class="line"><span class="keyword">from</span> qcloudsms_py.httpclient <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> settings  <span class="comment"># 使用相对导入</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_code</span>(<span class="params">n=<span class="number">4</span></span>):</span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        code += <span class="built_in">str</span>(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送短信的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_sms</span>(<span class="params">phone, code</span>):</span><br><span class="line">    phone_numbers = [phone, ]</span><br><span class="line">    ssender = SmsSingleSender(settings.APPID, settings.APPKEY)</span><br><span class="line">    params = [code, <span class="string">&#x27;1&#x27;</span>]  <span class="comment"># 当模板没有参数时，`params = []`</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = ssender.send_with_param(<span class="number">86</span>, phone_numbers[<span class="number">0</span>],</span><br><span class="line">                                         settings.TEMPLATE_ID, params, sign=settings.SMS_SIGN, extend=<span class="string">&quot;&quot;</span>, ext=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(get_code())</span><br></pre></td></tr></table></figure><h4 id="短信接口频率限制"><a href="#短信接口频率限制" class="headerlink" title="短信接口频率限制"></a>短信接口频率限制</h4><h5 id="user-x2F-throttles-py"><a href="#user-x2F-throttles-py" class="headerlink" title="user&#x2F;throttles.py"></a>user&#x2F;throttles.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> SimpleRateThrottle</span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="comment"># 结合手机验证码接口来书写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMSRateThrottle</span>(<span class="title class_ inherited__">SimpleRateThrottle</span>):</span><br><span class="line">    <span class="comment"># cache_format = &#x27;throttle_%(scope)s_%(ident)s&#x27;</span></span><br><span class="line">    scope = <span class="string">&#x27;sms&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_cache_key</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="comment"># 手机号是通过get请求提交的</span></span><br><span class="line">        mobile = request.query_params.get(<span class="string">&#x27;mobile&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> mobile:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 不限制</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.cache_format % &#123;</span><br><span class="line">            <span class="string">&#x27;scope&#x27;</span>: self.scope,</span><br><span class="line">            <span class="string">&#x27;ident&#x27;</span>: mobile,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="常量配置"><a href="#常量配置" class="headerlink" title="常量配置"></a>常量配置</h5><h5 id="const-py"><a href="#const-py" class="headerlink" title="const.py"></a>const.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 短信验证码缓存key</span></span><br><span class="line">SMS_CACHE_KEY = <span class="string">&#x27;sms_cache_%(mobile)s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 短信验证码缓存时间s</span></span><br><span class="line">SMS_CACHE_TIME = <span class="number">180</span></span><br></pre></td></tr></table></figure><h5 id="配置文件设置"><a href="#配置文件设置" class="headerlink" title="配置文件设置"></a>配置文件设置</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;utils.exception.exception_handler&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;sms&#x27;</span>: <span class="string">&#x27;1/min&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送短信验证码接口"><a href="#发送短信验证码接口" class="headerlink" title="发送短信验证码接口"></a>发送短信验证码接口</h4><h5 id="urls-py-2"><a href="#urls-py-2" class="headerlink" title="urls.py"></a>urls.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;sms/&#x27;</span>, views.SMSViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;send&#x27;</span>&#125;)),</span><br></pre></td></tr></table></figure><h5 id="views-py-2"><a href="#views-py-2" class="headerlink" title="views.py"></a>views.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libs <span class="keyword">import</span> tx_sms</span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> .throttles <span class="keyword">import</span> SMSRateThrottle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMSViewSet</span>(<span class="title class_ inherited__">ViewSet</span>):</span><br><span class="line">    <span class="comment"># 设置频率限制，一个手机号一分钟只能访问一次</span></span><br><span class="line">    throttle_classes = [SMSRateThrottle]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 1）接收前台手机号验证手机格式</span></span><br><span class="line">        mobile = request.query_params.get(<span class="string">&#x27;mobile&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> mobile:</span><br><span class="line">            <span class="keyword">return</span> APIResponse(<span class="number">1</span>, <span class="string">&#x27;mobile field required&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^1[3-9][0-9]&#123;9&#125;$&#x27;</span>, mobile):</span><br><span class="line">            <span class="keyword">return</span> APIResponse(<span class="number">1</span>, <span class="string">&#x27;mobile field error&#x27;</span>)</span><br><span class="line">        <span class="comment"># 2）后台产生短信验证码</span></span><br><span class="line">        code = tx_sms.get_code()</span><br><span class="line">        <span class="comment"># 3）把验证码交给第三方，发送短信</span></span><br><span class="line">        result = tx_sms.send_code(mobile, code, settings.SMS_CACHE_TIME // <span class="number">60</span>)</span><br><span class="line">        <span class="comment"># 4）如果短信发送成功，服务器缓存验证码（内存数据库），方便下一次校验</span></span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            cache.<span class="built_in">set</span>(settings.SMS_CACHE_KEY % &#123;<span class="string">&#x27;mobile&#x27;</span>: mobile&#125;, code, settings.SMS_CACHE_TIME)</span><br><span class="line">        <span class="comment"># 5）响应前台短信是否发生成功</span></span><br><span class="line">        <span class="keyword">return</span> APIResponse(result=result)</span><br></pre></td></tr></table></figure><h4 id="短信登录接口"><a href="#短信登录接口" class="headerlink" title="短信登录接口"></a>短信登录接口</h4><h5 id="urls-py-3"><a href="#urls-py-3" class="headerlink" title="urls.py"></a>urls.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;mobile/login/&#x27;</span>, views.MobileLoginViewSet.as_view(&#123;<span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;login&#x27;</span>&#125;)),</span><br></pre></td></tr></table></figure><h5 id="serializers-py-1"><a href="#serializers-py-1" class="headerlink" title="serializers.py"></a>serializers.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.serializers <span class="keyword">import</span> jwt_payload_handler, jwt_encode_handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MobileLoginSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 覆盖</span></span><br><span class="line">    mobile = serializers.CharField(required=<span class="literal">True</span>, write_only=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 自定义</span></span><br><span class="line">    code = serializers.CharField(min_length=<span class="number">4</span>, max_length=<span class="number">4</span>, required=<span class="literal">True</span>, write_only=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.User</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;icon&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>, <span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;read_only&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;read_only&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;icon&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;read_only&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 手机号格式校验（手机号是否存在校验规则自己考量）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_mobile</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^1[3-9][0-9]&#123;9&#125;$&#x27;</span>, value):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.ValidationError(<span class="string">&#x27;mobile field error&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="comment"># 验证码校验 - 需要验证码与手机号两者参与</span></span><br><span class="line">        mobile = self._check_code(attrs)</span><br><span class="line">        <span class="comment"># 多方式得到user</span></span><br><span class="line">        user = self._get_user(mobile)</span><br><span class="line">        <span class="comment"># user签发token</span></span><br><span class="line">        token = self._get_token(user)</span><br><span class="line">        <span class="comment"># token用context属性携带给视图类</span></span><br><span class="line">        self.context[<span class="string">&#x27;token&#x27;</span>] = token</span><br><span class="line">        <span class="comment"># 将登录用户对象直接传给视图</span></span><br><span class="line">        self.context[<span class="string">&#x27;user&#x27;</span>] = user</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_check_code</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        mobile = attrs.get(<span class="string">&#x27;mobile&#x27;</span>)</span><br><span class="line">        code = attrs.pop(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">        old_code = cache.get(settings.SMS_CACHE_KEY % &#123;<span class="string">&#x27;mobile&#x27;</span>: mobile&#125;)</span><br><span class="line">        <span class="keyword">if</span> code != old_code:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.ValidationError(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;double code error&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 验证码的时效性：一旦验证码验证通过，代表改验证码已使用，需要立即失效</span></span><br><span class="line">            <span class="comment"># cache.set(settings.SMS_CACHE_KEY % &#123;&#x27;mobile&#x27;: mobile&#125;, &#x27;&#x27;, -1)</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> mobile</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_user</span>(<span class="params">self, mobile</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> models.User.objects.get(mobile=mobile)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.ValidationError(&#123;<span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;user not exist&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_token</span>(<span class="params">self, user</span>):</span><br><span class="line">        payload = jwt_payload_handler(user)</span><br><span class="line">        token = jwt_encode_handler(payload)</span><br><span class="line">        <span class="keyword">return</span> token</span><br></pre></td></tr></table></figure><h5 id="views-py-3"><a href="#views-py-3" class="headerlink" title="views.py"></a>views.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MobileLoginViewSet</span>(<span class="title class_ inherited__">ViewSet</span>):</span><br><span class="line">    <span class="comment"># 局部禁用认证、权限组件</span></span><br><span class="line">    authentication_classes = ()</span><br><span class="line">    permission_classes = ()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        serializer = serializers.MobileLoginSerializer(data=request.data, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            token = serializer.context.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">            <span class="comment"># 拿到登录用户，直接走序列化过程，将要返回给前台的数据直接序列化好给前台</span></span><br><span class="line">            user = serializer.context.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">            <span class="comment"># 返回给前台的数据结果：id，username，icon，token</span></span><br><span class="line">            result = serializers.MobileLoginSerializer(user, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;).data</span><br><span class="line">            result[<span class="string">&#x27;token&#x27;</span>] = token</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> APIResponse(result=result)</span><br><span class="line">        <span class="keyword">return</span> APIResponse(<span class="number">0</span>, serializer.errors)</span><br></pre></td></tr></table></figure><h4 id="验证码注册接口"><a href="#验证码注册接口" class="headerlink" title="验证码注册接口"></a>验证码注册接口</h4><h5 id="urls-py-4"><a href="#urls-py-4" class="headerlink" title="urls.py"></a>urls.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.register(<span class="string">&#x27;register&#x27;</span>, views.RegisterViewSet, <span class="string">&#x27;register&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="serializers-py-2"><a href="#serializers-py-2" class="headerlink" title="serializers.py"></a>serializers.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    code = serializers.CharField(min_length=<span class="number">4</span>, max_length=<span class="number">4</span>, required=<span class="literal">True</span>, write_only=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.User</span><br><span class="line">        fields = (<span class="string">&#x27;mobile&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;min_length&#x27;</span>: <span class="number">8</span>,</span><br><span class="line">                <span class="string">&#x27;max_length&#x27;</span>: <span class="number">16</span>,</span><br><span class="line">                <span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_mobile</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^1[3-9][0-9]&#123;9&#125;$&#x27;</span>, value):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.ValidationError(<span class="string">&#x27;mobile field error&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="comment"># 验证码校验 - 需要验证码与手机号两者参与</span></span><br><span class="line">        mobile = attrs.get(<span class="string">&#x27;mobile&#x27;</span>)</span><br><span class="line">        code = attrs.pop(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">        old_code = cache.get(settings.SMS_CACHE_KEY % &#123;<span class="string">&#x27;mobile&#x27;</span>: mobile&#125;)</span><br><span class="line">        <span class="keyword">if</span> code != old_code:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.ValidationError(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;double code error&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 验证码的时效性：一旦验证码验证通过，代表改验证码已使用，需要立即失效</span></span><br><span class="line">            <span class="comment"># cache.set(settings.SMS_CACHE_KEY % &#123;&#x27;mobile&#x27;: mobile&#125;, &#x27;&#x27;, -1)</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 数据入库必须需要唯一账号：1）前台注册必须提供账号 2）默认用手机号作为账号名，后期可以修改</span></span><br><span class="line">        attrs[<span class="string">&#x27;username&#x27;</span>] = mobile</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):  <span class="comment"># 入库的数据：mobile，password，username</span></span><br><span class="line">        <span class="keyword">return</span> models.User.objects.create_user(**validated_data)</span><br></pre></td></tr></table></figure><h3 id="redis简单使用"><a href="#redis简单使用" class="headerlink" title="redis简单使用"></a>redis简单使用</h3><h5 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br></pre></td></tr></table></figure><h4 id="redis的普通连接与连接池"><a href="#redis的普通连接与连接池" class="headerlink" title="redis的普通连接与连接池"></a>redis的普通连接与连接池</h4><h5 id="直接使用"><a href="#直接使用" class="headerlink" title="直接使用"></a>直接使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="comment"># decode_responses=True得到的结果会自动解码（不是二进制数据）</span></span><br><span class="line">r = redis.Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">6379</span>, db=<span class="number">1</span>, password=<span class="literal">None</span>, decode_responses=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h5 id="连接池使用"><a href="#连接池使用" class="headerlink" title="连接池使用"></a>连接池使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">6379</span>, db=<span class="number">1</span>, max_connections=<span class="number">100</span>, password=<span class="literal">None</span>, decode_responses=<span class="literal">True</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br></pre></td></tr></table></figure><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><p>redis-py默认在执行每次请求都会创建（连接池申请连接）和(断开归还连接池)一次连接操作，如果想要在一次请求中指定多个命令，则可以使用pipline实现一次请求指定多个命令，并且默认情况下一次pipline 是原子性操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"> </span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&#x27;10.211.55.4&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"> </span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># pipe = r.pipeline(transaction=False)</span></span><br><span class="line">pipe = r.pipeline(transaction=<span class="literal">True</span>)</span><br><span class="line">pipe.multi()</span><br><span class="line">pipe.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line">pipe.<span class="built_in">set</span>(<span class="string">&#x27;role&#x27;</span>, <span class="string">&#x27;rose&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">pipe.execute()</span><br></pre></td></tr></table></figure><h4 id="django中使用redis"><a href="#django中使用redis" class="headerlink" title="django中使用redis"></a>django中使用redis</h4><h5 id="utils-x2F-redis-pool-py"><a href="#utils-x2F-redis-pool-py" class="headerlink" title="utils&#x2F;redis_pool.py"></a>utils&#x2F;redis_pool.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">POOL = redis.ConnectionPool(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">6379</span>,max_connections=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h5 id="视图函数中使用"><a href="#视图函数中使用" class="headerlink" title="视图函数中使用"></a>视图函数中使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> utils.redis_pool <span class="keyword">import</span> POOL</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    conn = redis.Redis(connection_pool=POOL)</span><br><span class="line">    conn.hset(<span class="string">&#x27;kkk&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;设置成功&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order</span>(<span class="params">request</span>):</span><br><span class="line">    conn = redis.Redis(connection_pool=POOL)</span><br><span class="line">    conn.hget(<span class="string">&#x27;kkk&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;获取成功&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="django中使用redis配置缓存"><a href="#django中使用redis配置缓存" class="headerlink" title="django中使用redis配置缓存"></a>django中使用redis配置缓存</h4><h5 id="安装django-redis"><a href="#安装django-redis" class="headerlink" title="安装django-redis"></a>安装django-redis</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django<span class="literal">-redis</span></span><br></pre></td></tr></table></figure><h5 id="dev-py配置"><a href="#dev-py配置" class="headerlink" title="dev.py配置"></a>dev.py配置</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis配置</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CONNECTION_POOL_KWARGS&quot;</span>: &#123;<span class="string">&quot;max_connections&quot;</span>: <span class="number">100</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="视图函数使用两种方式"><a href="#视图函数使用两种方式" class="headerlink" title="视图函数使用两种方式"></a>视图函数使用两种方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 使用cache</span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line">cache.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>,user,<span class="number">10</span>)设置过期时间为10s</span><br><span class="line">cache.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>,user)不用考虑数据类型</span><br><span class="line"><span class="number">2</span> 直接使用conn对象</span><br><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line">conn = get_redis_connection(<span class="string">&#x27;default&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(conn.hgetall(<span class="string">&#x27;xxx&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="Django中使用celery"><a href="#Django中使用celery" class="headerlink" title="Django中使用celery"></a>Django中使用celery</h3><h4 id="安装插件-2"><a href="#安装插件-2" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install celery </span><br><span class="line"><span class="comment"># windows下需要额外安装一个依赖</span></span><br><span class="line">pip install eventlet</span><br></pre></td></tr></table></figure><h4 id="celery框架django项目工作流程"><a href="#celery框架django项目工作流程" class="headerlink" title="celery框架django项目工作流程"></a>celery框架django项目工作流程</h4><p>1）加载django配置环境<br>2）创建Celery框架对象app，配置broker和backend，得到的app就是worker<br>3）给worker对应的app添加可处理的任务函数，用include配置给worker的app<br>4）完成提供的任务的定时配置app.conf.beat_schedule<br>5）启动celery服务，运行worker，执行任务<br>6）启动beat服务，运行beat，添加任务</p><p>重点：由于采用了django的反射机制，使用celery.py所在的celery_task包必须放置项目的根目录下</p><h4 id="celery包封装结构"><a href="#celery包封装结构" class="headerlink" title="celery包封装结构"></a>celery包封装结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">    ├── celery_task  <span class="comment"># celery包</span></span><br><span class="line">    │   ├── __init__.py <span class="comment"># 包文件</span></span><br><span class="line">    │   ├── celery.py   <span class="comment"># celery连接和配置相关文件，且名字必须交celery.py</span></span><br><span class="line">    │   └── tasks.py    <span class="comment"># 所有任务函数</span></span><br><span class="line">    ├── add_task.py  <span class="comment"># 添加任务</span></span><br><span class="line">    └── get_result.py   <span class="comment"># 获取结果</span></span><br></pre></td></tr></table></figure><h4 id="celery-py"><a href="#celery-py" class="headerlink" title="celery.py"></a>celery.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一、加载django配置环境</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;happyapi.settings.dev&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二、加载celery配置环境</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="comment"># broker</span></span><br><span class="line">broker = <span class="string">&#x27;redis://127.0.0.1:6379/0&#x27;</span></span><br><span class="line"><span class="comment"># backend</span></span><br><span class="line">backend = <span class="string">&#x27;redis://127.0.0.1:6379/1&#x27;</span></span><br><span class="line"><span class="comment"># worker</span></span><br><span class="line">app = Celery(broker=broker, backend=backend, include=[<span class="string">&#x27;celery_task.tasks&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区</span></span><br><span class="line">app.conf.timezone = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="comment"># 是否使用UTC</span></span><br><span class="line">app.conf.enable_utc = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务的定时配置，每30s发送一次任务</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line">app.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;update-banner-list&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;celery_task.tasks.update_banner_list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: timedelta(seconds=<span class="number">30</span>),</span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="tasks-py"><a href="#tasks-py" class="headerlink" title="tasks.py"></a>tasks.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">延时任务 update_banner_list.apply_async(args=(200, 50), eta=eta) eta为时间对象</span></span><br><span class="line"><span class="string">异步更新任务设计；可在更新接口时，调用celery异步任务即可，即update_banner_list.delay(传入所需参数)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="keyword">from</span> home <span class="keyword">import</span> models, serializers</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_banner_list</span>():</span><br><span class="line">    queryset = models.Banner.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, is_show=<span class="literal">True</span>).order_by(<span class="string">&#x27;-orders&#x27;</span>)[:settings.BANNER_COUNT]</span><br><span class="line">    banner_list = serializers.BannerSerializer(queryset, many=<span class="literal">True</span>).data</span><br><span class="line">    <span class="comment"># 拿不到request对象，所以头像的连接base_url要自己组装</span></span><br><span class="line">    <span class="keyword">for</span> banner <span class="keyword">in</span> banner_list:</span><br><span class="line">        banner[<span class="string">&#x27;image&#x27;</span>] = <span class="string">&#x27;http://127.0.0.1:8000%s&#x27;</span> % banner[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">    cache.<span class="built_in">set</span>(<span class="string">&#x27;banner_list&#x27;</span>, banner_list, <span class="number">86400</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="Windows下celery启动命令"><a href="#Windows下celery启动命令" class="headerlink" title="Windows下celery启动命令"></a>Windows下celery启动命令</h4><h5 id="celery4-x"><a href="#celery4-x" class="headerlink" title="celery4.x"></a>celery4.x</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">celery worker <span class="literal">-A</span> 模块名(包名) <span class="literal">-l</span> info <span class="literal">-P</span> eventlet</span><br><span class="line">eg:&gt; celery worker <span class="literal">-A</span> celery_task <span class="literal">-l</span> info <span class="literal">-P</span> eventlet</span><br></pre></td></tr></table></figure><h5 id="celery5-x"><a href="#celery5-x" class="headerlink" title="celery5.x"></a>celery5.x</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">celery <span class="literal">-A</span> 模块名(包名) worker <span class="literal">-l</span> info <span class="literal">-P</span> eventlet</span><br><span class="line">eg:&gt; celery <span class="literal">-A</span> celery_task worker <span class="literal">-l</span> info <span class="literal">-P</span> eventlet</span><br></pre></td></tr></table></figure><h4 id="启动定时任务"><a href="#启动定时任务" class="headerlink" title="启动定时任务"></a>启动定时任务</h4><h5 id="celery4-x-1"><a href="#celery4-x-1" class="headerlink" title="celery4.x"></a>celery4.x</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery beat <span class="literal">-A</span> celery_task <span class="literal">-l</span> info</span><br></pre></td></tr></table></figure><h5 id="celery5-x-1"><a href="#celery5-x-1" class="headerlink" title="celery5.x"></a>celery5.x</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery <span class="literal">-A</span> celery_task beat <span class="literal">-l</span> info</span><br></pre></td></tr></table></figure><h3 id="课程模块"><a href="#课程模块" class="headerlink" title="课程模块"></a>课程模块</h3><h4 id="免费课示例"><a href="#免费课示例" class="headerlink" title="免费课示例"></a>免费课示例</h4><h5 id="创建models：course-x2F-models-py"><a href="#创建models：course-x2F-models-py" class="headerlink" title="创建models：course&#x2F;models.py"></a>创建models：course&#x2F;models.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CourseCategory</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;分类&quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">&quot;分类名称&quot;</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;happy_course_category&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;分类&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s&quot;</span> % self.name</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;课程&quot;&quot;&quot;</span></span><br><span class="line">    course_type = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">&#x27;付费&#x27;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;VIP专享&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;学位课程&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    level_choices = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">&#x27;初级&#x27;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;中级&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;高级&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    status_choices = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">&#x27;上线&#x27;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;下线&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;预上线&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, verbose_name=<span class="string">&quot;课程名称&quot;</span>)</span><br><span class="line">    course_img = models.ImageField(upload_to=<span class="string">&quot;courses&quot;</span>, max_length=<span class="number">255</span>, verbose_name=<span class="string">&quot;封面图片&quot;</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    course_type = models.SmallIntegerField(choices=course_type, default=<span class="number">0</span>, verbose_name=<span class="string">&quot;付费类型&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用这个字段的原因</span></span><br><span class="line">    brief = models.TextField(max_length=<span class="number">2048</span>, verbose_name=<span class="string">&quot;详情介绍&quot;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    level = models.SmallIntegerField(choices=level_choices, default=<span class="number">0</span>, verbose_name=<span class="string">&quot;难度等级&quot;</span>)</span><br><span class="line">    pub_date = models.DateField(verbose_name=<span class="string">&quot;发布日期&quot;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    period = models.IntegerField(verbose_name=<span class="string">&quot;建议学习周期(day)&quot;</span>, default=<span class="number">7</span>)</span><br><span class="line">    attachment_path = models.FileField(upload_to=<span class="string">&quot;attachment&quot;</span>, max_length=<span class="number">128</span>, verbose_name=<span class="string">&quot;课件路径&quot;</span>, blank=<span class="literal">True</span>,</span><br><span class="line">                                       null=<span class="literal">True</span>)</span><br><span class="line">    status = models.SmallIntegerField(choices=status_choices, default=<span class="number">0</span>, verbose_name=<span class="string">&quot;课程状态&quot;</span>)</span><br><span class="line">    course_category = models.ForeignKey(<span class="string">&quot;CourseCategory&quot;</span>, on_delete=models.SET_NULL, db_constraint=<span class="literal">False</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>,</span><br><span class="line">                                        verbose_name=<span class="string">&quot;课程分类&quot;</span>)</span><br><span class="line">    students = models.IntegerField(verbose_name=<span class="string">&quot;学习人数&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    sections = models.IntegerField(verbose_name=<span class="string">&quot;总课时数量&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    pub_sections = models.IntegerField(verbose_name=<span class="string">&quot;课时更新数量&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">6</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&quot;课程原价&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    teacher = models.ForeignKey(<span class="string">&quot;Teacher&quot;</span>, on_delete=models.DO_NOTHING, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&quot;授课老师&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;happy_course&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;课程&quot;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&quot;课程&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s&quot;</span> % self.name</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;导师&quot;&quot;&quot;</span></span><br><span class="line">    role_choices = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">&#x27;讲师&#x27;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;导师&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;班主任&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;导师名&quot;</span>)</span><br><span class="line">    role = models.SmallIntegerField(choices=role_choices, default=<span class="number">0</span>, verbose_name=<span class="string">&quot;导师身份&quot;</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;职位、职称&quot;</span>)</span><br><span class="line">    signature = models.CharField(max_length=<span class="number">255</span>, verbose_name=<span class="string">&quot;导师签名&quot;</span>, help_text=<span class="string">&quot;导师签名&quot;</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    image = models.ImageField(upload_to=<span class="string">&quot;teacher&quot;</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">&quot;导师封面&quot;</span>)</span><br><span class="line">    brief = models.TextField(max_length=<span class="number">1024</span>, verbose_name=<span class="string">&quot;导师描述&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;happy_teacher&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;导师&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s&quot;</span> % self.name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseChapter</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;章节&quot;&quot;&quot;</span></span><br><span class="line">    course = models.ForeignKey(<span class="string">&quot;Course&quot;</span>, related_name=<span class="string">&#x27;coursechapters&#x27;</span>, on_delete=models.CASCADE, verbose_name=<span class="string">&quot;课程名称&quot;</span>)</span><br><span class="line">    chapter = models.SmallIntegerField(verbose_name=<span class="string">&quot;第几章&quot;</span>, default=<span class="number">1</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, verbose_name=<span class="string">&quot;章节标题&quot;</span>)</span><br><span class="line">    summary = models.TextField(verbose_name=<span class="string">&quot;章节介绍&quot;</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    pub_date = models.DateField(verbose_name=<span class="string">&quot;发布日期&quot;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;happy_course_chapter&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;章节&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s:(第%s章)%s&quot;</span> % (self.course, self.chapter, self.name)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseSection</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;课时&quot;&quot;&quot;</span></span><br><span class="line">    section_type_choices = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">&#x27;文档&#x27;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;练习&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;视频&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    chapter = models.ForeignKey(<span class="string">&quot;CourseChapter&quot;</span>, related_name=<span class="string">&#x27;coursesections&#x27;</span>, on_delete=models.CASCADE,</span><br><span class="line">                                verbose_name=<span class="string">&quot;课程章节&quot;</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, verbose_name=<span class="string">&quot;课时标题&quot;</span>)</span><br><span class="line">    orders = models.PositiveSmallIntegerField(verbose_name=<span class="string">&quot;课时排序&quot;</span>)</span><br><span class="line">    section_type = models.SmallIntegerField(default=<span class="number">2</span>, choices=section_type_choices, verbose_name=<span class="string">&quot;课时种类&quot;</span>)</span><br><span class="line">    section_link = models.CharField(max_length=<span class="number">255</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">&quot;课时链接&quot;</span>,</span><br><span class="line">                                    help_text=<span class="string">&quot;若是video，填vid,若是文档，填link&quot;</span>)</span><br><span class="line">    duration = models.CharField(verbose_name=<span class="string">&quot;视频时长&quot;</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, max_length=<span class="number">32</span>)  <span class="comment"># 仅在前端展示使用</span></span><br><span class="line">    pub_date = models.DateTimeField(verbose_name=<span class="string">&quot;发布时间&quot;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    free_trail = models.BooleanField(verbose_name=<span class="string">&quot;是否可试看&quot;</span>, default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;happy_course_Section&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;课时&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s-%s&quot;</span> % (self.chapter, self.name)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h5 id="注册models：course-x2F-adminx-py"><a href="#注册models：course-x2F-adminx-py" class="headerlink" title="注册models：course&#x2F;adminx.py"></a>注册models：course&#x2F;adminx.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line">xadmin.site.register(models.CourseCategory)</span><br><span class="line">xadmin.site.register(models.Course)</span><br><span class="line">xadmin.site.register(models.Teacher)</span><br><span class="line">xadmin.site.register(models.CourseChapter)</span><br><span class="line">xadmin.site.register(models.CourseSection)</span><br></pre></td></tr></table></figure><h4 id="数据库迁移-1"><a href="#数据库迁移-1" class="headerlink" title="数据库迁移"></a>数据库迁移</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;: python manage.py makemigrations</span><br><span class="line">&gt;: python manage.py migrate</span><br></pre></td></tr></table></figure><h4 id="资源手动迁移"><a href="#资源手动迁移" class="headerlink" title="资源手动迁移"></a>资源手动迁移</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 头像图片放在 media/teacher 文件夹下</span></span><br><span class="line"><span class="comment"># 课程图片放在 media/course 文件夹下</span></span><br></pre></td></tr></table></figure><h4 id="课程相关数据录入"><a href="#课程相关数据录入" class="headerlink" title="课程相关数据录入"></a>课程相关数据录入</h4><h5 id="老师表"><a href="#老师表" class="headerlink" title="老师表"></a>老师表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_teacher(id, orders, is_show, is_delete, created_time, updated_time, name, role, title, signature, image, brief) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 13:44:19.661327&#x27;</span>, <span class="string">&#x27;2022-07-14 13:46:54.246271&#x27;</span>, <span class="string">&#x27;曹荣伟&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;快乐Python教学总监&#x27;</span>, <span class="string">&#x27;肥宅大王&#x27;</span>, <span class="string">&#x27;teacher/crw_icon.png&#x27;</span>, <span class="string">&#x27;老快乐教育CTO &amp; CO-FOUNDER 国内知名PYTHON语言推广者 51CTO学院2016\2017年度最受学员喜爱10大讲师之一 多款开源软件作者 曾任职公安部、飞信、中金公司、NOKIA中国研究院、华尔街英语、ADVENT、汽车之家等公司&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_teacher(id, orders, is_show, is_delete, created_time, updated_time, name, role, title, signature, image, brief) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 13:45:25.092902&#x27;</span>, <span class="string">&#x27;2022-07-14 13:45:25.092936&#x27;</span>, <span class="string">&#x27;hyy&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;前应科前端项目组架构师&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;teacher/hyy_icon.png&#x27;</span>, <span class="string">&#x27;hyy老师, 一个集美貌与才华于一身的男人，搞过几年IOS，又转了前端开发几年，曾就职于美团网任高级前端开发，后来因为不同意王兴(美团老板)的战略布局而出家做老师去了，有丰富的教学经验，开起车来也毫不含糊。一直专注在前端的前沿技术领域。同时，爱好抽烟、喝酒、烫头(锡纸烫)。 我的最爱是前端，因为前端妹子多。&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_teacher(id, orders, is_show, is_delete, created_time, updated_time, name, role, title, signature, image, brief) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 13:46:21.997846&#x27;</span>, <span class="string">&#x27;2022-07-14 13:46:21.997880&#x27;</span>, <span class="string">&#x27;林波浪&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;应科Linux学科带头人&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;teacher/lbl_icon.png&#x27;</span>, <span class="string">&#x27;Linux运维技术专家，老男孩Linux金牌讲师，讲课风趣幽默、深入浅出、声音洪亮到爆炸&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="分类表"><a href="#分类表" class="headerlink" title="分类表"></a>分类表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course_category(id, orders, is_show, is_delete, created_time, updated_time, name) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 13:40:58.690413&#x27;</span>, <span class="string">&#x27;2022-07-14 13:40:58.690477&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course_category(id, orders, is_show, is_delete, created_time, updated_time, name) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 13:41:08.249735&#x27;</span>, <span class="string">&#x27;2022-07-14 13:41:08.249817&#x27;</span>, <span class="string">&#x27;Linux&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="课程表"><a href="#课程表" class="headerlink" title="课程表"></a>课程表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course(id, orders, is_show, is_delete, created_time, updated_time, name, course_img, course_type, brief, level, pub_date, <span class="keyword">period</span>, attachment_path, status, students, sections, pub_sections, price, course_category_id, teacher_id) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 13:54:33.095201&#x27;</span>, <span class="string">&#x27;2022-07-14 13:54:33.095238&#x27;</span>, <span class="string">&#x27;Python开发21天入门&#x27;</span>, <span class="string">&#x27;courses/crw_python.png&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;Python从入门到入土&amp;&amp;&amp;Python从入门到入土&amp;&amp;&amp;Python从入门到入土&amp;&amp;&amp;Python从入门到入土&amp;&amp;&amp;Python从入门到入土&amp;&amp;&amp;Python从入门到入土&amp;&amp;&amp;Python从入门到入土&amp;&amp;&amp;Python从入门到入土&amp;&amp;&amp;Python从入门到入土&amp;&amp;&amp;Python从入门到入土&amp;&amp;&amp;Python从入门到入土&amp;&amp;&amp;Python从入门到入土&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">231</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">0.00</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course(id, orders, is_show, is_delete, created_time, updated_time, name, course_img, course_type, brief, level, pub_date, <span class="keyword">period</span>, attachment_path, status, students, sections, pub_sections, price, course_category_id, teacher_id) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 13:56:05.051103&#x27;</span>, <span class="string">&#x27;2022-07-14 13:56:05.051142&#x27;</span>, <span class="string">&#x27;Python项目实战&#x27;</span>, <span class="string">&#x27;courses/hyy_python.png&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2022-07-14&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">340</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">99.00</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course(id, orders, is_show, is_delete, created_time, updated_time, name, course_img, course_type, brief, level, pub_date, <span class="keyword">period</span>, attachment_path, status, students, sections, pub_sections, price, course_category_id, teacher_id) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 13:57:21.190053&#x27;</span>, <span class="string">&#x27;2022-07-14 13:57:21.190095&#x27;</span>, <span class="string">&#x27;Linux系统基础5周入门精讲&#x27;</span>, <span class="string">&#x27;courses/lbl_linux.png&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">219</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">39.00</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h5 id="章节表"><a href="#章节表" class="headerlink" title="章节表"></a>章节表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course_chapter(id, orders, is_show, is_delete, created_time, updated_time, chapter, name, summary, pub_date, course_id) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 13:58:34.867005&#x27;</span>, <span class="string">&#x27;2022-07-14 14:00:58.276541&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;计算机原理&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-07-14&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course_chapter(id, orders, is_show, is_delete, created_time, updated_time, chapter, name, summary, pub_date, course_id) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 13:58:48.051543&#x27;</span>, <span class="string">&#x27;2022-07-14 14:01:22.024206&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;环境搭建&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-07-14&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course_chapter(id, orders, is_show, is_delete, created_time, updated_time, chapter, name, summary, pub_date, course_id) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 13:59:09.878183&#x27;</span>, <span class="string">&#x27;2022-07-14 14:01:40.048608&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;项目创建&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-07-14&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course_chapter(id, orders, is_show, is_delete, created_time, updated_time, chapter, name, summary, pub_date, course_id) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 13:59:37.448626&#x27;</span>, <span class="string">&#x27;2022-07-14 14:01:58.709652&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;Linux环境创建&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-07-14&#x27;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h5 id="课时表"><a href="#课时表" class="headerlink" title="课时表"></a>课时表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course_Section(id, is_show, is_delete, created_time, updated_time, name, orders, section_type, section_link, duration, pub_date, free_trail, chapter_id) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 14:02:33.779098&#x27;</span>, <span class="string">&#x27;2022-07-14 14:02:33.779135&#x27;</span>, <span class="string">&#x27;计算机原理上&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2022-07-14 14:02:33.779193&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course_Section(id, is_show, is_delete, created_time, updated_time, name, orders, section_type, section_link, duration, pub_date, free_trail, chapter_id) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 14:02:56.657134&#x27;</span>, <span class="string">&#x27;2022-07-14 14:02:56.657173&#x27;</span>, <span class="string">&#x27;计算机原理下&#x27;</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2022-07-14 14:02:56.657227&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course_Section(id, is_show, is_delete, created_time, updated_time, name, orders, section_type, section_link, duration, pub_date, free_trail, chapter_id) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 14:03:20.493324&#x27;</span>, <span class="string">&#x27;2022-07-14 14:03:52.329394&#x27;</span>, <span class="string">&#x27;环境搭建上&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2022-07-14 14:03:20.493420&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course_Section(id, is_show, is_delete, created_time, updated_time, name, orders, section_type, section_link, duration, pub_date, free_trail, chapter_id) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 14:03:36.472742&#x27;</span>, <span class="string">&#x27;2022-07-14 14:03:36.472779&#x27;</span>, <span class="string">&#x27;环境搭建下&#x27;</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2022-07-14 14:03:36.472831&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course_Section(id, is_show, is_delete, created_time, updated_time, name, orders, section_type, section_link, duration, pub_date, free_trail, chapter_id) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 14:04:19.338153&#x27;</span>, <span class="string">&#x27;2022-07-14 14:04:19.338192&#x27;</span>, <span class="string">&#x27;web项目的创建&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2022-07-14 14:04:19.338252&#x27;</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> happy_course_Section(id, is_show, is_delete, created_time, updated_time, name, orders, section_type, section_link, duration, pub_date, free_trail, chapter_id) <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-14 14:04:52.895855&#x27;</span>, <span class="string">&#x27;2022-07-14 14:04:52.895890&#x27;</span>, <span class="string">&#x27;Linux的环境搭建&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2022-07-14 14:04:52.895942&#x27;</span>, <span class="number">1</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h4 id="课程接口"><a href="#课程接口" class="headerlink" title="课程接口"></a>课程接口</h4><h5 id="路由：course-x2F-urls-py"><a href="#路由：course-x2F-urls-py" class="headerlink" title="路由：course&#x2F;urls.py"></a>路由：course&#x2F;urls.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">router.register(<span class="string">&#x27;categories&#x27;</span>, views.CourseCategoryViewSet, <span class="string">&#x27;categories&#x27;</span>)  <span class="comment"># 分类</span></span><br><span class="line">router.register(<span class="string">&#x27;free&#x27;</span>, views.CourseViewSet, <span class="string">&#x27;free&#x27;</span>)  <span class="comment"># 课程</span></span><br></pre></td></tr></table></figure><h5 id="视图：course-x2F-views-py"><a href="#视图：course-x2F-views-py" class="headerlink" title="视图：course&#x2F;views.py"></a>视图：course&#x2F;views.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> GenericViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models, serializers</span><br><span class="line"><span class="comment"># 课程分类群查</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseCategoryViewSet</span>(GenericViewSet, ListModelMixin):</span><br><span class="line">    queryset = models.CourseCategory.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, is_show=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serializers.CourseCategorySerializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页组件：基础分页(采用)、偏移分页、游标分页(了解)</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> pagination</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤组件：搜索功能、排序功能</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> SearchFilter, OrderingFilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># django-filter插件：分类功能</span></span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> .filters <span class="keyword">import</span> CourseFilterSet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前台携带所有过滤规则的请求url：</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/course/free/?page=1&amp;page_size=10&amp;search=python&amp;ordering=-price&amp;min_price=30&amp;count=1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseViewSet</span>(GenericViewSet, ListModelMixin):</span><br><span class="line">    queryset = models.Course.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, is_show=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serializers.CourseSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分页组件</span></span><br><span class="line">    pagination_class = pagination.PageNumberPagination</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 过滤组件：实际开发，有多个过滤条件时，要把优先级高的放在前面</span></span><br><span class="line">    filter_backends = [SearchFilter, OrderingFilter, DjangoFilterBackend]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参与搜索的字段</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;brief&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 允许排序的字段</span></span><br><span class="line">    ordering_fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;students&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 过滤类：分类过滤、区间过滤</span></span><br><span class="line">    filter_class = CourseFilterSet</span><br></pre></td></tr></table></figure><h5 id="分类区间过滤：filters-py"><a href="#分类区间过滤：filters-py" class="headerlink" title="分类区间过滤：filters.py"></a>分类区间过滤：filters.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django-filter插件 过滤类</span></span><br><span class="line"><span class="keyword">from</span> django_filters.filterset <span class="keyword">import</span> FilterSet</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django_filters <span class="keyword">import</span> filters</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseFilterSet</span>(<span class="title class_ inherited__">FilterSet</span>):</span><br><span class="line">    <span class="comment"># 区间过滤：field_name关联的Model字段；lookup_expr设置规则；gt是大于，gte是大于等于；</span></span><br><span class="line">    min_price = filters.NumberFilter(field_name=<span class="string">&#x27;price&#x27;</span>, lookup_expr=<span class="string">&#x27;gte&#x27;</span>)</span><br><span class="line">    max_price = filters.NumberFilter(field_name=<span class="string">&#x27;price&#x27;</span>, lookup_expr=<span class="string">&#x27;lte&#x27;</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Course</span><br><span class="line">        <span class="comment"># 如果过滤条件仅仅就是Model已有的字段，方式一更好</span></span><br><span class="line">        <span class="comment"># 但是方式二可以自定义过滤字段</span></span><br><span class="line">        fields = [<span class="string">&#x27;course_category&#x27;</span>, <span class="string">&#x27;min_price&#x27;</span>, <span class="string">&#x27;max_price&#x27;</span>]</span><br></pre></td></tr></table></figure><h5 id="分页：pagination-py"><a href="#分页：pagination-py" class="headerlink" title="分页：pagination.py"></a>分页：pagination.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination <span class="keyword">as</span> DrfPageNumberPagination</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageNumberPagination</span>(<span class="title class_ inherited__">DrfPageNumberPagination</span>):</span><br><span class="line">    <span class="comment"># 默认一页显示的条数</span></span><br><span class="line">    page_size = <span class="number">2</span></span><br><span class="line">    <span class="comment"># url中携带页码的key</span></span><br><span class="line">    page_query_param = <span class="string">&#x27;page&#x27;</span></span><br><span class="line">    <span class="comment"># url中用户携带自定义一页条数的key</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;page_size&#x27;</span></span><br><span class="line">    <span class="comment"># 用户最大可自定义一页的条数</span></span><br><span class="line">    max_page_size = <span class="number">10</span></span><br></pre></td></tr></table></figure><h5 id="模型：course-x2F-models-py"><a href="#模型：course-x2F-models-py" class="headerlink" title="模型：course&#x2F;models.py"></a>模型：course&#x2F;models.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">course_type_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_course_type_display()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">level_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_level_display()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">status_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_status_display()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连表序列化字段</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">section_list</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 检索所以章节所以课时，返回前4课时，不足4课时全部返回</span></span><br><span class="line">        temp_section_list = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> chapter <span class="keyword">in</span> self.coursechapters.<span class="built_in">all</span>():</span><br><span class="line">            <span class="keyword">for</span> section <span class="keyword">in</span> chapter.coursesections.<span class="built_in">all</span>():</span><br><span class="line">                temp_section_list.append(&#123;</span><br><span class="line">                    <span class="string">&#x27;name&#x27;</span>: section.name,</span><br><span class="line">                    <span class="string">&#x27;section_link&#x27;</span>: section.section_link,</span><br><span class="line">                    <span class="string">&#x27;duration&#x27;</span>: section.duration,</span><br><span class="line">                    <span class="string">&#x27;free_trail&#x27;</span>: section.free_trail,</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(temp_section_list) &gt;= <span class="number">4</span>:</span><br><span class="line">                    <span class="keyword">return</span> temp_section_list  <span class="comment"># 最多4条</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp_section_list  <span class="comment"># 不足4条</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">role_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_role_display()</span><br></pre></td></tr></table></figure><h5 id="序列化：course-x2F-serializers-py"><a href="#序列化：course-x2F-serializers-py" class="headerlink" title="序列化：course&#x2F;serializers.py"></a>序列化：course&#x2F;serializers.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseCategorySerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.CourseCategory</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子序列化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TeacherSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Teacher</span><br><span class="line">        fields = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;role_name&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;signature&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="string">&#x27;brief&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    teacher = TeacherSerializer(many=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Course</span><br><span class="line">        fields = (</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;course_img&#x27;</span>,<span class="string">&#x27;brief&#x27;</span>,<span class="string">&#x27;attachment_path&#x27;</span>,<span class="string">&#x27;pub_sections&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;students&#x27;</span>,<span class="string">&#x27;period&#x27;</span>,<span class="string">&#x27;sections&#x27;</span>,<span class="string">&#x27;course_type_name&#x27;</span>,<span class="string">&#x27;level_name&#x27;</span>,<span class="string">&#x27;status_name&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;teacher&#x27;</span>,<span class="string">&#x27;section_list&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="课程详情页接口"><a href="#课程详情页接口" class="headerlink" title="课程详情页接口"></a>课程详情页接口</h4><h5 id="路由：course-x2F-urls-py-1"><a href="#路由：course-x2F-urls-py-1" class="headerlink" title="路由：course&#x2F;urls.py"></a>路由：course&#x2F;urls.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">router.register(<span class="string">&#x27;free&#x27;</span>, views.CourseViewSet, <span class="string">&#x27;free&#x27;</span>)  <span class="comment"># 课程</span></span><br><span class="line">router.register(<span class="string">&#x27;chapters&#x27;</span>, views.ChapterViewSet, <span class="string">&#x27;chapter&#x27;</span>)  <span class="comment"># 章节</span></span><br></pre></td></tr></table></figure><h5 id="视图：course-x2F-views-py-1"><a href="#视图：course-x2F-views-py-1" class="headerlink" title="视图：course&#x2F;views.py"></a>视图：course&#x2F;views.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> GenericViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin, RetrieveModelMixin</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models, serializers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 课程群查</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> pagination</span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> SearchFilter, OrderingFilter</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> .filters <span class="keyword">import</span> CourseFilterSet</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseViewSet</span>(GenericViewSet, ListModelMixin, RetrieveModelMixin):</span><br><span class="line">    queryset = models.Course.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, is_show=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serializers.CourseSerializer</span><br><span class="line"></span><br><span class="line">    pagination_class = pagination.PageNumberPagination</span><br><span class="line">    filter_backends = [SearchFilter, OrderingFilter, DjangoFilterBackend]</span><br><span class="line">    search_fields = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;brief&#x27;</span>]</span><br><span class="line">    ordering_fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;students&#x27;</span>]</span><br><span class="line">    filter_class = CourseFilterSet</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 一个课程的所有章节（群查）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChapterViewSet</span>(GenericViewSet, ListModelMixin):</span><br><span class="line">    queryset = models.CourseChapter.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, is_show=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serializers.CourseChapterSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 基于课程分类条件下的查询</span></span><br><span class="line">    filter_backends = [DjangoFilterBackend]</span><br><span class="line">    filter_fields = [<span class="string">&#x27;course&#x27;</span>]</span><br></pre></td></tr></table></figure><h5 id="序列化：course-x2F-serializers-py-1"><a href="#序列化：course-x2F-serializers-py-1" class="headerlink" title="序列化：course&#x2F;serializers.py"></a>序列化：course&#x2F;serializers.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CourseSectionSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.CourseSection</span><br><span class="line">        fields = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;orders&#x27;</span>, <span class="string">&#x27;section_link&#x27;</span>, <span class="string">&#x27;duration&#x27;</span>, <span class="string">&#x27;free_trail&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseChapterSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    coursesections = CourseSectionSerializer(many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.CourseChapter</span><br><span class="line">        fields = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;chapter&#x27;</span>, <span class="string">&#x27;summary&#x27;</span>, <span class="string">&#x27;coursesections&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="课程搜索接口"><a href="#课程搜索接口" class="headerlink" title="课程搜索接口"></a>课程搜索接口</h4><h5 id="路由：course-x2F-urls-py-2"><a href="#路由：course-x2F-urls-py-2" class="headerlink" title="路由：course&#x2F;urls.py"></a>路由：course&#x2F;urls.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.register(<span class="string">&#x27;search&#x27;</span>, views.SearchCourseViewSet, <span class="string">&#x27;search&#x27;</span>)  <span class="comment"># 搜索课程</span></span><br></pre></td></tr></table></figure><h5 id="视图：course-x2F-views-py-2"><a href="#视图：course-x2F-views-py-2" class="headerlink" title="视图：course&#x2F;views.py"></a>视图：course&#x2F;views.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> GenericViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin</span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> SearchFilter</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models, serializers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索课程接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SearchCourseViewSet</span>(GenericViewSet, ListModelMixin):</span><br><span class="line">    queryset = models.Course.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, is_show=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serializers.CourseSerializer</span><br><span class="line"><span class="comment"># 可以考虑是否分页</span></span><br><span class="line">    pagination_class = pagination.PageNumberPagination</span><br><span class="line"></span><br><span class="line">    filter_backends = [SearchFilter]</span><br><span class="line">    search_fields = [<span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h3><h4 id="引入支付宝支付"><a href="#引入支付宝支付" class="headerlink" title="引入支付宝支付"></a>引入支付宝支付</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1）支付宝API：</span></span><br><span class="line"><span class="string">https://opendocs.alipay.com/open/065yhr</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2）支付宝开发文档</span></span><br><span class="line"><span class="string">https://docs.open.alipay.com/270/105898/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3）支付宝8次异步通知机制(支付宝对我们服务器发送POST请求，索要 success 7个字符)</span></span><br><span class="line"><span class="string">https://docs.open.alipay.com/270/105902/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="安装支付宝支付的sdk"><a href="#安装支付宝支付的sdk" class="headerlink" title="安装支付宝支付的sdk"></a>安装支付宝支付的sdk</h4><p>aliapy二次封装包:<a href="https://github.com/fzlee/alipay">https://github.com/fzlee/alipay</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;: pip install python<span class="literal">-alipay-sdk</span> <span class="literal">--upgrade</span></span><br><span class="line"><span class="comment"># 如果抛ssl相关错误，代表缺失该包</span></span><br><span class="line">&gt;: pip install pyopenssl</span><br></pre></td></tr></table></figure><h5 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">libs</span><br><span class="line">    ├── iPay  <span class="comment"># aliapy二次封装包</span></span><br><span class="line">    │   ├── __init__.py <span class="comment"># 包文件</span></span><br><span class="line">    │   ├── pem<span class="comment"># 公钥私钥文件夹</span></span><br><span class="line">    │   │   ├── alipay_public_key.pem<span class="comment"># 支付宝公钥文件</span></span><br><span class="line">    │   │   ├── app_private_key.pem<span class="comment"># 应用私钥文件</span></span><br><span class="line">    │   ├── pay.py<span class="comment"># 支付文件</span></span><br><span class="line">    └── └── settings.py  <span class="comment"># 应用配置  </span></span><br></pre></td></tr></table></figure><h5 id="alipay-public-key-pem"><a href="#alipay-public-key-pem" class="headerlink" title="alipay_public_key.pem"></a>alipay_public_key.pem</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">拿应用公钥跟支付宝换来的支付宝公钥</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><h5 id="app-private-key-pem"><a href="#app-private-key-pem" class="headerlink" title="app_private_key.pem"></a>app_private_key.pem</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">通过支付宝公钥私钥签发软件签发的应用私钥</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><h5 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 应用私钥</span></span><br><span class="line">APP_PRIVATE_KEY_STRING = <span class="built_in">open</span>(os.path.join(os.path.dirname(os.path.abspath(__file__)), <span class="string">&#x27;pem&#x27;</span>, <span class="string">&#x27;app_private_key.pem&#x27;</span>)).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付宝公钥</span></span><br><span class="line">ALIPAY_PUBLIC_KEY_STRING = <span class="built_in">open</span>(os.path.join(os.path.dirname(os.path.abspath(__file__)), <span class="string">&#x27;pem&#x27;</span>, <span class="string">&#x27;alipay_public_key.pem&#x27;</span>)).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用ID</span></span><br><span class="line">APP_ID = <span class="string">&#x27;2016093000631831&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密方式</span></span><br><span class="line">SIGN = <span class="string">&#x27;RSA2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否是支付宝测试环境(沙箱环境)，如果采用真是支付宝环境，配置False</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付网关</span></span><br><span class="line">GATEWAY = <span class="string">&#x27;https://openapi.alipaydev.com/gateway.do&#x27;</span> <span class="keyword">if</span> DEBUG <span class="keyword">else</span> <span class="string">&#x27;https://openapi.alipay.com/gateway.do&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="pay-py"><a href="#pay-py" class="headerlink" title="pay.py"></a>pay.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> alipay <span class="keyword">import</span> AliPay</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付对象</span></span><br><span class="line">alipay = AliPay(</span><br><span class="line">    appid=settings.APP_ID,</span><br><span class="line">    app_notify_url=<span class="literal">None</span>,</span><br><span class="line">    app_private_key_string=settings.APP_PRIVATE_KEY_STRING,</span><br><span class="line">    alipay_public_key_string=settings.ALIPAY_PUBLIC_KEY_STRING,</span><br><span class="line">    sign_type=settings.SIGN,</span><br><span class="line">    debug=settings.DEBUG</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付网关</span></span><br><span class="line">gateway = settings.GATEWAY</span><br></pre></td></tr></table></figure><h5 id="init-py-2"><a href="#init-py-2" class="headerlink" title="init.py"></a><em><em>init</em></em>.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 包对外提供的变量</span></span><br><span class="line"><span class="keyword">from</span> .pay <span class="keyword">import</span> gateway, alipay</span><br></pre></td></tr></table></figure><h5 id="配置支付宝回调接口：dev-py"><a href="#配置支付宝回调接口：dev-py" class="headerlink" title="配置支付宝回调接口：dev.py"></a>配置支付宝回调接口：dev.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上线后必须换成公网地址</span></span><br><span class="line"><span class="comment"># 后台基URL</span></span><br><span class="line">BASE_URL = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span></span><br><span class="line"><span class="comment"># 前台基URL</span></span><br><span class="line">HAPPY_URL = <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span></span><br><span class="line"><span class="comment"># 支付宝同步异步回调接口配置</span></span><br><span class="line"><span class="comment"># 后台异步回调接口</span></span><br><span class="line">NOTIFY_URL = BASE_URL + <span class="string">&quot;/order/success/&quot;</span></span><br><span class="line"><span class="comment"># 前台同步回调接口，没有 / 结尾</span></span><br><span class="line">RETURN_URL = HAPPY_URL + <span class="string">&quot;/pay/success&quot;</span></span><br></pre></td></tr></table></figure><h4 id="支付接口"><a href="#支付接口" class="headerlink" title="支付接口"></a>支付接口</h4><h5 id="路由：order-x2F-urls-py"><a href="#路由：order-x2F-urls-py" class="headerlink" title="路由：order&#x2F;urls.py"></a>路由：order&#x2F;urls.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> utils.router <span class="keyword">import</span> router</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付接口(生成订单)</span></span><br><span class="line">router.register(<span class="string">&#x27;pay&#x27;</span>, views.PayViewSet, <span class="string">&#x27;pay&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(router.urls)),</span><br><span class="line">    path(<span class="string">&#x27;success/&#x27;</span>, views.SuccessViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;post&#x27;</span>&#125;))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="模型表：order-x2F-models-py"><a href="#模型表：order-x2F-models-py" class="headerlink" title="模型表：order&#x2F;models.py"></a>模型表：order&#x2F;models.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> user.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> course.models <span class="keyword">import</span> Course</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;订单模型&quot;&quot;&quot;</span></span><br><span class="line">    status_choices = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">&#x27;未支付&#x27;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;已支付&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;已取消&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&#x27;超时取消&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    pay_choices = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;支付宝&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;微信支付&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    subject = models.CharField(max_length=<span class="number">150</span>, verbose_name=<span class="string">&quot;订单标题&quot;</span>)</span><br><span class="line">    total_amount = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&quot;订单总价&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    out_trade_no = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;订单号&quot;</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    trade_no = models.CharField(max_length=<span class="number">64</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">&quot;流水号&quot;</span>)</span><br><span class="line">    order_status = models.SmallIntegerField(choices=status_choices, default=<span class="number">0</span>, verbose_name=<span class="string">&quot;订单状态&quot;</span>)</span><br><span class="line">    pay_type = models.SmallIntegerField(choices=pay_choices, default=<span class="number">1</span>, verbose_name=<span class="string">&quot;支付方式&quot;</span>)</span><br><span class="line">    pay_time = models.DateTimeField(null=<span class="literal">True</span>, verbose_name=<span class="string">&quot;支付时间&quot;</span>)</span><br><span class="line">    user = models.ForeignKey(User, related_name=<span class="string">&#x27;order_user&#x27;</span>, on_delete=models.DO_NOTHING, db_constraint=<span class="literal">False</span>, verbose_name=<span class="string">&quot;下单用户&quot;</span>)</span><br><span class="line">    created_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;创建时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;happy_order&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;订单记录&quot;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&quot;订单记录&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s - ￥%s&quot;</span> % (self.subject, self.total_amount)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">courses</span>(<span class="params">self</span>):</span><br><span class="line">        data_list = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.order_courses.<span class="built_in">all</span>():</span><br><span class="line">            data_list.append(&#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: item.<span class="built_in">id</span>,</span><br><span class="line">                <span class="string">&quot;course_name&quot;</span>: item.course.name,</span><br><span class="line">                <span class="string">&quot;real_price&quot;</span>: item.real_price,</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">return</span> data_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderDetail</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;订单详情&quot;&quot;&quot;</span></span><br><span class="line">    order = models.ForeignKey(Order, related_name=<span class="string">&#x27;order_courses&#x27;</span>, on_delete=models.CASCADE, db_constraint=<span class="literal">False</span>, verbose_name=<span class="string">&quot;订单&quot;</span>)</span><br><span class="line">    course = models.ForeignKey(Course, related_name=<span class="string">&#x27;course_orders&#x27;</span>, on_delete=models.CASCADE, db_constraint=<span class="literal">False</span>, verbose_name=<span class="string">&quot;课程&quot;</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">6</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&quot;课程原价&quot;</span>)</span><br><span class="line">    real_price = models.DecimalField(max_digits=<span class="number">6</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&quot;课程实价&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;happy_order_detail&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;订单详情&quot;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&quot;订单详情&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;%s的订单：%s&quot;</span> % (self.course.name, self.order.out_trade_no)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>().__str__()</span><br></pre></td></tr></table></figure><h5 id="支付接口类：order-x2F-views-py"><a href="#支付接口类：order-x2F-views-py" class="headerlink" title="支付接口类：order&#x2F;views.py"></a>支付接口类：order&#x2F;views.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> GenericViewSet, ViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> CreateModelMixin</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models, serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PayViewSet</span>(GenericViewSet, CreateModelMixin):</span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br><span class="line">    queryset = models.Order.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serializers.PaySerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写create方法，返回pay_url，pay_url是在serializer对象中，所以要知道serializer</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        serializer = self.get_serializer(data=request.data, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        self.perform_create(serializer)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.context[<span class="string">&#x27;pay_url&#x27;</span>])</span><br></pre></td></tr></table></figure><h5 id="支付接口序列化类：model-x2F-serializers"><a href="#支付接口序列化类：model-x2F-serializers" class="headerlink" title="支付接口序列化类：model&#x2F;serializers"></a>支付接口序列化类：model&#x2F;serializers</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> course.models <span class="keyword">import</span> Course</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaySerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 要支持单购物和群购物(购物车)，前台要提交 课程主键(们)</span></span><br><span class="line">    courses = serializers.PrimaryKeyRelatedField(queryset=Course.objects.<span class="built_in">all</span>(), write_only=<span class="literal">True</span>, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Order</span><br><span class="line">        fields = (<span class="string">&#x27;subject&#x27;</span>, <span class="string">&#x27;total_amount&#x27;</span>, <span class="string">&#x27;pay_type&#x27;</span>, <span class="string">&#x27;courses&#x27;</span>)</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;total_amount&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;pay_type&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 订单总结校验</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_check_total_amount</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        courses = attrs.get(<span class="string">&#x27;courses&#x27;</span>)</span><br><span class="line">        total_amount = attrs.get(<span class="string">&#x27;total_amount&#x27;</span>)</span><br><span class="line">        total_price = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> course <span class="keyword">in</span> courses:</span><br><span class="line">            total_price += course.price</span><br><span class="line">        <span class="keyword">if</span> total_price != total_amount:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;total_amount error&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> total_amount</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成订单号</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_out_trade_no</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">import</span> uuid</span><br><span class="line">        code = <span class="string">&#x27;%s&#x27;</span> % uuid.uuid4()</span><br><span class="line">        <span class="keyword">return</span> code.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取支付人</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_user</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.context.get(<span class="string">&#x27;request&#x27;</span>).user</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取支付链接</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_pay_url</span>(<span class="params">self, out_trade_no, total_amount, subject</span>):</span><br><span class="line">        <span class="keyword">from</span> libs <span class="keyword">import</span> iPay</span><br><span class="line">        order_string = iPay.alipay.api_alipay_trade_page_pay(</span><br><span class="line">            out_trade_no=out_trade_no,</span><br><span class="line">            total_amount=<span class="built_in">float</span>(total_amount),  <span class="comment"># 只有生成支付宝链接时，不能用Decimal</span></span><br><span class="line">            subject=subject,</span><br><span class="line">            return_url=settings.RETURN_URL,</span><br><span class="line">            notify_url=settings.NOTIFY_URL,</span><br><span class="line">        )</span><br><span class="line">        pay_url = iPay.gateway + <span class="string">&#x27;?&#x27;</span> + order_string</span><br><span class="line">        <span class="comment"># 将支付链接存入，传递给views</span></span><br><span class="line">        self.context[<span class="string">&#x27;pay_url&#x27;</span>] = pay_url</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 入库(两个表)的信息准备</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_before_create</span>(<span class="params">self, attrs, user, out_trade_no</span>):</span><br><span class="line">        attrs[<span class="string">&#x27;user&#x27;</span>] = user</span><br><span class="line">        attrs[<span class="string">&#x27;out_trade_no&#x27;</span>] = out_trade_no</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="comment"># 1）订单总价校验</span></span><br><span class="line">        total_amount = self._check_total_amount(attrs)</span><br><span class="line">        <span class="comment"># 2）生成订单号</span></span><br><span class="line">        out_trade_no = self._get_out_trade_no()</span><br><span class="line">        <span class="comment"># 3）支付用户：request.user</span></span><br><span class="line">        user = self._get_user()</span><br><span class="line">        <span class="comment"># 4）支付链接生成</span></span><br><span class="line">        self._get_pay_url(out_trade_no, total_amount, attrs.get(<span class="string">&#x27;subject&#x27;</span>))</span><br><span class="line">        <span class="comment"># 5）入库(两个表)的信息准备</span></span><br><span class="line">        self._before_create(attrs, user, out_trade_no)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 代表该校验方法通过，进入入库操作</span></span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写入库方法的目的：完成订单与订单详情两个表入库操作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        courses = validated_data.pop(<span class="string">&#x27;courses&#x27;</span>)</span><br><span class="line">        <span class="comment"># 订单表入库，不需要courses</span></span><br><span class="line">        order = models.Order.objects.create(**validated_data)</span><br><span class="line">        <span class="comment"># 订单详情表入库：只需要订单对象，课程对象(courses要拆成一个个course)</span></span><br><span class="line">        <span class="keyword">for</span> course <span class="keyword">in</span> courses:</span><br><span class="line">            models.OrderDetail.objects.create(order=order, course=course, price=course.price, real_price=course.price)</span><br><span class="line">        <span class="comment"># 先循环制造数据列表[&#123;&#125;, ..., &#123;&#125;]，用群增完成入库 bulk_create()，效率高</span></span><br><span class="line">        <span class="keyword">return</span> order</span><br></pre></td></tr></table></figure><h5 id="同步回调参数"><a href="#同步回调参数" class="headerlink" title="同步回调参数"></a>同步回调参数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">charset=utf-<span class="number">8</span>&amp;</span><br><span class="line"></span><br><span class="line">out_trade_no=7f7c7d12d57d45b693e1b49a6b01e1dd&amp;</span><br><span class="line"></span><br><span class="line">method=alipay.<span class="property">trade</span>.<span class="property">page</span>.<span class="property">pay</span>.<span class="property">return</span>&amp;</span><br><span class="line"></span><br><span class="line">total_amount=<span class="number">39.00</span>&amp;</span><br><span class="line"></span><br><span class="line">sign=<span class="title class_">FUmceqiNMWvxcD</span>%2BUPCHiOTaEwlJ%2FXIXL5UwZWOSI1TwRjPIZVzjRLB4j2G5CQpn472JO8X%2BwMx04dHqjLxqLcY3TRu0XurQ%2FwKTNpyfDrtNuNv0rfGPuVHw52y3blbS7%2FKFVsWryw4%2BBuF2fCrJ4qWH8Zg14Rct7qoMbu73N74WkQtDyzXefiKDbkMMRMfLbelE9TFyeIeygeMId8%2B58mcJMUOh6aQqwpr9bzuBbfJ17fkqU%2F0ys9zGr%2FlDtLL7aAh6BPViqZN%2F9T7byCoferD1BhcSzJNR6V6VuhOdTq8iEaH2XgJT9aIiyHgg3GT1taBBvZX2gK41FSmkguk%2BfsA%3D%3D&amp;</span><br><span class="line"></span><br><span class="line">trade_no=<span class="number">2023030722001464020500585462</span>&amp;</span><br><span class="line"></span><br><span class="line">auth_app_id=<span class="number">2016093000631831</span>&amp;</span><br><span class="line"></span><br><span class="line">version=<span class="number">1.0</span>&amp;</span><br><span class="line"></span><br><span class="line">app_id=<span class="number">2016093000631831</span>&amp;</span><br><span class="line"></span><br><span class="line">sign_type=<span class="title class_">RSA2</span>&amp;</span><br><span class="line"></span><br><span class="line">seller_id=<span class="number">2088102177958114</span>&amp;</span><br><span class="line"></span><br><span class="line">timestamp=<span class="number">2023</span>-<span class="number">03</span>-<span class="number">07</span>%<span class="number">2014</span>%3A47%3A48</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步回调与订单状态</span></span><br></pre></td></tr></table></figure><h5 id="支付成功回调接口"><a href="#支付成功回调接口" class="headerlink" title="支付成功回调接口"></a>支付成功回调接口</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.logging <span class="keyword">import</span> logger</span><br><span class="line"><span class="comment"># 支付回调接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuccessViewSet</span>(<span class="title class_ inherited__">ViewSet</span>):</span><br><span class="line">    authentication_classes = ()</span><br><span class="line">    permission_classes = ()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 支付宝同步回调给前台，在同步通知给后台处理</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># return Response(&#x27;后台已知晓，Over！！！&#x27;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 不能在该接口完成订单修改操作</span></span><br><span class="line">        <span class="comment"># 但是可以在该接口中校验订单状态(已经收到支付宝post异步通知，订单已修改)，告诉前台</span></span><br><span class="line">        <span class="comment"># print(type(request.query_params))  # django.http.request.QueryDict</span></span><br><span class="line">        <span class="comment"># print(type(request.query_params.dict()))  # dict</span></span><br><span class="line"></span><br><span class="line">        out_trade_no = request.query_params.get(<span class="string">&#x27;out_trade_no&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            models.Order.objects.get(out_trade_no=out_trade_no, order_status=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> APIResponse(result=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> APIResponse(<span class="number">1</span>, <span class="string">&#x27;error&#x27;</span>, result=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 支付宝异步回调处理</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result_data = request.data.<span class="built_in">dict</span>()</span><br><span class="line">            out_trade_no = result_data.get(<span class="string">&#x27;out_trade_no&#x27;</span>)</span><br><span class="line">            signature = result_data.pop(<span class="string">&#x27;sign&#x27;</span>)</span><br><span class="line">            <span class="keyword">from</span> libs <span class="keyword">import</span> iPay</span><br><span class="line">            result = iPay.alipay.verify(result_data, signature)</span><br><span class="line">            <span class="keyword">if</span> result <span class="keyword">and</span> result_data[<span class="string">&quot;trade_status&quot;</span>] <span class="keyword">in</span> (<span class="string">&quot;TRADE_SUCCESS&quot;</span>, <span class="string">&quot;TRADE_FINISHED&quot;</span>):</span><br><span class="line">                <span class="comment"># 完成订单修改：订单状态、流水号、支付时间   </span></span><br><span class="line">                models.Order.objects.<span class="built_in">filter</span>(out_trade_no=out_trade_no).update(order_status=<span class="number">1</span>)</span><br><span class="line">                <span class="comment"># 完成日志记录</span></span><br><span class="line">                logger.warning(<span class="string">&#x27;%s订单支付成功&#x27;</span> % out_trade_no)</span><br><span class="line">                <span class="keyword">return</span> Response(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logger.error(<span class="string">&#x27;%s订单支付失败&#x27;</span> % out_trade_no)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;failed&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快乐前台</title>
      <link href="/2022/09/04/%E5%BF%AB%E4%B9%90%E5%89%8D%E5%8F%B0/"/>
      <url>/2022/09/04/%E5%BF%AB%E4%B9%90%E5%89%8D%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="vue项目创建"><a href="#vue项目创建" class="headerlink" title="vue项目创建"></a>vue项目创建</h3><h4 id="vue环境"><a href="#vue环境" class="headerlink" title="vue环境"></a>vue环境</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">1.傻瓜式安装node: </span></span><br><span class="line"><span class="section">官网下载：https://nodejs.org/zh-cn/</span></span><br><span class="line"></span><br><span class="line"><span class="section">2.安装cnpm: </span></span><br><span class="line"><span class="section">&gt;: npm install -g cnpm --registry=https://registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line"><span class="section">3.安装vue最新脚手架: </span></span><br><span class="line"><span class="section">&gt;: cnpm install -g @vue/cli</span></span><br><span class="line"></span><br><span class="line">注：如果2、3步报错，清除缓存后重新走2、3步</span><br><span class="line"><span class="section">&gt;: npm cache clean --force</span></span><br></pre></td></tr></table></figure><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 前提：在目标目录新建happy文件夹</span><br><span class="line">&gt;: cd 到建立的happy文件夹</span><br><span class="line">&gt;: vue create edu_project</span><br><span class="line">后续选择Manually,选择Babel，router后回车，后是否在路由选择历史模式Y/n,后选择In package.json</span><br></pre></td></tr></table></figure><h4 id="启动vue项目"><a href="#启动vue项目" class="headerlink" title="启动vue项目"></a>启动vue项目</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h4 id="打包vue项目"><a href="#打包vue项目" class="headerlink" title="打包vue项目"></a>打包vue项目</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="重构项目目录"><a href="#重构项目目录" class="headerlink" title="重构项目目录"></a>重构项目目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">├── edu_project</span></span><br><span class="line"><span class="string">├── public/          # 项目共有资源</span></span><br><span class="line"><span class="string">├── favicon.ico# 站点图标</span></span><br><span class="line"><span class="string">└── index.html# 主页</span></span><br><span class="line"><span class="string">    ├── src/      # 项目主应用，开发时的代码保存</span></span><br><span class="line"><span class="string">    ├── assets/      # 前台静态资源总目录</span></span><br><span class="line"><span class="string">    ├── css/# 自定义css样式</span></span><br><span class="line"><span class="string">    └── global.css# 自定义全局样式</span></span><br><span class="line"><span class="string">    ├── js/# 自定义js样式</span></span><br><span class="line"><span class="string">└── settings.js# 自定义配置文件</span></span><br><span class="line"><span class="string">└── img/# 前台图片资源</span></span><br><span class="line"><span class="string">├── components/    # 小组件目录</span></span><br><span class="line"><span class="string">├── views/  # 页面组件目录</span></span><br><span class="line"><span class="string">├── App.vue    # 根组件</span></span><br><span class="line"><span class="string">├── main.js    # 入口脚本文件</span></span><br><span class="line"><span class="string">├── router    </span></span><br><span class="line"><span class="string">└── index.js# 路由脚本文件</span></span><br><span class="line"><span class="string">store    </span></span><br><span class="line"><span class="string">└── index.js# 仓库脚本文件</span></span><br><span class="line"><span class="string">    ├── vue.config.js    # 项目配置文件</span></span><br><span class="line"><span class="string">    └── *.*# 其他配置文件</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="文件修订：目录中非配置文件的多余文件可以移除"><a href="#文件修订：目录中非配置文件的多余文件可以移除" class="headerlink" title="文件修订：目录中非配置文件的多余文件可以移除"></a>文件修订：目录中非配置文件的多余文件可以移除</h4><p>APP.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;router-view/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>router&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    <span class="attr">base</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span>,</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>HomeView.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#x27;home&#x27;,</span><br><span class="line">        components: &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="全局样式、配置文件"><a href="#全局样式、配置文件" class="headerlink" title="全局样式、配置文件"></a>全局样式、配置文件</h4><p>global.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 声明全局样式和项目的初始化样式 */</span></span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">table</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">td</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">a</span>, <span class="selector-tag">form</span>, <span class="selector-tag">input</span>, select, option, <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse; <span class="comment">/* 合并边框 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>settings.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">base_url</span>: <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置全局样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/assets/css/global.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置全局自定义设置</span></span><br><span class="line"><span class="keyword">import</span> settings <span class="keyword">from</span> <span class="string">&#x27;@/assets/js/settings&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$settings</span> = settings;</span><br><span class="line"><span class="comment">// 在所有需要与后台交互的组件中：this.$settings.base_url + &#x27;再拼接具体后台路由&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="安装所需模块"><a href="#安装所需模块" class="headerlink" title="安装所需模块"></a>安装所需模块</h3><h4 id="axios前后台交互"><a href="#axios前后台交互" class="headerlink" title="axios前后台交互"></a>axios前后台交互</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install axios</span><br></pre></td></tr></table></figure><h4 id="cookies操作"><a href="#cookies操作" class="headerlink" title="cookies操作"></a>cookies操作</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue<span class="literal">-cookies</span></span><br></pre></td></tr></table></figure><h4 id="element-ui页面组件框架"><a href="#element-ui页面组件框架" class="headerlink" title="element-ui页面组件框架"></a>element-ui页面组件框架</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install element<span class="literal">-ui</span></span><br></pre></td></tr></table></figure><h4 id="bootstrap页面组件框架"><a href="#bootstrap页面组件框架" class="headerlink" title="bootstrap页面组件框架"></a>bootstrap页面组件框架</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install jquery</span><br><span class="line">cnpm install bootstrap@3</span><br></pre></td></tr></table></figure><h4 id="配置jquery：vue-config-js"><a href="#配置jquery：vue-config-js" class="headerlink" title="配置jquery：vue.config.js"></a>配置jquery：vue.config.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> webpack.<span class="title class_">ProvidePlugin</span>(&#123;</span><br><span class="line">                <span class="attr">$</span>: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">                <span class="attr">jQuery</span>: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">                <span class="string">&quot;window.jQuery&quot;</span>: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">                <span class="string">&quot;window.$&quot;</span>: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">                <span class="comment">// Popper: [&quot;popper.js&quot;, &quot;default&quot;]</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="配置：main-js"><a href="#配置：main-js" class="headerlink" title="配置：main.js"></a>配置：main.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span> = axios;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置cookies</span></span><br><span class="line"><span class="keyword">import</span> cookies <span class="keyword">from</span> <span class="string">&#x27;vue-cookies&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$cookies</span> = cookies;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置element-ui</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置bootstrap</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.min.css&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="前端主页"><a href="#前端主页" class="headerlink" title="前端主页"></a>前端主页</h3><p>将提供的资料中的图片移植到项目的img文件夹下</p><h4 id="页头组件：components-x2F-Header-vue"><a href="#页头组件：components-x2F-Header-vue" class="headerlink" title="页头组件：components&#x2F;Header.vue"></a>页头组件：components&#x2F;Header.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;slogan&quot;&gt;</span><br><span class="line">            &lt;p&gt;快乐教育 | 通过割韭菜获得体面生活,学IT,上快乐程序员!&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;nav&quot;&gt;</span><br><span class="line">            &lt;ul class=&quot;left-part&quot;&gt;</span><br><span class="line">                &lt;li class=&quot;logo&quot;&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/&quot;&gt;</span><br><span class="line">                        &lt;img src=&quot;../assets/img/head-logo.svg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">                    &lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li class=&quot;ele&quot;&gt;</span><br><span class="line">                    &lt;span @click=&quot;goPage(&#x27;/free-course&#x27;)&quot; :class=&quot;&#123;active: url_path === &#x27;/free-course&#x27;&#125;&quot;&gt;免费课&lt;/span&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li class=&quot;ele&quot;&gt;</span><br><span class="line">                    &lt;span @click=&quot;goPage(&#x27;/actual-course&#x27;)&quot; :class=&quot;&#123;active: url_path === &#x27;/actual-course&#x27;&#125;&quot;&gt;实战课&lt;/span&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li class=&quot;ele&quot;&gt;</span><br><span class="line">                    &lt;span @click=&quot;goPage(&#x27;/light-course&#x27;)&quot; :class=&quot;&#123;active: url_path === &#x27;/light-course&#x27;&#125;&quot;&gt;轻课&lt;/span&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=&quot;right-part&quot;&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;span&gt;登录&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;line&quot;&gt;|&lt;/span&gt;</span><br><span class="line">                    &lt;span&gt;注册&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Header&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                url_path: sessionStorage.url_path || &#x27;/&#x27;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            goPage(url_path) &#123;</span><br><span class="line">                // 已经是当前路由就没有必要重新跳转</span><br><span class="line">                if (this.url_path !== url_path) &#123;</span><br><span class="line">                    this.$router.push(url_path);</span><br><span class="line">                &#125;</span><br><span class="line">                sessionStorage.url_path = url_path;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            sessionStorage.url_path = this.$route.path;</span><br><span class="line">            this.url_path = this.$route.path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .header &#123;</span><br><span class="line">        background-color: white;</span><br><span class="line">        box-shadow: 0 0 5px 0 #aaa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .header:after &#123;</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: block;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .slogan &#123;</span><br><span class="line">        background-color: #eee;</span><br><span class="line">        height: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .slogan p &#123;</span><br><span class="line">        width: 1200px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        color: #aaa;</span><br><span class="line">        font-size: 13px;</span><br><span class="line">        line-height: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .nav &#123;</span><br><span class="line">        background-color: white;</span><br><span class="line">        user-select: none;</span><br><span class="line">        width: 1200px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .nav ul &#123;</span><br><span class="line">        padding: 15px 0;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .nav ul:after &#123;</span><br><span class="line">        clear: both;</span><br><span class="line">        content: &#x27;&#x27;;</span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .nav ul li &#123;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .logo &#123;</span><br><span class="line">        margin-right: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .ele &#123;</span><br><span class="line">        margin: 0 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .ele span &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        font: 15px/36px &#x27;微软雅黑&#x27;;</span><br><span class="line">        border-bottom: 2px solid transparent;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .ele span:hover &#123;</span><br><span class="line">        border-bottom-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .ele span.active &#123;</span><br><span class="line">        color: orange;</span><br><span class="line">        border-bottom-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right-part &#123;</span><br><span class="line">        float: right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right-part .line &#123;</span><br><span class="line">        margin: 0 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right-part span &#123;</span><br><span class="line">        line-height: 68px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="轮播图组件：components-x2F-Banner-vue"><a href="#轮播图组件：components-x2F-Banner-vue" class="headerlink" title="轮播图组件：components&#x2F;Banner.vue"></a>轮播图组件：components&#x2F;Banner.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;banner&quot;&gt;</span><br><span class="line">        &lt;el-carousel height=&quot;400px&quot;&gt;</span><br><span class="line">            &lt;el-carousel-item v-for=&quot;item in 4&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">                &lt;img src=&quot;../assets/img/banner1.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">            &lt;/el-carousel-item&gt;</span><br><span class="line">        &lt;/el-carousel&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Banner&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .el-carousel__item &#123;</span><br><span class="line">        height: 400px;</span><br><span class="line">        min-width: 1200px;</span><br><span class="line">    &#125;</span><br><span class="line">    .el-carousel__item img &#123;</span><br><span class="line">        height: 400px;</span><br><span class="line">        margin-left: calc(50% - 1920px / 2);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="浏览器屏幕缩放bug修复"><a href="#浏览器屏幕缩放bug修复" class="headerlink" title="浏览器屏幕缩放bug修复"></a>浏览器屏幕缩放bug修复</h4><p>问题：浏览器缩放时，轮播图显示不全，滚动水平滚动条，发现图片缺失</p><p>解决：隐藏水平滚动条，页面都只提供垂直滚动条的需求</p><p>global.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 水平超出部分默认隐藏 */</span></span><br><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="页脚组件：components-x2F-Footer-vue"><a href="#页脚组件：components-x2F-Footer-vue" class="headerlink" title="页脚组件：components&#x2F;Footer.vue"></a>页脚组件：components&#x2F;Footer.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;关于我们&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;联系我们&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;商务合作&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;帮助中心&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;意见反馈&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;新手指南&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;p&gt;Copyright © huaye版权所有 备案号: 赣ICP备2022010770号&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Footer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .footer &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 128px;</span><br><span class="line">        background: #25292e;</span><br><span class="line">        color: #fff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .footer ul &#123;</span><br><span class="line">        margin: 0 auto 16px;</span><br><span class="line">        padding-top: 38px;</span><br><span class="line">        width: 810px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .footer ul li &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 112px;</span><br><span class="line">        margin: 0 10px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .footer ul::after &#123;</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: block;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .footer p &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="主页组件：views-x2F-HomeView-vue"><a href="#主页组件：views-x2F-HomeView-vue" class="headerlink" title="主页组件：views&#x2F;HomeView.vue"></a>主页组件：views&#x2F;HomeView.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">        &lt;Header /&gt;</span><br><span class="line">        &lt;Banner /&gt;</span><br><span class="line">        &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;Footer /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Header from &#x27;../components/Header&#x27;</span><br><span class="line">    import Footer from &#x27;../components/Footer&#x27;</span><br><span class="line">    import Banner from &#x27;../components/Banner&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Home&quot;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            Header,</span><br><span class="line">            Footer,</span><br><span class="line">            Banner,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="前台请求Banner数据"><a href="#前台请求Banner数据" class="headerlink" title="前台请求Banner数据"></a>前台请求Banner数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;banner&quot;&gt;</span><br><span class="line">    &lt;el-carousel height=&quot;400px&quot;&gt;</span><br><span class="line">      &lt;el-carousel-item v-for=&quot;item in banner_list&quot;&gt;</span><br><span class="line">        &lt;router-link :to=&quot;item.link&quot;&gt;</span><br><span class="line">          &lt;!--数据绑定加个冒号--&gt;</span><br><span class="line">          &lt;img :src=&quot;item.img&quot; alt=&quot;item.name&quot;&gt;</span><br><span class="line">        &lt;/router-link&gt;</span><br><span class="line">      &lt;/el-carousel-item&gt;</span><br><span class="line">    &lt;/el-carousel&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Banner&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                banner_list: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // 在created钩子中</span><br><span class="line">        created() &#123;</span><br><span class="line">            this.$axios(&#123;</span><br><span class="line">                url: this.$settings.base_url + &#x27;/home/banners/&#x27;,</span><br><span class="line">                headers: &#123;&#125;</span><br><span class="line">            &#125;).then(response =&gt; &#123;</span><br><span class="line">                console.log(response.data);</span><br><span class="line">                this.banner_list = response.data;</span><br><span class="line">            &#125;).catch(error =&gt; &#123;</span><br><span class="line">                console.log(&quot;&gt;&gt;&gt;&quot;, error);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="登陆注册头部组件"><a href="#登陆注册头部组件" class="headerlink" title="登陆注册头部组件"></a>登陆注册头部组件</h3><p>前提：基于element-ui环境</p><h4 id="Login-vue"><a href="#Login-vue" class="headerlink" title="Login.vue"></a>Login.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;el-icon-close&quot; @click=&quot;close_login&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;nav&quot;&gt;</span><br><span class="line">                    &lt;span :class=&quot;&#123;active: login_method === &#x27;is_pwd&#x27;&#125;&quot;</span><br><span class="line">                          @click=&quot;change_login_method(&#x27;is_pwd&#x27;)&quot;&gt;密码登录&lt;/span&gt;</span><br><span class="line">          &lt;span :class=&quot;&#123;active: login_method === &#x27;is_sms&#x27;&#125;&quot;</span><br><span class="line">                @click=&quot;change_login_method(&#x27;is_sms&#x27;)&quot;&gt;短信登录&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-form v-if=&quot;login_method === &#x27;is_pwd&#x27;&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">              placeholder=&quot;用户名/手机号/邮箱&quot;</span><br><span class="line">              prefix-icon=&quot;el-icon-user&quot;</span><br><span class="line">              v-model=&quot;username&quot;</span><br><span class="line">              clearable&gt;</span><br><span class="line">          &lt;/el-input&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">              placeholder=&quot;密码&quot;</span><br><span class="line">              prefix-icon=&quot;el-icon-key&quot;</span><br><span class="line">              v-model=&quot;password&quot;</span><br><span class="line">              clearable</span><br><span class="line">              show-password&gt;</span><br><span class="line">          &lt;/el-input&gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot; @click=&quot;login_request&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form&gt;</span><br><span class="line">        &lt;el-form v-if=&quot;login_method === &#x27;is_sms&#x27;&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">              placeholder=&quot;手机号&quot;</span><br><span class="line">              prefix-icon=&quot;el-icon-phone-outline&quot;</span><br><span class="line">              v-model=&quot;mobile&quot;</span><br><span class="line">              clearable</span><br><span class="line">              @blur=&quot;check_mobile&quot;&gt;</span><br><span class="line">          &lt;/el-input&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">              placeholder=&quot;验证码&quot;</span><br><span class="line">              prefix-icon=&quot;el-icon-chat-line-round&quot;</span><br><span class="line">              v-model=&quot;sms&quot;</span><br><span class="line">              clearable&gt;</span><br><span class="line">            &lt;template slot=&quot;append&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;sms&quot; @click=&quot;send_sms&quot;&gt;&#123;&#123; sms_interval &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/el-input&gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot; @click=&quot;code_login&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form&gt;</span><br><span class="line">        &lt;div class=&quot;foot&quot;&gt;</span><br><span class="line">          &lt;span @click=&quot;go_register&quot;&gt;立即注册&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Login&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      username: &#x27;&#x27;,</span><br><span class="line">      password: &#x27;&#x27;,</span><br><span class="line">      mobile: &#x27;&#x27;,</span><br><span class="line">      sms: &#x27;&#x27;,</span><br><span class="line">      login_method: &#x27;is_pwd&#x27;,</span><br><span class="line">      sms_interval: &#x27;获取验证码&#x27;,</span><br><span class="line">      is_send: false,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 传递关闭模态框的事件</span><br><span class="line">    close_login() &#123;</span><br><span class="line">      this.$emit(&#x27;close&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 转换到注册</span><br><span class="line">    go_register() &#123;</span><br><span class="line">      this.$emit(&#x27;go&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    change_login_method(method) &#123;</span><br><span class="line">      this.login_method = method;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 校验手机号是否符合规范</span><br><span class="line">    check_mobile() &#123;</span><br><span class="line">      if (!this.mobile) return;</span><br><span class="line">      if (!this.mobile.match(/^1[3-9][0-9]&#123;9&#125;$/)) &#123;</span><br><span class="line">        this.$message(&#123;</span><br><span class="line">          message: &#x27;手机号有误&#x27;,</span><br><span class="line">          type: &#x27;warning&#x27;,</span><br><span class="line">          duration: 1000,</span><br><span class="line">          onClose: () =&gt; &#123;</span><br><span class="line">            this.mobile = &#x27;&#x27;;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line">      // 符合规范后发送axios请求</span><br><span class="line">      this.$axios.get(this.$settings.base_url + &#x27;/user/check_phone/&#x27;, &#123;params: &#123;&#x27;phone&#x27;: this.mobile&#125;&#125;).then(response =&gt; &#123;</span><br><span class="line">        // console.log(response.data)</span><br><span class="line">        if (response.data.result == 1) &#123;</span><br><span class="line">          // 允许发送验证码</span><br><span class="line">          this.is_send = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            message: &#x27;手机号不存在&#x27;,</span><br><span class="line">            type: &#x27;warning&#x27;,</span><br><span class="line">            duration: 1000,</span><br><span class="line">            onClose: () =&gt; &#123;</span><br><span class="line">              // this.mobile = &#x27;&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).catch(errors =&gt; &#123;</span><br><span class="line">        console.log(errors)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 发送短信</span><br><span class="line">    send_sms() &#123;</span><br><span class="line">      // 如果is_send为false直接返回了不让点</span><br><span class="line">      if (!this.is_send) return;</span><br><span class="line">      // 点了一次又设置了is_send为false，并设置定时器60s</span><br><span class="line">      this.is_send = false;</span><br><span class="line">      let sms_interval_time = 60;</span><br><span class="line">      this.sms_interval = &quot;发送中...&quot;;</span><br><span class="line"></span><br><span class="line">      // 发送axios请求</span><br><span class="line">      this.$axios.get(this.$settings.base_url + &#x27;/user/send/&#x27;, &#123;params: &#123;&#x27;phone&#x27;: this.mobile&#125;&#125;).then(response =&gt; &#123;</span><br><span class="line">            if (response.data.code == 200) &#123;</span><br><span class="line">              this.$message(&#123;</span><br><span class="line">                message: &#x27;验证码发送成功&#x27;,</span><br><span class="line">                type: &#x27;success&#x27;,</span><br><span class="line">                duration: 1000,</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              this.$message(&#123;</span><br><span class="line">                message: &#x27;未知错误&#x27;,</span><br><span class="line">                type: &#x27;warning&#x27;,</span><br><span class="line">                duration: 1000,</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      ).catch(errors =&gt; &#123;</span><br><span class="line">        console.log(errors)</span><br><span class="line">      &#125;)</span><br><span class="line">      let timer = setInterval(() =&gt; &#123;</span><br><span class="line">        if (sms_interval_time &lt;= 1) &#123;</span><br><span class="line">          clearInterval(timer);</span><br><span class="line">          this.sms_interval = &quot;获取验证码&quot;;</span><br><span class="line">          this.is_send = true; // 重新回复点击发送功能的条件</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          sms_interval_time -= 1;</span><br><span class="line">          this.sms_interval = `$&#123;sms_interval_time&#125;秒后再发`;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, 1000);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 登录请求</span><br><span class="line">    login_request() &#123;</span><br><span class="line">      if (this.username &amp;&amp; this.password) &#123;</span><br><span class="line">        // 发送请求</span><br><span class="line">        this.$axios.post(this.$settings.base_url + &#x27;/user/login/&#x27;, &#123;</span><br><span class="line">          username: this.username,</span><br><span class="line">          password: this.password</span><br><span class="line">        &#125;).then(response =&gt; &#123;</span><br><span class="line">          console.log(response.data)</span><br><span class="line">          if (response.data.code == 200) &#123;</span><br><span class="line">            // this.$cookies.set(&#x27;key&#x27;,value,过期时间)</span><br><span class="line">            this.$cookies.set(&#x27;token&#x27;, response.data.token, &#x27;7d&#x27;)</span><br><span class="line">            this.$cookies.set(&#x27;username&#x27;, response.data.username, &#x27;7d&#x27;)</span><br><span class="line">            // 关闭模态框,子传父</span><br><span class="line">            this.$emit(&#x27;close&#x27;)</span><br><span class="line">            // 给父组件Head传递一个事件让他从cookies中获取token和username</span><br><span class="line">            this.$emit(&#x27;loginsuccess&#x27;)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.$message(&#123;</span><br><span class="line">              message: &#x27;用户名或密码错误&#x27;,</span><br><span class="line">              type: &#x27;warning&#x27;,</span><br><span class="line">              duration: 500,</span><br><span class="line">              onClose: () =&gt; &#123;</span><br><span class="line">                this.username = &#x27;&#x27;;</span><br><span class="line">                this.password = &#x27;&#x27;;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).catch(errors =&gt; &#123;</span><br><span class="line">          console.log(errors)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.$message(&#123;</span><br><span class="line">          message: &#x27;用户名和密码必须填写&#x27;,</span><br><span class="line">          type: &#x27;warning&#x27;,</span><br><span class="line">          duration: 500,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 验证码登录</span><br><span class="line">    code_login() &#123;</span><br><span class="line">      if (this.mobile &amp;&amp; this.sms) &#123;</span><br><span class="line">        // 发送请求</span><br><span class="line">        this.$axios.post(this.$settings.base_url + &#x27;/user/login_by_code/&#x27;, &#123;</span><br><span class="line">          phone: this.mobile,</span><br><span class="line">          code: this.sms</span><br><span class="line">        &#125;).then(response =&gt; &#123;</span><br><span class="line">          console.log(response.data)</span><br><span class="line">          if (response.data.code == 200) &#123;</span><br><span class="line">            this.$cookies.set(&#x27;token&#x27;, response.data.token, &#x27;7d&#x27;)</span><br><span class="line">            this.$cookies.set(&#x27;username&#x27;, response.data.username, &#x27;7d&#x27;)</span><br><span class="line">            // 关闭模态框,子传父</span><br><span class="line">            this.$emit(&#x27;close&#x27;)</span><br><span class="line">            // 给父组件Head传递一个事件让他从cookies中获取token和username</span><br><span class="line">            this.$emit(&#x27;loginsuccess&#x27;)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.$message(&#123;</span><br><span class="line">              message: &#x27;验证码错误&#x27;,</span><br><span class="line">              type: &#x27;warning&#x27;,</span><br><span class="line">              duration: 500,</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).catch(errors =&gt; &#123;</span><br><span class="line">          console.log(errors)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.login &#123;</span><br><span class="line">  width: 100vw;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  position: fixed;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  z-index: 10;</span><br><span class="line">  background-color: rgba(0, 0, 0, 0.3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  height: 420px;</span><br><span class="line">  background-color: white;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  position: relative;</span><br><span class="line">  top: calc(50vh - 210px);</span><br><span class="line">  left: calc(50vw - 200px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-icon-close &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  top: 10px;</span><br><span class="line">  right: 10px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-icon-close:hover &#123;</span><br><span class="line">  color: darkred;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 40px;</span><br><span class="line">  width: 280px;</span><br><span class="line">  left: 60px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav &#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  height: 38px;</span><br><span class="line">  border-bottom: 2px solid darkgrey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav &gt; span &#123;</span><br><span class="line">  margin: 0 20px 0 35px;</span><br><span class="line">  color: darkgrey;</span><br><span class="line">  user-select: none;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  padding-bottom: 10px;</span><br><span class="line">  border-bottom: 2px solid darkgrey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav &gt; span.active &#123;</span><br><span class="line">  color: black;</span><br><span class="line">  border-bottom: 3px solid black;</span><br><span class="line">  padding-bottom: 9px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-input, .el-button &#123;</span><br><span class="line">  margin-top: 40px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-button &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.foot &gt; span &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">  color: orange;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sms &#123;</span><br><span class="line">  color: orange;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 70px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="Register-vue"><a href="#Register-vue" class="headerlink" title="Register.vue"></a>Register.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;register&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;el-icon-close&quot; @click=&quot;close_register&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;nav&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;active&quot;&gt;新用户注册&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-form&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">              placeholder=&quot;手机号&quot;</span><br><span class="line">              prefix-icon=&quot;el-icon-phone-outline&quot;</span><br><span class="line">              v-model=&quot;mobile&quot;</span><br><span class="line">              clearable</span><br><span class="line">              @blur=&quot;check_mobile&quot;&gt;</span><br><span class="line">          &lt;/el-input&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">              placeholder=&quot;密码&quot;</span><br><span class="line">              prefix-icon=&quot;el-icon-key&quot;</span><br><span class="line">              v-model=&quot;password&quot;</span><br><span class="line">              clearable</span><br><span class="line">              show-password&gt;</span><br><span class="line">          &lt;/el-input&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">              placeholder=&quot;验证码&quot;</span><br><span class="line">              prefix-icon=&quot;el-icon-chat-line-round&quot;</span><br><span class="line">              v-model=&quot;sms&quot;</span><br><span class="line">              clearable&gt;</span><br><span class="line">            &lt;template slot=&quot;append&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;sms&quot; @click=&quot;send_sms&quot;&gt;&#123;&#123; sms_interval &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/el-input&gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot; @click=&quot;register&quot;&gt;注册&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form&gt;</span><br><span class="line">        &lt;div class=&quot;foot&quot;&gt;</span><br><span class="line">          &lt;span @click=&quot;go_login&quot;&gt;立即登录&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Register&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      mobile: &#x27;&#x27;,</span><br><span class="line">      password: &#x27;&#x27;,</span><br><span class="line">      sms: &#x27;&#x27;,</span><br><span class="line">      sms_interval: &#x27;获取验证码&#x27;,</span><br><span class="line">      is_send: false,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    close_register() &#123;</span><br><span class="line">      this.$emit(&#x27;close&#x27;, false)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 去登录</span><br><span class="line">    go_login() &#123;</span><br><span class="line">      this.$emit(&#x27;go&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 校验手机号格式</span><br><span class="line">    check_mobile() &#123;</span><br><span class="line">      if (!this.mobile) return;</span><br><span class="line">      if (!this.mobile.match(/^1[3-9][0-9]&#123;9&#125;$/)) &#123;</span><br><span class="line">        this.$message(&#123;</span><br><span class="line">          message: &#x27;手机号格式错误&#x27;,</span><br><span class="line">          type: &#x27;warning&#x27;,</span><br><span class="line">          duration: 1000,</span><br><span class="line">          onClose: () =&gt; &#123;</span><br><span class="line">            // this.mobile = &#x27;&#x27;;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line">      // 符合规范后发送axios请求</span><br><span class="line">      this.$axios.get(this.$settings.base_url + &#x27;/user/check_phone/&#x27;, </span><br><span class="line">          &#123;params: &#123;&#x27;phone&#x27;: this.mobile&#125;&#125;).then(response =&gt; &#123;</span><br><span class="line">        // 后台校验手机号是否存在</span><br><span class="line">        if (response.data.result == 1) &#123;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            message: &#x27;手机号已存在,请直接登录&#x27;,</span><br><span class="line">            type: &#x27;warning&#x27;,</span><br><span class="line">            duration: 500,</span><br><span class="line">            onClose: () =&gt; &#123;</span><br><span class="line">              // this.mobile = &#x27;&#x27;;</span><br><span class="line">              this.go_login();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          // 允许发送验证码</span><br><span class="line">          this.is_send = true;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            message: &#x27;欢迎注册&#x27;,</span><br><span class="line">            type: &#x27;success&#x27;,</span><br><span class="line">            duration: 500,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).catch(errors =&gt; &#123;</span><br><span class="line">        console.log(errors)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    send_sms() &#123;</span><br><span class="line">      // 如果is_send为false直接返回了不让点</span><br><span class="line">      if (!this.is_send) return;</span><br><span class="line">      // 点了一次又设置了is_send为false，并设置定时器60s</span><br><span class="line">      this.is_send = false;</span><br><span class="line">      let sms_interval_time = 60;</span><br><span class="line">      this.sms_interval = &quot;发送中...&quot;;</span><br><span class="line"></span><br><span class="line">      // 发送axios请求</span><br><span class="line">      this.$axios.get(this.$settings.base_url + &#x27;/user/send/&#x27;, &#123;params: &#123;&#x27;phone&#x27;: this.mobile&#125;&#125;).then(response =&gt; &#123;</span><br><span class="line">            if (response.data.code == 200) &#123;</span><br><span class="line">              this.$message(&#123;</span><br><span class="line">                message: &#x27;验证码发送成功&#x27;,</span><br><span class="line">                type: &#x27;success&#x27;,</span><br><span class="line">                duration: 1000,</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              this.$message(&#123;</span><br><span class="line">                message: &#x27;未知错误&#x27;,</span><br><span class="line">                type: &#x27;warning&#x27;,</span><br><span class="line">                duration: 500,</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      ).catch(errors =&gt; &#123;</span><br><span class="line">        console.log(errors)</span><br><span class="line">      &#125;)</span><br><span class="line">      let timer = setInterval(() =&gt; &#123;</span><br><span class="line">        if (sms_interval_time &lt;= 1) &#123;</span><br><span class="line">          clearInterval(timer);</span><br><span class="line">          this.sms_interval = &quot;获取验证码&quot;;</span><br><span class="line">          this.is_send = true; // 重新回复点击发送功能的条件</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          sms_interval_time -= 1;</span><br><span class="line">          this.sms_interval = `$&#123;sms_interval_time&#125;秒后再发`;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, 1000);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 注册功能</span><br><span class="line">    register() &#123;</span><br><span class="line">      if (this.mobile &amp;&amp; this.password &amp;&amp; this.sms) &#123;</span><br><span class="line">        this.$axios.post(this.$settings.base_url + &#x27;/user/register/&#x27;, &#123;</span><br><span class="line">          phone: this.mobile,</span><br><span class="line">          password: this.password,</span><br><span class="line">          code: this.sms,</span><br><span class="line">        &#125;).then(response =&gt; &#123;</span><br><span class="line">          if (response.data.code == 200) &#123;</span><br><span class="line">            this.$message(&#123;</span><br><span class="line">              message: &#x27;注册成功&#x27;,</span><br><span class="line">              type: &#x27;success&#x27;,</span><br><span class="line">              duration: 500,</span><br><span class="line">              onClose: () =&gt; &#123;</span><br><span class="line">                this.go_login();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.$message(&#123;</span><br><span class="line">              message: &#x27;数据不符合规范或验证码错误&#x27;,</span><br><span class="line">              type: &#x27;warning&#x27;,</span><br><span class="line">              duration: 500,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).catch(errors =&gt; &#123;</span><br><span class="line">          console.log(errors)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.$message(&#123;</span><br><span class="line">          message: &#x27;注册信息不能为空&#x27;,</span><br><span class="line">          type: &#x27;warning&#x27;,</span><br><span class="line">          duration: 500,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.register &#123;</span><br><span class="line">  width: 100vw;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  position: fixed;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  z-index: 10;</span><br><span class="line">  background-color: rgba(0, 0, 0, 0.3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  height: 480px;</span><br><span class="line">  background-color: white;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  position: relative;</span><br><span class="line">  top: calc(50vh - 240px);</span><br><span class="line">  left: calc(50vw - 200px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-icon-close &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  top: 10px;</span><br><span class="line">  right: 10px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-icon-close:hover &#123;</span><br><span class="line">  color: darkred;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 40px;</span><br><span class="line">  width: 280px;</span><br><span class="line">  left: 60px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav &#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  height: 38px;</span><br><span class="line">  border-bottom: 2px solid darkgrey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav &gt; span &#123;</span><br><span class="line">  margin-left: 90px;</span><br><span class="line">  color: darkgrey;</span><br><span class="line">  user-select: none;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  padding-bottom: 10px;</span><br><span class="line">  border-bottom: 2px solid darkgrey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav &gt; span.active &#123;</span><br><span class="line">  color: black;</span><br><span class="line">  border-bottom: 3px solid black;</span><br><span class="line">  padding-bottom: 9px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-input, .el-button &#123;</span><br><span class="line">  margin-top: 40px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-button &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.foot &gt; span &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">  color: orange;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sms &#123;</span><br><span class="line">  color: orange;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 70px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="Header-vue"><a href="#Header-vue" class="headerlink" title="Header.vue"></a>Header.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;slogan&quot;&gt;</span><br><span class="line">      &lt;p&gt;快乐教育 | 通过割韭菜获得体面生活,学IT,上快乐程序员!&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;nav&quot;&gt;</span><br><span class="line">      &lt;ul class=&quot;left-part&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;logo&quot;&gt;</span><br><span class="line">          &lt;router-link to=&quot;/&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;../assets/img/head-logo.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">          &lt;/router-link&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li class=&quot;ele&quot;&gt;</span><br><span class="line">          &lt;span @click=&quot;goPage(&#x27;/free-course&#x27;)&quot; :class=&quot;&#123;active: url_path === &#x27;/free-course&#x27;&#125;&quot;&gt;免费课&lt;/span&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li class=&quot;ele&quot;&gt;</span><br><span class="line">          &lt;span @click=&quot;goPage(&#x27;/actual-course&#x27;)&quot; :class=&quot;&#123;active: url_path === &#x27;/actual-course&#x27;&#125;&quot;&gt;实战课&lt;/span&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li class=&quot;ele&quot;&gt;</span><br><span class="line">          &lt;span @click=&quot;goPage(&#x27;/light-course&#x27;)&quot; :class=&quot;&#123;active: url_path === &#x27;/light-course&#x27;&#125;&quot;&gt;轻课&lt;/span&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;div class=&quot;right-part&quot;&gt;</span><br><span class="line">        &lt;div v-if=&quot;!username&quot;&gt;</span><br><span class="line">          &lt;span @click=&quot;put_login&quot;&gt;登录&lt;/span&gt;</span><br><span class="line">          &lt;span class=&quot;line&quot;&gt;|&lt;/span&gt;</span><br><span class="line">          &lt;span @click=&quot;put_register&quot;&gt;注册&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div v-else&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; username &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;span class=&quot;line&quot;&gt;|&lt;/span&gt;</span><br><span class="line">          &lt;span @click=&quot;logout&quot;&gt;注销&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;form class=&quot;search&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;tips&quot; v-if=&quot;is_search_tip&quot;&gt;</span><br><span class="line">          &lt;span @click=&quot;search_action(&#x27;Python&#x27;)&quot;&gt;Python&lt;/span&gt;</span><br><span class="line">          &lt;span @click=&quot;search_action(&#x27;Linux&#x27;)&quot;&gt;Linux&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; :placeholder=&quot;search_placeholder&quot; @focus=&quot;on_search&quot; @blur=&quot;off_search&quot;</span><br><span class="line">               v-model=&quot;search_word&quot;&gt;</span><br><span class="line">        &lt;button type=&quot;button&quot; class=&quot;glyphicon glyphicon-search&quot; @click=&quot;search_action(search_word)&quot;&gt;&lt;/button&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">      &lt;Login v-if=&quot;is_login&quot; @close=&quot;close_login&quot; @go=&quot;put_register&quot; @loginsuccess=&quot;login_success&quot;/&gt;</span><br><span class="line">      &lt;Register v-if=&quot;is_register&quot; @close=&quot;close_register&quot; @go=&quot;put_login&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Login from &#x27;./Login&#x27;</span><br><span class="line">import Register from &#x27;./Register&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Header&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      url_path: sessionStorage.url_path || &#x27;/&#x27;,</span><br><span class="line">      is_login: false,</span><br><span class="line">      is_register: false,</span><br><span class="line">      token: &#x27;&#x27;,</span><br><span class="line">      username: &#x27;&#x27;,</span><br><span class="line">      // 搜索相关</span><br><span class="line">      is_search_tip: true,</span><br><span class="line">      search_placeholder: &#x27;&#x27;,</span><br><span class="line">      search_word: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    goPage(url_path) &#123;</span><br><span class="line">      // 已经是当前路由就没有必要重新跳转,传入路由不是当前所在路径就跳转</span><br><span class="line">      if (this.url_path !== url_path) &#123;</span><br><span class="line">        this.$router.push(url_path);</span><br><span class="line">      &#125;</span><br><span class="line">      sessionStorage.url_path = url_path;</span><br><span class="line">    &#125;,</span><br><span class="line">    put_login() &#123;</span><br><span class="line">      this.is_login = true</span><br><span class="line">      this.is_register = false</span><br><span class="line">    &#125;,</span><br><span class="line">    put_register() &#123;</span><br><span class="line">      this.is_login = false</span><br><span class="line">      this.is_register = true</span><br><span class="line">    &#125;,</span><br><span class="line">    close_login() &#123;</span><br><span class="line">      this.is_login = false</span><br><span class="line">    &#125;,</span><br><span class="line">    close_register() &#123;</span><br><span class="line">      this.is_register = false</span><br><span class="line">    &#125;,</span><br><span class="line">    // 登陆成功复制token和用户名</span><br><span class="line">    login_success() &#123;</span><br><span class="line">      this.token = this.$cookies.get(&#x27;token&#x27;)</span><br><span class="line">      this.username = this.$cookies.get(&#x27;username&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    logout() &#123;</span><br><span class="line">      // 清空cookie,并将两个变量设置为空</span><br><span class="line">      this.$cookies.remove(&#x27;token&#x27;)</span><br><span class="line">      this.$cookies.remove(&#x27;username&#x27;)</span><br><span class="line">      this.username = &#x27;&#x27;</span><br><span class="line">      this.token = &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    search_action(search_word) &#123;</span><br><span class="line">      if (!search_word) &#123;</span><br><span class="line">        this.$message(&#x27;请输入要搜索的内容&#x27;);</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      // this.$route.params路径中取值</span><br><span class="line">      // 从？后的查询参数取值</span><br><span class="line">      if (search_word !== this.$route.query.word) &#123;</span><br><span class="line">        this.$router.push(`/course/search?word=$&#123;search_word&#125;`);</span><br><span class="line">      &#125;</span><br><span class="line">      this.search_word = &#x27;&#x27;;</span><br><span class="line">    &#125;,</span><br><span class="line">    on_search() &#123;</span><br><span class="line">      this.search_placeholder = &#x27;请输入想搜索的课程&#x27;;</span><br><span class="line">      this.is_search_tip = false;</span><br><span class="line">    &#125;,</span><br><span class="line">    off_search() &#123;</span><br><span class="line">      this.search_placeholder = &#x27;&#x27;;</span><br><span class="line">      this.is_search_tip = true;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    sessionStorage.url_path = this.$route.path;</span><br><span class="line">    this.url_path = this.$route.path;</span><br><span class="line">    // 当页面一创建出来就去cookies去token和username</span><br><span class="line">    this.token = this.$cookies.get(&#x27;token&#x27;)</span><br><span class="line">    this.username = this.$cookies.get(&#x27;username&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Login,</span><br><span class="line">    Register,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.header &#123;</span><br><span class="line">  background-color: white;</span><br><span class="line">  box-shadow: 0 0 5px 0 #aaa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header:after &#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.slogan &#123;</span><br><span class="line">  background-color: #eee;</span><br><span class="line">  height: 40px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.slogan p &#123;</span><br><span class="line">  width: 1200px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  color: #aaa;</span><br><span class="line">  font-size: 13px;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav &#123;</span><br><span class="line">  background-color: white;</span><br><span class="line">  user-select: none;</span><br><span class="line">  width: 1200px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav ul &#123;</span><br><span class="line">  padding: 15px 0;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav ul:after &#123;</span><br><span class="line">  clear: both;</span><br><span class="line">  content: &#x27;&#x27;;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav ul li &#123;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.logo &#123;</span><br><span class="line">  margin-right: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ele &#123;</span><br><span class="line">  margin: 0 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ele span &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  font: 15px/36px &#x27;微软雅黑&#x27;;</span><br><span class="line">  border-bottom: 2px solid transparent;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ele span:hover &#123;</span><br><span class="line">  border-bottom-color: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ele span.active &#123;</span><br><span class="line">  color: orange;</span><br><span class="line">  border-bottom-color: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.right-part &#123;</span><br><span class="line">  float: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.right-part .line &#123;</span><br><span class="line">  margin: 0 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.right-part span &#123;</span><br><span class="line">  line-height: 68px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.search &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  position: relative;</span><br><span class="line">  margin-top: 22px;</span><br><span class="line">  margin-right: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.search input, .search button &#123;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">  background-color: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.search input &#123;</span><br><span class="line">  border-bottom: 1px solid #eeeeee;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.search input:focus &#123;</span><br><span class="line">  border-bottom-color: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.search input:focus + button &#123;</span><br><span class="line">  color: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.search .tips &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 3px;</span><br><span class="line">  left: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.search .tips span &#123;</span><br><span class="line">  border-radius: 11px;</span><br><span class="line">  background-color: #eee;</span><br><span class="line">  line-height: 22px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  padding: 0 7px;</span><br><span class="line">  margin-right: 3px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  color: #aaa;</span><br><span class="line">  font-size: 14px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.search .tips span:hover &#123;</span><br><span class="line">  color: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="课程页面"><a href="#课程页面" class="headerlink" title="课程页面"></a>课程页面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;course&quot;&gt;</span><br><span class="line">        &lt;Header&gt;&lt;/Header&gt;</span><br><span class="line">        &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">            &lt;!-- 筛选条件 --&gt;</span><br><span class="line">            &lt;div class=&quot;condition&quot;&gt;</span><br><span class="line">                &lt;ul class=&quot;cate-list&quot;&gt;</span><br><span class="line">                    &lt;li class=&quot;title&quot;&gt;课程分类:&lt;/li&gt;</span><br><span class="line">                    &lt;li :class=&quot;filter.course_category==0?&#x27;this&#x27;:&#x27;&#x27;&quot; @click=&quot;filter.course_category=0&quot;&gt;全部&lt;/li&gt;</span><br><span class="line">                    &lt;li :class=&quot;filter.course_category==category.id?&#x27;this&#x27;:&#x27;&#x27;&quot; v-for=&quot;category in category_list&quot;</span><br><span class="line">                        @click=&quot;filter.course_category=category.id&quot; :key=&quot;category.name&quot;&gt;&#123;&#123;category.name&#125;&#125;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class=&quot;ordering&quot;&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li class=&quot;title&quot;&gt;筛&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;选:&lt;/li&gt;</span><br><span class="line">                        &lt;li class=&quot;default&quot; :class=&quot;(filter.ordering==&#x27;id&#x27; || filter.ordering==&#x27;-id&#x27;)?&#x27;this&#x27;:&#x27;&#x27;&quot;</span><br><span class="line">                            @click=&quot;filter.ordering=&#x27;-id&#x27;&quot;&gt;默认</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                        &lt;li class=&quot;hot&quot; :class=&quot;(filter.ordering==&#x27;students&#x27; || filter.ordering==&#x27;-students&#x27;)?&#x27;this&#x27;:&#x27;&#x27;&quot;</span><br><span class="line">                            @click=&quot;filter.ordering=(filter.ordering==&#x27;-students&#x27;?&#x27;students&#x27;:&#x27;-students&#x27;)&quot;&gt;人气</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                        &lt;li class=&quot;price&quot;</span><br><span class="line">                            :class=&quot;filter.ordering==&#x27;price&#x27;?&#x27;price_up this&#x27;:(filter.ordering==&#x27;-price&#x27;?&#x27;price_down this&#x27;:&#x27;&#x27;)&quot;</span><br><span class="line">                            @click=&quot;filter.ordering=(filter.ordering==&#x27;-price&#x27;?&#x27;price&#x27;:&#x27;-price&#x27;)&quot;&gt;价格</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;</span><br><span class="line">                    &lt;p class=&quot;condition-result&quot;&gt;共&#123;&#123;course_total&#125;&#125;个课程&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;!-- 课程列表 --&gt;</span><br><span class="line">            &lt;div class=&quot;course-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;course-item&quot; v-for=&quot;course in course_list&quot; :key=&quot;course.name&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;course-image&quot;&gt;</span><br><span class="line">                        &lt;img :src=&quot;course.course_img&quot; alt=&quot;&quot;&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;course-info&quot;&gt;</span><br><span class="line">                        &lt;h3&gt;</span><br><span class="line">                            &lt;router-link :to=&quot;&#x27;/free/detail/&#x27;+course.id&quot;&gt;&#123;&#123;course.name&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">                            &lt;span&gt;&lt;img src=&quot;@/assets/img/avatar1.svg&quot; alt=&quot;&quot;&gt;&#123;&#123;course.students&#125;&#125;人已加入学习&lt;/span&gt;&lt;/h3&gt;</span><br><span class="line">                        &lt;p class=&quot;teather-info&quot;&gt;</span><br><span class="line">                            &#123;&#123;course.teacher.name&#125;&#125; &#123;&#123;course.teacher.title&#125;&#125; &#123;&#123;course.teacher.signature&#125;&#125;</span><br><span class="line">                            &lt;span v-if=&quot;course.sections&gt;course.pub_sections&quot;&gt;共&#123;&#123;course.sections&#125;&#125;课时/已更新&#123;&#123;course.pub_sections&#125;&#125;课时&lt;/span&gt;</span><br><span class="line">                            &lt;span v-else&gt;共&#123;&#123;course.sections&#125;&#125;课时/更新完成&lt;/span&gt;</span><br><span class="line">                        &lt;/p&gt;</span><br><span class="line">                        &lt;ul class=&quot;section-list&quot;&gt;</span><br><span class="line">                            &lt;li v-for=&quot;(section, key) in course.section_list&quot; :key=&quot;section.name&quot;&gt;&lt;span</span><br><span class="line">                                    class=&quot;section-title&quot;&gt;0&#123;&#123;key+1&#125;&#125;  |  &#123;&#123;section.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">                                &lt;span class=&quot;free&quot; v-if=&quot;section.free_trail&quot;&gt;免费&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                        &lt;div class=&quot;pay-box&quot;&gt;</span><br><span class="line">                            &lt;div v-if=&quot;course.discount_type&quot;&gt;</span><br><span class="line">                                &lt;span class=&quot;discount-type&quot;&gt;&#123;&#123;course.discount_type&#125;&#125;&lt;/span&gt;</span><br><span class="line">                                &lt;span class=&quot;discount-price&quot;&gt;￥&#123;&#123;course.real_price&#125;&#125;元&lt;/span&gt;</span><br><span class="line">                                &lt;span class=&quot;original-price&quot;&gt;原价：&#123;&#123;course.price&#125;&#125;元&lt;/span&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;span v-else class=&quot;discount-price&quot;&gt;￥&#123;&#123;course.price&#125;&#125;元&lt;/span&gt;</span><br><span class="line">                            &lt;span class=&quot;buy-now&quot;&gt;立即购买&lt;/span&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;course_pagination block&quot;&gt;</span><br><span class="line">                &lt;el-pagination</span><br><span class="line">                        @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">                        @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">                        :current-page.sync=&quot;filter.page&quot;</span><br><span class="line">                        :page-sizes=&quot;[2, 3, 5, 10]&quot;</span><br><span class="line">                        :page-size=&quot;filter.page_size&quot;</span><br><span class="line">                        layout=&quot;sizes, prev, pager, next&quot;</span><br><span class="line">                        :total=&quot;course_total&quot;&gt;</span><br><span class="line">                &lt;/el-pagination&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!--&lt;Footer&gt;&lt;/Footer&gt;--&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Header from &quot;@/components/Header&quot;</span><br><span class="line">    // import Footer from &quot;@/components/Footer&quot;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Course&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                category_list: [], // 课程分类列表</span><br><span class="line">                course_list: [],   // 课程列表</span><br><span class="line">                course_total: 0,   // 当前课程的总数量</span><br><span class="line">                filter: &#123;</span><br><span class="line">                    course_category: 0, // 当前用户选择的课程分类，刚进入页面默认为全部，值为0</span><br><span class="line">                    ordering: &quot;-id&quot;,    // 数据的排序方式，默认值是-id，表示对于id进行降序排列</span><br><span class="line">                    page_size: 2,       // 单页数据量</span><br><span class="line">                    page: 1,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            this.get_category();</span><br><span class="line">            this.get_course();</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            Header,</span><br><span class="line">            // Footer,</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            &quot;filter.course_category&quot;: function () &#123;</span><br><span class="line">                this.filter.page = 1;</span><br><span class="line">                this.get_course();</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;filter.ordering&quot;: function () &#123;</span><br><span class="line">                this.get_course();</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;filter.page_size&quot;: function () &#123;</span><br><span class="line">                this.get_course();</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;filter.page&quot;: function () &#123;</span><br><span class="line">                this.get_course();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            </span><br><span class="line">            handleSizeChange(val) &#123;</span><br><span class="line">                // 每页数据量发生变化时执行的方法</span><br><span class="line">                this.filter.page = 1;</span><br><span class="line">                this.filter.page_size = val;</span><br><span class="line">            &#125;,</span><br><span class="line">            handleCurrentChange(val) &#123;</span><br><span class="line">                // 页码发生变化时执行的方法</span><br><span class="line">                this.filter.page = val;</span><br><span class="line">            &#125;,</span><br><span class="line">            get_category() &#123;</span><br><span class="line">                // 获取课程分类信息</span><br><span class="line">                this.$axios.get(`$&#123;this.$settings.base_url&#125;/course/categories/`).then(response =&gt; &#123;</span><br><span class="line">                    this.category_list = response.data;</span><br><span class="line">                &#125;).catch(() =&gt; &#123;</span><br><span class="line">                    this.$message(&#123;</span><br><span class="line">                        message: &quot;获取课程分类信息有误，请联系客服工作人员&quot;,</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            get_course() &#123;</span><br><span class="line">                // 排序</span><br><span class="line">                let filters = &#123;</span><br><span class="line">                    ordering: this.filter.ordering, // 排序</span><br><span class="line">                &#125;;</span><br><span class="line">                // 判决是否进行分类课程的展示</span><br><span class="line">                if (this.filter.course_category &gt; 0) &#123;</span><br><span class="line">                    filters.course_category = this.filter.course_category;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 设置单页数据量</span><br><span class="line">                if (this.filter.page_size &gt; 0) &#123;</span><br><span class="line">                    filters.page_size = this.filter.page_size;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    filters.page_size = 5;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 设置当前页码</span><br><span class="line">                if (this.filter.page &gt; 1) &#123;</span><br><span class="line">                    filters.page = this.filter.page;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    filters.page = 1;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                // 获取课程列表信息</span><br><span class="line">                this.$axios.get(`$&#123;this.$settings.base_url&#125;/course/free/`, &#123;</span><br><span class="line">                    params: filters</span><br><span class="line">                &#125;).then(response =&gt; &#123;</span><br><span class="line">                    // console.log(response.data);</span><br><span class="line">                    this.course_list = response.data.results;</span><br><span class="line">                    this.course_total = response.data.count;</span><br><span class="line">                    // console.log(this.course_list);</span><br><span class="line">                &#125;).catch(() =&gt; &#123;</span><br><span class="line">                    this.$message(&#123;</span><br><span class="line">                        message: &quot;获取课程信息有误，请联系客服工作人员&quot;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .course &#123;</span><br><span class="line">        background: #f6f6f6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .main &#123;</span><br><span class="line">        width: 1100px;</span><br><span class="line">        margin: 35px auto 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .condition &#123;</span><br><span class="line">        margin-bottom: 35px;</span><br><span class="line">        padding: 25px 30px 25px 20px;</span><br><span class="line">        background: #fff;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        box-shadow: 0 2px 4px 0 #f0f0f0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .cate-list &#123;</span><br><span class="line">        border-bottom: 1px solid #333;</span><br><span class="line">        border-bottom-color: rgba(51, 51, 51, .05);</span><br><span class="line">        padding-bottom: 18px;</span><br><span class="line">        margin-bottom: 17px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .cate-list::after &#123;</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: block;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .cate-list li &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        padding: 6px 15px;</span><br><span class="line">        line-height: 16px;</span><br><span class="line">        margin-left: 14px;</span><br><span class="line">        position: relative;</span><br><span class="line">        transition: all .3s ease;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        color: #4a4a4a;</span><br><span class="line">        border: 1px solid transparent; /* transparent 透明 */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .cate-list .title &#123;</span><br><span class="line">        color: #888;</span><br><span class="line">        margin-left: 0;</span><br><span class="line">        letter-spacing: .36px;</span><br><span class="line">        padding: 0;</span><br><span class="line">        line-height: 28px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .cate-list .this &#123;</span><br><span class="line">        color: #ffc210;</span><br><span class="line">        border: 1px solid #ffc210 !important;</span><br><span class="line">        border-radius: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .ordering::after &#123;</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: block;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .ordering ul &#123;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .ordering ul::after &#123;</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: block;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .ordering .condition-result &#123;</span><br><span class="line">        float: right;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">        line-height: 28px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .ordering ul li &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        padding: 6px 15px;</span><br><span class="line">        line-height: 16px;</span><br><span class="line">        margin-left: 14px;</span><br><span class="line">        position: relative;</span><br><span class="line">        transition: all .3s ease;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        color: #4a4a4a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .ordering .title &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #888;</span><br><span class="line">        letter-spacing: .36px;</span><br><span class="line">        margin-left: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        line-height: 28px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .ordering .this &#123;</span><br><span class="line">        color: #ffc210;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .ordering .price &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .ordering .price::before,</span><br><span class="line">    .course .ordering .price::after &#123;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: block;</span><br><span class="line">        width: 0px;</span><br><span class="line">        height: 0px;</span><br><span class="line">        border: 5px solid transparent;</span><br><span class="line">        position: absolute;</span><br><span class="line">        right: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .ordering .price::before &#123;</span><br><span class="line">        border-bottom: 5px solid #aaa;</span><br><span class="line">        margin-bottom: 2px;</span><br><span class="line">        top: 2px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .ordering .price::after &#123;</span><br><span class="line">        border-top: 5px solid #aaa;</span><br><span class="line">        bottom: 2px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .ordering .price_up::before &#123;</span><br><span class="line">        border-bottom-color: #ffc210;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .ordering .price_down::after &#123;</span><br><span class="line">        border-top-color: #ffc210;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .course-item:hover &#123;</span><br><span class="line">        box-shadow: 4px 6px 16px rgba(0, 0, 0, .5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .course-item &#123;</span><br><span class="line">        width: 1100px;</span><br><span class="line">        background: #fff;</span><br><span class="line">        padding: 20px 30px 20px 20px;</span><br><span class="line">        margin-bottom: 35px;</span><br><span class="line">        border-radius: 2px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        box-shadow: 2px 3px 16px rgba(0, 0, 0, .1);</span><br><span class="line">        /* css3.0 过渡动画 hover 事件操作 */</span><br><span class="line">        transition: all .2s ease;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .course-item::after &#123;</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: block;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 顶级元素 父级元素  当前元素&#123;&#125; */</span><br><span class="line">    .course .course-item .course-image &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 423px;</span><br><span class="line">        height: 210px;</span><br><span class="line">        margin-right: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .course-item .course-image img &#123;</span><br><span class="line">        max-width: 100%;</span><br><span class="line">        max-height: 210px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .course-item .course-info &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 596px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .course-info h3 a &#123;</span><br><span class="line">        font-size: 26px;</span><br><span class="line">        color: #333;</span><br><span class="line">        font-weight: normal;</span><br><span class="line">        margin-bottom: 8px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .course-info h3 span &#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">        float: right;</span><br><span class="line">        margin-top: 14px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .course-info h3 span img &#123;</span><br><span class="line">        width: 11px;</span><br><span class="line">        height: auto;</span><br><span class="line">        margin-right: 7px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .course-info .teather-info &#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">        margin-bottom: 14px;</span><br><span class="line">        padding-bottom: 14px;</span><br><span class="line">        border-bottom: 1px solid #333;</span><br><span class="line">        border-bottom-color: rgba(51, 51, 51, .05);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .course-info .teather-info span &#123;</span><br><span class="line">        float: right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .section-list::after &#123;</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: block;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .section-list li &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 44%;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #666;</span><br><span class="line">        padding-left: 22px;</span><br><span class="line">        /* background: url(&quot;路径&quot;) 是否平铺 x轴位置 y轴位置 */</span><br><span class="line">        background: url(&quot;/src/assets/img/play-icon-gray.svg&quot;) no-repeat left 4px;</span><br><span class="line">        margin-bottom: 15px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .section-list li .section-title &#123;</span><br><span class="line">        /* 以下3句，文本内容过多，会自动隐藏，并显示省略符号 */</span><br><span class="line">        text-overflow: ellipsis;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        white-space: nowrap;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        max-width: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .section-list li:hover &#123;</span><br><span class="line">        background-image: url(&quot;/src/assets/img/play-icon-yellow.svg&quot;);</span><br><span class="line">        color: #ffc210;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .section-list li .free &#123;</span><br><span class="line">        width: 34px;</span><br><span class="line">        height: 20px;</span><br><span class="line">        color: #fd7b4d;</span><br><span class="line">        vertical-align: super;</span><br><span class="line">        margin-left: 10px;</span><br><span class="line">        border: 1px solid #fd7b4d;</span><br><span class="line">        border-radius: 2px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 13px;</span><br><span class="line">        white-space: nowrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .section-list li:hover .free &#123;</span><br><span class="line">        color: #ffc210;</span><br><span class="line">        border-color: #ffc210;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .pay-box &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        bottom: 20px;</span><br><span class="line">        width: 600px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .pay-box::after &#123;</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: block;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .pay-box .discount-type &#123;</span><br><span class="line">        padding: 6px 10px;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin-right: 8px;</span><br><span class="line">        background: #fa6240;</span><br><span class="line">        border: 1px solid #fa6240;</span><br><span class="line">        border-radius: 10px 0 10px 0;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .pay-box .discount-price &#123;</span><br><span class="line">        font-size: 24px;</span><br><span class="line">        color: #fa6240;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .pay-box .original-price &#123;</span><br><span class="line">        text-decoration: line-through;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">        margin-left: 10px;</span><br><span class="line">        float: left;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .pay-box .buy-now &#123;</span><br><span class="line">        width: 120px;</span><br><span class="line">        height: 38px;</span><br><span class="line">        background: transparent;</span><br><span class="line">        color: #fa6240;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        border: 1px solid #fd7b4d;</span><br><span class="line">        border-radius: 3px;</span><br><span class="line">        transition: all .2s ease-in-out;</span><br><span class="line">        float: right;</span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 38px;</span><br><span class="line">        position: absolute;</span><br><span class="line">        right: 0;</span><br><span class="line">        bottom: 5px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-item .pay-box .buy-now:hover &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background: #ffc210;</span><br><span class="line">        border: 1px solid #ffc210;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course .course_pagination &#123;</span><br><span class="line">        margin-bottom: 60px;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="课程详情页面"><a href="#课程详情页面" class="headerlink" title="课程详情页面"></a>课程详情页面</h3><h4 id="安装视频播放器"><a href="#安装视频播放器" class="headerlink" title="安装视频播放器"></a>安装视频播放器</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;: cnpm install vue<span class="literal">-video-player</span></span><br></pre></td></tr></table></figure><h4 id="配置：main-js-1"><a href="#配置：main-js-1" class="headerlink" title="配置：main.js"></a>配置：main.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue-video播放器</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;video.js/dist/video-js.css&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;vue-video-player/src/custom-theme.css&#x27;</span>);</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VideoPlayer</span> <span class="keyword">from</span> <span class="string">&#x27;vue-video-player&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VideoPlayer</span>);</span><br></pre></td></tr></table></figure><h4 id="路由：router-js"><a href="#路由：router-js" class="headerlink" title="路由：router.js"></a>路由：router.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">FreeCourseDetail</span> <span class="keyword">from</span> <span class="string">&#x27;./views/FreeCourseDetail.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/free/detail/:pk&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;free-detail&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">FreeCourseDetail</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;detail&quot;&gt;</span><br><span class="line">        &lt;Header/&gt;</span><br><span class="line">        &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;course-info&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;wrap-left&quot;&gt;</span><br><span class="line">                    &lt;videoPlayer class=&quot;video-player vjs-custom-skin&quot;</span><br><span class="line">                                 ref=&quot;videoPlayer&quot;</span><br><span class="line">                                 :playsinline=&quot;true&quot;</span><br><span class="line">                                 :options=&quot;playerOptions&quot;</span><br><span class="line">                                 @play=&quot;onPlayerPlay($event)&quot;</span><br><span class="line">                                 @pause=&quot;onPlayerPause($event)&quot;&gt;</span><br><span class="line">                    &lt;/videoPlayer&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;wrap-right&quot;&gt;</span><br><span class="line">                    &lt;h3 class=&quot;course-name&quot;&gt;&#123;&#123;course_info.name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">                    &lt;p class=&quot;data&quot;&gt;&#123;&#123;course_info.students&#125;&#125;人在学&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;课程总时长：&#123;&#123;course_info.sections&#125;&#125;课时/&#123;&#123;course_info.pub_sections&#125;&#125;小时&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;难度：&#123;&#123;course_info.level_name&#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;sale-time&quot;&gt;</span><br><span class="line">                        &lt;p class=&quot;sale-type&quot;&gt;价格 &lt;span class=&quot;original_price&quot;&gt;¥&#123;&#123;course_info.price&#125;&#125;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">                        &lt;p class=&quot;expire&quot;&gt;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;buy&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;buy-btn&quot;&gt;</span><br><span class="line">                            &lt;button class=&quot;buy-now&quot;&gt;立即购买&lt;/button&gt;</span><br><span class="line">                            &lt;button class=&quot;free&quot;&gt;免费试学&lt;/button&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;!--&lt;div class=&quot;add-cart&quot; @click=&quot;add_cart(course_info.id)&quot;&gt;--&gt;</span><br><span class="line">&lt;!--&lt;img src=&quot;@/assets/img/cart-yellow.svg&quot; alt=&quot;&quot;&gt;加入购物车--&gt;</span><br><span class="line">                        &lt;!--&lt;/div&gt;--&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;course-tab&quot;&gt;</span><br><span class="line">                &lt;ul class=&quot;tab-list&quot;&gt;</span><br><span class="line">                    &lt;li :class=&quot;tabIndex==1?&#x27;active&#x27;:&#x27;&#x27;&quot; @click=&quot;tabIndex=1&quot;&gt;详情介绍&lt;/li&gt;</span><br><span class="line">                    &lt;li :class=&quot;tabIndex==2?&#x27;active&#x27;:&#x27;&#x27;&quot; @click=&quot;tabIndex=2&quot;&gt;课程章节 &lt;span :class=&quot;tabIndex!=2?&#x27;free&#x27;:&#x27;&#x27;&quot;&gt;(试学)&lt;/span&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                    &lt;li :class=&quot;tabIndex==3?&#x27;active&#x27;:&#x27;&#x27;&quot; @click=&quot;tabIndex=3&quot;&gt;用户评论&lt;/li&gt;</span><br><span class="line">                    &lt;li :class=&quot;tabIndex==4?&#x27;active&#x27;:&#x27;&#x27;&quot; @click=&quot;tabIndex=4&quot;&gt;常见问题&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;course-content&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;course-tab-list&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;tab-item&quot; v-if=&quot;tabIndex==1&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;course-brief&quot; v-html=&quot;course_info.brief_text&quot;&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;tab-item&quot; v-if=&quot;tabIndex==2&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;tab-item-title&quot;&gt;</span><br><span class="line">                            &lt;p class=&quot;chapter&quot;&gt;课程章节&lt;/p&gt;</span><br><span class="line">                            &lt;p class=&quot;chapter-length&quot;&gt;共&#123;&#123;course_chapters.length&#125;&#125;章 &#123;&#123;course_info.sections&#125;&#125;个课时&lt;/p&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div class=&quot;chapter-item&quot; v-for=&quot;chapter in course_chapters&quot; :key=&quot;chapter.name&quot;&gt;</span><br><span class="line">                            &lt;p class=&quot;chapter-title&quot;&gt;&lt;img src=&quot;@/assets/img/enum.svg&quot; alt=&quot;&quot;&gt;第&#123;&#123;chapter.chapter&#125;&#125;章·&#123;&#123;chapter.name&#125;&#125;</span><br><span class="line">                            &lt;/p&gt;</span><br><span class="line">                            &lt;ul class=&quot;section-list&quot;&gt;</span><br><span class="line">                                &lt;li class=&quot;section-item&quot; v-for=&quot;section in chapter.coursesections&quot; :key=&quot;section.name&quot;&gt;</span><br><span class="line">                                    &lt;p class=&quot;name&quot;&gt;&lt;span class=&quot;index&quot;&gt;&#123;&#123;chapter.chapter&#125;&#125;-&#123;&#123;section.orders&#125;&#125;&lt;/span&gt;</span><br><span class="line">                                        &#123;&#123;section.name&#125;&#125;&lt;span class=&quot;free&quot; v-if=&quot;section.free_trail&quot;&gt;免费&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">                                    &lt;p class=&quot;time&quot;&gt;&#123;&#123;section.duration&#125;&#125; &lt;img src=&quot;@/assets/img/chapter-player.svg&quot;&gt;&lt;/p&gt;</span><br><span class="line">                                    &lt;button class=&quot;try&quot; v-if=&quot;section.free_trail&quot;&gt;立即试学&lt;/button&gt;</span><br><span class="line">                                    &lt;button class=&quot;try&quot; v-else&gt;立即购买&lt;/button&gt;</span><br><span class="line">                                &lt;/li&gt;</span><br><span class="line">                            &lt;/ul&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;tab-item&quot; v-if=&quot;tabIndex==3&quot;&gt;</span><br><span class="line">                        用户评论</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;tab-item&quot; v-if=&quot;tabIndex==4&quot;&gt;</span><br><span class="line">                        常见问题</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;course-side&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;teacher-info&quot;&gt;</span><br><span class="line">                        &lt;h4 class=&quot;side-title&quot;&gt;&lt;span&gt;授课老师&lt;/span&gt;&lt;/h4&gt;</span><br><span class="line">                        &lt;div class=&quot;teacher-content&quot;&gt;</span><br><span class="line">                            &lt;div class=&quot;cont1&quot;&gt;</span><br><span class="line">                                &lt;img :src=&quot;course_info.teacher.image&quot;&gt;</span><br><span class="line">                                &lt;div class=&quot;name&quot;&gt;</span><br><span class="line">                                    &lt;p class=&quot;teacher-name&quot;&gt;&#123;&#123;course_info.teacher.name&#125;&#125;</span><br><span class="line">                                        &#123;&#123;course_info.teacher.title&#125;&#125;&lt;/p&gt;</span><br><span class="line">                                    &lt;p class=&quot;teacher-title&quot;&gt;&#123;&#123;course_info.teacher.signature&#125;&#125;&lt;/p&gt;</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;p class=&quot;narrative&quot;&gt;&#123;&#123;course_info.teacher.brief&#125;&#125;&lt;/p&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!--&lt;Footer/&gt;--&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Header from &quot;@/components/Header&quot;</span><br><span class="line">    // import Footer from &quot;@/components/Footer&quot;</span><br><span class="line"></span><br><span class="line">    // 加载组件</span><br><span class="line">    import &#123;videoPlayer&#125; from &#x27;vue-video-player&#x27;;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Detail&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                tabIndex: 2,   // 当前选项卡显示的下标</span><br><span class="line">                course_id: 0, // 当前课程信息的ID</span><br><span class="line">                course_info: &#123;</span><br><span class="line">                    teacher: &#123;&#125;,</span><br><span class="line">                &#125;, // 课程信息</span><br><span class="line">                course_chapters: [], // 课程的章节课时列表</span><br><span class="line">                playerOptions: &#123;</span><br><span class="line">                    aspectRatio: &#x27;16:9&#x27;, // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如&quot;16:9&quot;或&quot;4:3&quot;）</span><br><span class="line">                    sources: [&#123; // 播放资源和资源格式</span><br><span class="line">                        type: &quot;video/mp4&quot;,</span><br><span class="line">                        src: &quot;http://img.ksbbs.com/asset/Mon_1703/05cacb4e02f9d9e.mp4&quot; //你的视频地址（必填）</span><br><span class="line">                    &#125;],</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            this.get_course_id();</span><br><span class="line">            this.get_course_data();</span><br><span class="line">            this.get_chapter();</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            onPlayerPlay() &#123;</span><br><span class="line">                // 当视频播放时，执行的方法</span><br><span class="line">                console.log(&#x27;视频开始播放&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            onPlayerPause() &#123;</span><br><span class="line">                // 当视频暂停播放时，执行的方法</span><br><span class="line">                console.log(&#x27;视频暂停，可以打开广告了&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            get_course_id() &#123;</span><br><span class="line">                // 获取地址栏上面的课程ID</span><br><span class="line">                this.course_id = this.$route.params.pk || this.$route.query.pk;</span><br><span class="line">                if (this.course_id &lt; 1) &#123;</span><br><span class="line">                    let _this = this;</span><br><span class="line">                    _this.$alert(&quot;对不起，当前视频不存在！&quot;, &quot;警告&quot;, &#123;</span><br><span class="line">                        callback() &#123;</span><br><span class="line">                            _this.$router.go(-1);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            get_course_data() &#123;</span><br><span class="line">                // ajax请求课程信息</span><br><span class="line">                this.$axios.get(`$&#123;this.$settings.base_url&#125;/course/free/$&#123;this.course_id&#125;/`).then(response =&gt; &#123;</span><br><span class="line">                    // window.console.log(response.data);</span><br><span class="line">                    this.course_info = response.data;</span><br><span class="line">                    console.log(this.course_info)</span><br><span class="line">                &#125;).catch(() =&gt; &#123;</span><br><span class="line">                    this.$message(&#123;</span><br><span class="line">                        message: &quot;对不起，访问页面出错！请联系客服工作人员！&quot;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            get_chapter() &#123;</span><br><span class="line">                // 获取当前课程对应的章节课时信息</span><br><span class="line">                // http://127.0.0.1:8000/course/chapters/?course=(pk)</span><br><span class="line">                this.$axios.get(`$&#123;this.$settings.base_url&#125;/course/chapters/`, &#123;</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        &quot;course&quot;: this.course_id,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).then(response =&gt; &#123;</span><br><span class="line">                    this.course_chapters = response.data;</span><br><span class="line">                &#125;).catch(error =&gt; &#123;</span><br><span class="line">                    window.console.log(error.response);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            Header,</span><br><span class="line">            // Footer,</span><br><span class="line">            videoPlayer, // 注册组件</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .main &#123;</span><br><span class="line">        background: #fff;</span><br><span class="line">        padding-top: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-info &#123;</span><br><span class="line">        width: 1200px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .wrap-left &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 690px;</span><br><span class="line">        height: 388px;</span><br><span class="line">        background-color: #000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .wrap-right &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        position: relative;</span><br><span class="line">        height: 388px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-name &#123;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">        color: #333;</span><br><span class="line">        padding: 10px 23px;</span><br><span class="line">        letter-spacing: .45px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .data &#123;</span><br><span class="line">        padding-left: 23px;</span><br><span class="line">        padding-right: 23px;</span><br><span class="line">        padding-bottom: 16px;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .sale-time &#123;</span><br><span class="line">        width: 464px;</span><br><span class="line">        background: #fa6240;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #4a4a4a;</span><br><span class="line">        padding: 10px 23px;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .sale-type &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        letter-spacing: .36px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .sale-time .expire &#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        float: right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .sale-time .expire .second &#123;</span><br><span class="line">        width: 24px;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        background: #fafafa;</span><br><span class="line">        color: #5e5e5e;</span><br><span class="line">        padding: 6px 0;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-price &#123;</span><br><span class="line">        background: #fff;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #4a4a4a;</span><br><span class="line">        padding: 5px 23px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .discount &#123;</span><br><span class="line">        font-size: 26px;</span><br><span class="line">        color: #fa6240;</span><br><span class="line">        margin-left: 10px;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        margin-bottom: -5px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .original &#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">        margin-left: 10px;</span><br><span class="line">        text-decoration: line-through;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .buy &#123;</span><br><span class="line">        width: 464px;</span><br><span class="line">        padding: 0px 23px;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0;</span><br><span class="line">        bottom: 20px;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .buy .buy-btn &#123;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .buy .buy-now &#123;</span><br><span class="line">        width: 125px;</span><br><span class="line">        height: 40px;</span><br><span class="line">        border: 0;</span><br><span class="line">        background: #ffc210;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        margin-right: 15px;</span><br><span class="line">        outline: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .buy .free &#123;</span><br><span class="line">        width: 125px;</span><br><span class="line">        height: 40px;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        margin-right: 15px;</span><br><span class="line">        background: #fff;</span><br><span class="line">        color: #ffc210;</span><br><span class="line">        border: 1px solid #ffc210;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .add-cart &#123;</span><br><span class="line">        float: right;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #ffc210;</span><br><span class="line">        text-align: center;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .add-cart img &#123;</span><br><span class="line">        width: 20px;</span><br><span class="line">        height: 18px;</span><br><span class="line">        margin-right: 7px;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-tab &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        background: #fff;</span><br><span class="line">        margin-bottom: 30px;</span><br><span class="line">        box-shadow: 0 2px 4px 0 #f0f0f0;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-tab .tab-list &#123;</span><br><span class="line">        width: 1200px;</span><br><span class="line">        margin: auto;</span><br><span class="line">        color: #4a4a4a;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .tab-list li &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        margin-right: 15px;</span><br><span class="line">        padding: 26px 20px 16px;</span><br><span class="line">        font-size: 17px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .tab-list .active &#123;</span><br><span class="line">        color: #ffc210;</span><br><span class="line">        border-bottom: 2px solid #ffc210;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .tab-list .free &#123;</span><br><span class="line">        color: #fb7c55;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-content &#123;</span><br><span class="line">        width: 1200px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        background: #FAFAFA;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        padding-bottom: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-tab-list &#123;</span><br><span class="line">        width: 880px;</span><br><span class="line">        height: auto;</span><br><span class="line">        padding: 20px;</span><br><span class="line">        background: #fff;</span><br><span class="line">        float: left;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        position: relative;</span><br><span class="line">        box-shadow: 0 2px 4px 0 #f0f0f0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .tab-item &#123;</span><br><span class="line">        width: 880px;</span><br><span class="line">        background: #fff;</span><br><span class="line">        padding-bottom: 20px;</span><br><span class="line">        box-shadow: 0 2px 4px 0 #f0f0f0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .tab-item-title &#123;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">        padding: 25px 20px 11px;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        margin-bottom: 20px;</span><br><span class="line">        border-bottom: 1px solid #333;</span><br><span class="line">        border-bottom-color: rgba(51, 51, 51, .05);</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .chapter &#123;</span><br><span class="line">        font-size: 17px;</span><br><span class="line">        color: #4a4a4a;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .chapter-length &#123;</span><br><span class="line">        float: right;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">        letter-spacing: .19px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .chapter-title &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #4a4a4a;</span><br><span class="line">        letter-spacing: .26px;</span><br><span class="line">        padding: 12px;</span><br><span class="line">        background: #eee;</span><br><span class="line">        border-radius: 2px;</span><br><span class="line">        display: -ms-flexbox;</span><br><span class="line">        display: flex;</span><br><span class="line">        -ms-flex-align: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .chapter-title img &#123;</span><br><span class="line">        width: 18px;</span><br><span class="line">        height: 18px;</span><br><span class="line">        margin-right: 7px;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .section-list &#123;</span><br><span class="line">        padding: 0 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .section-list .section-item &#123;</span><br><span class="line">        padding: 15px 20px 15px 36px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">        position: relative;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .section-item .name &#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #666;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .section-item .index &#123;</span><br><span class="line">        margin-right: 5px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .section-item .free &#123;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        letter-spacing: .19px;</span><br><span class="line">        background: #ffc210;</span><br><span class="line">        border-radius: 100px;</span><br><span class="line">        padding: 1px 9px;</span><br><span class="line">        margin-left: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .section-item .time &#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #666;</span><br><span class="line">        letter-spacing: .23px;</span><br><span class="line">        opacity: 1;</span><br><span class="line">        transition: all .15s ease-in-out;</span><br><span class="line">        float: right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .section-item .time img &#123;</span><br><span class="line">        width: 18px;</span><br><span class="line">        height: 18px;</span><br><span class="line">        margin-left: 15px;</span><br><span class="line">        vertical-align: text-bottom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .section-item .try &#123;</span><br><span class="line">        width: 86px;</span><br><span class="line">        height: 28px;</span><br><span class="line">        background: #ffc210;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        position: absolute;</span><br><span class="line">        right: 20px;</span><br><span class="line">        top: 10px;</span><br><span class="line">        opacity: 0;</span><br><span class="line">        transition: all .2s ease-in-out;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        outline: none;</span><br><span class="line">        border: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .section-item:hover &#123;</span><br><span class="line">        background: #fcf7ef;</span><br><span class="line">        box-shadow: 0 0 0 0 #f3f3f3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .section-item:hover .name &#123;</span><br><span class="line">        color: #333;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .section-item:hover .try &#123;</span><br><span class="line">        opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .course-side &#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: auto;</span><br><span class="line">        margin-left: 20px;</span><br><span class="line">        float: right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .teacher-info &#123;</span><br><span class="line">        background: #fff;</span><br><span class="line">        margin-bottom: 20px;</span><br><span class="line">        box-shadow: 0 2px 4px 0 #f0f0f0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side-title &#123;</span><br><span class="line">        font-weight: normal;</span><br><span class="line">        font-size: 17px;</span><br><span class="line">        color: #4a4a4a;</span><br><span class="line">        padding: 18px 14px;</span><br><span class="line">        border-bottom: 1px solid #333;</span><br><span class="line">        border-bottom-color: rgba(51, 51, 51, .05);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side-title span &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        border-left: 2px solid #ffc210;</span><br><span class="line">        padding-left: 12px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .teacher-content &#123;</span><br><span class="line">        padding: 30px 20px;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .teacher-content .cont1 &#123;</span><br><span class="line">        margin-bottom: 12px;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .teacher-content .cont1 img &#123;</span><br><span class="line">        width: 54px;</span><br><span class="line">        height: 54px;</span><br><span class="line">        margin-right: 12px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .teacher-content .cont1 .name &#123;</span><br><span class="line">        float: right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .teacher-content .cont1 .teacher-name &#123;</span><br><span class="line">        width: 188px;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #4a4a4a;</span><br><span class="line">        padding-bottom: 4px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .teacher-content .cont1 .teacher-title &#123;</span><br><span class="line">        width: 188px;</span><br><span class="line">        font-size: 13px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">        white-space: nowrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .teacher-content .narrative &#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #666;</span><br><span class="line">        line-height: 24px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="搜索导航栏"><a href="#搜索导航栏" class="headerlink" title="搜索导航栏"></a>搜索导航栏</h3><h4 id="router-x2F-index-js"><a href="#router-x2F-index-js" class="headerlink" title="router&#x2F;index.js"></a>router&#x2F;index.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">SearchCourse</span> <span class="keyword">from</span> <span class="string">&#x27;../views/SearchCourse.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/course/search&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;search-course&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">SearchCourse</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="Header-vue-1"><a href="#Header-vue-1" class="headerlink" title="Header.vue"></a>Header.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;form class=&quot;search&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;tips&quot; v-if=&quot;is_search_tip&quot;&gt;</span><br><span class="line">        &lt;span @click=&quot;search_action(&#x27;Python&#x27;)&quot;&gt;Python&lt;/span&gt;</span><br><span class="line">        &lt;span @click=&quot;search_action(&#x27;Linux&#x27;)&quot;&gt;Linux&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; :placeholder=&quot;search_placeholder&quot; @focus=&quot;on_search&quot; @blur=&quot;off_search&quot; v-model=&quot;search_word&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;glyphicon glyphicon-search&quot; @click=&quot;search_action(search_word)&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                is_search_tip: true,</span><br><span class="line">                search_placeholder: &#x27;&#x27;,</span><br><span class="line">                search_word: &#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            search_action(search_word) &#123;</span><br><span class="line">                if (!search_word) &#123;</span><br><span class="line">                    this.$message(&#x27;请输入要搜索的内容&#x27;);</span><br><span class="line">                    return</span><br><span class="line">                &#125;</span><br><span class="line">                if (search_word !== this.$route.query.word) &#123;</span><br><span class="line">                    this.$router.push(`/course/search?word=$&#123;search_word&#125;`);</span><br><span class="line">                &#125;</span><br><span class="line">                this.search_word = &#x27;&#x27;;</span><br><span class="line">            &#125;,</span><br><span class="line">            on_search() &#123;</span><br><span class="line">                this.search_placeholder = &#x27;请输入想搜索的课程&#x27;;</span><br><span class="line">                this.is_search_tip = false;</span><br><span class="line">            &#125;,</span><br><span class="line">            off_search() &#123;</span><br><span class="line">                this.search_placeholder = &#x27;&#x27;;</span><br><span class="line">                this.is_search_tip = true;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .search &#123;</span><br><span class="line">        float: right;</span><br><span class="line">        position: relative;</span><br><span class="line">        margin-top: 22px;</span><br><span class="line">        margin-right: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .search input, .search button &#123;</span><br><span class="line">        border: none;</span><br><span class="line">        outline: none;</span><br><span class="line">        background-color: white;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .search input &#123;</span><br><span class="line">        border-bottom: 1px solid #eeeeee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .search input:focus &#123;</span><br><span class="line">        border-bottom-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .search input:focus + button &#123;</span><br><span class="line">        color: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .search .tips &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        bottom: 3px;</span><br><span class="line">        left: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .search .tips span &#123;</span><br><span class="line">        border-radius: 11px;</span><br><span class="line">        background-color: #eee;</span><br><span class="line">        line-height: 22px;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        padding: 0 7px;</span><br><span class="line">        margin-right: 3px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        color: #aaa;</span><br><span class="line">        font-size: 14px;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .search .tips span:hover &#123;</span><br><span class="line">        color: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="搜索结果页面"><a href="#搜索结果页面" class="headerlink" title="搜索结果页面"></a>搜索结果页面</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;search-course course&quot;&gt;</span><br><span class="line">    &lt;Header/&gt;</span><br><span class="line">    &lt;!-- 课程列表 --&gt;</span><br><span class="line">    &lt;h4&gt;共找到&#123;&#123;course_total&#125;&#125;门课程:&lt;/h4&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">      &lt;div v-if=&quot;course_list.length &gt; 0&quot; class=&quot;course-list&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;course-item&quot; v-for=&quot;course in course_list&quot; :key=&quot;course.name&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;course-image&quot;&gt;</span><br><span class="line">            &lt;img :src=&quot;course.course_img&quot; alt=&quot;&quot;&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;course-info&quot;&gt;</span><br><span class="line">            &lt;h3&gt;</span><br><span class="line">              &lt;router-link :to=&quot;&#x27;/free/detail/&#x27;+course.id&quot;&gt;&#123;&#123; course.name &#125;&#125;&lt;/router-link&gt;</span><br><span class="line">              &lt;span&gt;&lt;img src=&quot;@/assets/img/avatar1.svg&quot; alt=&quot;&quot;&gt;&#123;&#123; course.students &#125;&#125;人已加入学习&lt;/span&gt;&lt;/h3&gt;</span><br><span class="line">            &lt;p class=&quot;teather-info&quot;&gt;</span><br><span class="line">              &#123;&#123; course.teacher.name &#125;&#125; &#123;&#123; course.teacher.title &#125;&#125; &#123;&#123; course.teacher.signature &#125;&#125;</span><br><span class="line">              &lt;span</span><br><span class="line">                  v-if=&quot;course.sections&gt;course.pub_sections&quot;&gt;共&#123;&#123; course.sections &#125;&#125;课时/已更新&#123;&#123;</span><br><span class="line">                  course.pub_sections</span><br><span class="line">                &#125;&#125;课时&lt;/span&gt;</span><br><span class="line">              &lt;span v-else&gt;共&#123;&#123; course.sections &#125;&#125;课时/更新完成&lt;/span&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;ul class=&quot;section-list&quot;&gt;</span><br><span class="line">              &lt;li v-for=&quot;(section, key) in course.section_list&quot; :key=&quot;section.name&quot;&gt;&lt;span</span><br><span class="line">                  class=&quot;section-title&quot;&gt;0&#123;&#123; key + 1 &#125;&#125;  |  &#123;&#123; section.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;span class=&quot;free&quot; v-if=&quot;section.free_trail&quot;&gt;免费&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;div class=&quot;pay-box&quot;&gt;</span><br><span class="line">              &lt;div v-if=&quot;course.discount_type&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;discount-type&quot;&gt;&#123;&#123; course.discount_type &#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;span class=&quot;discount-price&quot;&gt;￥&#123;&#123; course.real_price &#125;&#125;元&lt;/span&gt;</span><br><span class="line">                &lt;span class=&quot;original-price&quot;&gt;原价：&#123;&#123; course.price &#125;&#125;元&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;span v-else class=&quot;discount-price&quot;&gt;￥&#123;&#123; course.price &#125;&#125;元&lt;/span&gt;</span><br><span class="line">              &lt;span class=&quot;buy-now&quot;&gt;立即购买&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div v-else style=&quot;text-align: center; line-height: 60px&quot;&gt;</span><br><span class="line">        没有搜索结果</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;course_pagination block&quot;&gt;</span><br><span class="line">        &lt;el-pagination</span><br><span class="line">            @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">            @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">            :current-page.sync=&quot;filter.page&quot;</span><br><span class="line">            :page-sizes=&quot;[2, 3, 5, 10]&quot;</span><br><span class="line">            :page-size=&quot;filter.page_size&quot;</span><br><span class="line">            layout=&quot;sizes, prev, pager, next&quot;</span><br><span class="line">            :total=&quot;course_total&quot;&gt;</span><br><span class="line">        &lt;/el-pagination&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Header from &#x27;../components/Header&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;SearchCourse&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Header,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      course_list: [],</span><br><span class="line">      course_total: 0,</span><br><span class="line">      filter: &#123;</span><br><span class="line">        page_size: 10,</span><br><span class="line">        page: 1,</span><br><span class="line">        search: &#x27;&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.get_course()</span><br><span class="line">  &#125;,</span><br><span class="line">  // 分页需要监听页码和数字的变化</span><br><span class="line">  watch: &#123;</span><br><span class="line">    &#x27;$route.query&#x27;() &#123;</span><br><span class="line">      this.get_course()</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;filter.page_size&quot;: function () &#123;</span><br><span class="line">      this.get_course();</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;filter.page&quot;: function () &#123;</span><br><span class="line">      this.get_course();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleSizeChange(val) &#123;</span><br><span class="line">      // 每页数据量发生变化时执行的方法</span><br><span class="line">      this.filter.page = 1;</span><br><span class="line">      this.filter.page_size = val;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCurrentChange(val) &#123;</span><br><span class="line">      // 页码发生变化时执行的方法</span><br><span class="line">      this.filter.page = val;</span><br><span class="line">    &#125;,</span><br><span class="line">    get_course() &#123;</span><br><span class="line">      // 获取搜索的关键字</span><br><span class="line">      this.filter.search = this.$route.query.word || this.$route.query.wd;</span><br><span class="line"></span><br><span class="line">      // 获取课程列表信息</span><br><span class="line">      this.$axios.get(`$&#123;this.$settings.base_url&#125;/course/search/`, &#123;</span><br><span class="line">        params: this.filter</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        // 如果后台不分页，数据在response.data中；如果后台分页，数据在response.data.results中</span><br><span class="line">        console.log(response)</span><br><span class="line">        this.course_list = response.data.results;</span><br><span class="line">        this.course_total = response.data.count;</span><br><span class="line">      &#125;).catch(() =&gt; &#123;</span><br><span class="line">        this.$message(&#123;</span><br><span class="line">          message: &quot;获取课程信息有误，请联系客服工作人员&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.course &#123;</span><br><span class="line">  background: #f6f6f6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .main &#123;</span><br><span class="line">  width: 1100px;</span><br><span class="line">  margin: 35px auto 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .condition &#123;</span><br><span class="line">  margin-bottom: 35px;</span><br><span class="line">  padding: 25px 30px 25px 20px;</span><br><span class="line">  background: #fff;</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">  box-shadow: 0 2px 4px 0 #f0f0f0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .cate-list &#123;</span><br><span class="line">  border-bottom: 1px solid #333;</span><br><span class="line">  border-bottom-color: rgba(51, 51, 51, .05);</span><br><span class="line">  padding-bottom: 18px;</span><br><span class="line">  margin-bottom: 17px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .cate-list::after &#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .cate-list li &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  padding: 6px 15px;</span><br><span class="line">  line-height: 16px;</span><br><span class="line">  margin-left: 14px;</span><br><span class="line">  position: relative;</span><br><span class="line">  transition: all .3s ease;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  color: #4a4a4a;</span><br><span class="line">  border: 1px solid transparent; /* transparent 透明 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .cate-list .title &#123;</span><br><span class="line">  color: #888;</span><br><span class="line">  margin-left: 0;</span><br><span class="line">  letter-spacing: .36px;</span><br><span class="line">  padding: 0;</span><br><span class="line">  line-height: 28px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .cate-list .this &#123;</span><br><span class="line">  color: #ffc210;</span><br><span class="line">  border: 1px solid #ffc210 !important;</span><br><span class="line">  border-radius: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .ordering::after &#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .ordering ul &#123;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .ordering ul::after &#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .ordering .condition-result &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  color: #9b9b9b;</span><br><span class="line">  line-height: 28px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .ordering ul li &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  padding: 6px 15px;</span><br><span class="line">  line-height: 16px;</span><br><span class="line">  margin-left: 14px;</span><br><span class="line">  position: relative;</span><br><span class="line">  transition: all .3s ease;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  color: #4a4a4a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .ordering .title &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  color: #888;</span><br><span class="line">  letter-spacing: .36px;</span><br><span class="line">  margin-left: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  line-height: 28px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .ordering .this &#123;</span><br><span class="line">  color: #ffc210;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .ordering .price &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .ordering .price::before,</span><br><span class="line">.course .ordering .price::after &#123;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 0px;</span><br><span class="line">  height: 0px;</span><br><span class="line">  border: 5px solid transparent;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .ordering .price::before &#123;</span><br><span class="line">  border-bottom: 5px solid #aaa;</span><br><span class="line">  margin-bottom: 2px;</span><br><span class="line">  top: 2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .ordering .price::after &#123;</span><br><span class="line">  border-top: 5px solid #aaa;</span><br><span class="line">  bottom: 2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .ordering .price_up::before &#123;</span><br><span class="line">  border-bottom-color: #ffc210;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .ordering .price_down::after &#123;</span><br><span class="line">  border-top-color: #ffc210;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .course-item:hover &#123;</span><br><span class="line">  box-shadow: 4px 6px 16px rgba(0, 0, 0, .5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .course-item &#123;</span><br><span class="line">  width: 1100px;</span><br><span class="line">  background: #fff;</span><br><span class="line">  padding: 20px 30px 20px 20px;</span><br><span class="line">  margin-bottom: 35px;</span><br><span class="line">  border-radius: 2px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  box-shadow: 2px 3px 16px rgba(0, 0, 0, .1);</span><br><span class="line">  /* css3.0 过渡动画 hover 事件操作 */</span><br><span class="line">  transition: all .2s ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .course-item::after &#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 顶级元素 父级元素  当前元素&#123;&#125; */</span><br><span class="line">.course .course-item .course-image &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  width: 423px;</span><br><span class="line">  height: 210px;</span><br><span class="line">  margin-right: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .course-item .course-image img &#123;</span><br><span class="line">  max-width: 100%;</span><br><span class="line">  max-height: 210px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .course-item .course-info &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  width: 596px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .course-info h3 a &#123;</span><br><span class="line">  font-size: 26px;</span><br><span class="line">  color: #333;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">  margin-bottom: 8px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .course-info h3 span &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  color: #9b9b9b;</span><br><span class="line">  float: right;</span><br><span class="line">  margin-top: 14px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .course-info h3 span img &#123;</span><br><span class="line">  width: 11px;</span><br><span class="line">  height: auto;</span><br><span class="line">  margin-right: 7px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .course-info .teather-info &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  color: #9b9b9b;</span><br><span class="line">  margin-bottom: 14px;</span><br><span class="line">  padding-bottom: 14px;</span><br><span class="line">  border-bottom: 1px solid #333;</span><br><span class="line">  border-bottom-color: rgba(51, 51, 51, .05);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .course-info .teather-info span &#123;</span><br><span class="line">  float: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .section-list::after &#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .section-list li &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  width: 44%;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  color: #666;</span><br><span class="line">  padding-left: 22px;</span><br><span class="line">  /* background: url(&quot;路径&quot;) 是否平铺 x轴位置 y轴位置 */</span><br><span class="line">  background: url(&quot;/src/assets/img/play-icon-gray.svg&quot;) no-repeat left 4px;</span><br><span class="line">  margin-bottom: 15px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .section-list li .section-title &#123;</span><br><span class="line">  /* 以下3句，文本内容过多，会自动隐藏，并显示省略符号 */</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  max-width: 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .section-list li:hover &#123;</span><br><span class="line">  background-image: url(&quot;/src/assets/img/play-icon-yellow.svg&quot;);</span><br><span class="line">  color: #ffc210;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .section-list li .free &#123;</span><br><span class="line">  width: 34px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  color: #fd7b4d;</span><br><span class="line">  vertical-align: super;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">  border: 1px solid #fd7b4d;</span><br><span class="line">  border-radius: 2px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 13px;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .section-list li:hover .free &#123;</span><br><span class="line">  color: #ffc210;</span><br><span class="line">  border-color: #ffc210;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .pay-box &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 20px;</span><br><span class="line">  width: 600px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .pay-box::after &#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .pay-box .discount-type &#123;</span><br><span class="line">  padding: 6px 10px;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  color: #fff;</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-right: 8px;</span><br><span class="line">  background: #fa6240;</span><br><span class="line">  border: 1px solid #fa6240;</span><br><span class="line">  border-radius: 10px 0 10px 0;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .pay-box .discount-price &#123;</span><br><span class="line">  font-size: 24px;</span><br><span class="line">  color: #fa6240;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .pay-box .original-price &#123;</span><br><span class="line">  text-decoration: line-through;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  color: #9b9b9b;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">  float: left;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .pay-box .buy-now &#123;</span><br><span class="line">  width: 120px;</span><br><span class="line">  height: 38px;</span><br><span class="line">  background: transparent;</span><br><span class="line">  color: #fa6240;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  border: 1px solid #fd7b4d;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  transition: all .2s ease-in-out;</span><br><span class="line">  float: right;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 38px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course-item .pay-box .buy-now:hover &#123;</span><br><span class="line">  color: #fff;</span><br><span class="line">  background: #ffc210;</span><br><span class="line">  border: 1px solid #ffc210;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course .course_pagination &#123;</span><br><span class="line">  margin-bottom: 60px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="支付成功的回调页面"><a href="#支付成功的回调页面" class="headerlink" title="支付成功的回调页面"></a>支付成功的回调页面</h3><h4 id="router-x2F-index-js-1"><a href="#router-x2F-index-js-1" class="headerlink" title="router&#x2F;index.js"></a>router&#x2F;index.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PaySuccess</span> <span class="keyword">from</span> <span class="string">&#x27;../views/PaySuccess.vue&#x27;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/pay/success&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;pay-success&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">PaySuccess</span></span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="views-x2F-PaySuccess-vue"><a href="#views-x2F-PaySuccess-vue" class="headerlink" title="views&#x2F;PaySuccess.vue"></a>views&#x2F;PaySuccess.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;pay-success&quot;&gt;</span><br><span class="line">        &lt;!--如果是单独的页面，就没必要展示导航栏(带有登录的用户)--&gt;</span><br><span class="line">        &lt;Header/&gt;</span><br><span class="line">        &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;success-tips&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;tips&quot;&gt;您已成功购买 1 门课程！&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;order-info&quot;&gt;</span><br><span class="line">                &lt;p class=&quot;info&quot;&gt;&lt;b&gt;订单号：&lt;/b&gt;&lt;span&gt;&#123;&#123; result.out_trade_no &#125;&#125;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">                &lt;p class=&quot;info&quot;&gt;&lt;b&gt;交易号：&lt;/b&gt;&lt;span&gt;&#123;&#123; result.trade_no &#125;&#125;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">                &lt;p class=&quot;info&quot;&gt;&lt;b&gt;付款时间：&lt;/b&gt;&lt;span&gt;&lt;span&gt;&#123;&#123; result.timestamp &#125;&#125;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;study&quot;&gt;</span><br><span class="line">                &lt;span&gt;立即学习&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Header from &quot;@/components/Header&quot;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Success&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                result: &#123;&#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            // url后拼接的参数：?及后面的所有参数 =&gt; ?a=1&amp;b=2</span><br><span class="line">            // console.log(location.search);</span><br><span class="line"></span><br><span class="line">            // 解析支付宝回调的url参数</span><br><span class="line">            let params = location.search.substring(1);  // 去除? =&gt; a=1&amp;b=2</span><br><span class="line">            let items = params.length ? params.split(&#x27;&amp;&#x27;) : [];  // [&#x27;a=1&#x27;, &#x27;b=2&#x27;]</span><br><span class="line">            //逐个将每一项添加到args对象中</span><br><span class="line">            for (let i = 0; i &lt; items.length; i++) &#123;  // 第一次循环a=1，第二次b=2</span><br><span class="line">                let k_v = items[i].split(&#x27;=&#x27;);  // [&#x27;a&#x27;, &#x27;1&#x27;]</span><br><span class="line">                //解码操作，因为查询字符串经过编码的</span><br><span class="line">                if (k_v.length &gt;= 2) &#123;</span><br><span class="line">                    // url编码反解</span><br><span class="line">                    let k = decodeURIComponent(k_v[0]);</span><br><span class="line">                    this.result[k] = decodeURIComponent(k_v[1]);</span><br><span class="line">                    // 没有url编码反解</span><br><span class="line">                    // this.result[k_v[0]] = k_v[1];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            // 解析后的结果</span><br><span class="line">            // console.log(this.result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            // 把地址栏上面的支付结果，再get请求转发给后端</span><br><span class="line">            this.$axios(&#123;</span><br><span class="line">                url: this.$settings.base_url + &#x27;/order/success/&#x27; + location.search,</span><br><span class="line">                method: &#x27;get&#x27;,</span><br><span class="line">            &#125;).then(response =&gt; &#123;</span><br><span class="line">                console.log(response.data);</span><br><span class="line">            &#125;).catch(() =&gt; &#123;</span><br><span class="line">                console.log(&#x27;支付结果同步失败&#x27;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            Header,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .main &#123;</span><br><span class="line">        padding: 60px 0;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        width: 1200px;</span><br><span class="line">        background: #fff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .main .title &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        -ms-flex-align: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">        padding: 25px 40px;</span><br><span class="line">        border-bottom: 1px solid #f2f2f2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .main .title .success-tips &#123;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .title img &#123;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        width: 60px;</span><br><span class="line">        height: 60px;</span><br><span class="line">        margin-right: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .title .success-tips &#123;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .title .tips &#123;</span><br><span class="line">        font-size: 26px;</span><br><span class="line">        color: #000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    .info span &#123;</span><br><span class="line">        color: #ec6730;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .order-info &#123;</span><br><span class="line">        padding: 25px 48px;</span><br><span class="line">        padding-bottom: 15px;</span><br><span class="line">        border-bottom: 1px solid #f2f2f2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .order-info p &#123;</span><br><span class="line">        display: -ms-flexbox;</span><br><span class="line">        display: flex;</span><br><span class="line">        margin-bottom: 10px;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .order-info p b &#123;</span><br><span class="line">        font-weight: 400;</span><br><span class="line">        color: #9d9d9d;</span><br><span class="line">        white-space: nowrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .study &#123;</span><br><span class="line">        padding: 25px 40px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .study span &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        width: 140px;</span><br><span class="line">        height: 42px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 42px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        background: #ffc210;</span><br><span class="line">        border-radius: 6px;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #fff;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF</title>
      <link href="/2022/08/31/DRF/"/>
      <url>/2022/08/31/DRF/</url>
      
        <content type="html"><![CDATA[<h2 id="一、开发模式和RESTful"><a href="#一、开发模式和RESTful" class="headerlink" title="一、开发模式和RESTful"></a>一、开发模式和RESTful</h2><h3 id="1、web应用开发模式"><a href="#1、web应用开发模式" class="headerlink" title="1、web应用开发模式"></a>1、web应用开发模式</h3><h4 id="1-1、前后端不分离"><a href="#1-1、前后端不分离" class="headerlink" title="1.1、前后端不分离"></a>1.1、前后端不分离</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前后端混合开发（前后端不分离）：返回的是html的内容，需要写模板</span></span><br><span class="line"><span class="comment"># java---》jsp</span></span><br><span class="line">https://www.pearvideo.com/category_loading.jsp</span><br><span class="line"><span class="comment">#php写的</span></span><br><span class="line">http://www.aa7a.cn/user.php</span><br><span class="line"><span class="comment"># python写的</span></span><br><span class="line">http://www.aa7a.cn/user.html</span><br></pre></td></tr></table></figure><h4 id="1-2、前后端分离"><a href="#1-2、前后端分离" class="headerlink" title="1.2、前后端分离"></a>1.2、前后端分离</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前后端分离：只专注于写后端接口，返回json，xml格式数据</span></span><br><span class="line"><span class="comment"># xml格式</span></span><br><span class="line">&lt;xml&gt;</span><br><span class="line">&lt;name&gt;Tom&lt;/name&gt;</span><br><span class="line">&lt;/xml&gt;</span><br><span class="line"><span class="comment"># json</span></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Tom&quot;</span>&#125;</span><br><span class="line"><span class="comment">#什么是动态页面（查数据库的），什么是静态页面（静止的html）</span></span><br></pre></td></tr></table></figure><h3 id="2、RESTful介绍"><a href="#2、RESTful介绍" class="headerlink" title="2、RESTful介绍"></a>2、RESTful介绍</h3><p> RESTful是目前最流行的API设计风格 ， REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。 </p><h4 id="2-1、RESTFUL特点："><a href="#2-1、RESTFUL特点：" class="headerlink" title="2.1、RESTFUL特点："></a>2.1、RESTFUL特点：</h4><ul><li><h6 id="1、每一个URI代表1种资源；"><a href="#1、每一个URI代表1种资源；" class="headerlink" title="1、每一个URI代表1种资源；"></a>1、每一个URI代表1种资源；</h6></li><li><h6 id="2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作："><a href="#2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：" class="headerlink" title="2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作："></a>2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：</h6><ul><li><h6 id="GET-用来获取资源"><a href="#GET-用来获取资源" class="headerlink" title="GET 用来获取资源"></a>GET 用来获取资源</h6></li><li><h6 id="POST-用来新建资源"><a href="#POST-用来新建资源" class="headerlink" title="POST 用来新建资源"></a>POST 用来新建资源</h6></li><li><h6 id="PUT-用来更新资源"><a href="#PUT-用来更新资源" class="headerlink" title="PUT 用来更新资源"></a>PUT 用来更新资源</h6></li><li><h6 id="DELETE-用来删除资源"><a href="#DELETE-用来删除资源" class="headerlink" title="DELETE 用来删除资源"></a>DELETE 用来删除资源</h6></li></ul></li><li><h6 id="3、通过操作资源的表现形式来操作资源；"><a href="#3、通过操作资源的表现形式来操作资源；" class="headerlink" title="3、通过操作资源的表现形式来操作资源；"></a>3、通过操作资源的表现形式来操作资源；</h6></li><li><h6 id="4、资源的形式是XML或者json；"><a href="#4、资源的形式是XML或者json；" class="headerlink" title="4、资源的形式是XML或者json；"></a>4、资源的形式是XML或者json；</h6></li><li><h6 id="5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。"><a href="#5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。" class="headerlink" title="5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。"></a>5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。</h6></li></ul><h3 id="3、RESTful-API设计风格"><a href="#3、RESTful-API设计风格" class="headerlink" title="3、RESTful API设计风格"></a>3、RESTful API设计风格</h3><h4 id="1、HTTP动词"><a href="#1、HTTP动词" class="headerlink" title="1、HTTP动词"></a>1、HTTP动词</h4><p>对于资源的具体操作类型，由HTTP动词表示。常用的HTTP动词有下面四个（括号里是对应的SQL命令）。</p><ul><li><h6 id="GET（SELECT）：从服务器取出资源（一项或多项）。"><a href="#GET（SELECT）：从服务器取出资源（一项或多项）。" class="headerlink" title="GET（SELECT）：从服务器取出资源（一项或多项）。"></a>GET（SELECT）：从服务器取出资源（一项或多项）。</h6></li><li><h6 id="POST（CREATE）：在服务器新建一个资源。"><a href="#POST（CREATE）：在服务器新建一个资源。" class="headerlink" title="POST（CREATE）：在服务器新建一个资源。"></a>POST（CREATE）：在服务器新建一个资源。</h6></li><li><h6 id="PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。"><a href="#PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。" class="headerlink" title="PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。"></a>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</h6></li><li><h6 id="DELETE（DELETE）：从服务器删除资源。"><a href="#DELETE（DELETE）：从服务器删除资源。" class="headerlink" title="DELETE（DELETE）：从服务器删除资源。"></a>DELETE（DELETE）：从服务器删除资源。</h6></li></ul><h4 id="2、url路径"><a href="#2、url路径" class="headerlink" title="2、url路径"></a>2、url路径</h4><ul><li><h5 id="url路径尽量用名词表示-而不用动词"><a href="#url路径尽量用名词表示-而不用动词" class="headerlink" title="url路径尽量用名词表示,而不用动词"></a>url路径尽量用名词表示,而不用动词</h5><ul><li><h6 id="不推荐："><a href="#不推荐：" class="headerlink" title="不推荐："></a>不推荐：</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://api.lemonban.com/getProjects</span><br><span class="line">http://api.lemonban.com/deleteEnvs</span><br></pre></td></tr></table></figure></li><li><h6 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:/api.lemonban.com/Projects</span><br><span class="line">http:/api.lemonban.com/Envs</span><br></pre></td></tr></table></figure><p>路径中的project表示操作的资源</p></li></ul></li><li><h5 id="不管是单一资源，还是所有资源，路径中名词尽量用复数"><a href="#不管是单一资源，还是所有资源，路径中名词尽量用复数" class="headerlink" title="不管是单一资源，还是所有资源，路径中名词尽量用复数"></a>不管是单一资源，还是所有资源，路径中名词尽量用复数</h5><ul><li><h6 id="推荐-1"><a href="#推荐-1" class="headerlink" title="推荐"></a>推荐</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取单个数据：</span><br><span class="line">GET方法： http://api.lemonban.comapi.lemonban.com/Env/1</span><br><span class="line"># 获取所有数据:</span><br><span class="line">GET方法： http://api.lemonban.com/rest/allEnvs</span><br></pre></td></tr></table></figure></li><li><h6 id="不推荐"><a href="#不推荐" class="headerlink" title="不推荐"></a>不推荐</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取单个数据：</span><br><span class="line">GET方法： http://api.lemonban.comapi.lemonban.com/Envs/1</span><br><span class="line"># 获取所有数据:</span><br><span class="line">GET方法： http://api.lemonban.com/rest/Envs</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3、过滤参数"><a href="#3、过滤参数" class="headerlink" title="3、过滤参数"></a>3、过滤参数</h4><p> 如果接口需要通过条件过滤返回结果 ，那么过滤的条件参数，应作为查询字符串参数传递。</p><ul><li><h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?limit=<span class="number">10</span>：指定返回记录的数量</span><br><span class="line">?offset=<span class="number">10</span>：指定返回记录的开始位置。</span><br><span class="line">?page=<span class="number">2</span>&amp;per_page=<span class="number">100</span>：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br></pre></td></tr></table></figure></li></ul><h4 id="4、返回状态码"><a href="#4、返回状态码" class="headerlink" title="4、返回状态码"></a>4、返回状态码</h4><p>客户端的每一次请求，服务器都必须给出回应。回应包括 HTTP 状态码和数据两部分。</p><p>HTTP 状态码就是一个三位数，分成五个类别。</p><blockquote><ul><li><code>1xx</code>：相关信息</li><li><code>2xx</code>：操作成功</li><li><code>3xx</code>：重定向</li><li><code>4xx</code>：客户端错误</li><li><code>5xx</code>：服务器错误</li></ul></blockquote><p>这五大类总共包含<a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">100多种</a>状态码，覆盖了绝大部分可能遇到的情况。每一种状态码都有标准的（或者约定的）解释，客户端只需查看状态码，就可以判断出发生了什么情况，所以服务器应该返回尽可能精确的状态码。</p><p>API 不需要<code>1xx</code>状态码，下面介绍其他四类状态码的精确含义。</p><h5 id="1-、2XX状态码"><a href="#1-、2XX状态码" class="headerlink" title="1)、2XX状态码"></a>1)、2XX状态码</h5><p><code>200</code>状态码表示操作成功，restful Api设计风格中，不同的方法可以返回更精确的状态码。</p><blockquote><ul><li>GET: 200 OK</li><li>POST: 201 Created</li><li>PUT: 200 OK</li><li>PATCH: 200 OK</li><li>DELETE: 204 No Content</li></ul></blockquote><p>上面代码中，<code>POST</code>返回<code>201</code>状态码，表示生成了新的资源；<code>DELETE</code>返回<code>204</code>状态码，表示资源已经不存在</p><ul><li><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><ul><li><code>202 Accepted</code>状态码表示服务器已经收到请求，但还未进行处理，会在未来再处理，通常用于<strong>异步操作</strong>。</li><li>发生错误时，不应该使用200状态码，</li></ul></li></ul><h5 id="2-、4XX状态码"><a href="#2-、4XX状态码" class="headerlink" title="2)、4XX状态码"></a>2)、4XX状态码</h5><p><code>4xx</code>状态码表示客户端错误，主要有下面几种。</p><blockquote><p><code>400 Bad Request</code>：服务器不理解客户端的请求，未做任何处理。</p><p><code>401 Unauthorized</code>：用户未提供身份验证凭据，或者没有通过身份验证。</p><p><code>403 Forbidden</code>：用户通过了身份验证，但是不具有访问资源所需的权限。</p><p><code>404 Not Found</code>：所请求的资源不存在，或不可用。</p><p><code>405 Method Not Allowed</code>：用户已经通过身份验证，但是所用的 HTTP 方法不在他的权限之内。</p><p><code>410 Gone</code>：所请求的资源已从这个地址转移，不再可用。</p><p><code>415 Unsupported Media Type</code>：客户端要求的返回格式不支持。比如，API 只能返回 JSON 格式，但是客户端要求返回 XML 格式。</p><p><code>422 Unprocessable Entity</code> ：客户端上传的附件无法处理，导致请求失败。</p><p><code>429 Too Many Requests</code>：客户端的请求次数超过限额。</p></blockquote><h5 id="3-、5XX-状态码"><a href="#3-、5XX-状态码" class="headerlink" title="3)、5XX 状态码"></a>3)、5XX 状态码</h5><p><code>5xx</code>状态码表示服务端错误。一般来说，API 不会向用户透露服务器的详细信息，所以只要两个状态码就够了</p><blockquote><p><code>500 Internal Server Error</code>：客户端请求有效，服务器处理时发生了意外。</p><p><code>503 Service Unavailable</code>：服务器无法处理请求，一般用于网站维护状态</p></blockquote><h4 id="5、返回内容"><a href="#5、返回内容" class="headerlink" title="5、返回内容"></a>5、返回内容</h4><p>服务器返回的数据格式，应该尽量使用JSON</p><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><ul><li>GET &#x2F;collection：返回资源对象的列表（数组）</li><li>GET &#x2F;collection&#x2F;1：返回单个资源对象</li><li>POST &#x2F;collection：返回新生成的资源对象</li><li>PUT &#x2F;collection&#x2F;resource：返回完整的资源对象</li><li>DELETE &#x2F;collection&#x2F;resource：返回一个空文档</li></ul><h2 id="二、DRF框架介绍"><a href="#二、DRF框架介绍" class="headerlink" title="二、DRF框架介绍"></a>二、DRF框架介绍</h2><p> Django REST framework 框架是一个用于构建Web API 的强大而又灵活的工具。</p><p>通常简称为DRF框架 或 REST framework。</p><p>DRF框架是建立在Django框架基础之上，由Tom Christie大牛二次开发的开源项目。</p><ul><li><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4></li></ul><blockquote><ul><li>提供了定义序列化器Serializer的方法，可以快速根据 Django ORM 或者其它库自动序列化&#x2F;反序列化；</li><li>提供了丰富的类视图、Mixin扩展类，简化视图的编写；</li><li>丰富的定制层级：函数视图、类视图、视图集合到自动生成 API，满足各种需要；</li><li>多种身份认证和权限认证方式的支持；</li><li>内置了限流系统；</li><li>直观的 API web 界面；</li><li>可扩展性，插件丰富</li></ul></blockquote><p>DRF（Django REST framework ）框架是建立在Django框架基础之上，是一个用于构建Web API 的强大而又灵活的工具，通常简称为DRF框架 或 REST framework。</p><h3 id="1、安装和使用"><a href="#1、安装和使用" class="headerlink" title="1、安装和使用"></a>1、安装和使用</h3><ul><li><h4 id="安装DRF"><a href="#安装DRF" class="headerlink" title="安装DRF"></a>安装DRF</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure><ul><li><h4 id="注册rest-framework应用"><a href="#注册rest-framework应用" class="headerlink" title="注册rest_framework应用"></a>注册rest_framework应用</h4></li></ul><p>我们利用在Django框架学习中创建的demo工程，在<strong>settings.py</strong>的<strong>INSTALLED_APPS</strong>中添加’rest_framework’。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2、Django开发RESTful接口"><a href="#2、Django开发RESTful接口" class="headerlink" title="2、Django开发RESTful接口"></a>2、Django开发RESTful接口</h3><ul><li><h5 id="1、定义模型类"><a href="#1、定义模型类" class="headerlink" title="1、定义模型类"></a>1、定义模型类</h5></li><li><h5 id="2、定义路由"><a href="#2、定义路由" class="headerlink" title="2、定义路由"></a>2、定义路由</h5></li><li><h5 id="3、定义视图"><a href="#3、定义视图" class="headerlink" title="3、定义视图"></a>3、定义视图</h5></li></ul><h3 id="3、DRF开发RESTful接口"><a href="#3、DRF开发RESTful接口" class="headerlink" title="3、DRF开发RESTful接口"></a>3、DRF开发RESTful接口</h3><ul><li><h5 id="1、定义模型类-1"><a href="#1、定义模型类-1" class="headerlink" title="1、定义模型类"></a>1、定义模型类</h5></li><li><h5 id="2、定义序列化器"><a href="#2、定义序列化器" class="headerlink" title="2、定义序列化器"></a>2、定义序列化器</h5></li><li><h5 id="3、定义路由"><a href="#3、定义路由" class="headerlink" title="3、定义路由"></a>3、定义路由</h5></li><li><h5 id="4、定义视图"><a href="#4、定义视图" class="headerlink" title="4、定义视图"></a>4、定义视图</h5></li></ul><h2 id="三、序列化器"><a href="#三、序列化器" class="headerlink" title="三、序列化器"></a>三、序列化器</h2><ul><li><h5 id="序列化器的作用："><a href="#序列化器的作用：" class="headerlink" title="序列化器的作用："></a>序列化器的作用：</h5><ul><li><h6 id="进行数据的校验"><a href="#进行数据的校验" class="headerlink" title="进行数据的校验"></a>进行数据的校验</h6></li><li><h6 id="对数据对象进行转换"><a href="#对数据对象进行转换" class="headerlink" title="对数据对象进行转换"></a>对数据对象进行转换</h6></li></ul></li></ul><h3 id="1、序列化器的定义"><a href="#1、序列化器的定义" class="headerlink" title="1、序列化器的定义"></a>1、序列化器的定义</h3><p>​ Django REST framework中的序列化器通过类来定义，必须继承自rest_framework.serializers.Serializer ，序列化器中的字段和模型类中的字段类型保持一致</p><ul><li><h5 id="模型类如下："><a href="#模型类如下：" class="headerlink" title="模型类如下："></a>模型类如下：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipCourseData</span>(models.Model):</span><br><span class="line">    stu_number = models.CharField(max_length=<span class="number">20</span>, default=<span class="literal">None</span>, verbose_name=<span class="string">&#x27;学习人数&#x27;</span>)</span><br><span class="line">    sum_number = models.CharField(max_length=<span class="number">20</span>, default=<span class="literal">None</span>, verbose_name=<span class="string">&#x27;累计人数&#x27;</span>)</span><br><span class="line">    course_score = models.CharField(max_length=<span class="number">20</span>, default=<span class="literal">None</span>, verbose_name=<span class="string">&#x27;课程评分&#x27;</span>)</span><br><span class="line">    price = models.CharField(max_length=<span class="number">40</span>, default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;课程价格&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h5 id="序列化器的定义"><a href="#序列化器的定义" class="headerlink" title="序列化器的定义"></a>序列化器的定义</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipCourseDataSerializer</span>(serializers.Serializer):</span><br><span class="line">    stu_number = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    sum_number = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    course_score = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    price = serializers.CharField(max_length=<span class="number">40</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、字段类型与选项"><a href="#2、字段类型与选项" class="headerlink" title="2、字段类型与选项"></a>2、字段类型与选项</h3><p><strong>常用字段类型</strong>：</p><table><thead><tr><th>字段</th><th>字段构造方式</th></tr></thead><tbody><tr><td><strong>BooleanField</strong></td><td>BooleanField()</td></tr><tr><td><strong>NullBooleanField</strong></td><td>NullBooleanField()</td></tr><tr><td><strong>CharField</strong></td><td>CharField(max_length&#x3D;None, min_length&#x3D;None, allow_blank&#x3D;False, trim_whitespace&#x3D;True)</td></tr><tr><td><strong>EmailField</strong></td><td>EmailField(max_length&#x3D;None, min_length&#x3D;None, allow_blank&#x3D;False)</td></tr><tr><td><strong>RegexField</strong></td><td>RegexField(regex, max_length&#x3D;None, min_length&#x3D;None, allow_blank&#x3D;False)</td></tr><tr><td><strong>SlugField</strong></td><td>SlugField(max<em>length&#x3D;50, min_length&#x3D;None, allow_blank&#x3D;False) 正则字段，验证正则模式 [a-zA-Z0-9</em>-]+</td></tr><tr><td><strong>URLField</strong></td><td>URLField(max_length&#x3D;200, min_length&#x3D;None, allow_blank&#x3D;False)</td></tr><tr><td><strong>IPAddressField</strong></td><td>IPAddressField(protocol&#x3D;’both’, unpack_ipv4&#x3D;False, **options)</td></tr><tr><td><strong>IntegerField</strong></td><td>IntegerField(max_value&#x3D;None, min_value&#x3D;None)</td></tr><tr><td><strong>FloatField</strong></td><td>FloatField(max_value&#x3D;None, min_value&#x3D;None)</td></tr><tr><td><strong>DecimalField</strong></td><td>DecimalField(max_digits, decimal_places, coerce_to_string&#x3D;None, max_value&#x3D;None, min_value&#x3D;None) max_digits: 最多位数 decimal_palces: 小数点位置</td></tr><tr><td><strong>DateTimeField</strong></td><td>DateTimeField(format&#x3D;api_settings.DATETIME_FORMAT, input_formats&#x3D;None)</td></tr><tr><td><strong>DateField</strong></td><td>DateField(format&#x3D;api_settings.DATE_FORMAT, input_formats&#x3D;None)</td></tr><tr><td><strong>TimeField</strong></td><td>TimeField(format&#x3D;api_settings.TIME_FORMAT, input_formats&#x3D;None)</td></tr><tr><td><strong>DurationField</strong></td><td>DurationField()</td></tr><tr><td><strong>ChoiceField</strong></td><td>ChoiceField(choices) choices与Django的用法相同</td></tr><tr><td><strong>MultipleChoiceField</strong></td><td>MultipleChoiceField(choices)</td></tr><tr><td><strong>FileField</strong></td><td>FileField(max_length&#x3D;None, allow_empty_file&#x3D;False, use_url&#x3D;UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ImageField</strong></td><td>ImageField(max_length&#x3D;None, allow_empty_file&#x3D;False, use_url&#x3D;UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ListField</strong></td><td>ListField(child&#x3D;, min_length&#x3D;None, max_length&#x3D;None)</td></tr><tr><td><strong>DictField</strong></td><td>DictField(child&#x3D;)</td></tr></tbody></table><p><strong>选项参数：</strong></p><table><thead><tr><th>参数名称</th><th>作用</th></tr></thead><tbody><tr><td><strong>max_length</strong></td><td>最大长度</td></tr><tr><td><strong>min_lenght</strong></td><td>最小长度</td></tr><tr><td><strong>allow_blank</strong></td><td>是否允许为空</td></tr><tr><td><strong>trim_whitespace</strong></td><td>是否截断空白字符</td></tr><tr><td><strong>max_value</strong></td><td>最小值</td></tr><tr><td><strong>min_value</strong></td><td>最大值</td></tr></tbody></table><h4 id="通用参数："><a href="#通用参数：" class="headerlink" title="通用参数："></a>通用参数：</h4><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>read_only</strong></td><td>表明该字段仅用于序列化输出，默认False</td></tr><tr><td><strong>write_only</strong></td><td>表明该字段仅用于反序列化输入，默认False</td></tr><tr><td><strong>required</strong></td><td>表明该字段在反序列化时必须输入，默认True</td></tr><tr><td><strong>default</strong></td><td>反序列化时使用的默认值</td></tr><tr><td><strong>allow_null</strong></td><td>表明该字段是否允许传入None，默认False</td></tr><tr><td><strong>validators</strong></td><td>该字段使用的验证器</td></tr><tr><td><strong>error_messages</strong></td><td>包含错误编号与错误信息的字典</td></tr><tr><td><strong>label</strong></td><td>用于HTML展示API页面时，显示的字段名称</td></tr><tr><td><strong>help_text</strong></td><td>用于HTML展示API页面时，显示的字段帮助提示信息</td></tr></tbody></table><h3 id="3、序列化操作"><a href="#3、序列化操作" class="headerlink" title="3、序列化操作"></a>3、序列化操作</h3><ul><li><h4 id="序列化-—-gt-将python对象-转换为json格式数据"><a href="#序列化-—-gt-将python对象-转换为json格式数据" class="headerlink" title="序列化  —&gt; 将python对象  转换为json格式数据"></a>序列化  —&gt; 将python对象  转换为json格式数据</h4></li></ul><p>定义好Serializer类后，如果要通过序列化器类类进行序列化，需要先创建Serializer对象了。</p><p>Serializer的参数为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Serializer(instance=<span class="literal">None</span>, data=empty, **kwarg)</span><br></pre></td></tr></table></figure><p>说明：</p><p>1）用于序列化时，将模型类对象传入<strong>instance</strong>参数</p><p>2）用于反序列化时，将要被反序列化的数据传入<strong>data</strong>参数</p><p>3）除了instance和data参数外，在构造Serializer对象时，还可通过<strong>context</strong>参数额外添加数据，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serializer = AccountSerializer(account, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br></pre></td></tr></table></figure><p><strong>通过context参数附加的数据，可以通过Serializer对象的context属性获取。</strong></p><h4 id="1、视图中的序列化操作"><a href="#1、视图中的序列化操作" class="headerlink" title="1、视图中的序列化操作"></a>1、视图中的序列化操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;查询所有数据&quot;&quot;&quot;</span></span><br><span class="line">    cs = VipCourseData.objects.<span class="built_in">all</span>()</span><br><span class="line">    ser =VipCourseDataSerializer(instance=cs, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(ser.data, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h6 id="对多个数据进行序列化加参数：many-x3D-True"><a href="#对多个数据进行序列化加参数：many-x3D-True" class="headerlink" title="对多个数据进行序列化加参数：many&#x3D;True"></a>对多个数据进行序列化加参数：many&#x3D;True</h6></li></ul><h4 id="2、关联对象嵌套序列化"><a href="#2、关联对象嵌套序列化" class="headerlink" title="2、关联对象嵌套序列化"></a>2、关联对象嵌套序列化</h4><p>​对多个数据进行序列化加参数：many&#x3D;True</p><ul><li><h5 id="1、PrimaryKeyRelatedField"><a href="#1、PrimaryKeyRelatedField" class="headerlink" title="1、PrimaryKeyRelatedField"></a>1、PrimaryKeyRelatedField</h5><ul><li>返回关联字段的id</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">course = serializers.PrimaryKeyRelatedField()</span><br></pre></td></tr></table></figure></li><li><h5 id="2、StringRelatedField"><a href="#2、StringRelatedField" class="headerlink" title="2、StringRelatedField"></a>2、StringRelatedField</h5><ul><li>返回关联字段模型类<code>__str__</code>方法返回的内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">course = serializers.StringRelatedField()</span><br></pre></td></tr></table></figure></li><li><h5 id="3、使用关联对象的序列化器"><a href="#3、使用关联对象的序列化器" class="headerlink" title="3、使用关联对象的序列化器"></a>3、使用关联对象的序列化器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关联模型类的序列化器</span></span><br><span class="line">cuorse = CourseSerializer()</span><br></pre></td></tr></table></figure></li></ul><h3 id="4、反序列化操作"><a href="#4、反序列化操作" class="headerlink" title="4、反序列化操作"></a>4、反序列化操作</h3><ul><li><h4 id="反序列化-—-gt-将json格式数据-转换为python对象"><a href="#反序列化-—-gt-将json格式数据-转换为python对象" class="headerlink" title="反序列化  —&gt; 将json格式数据  转换为python对象"></a>反序列化  —&gt; 将json格式数据  转换为python对象</h4></li></ul><p>在进行反序列化操作是，会先对象数据进行验证，验证通过的情况下再进行保存</p><p>反序列化时，初始化序列化器对象，将要被反序列化的数据传入<strong>data</strong>参数</p><h4 id="1、数据验证"><a href="#1、数据验证" class="headerlink" title="1、数据验证"></a>1、数据验证</h4><ul><li><h5 id="1、校验数据"><a href="#1、校验数据" class="headerlink" title="1、校验数据"></a>1、校验数据</h5><ul><li><h6 id="调用-is-valid-方法进行验证，验证成功返回True，否则返回False"><a href="#调用-is-valid-方法进行验证，验证成功返回True，否则返回False" class="headerlink" title="调用**is_valid()**方法进行验证，验证成功返回True，否则返回False"></a>调用**is_valid()**方法进行验证，验证成功返回True，否则返回False</h6></li><li><h6 id="验证证成功，可以通过序列化器对象的validated-data属性获取数据"><a href="#验证证成功，可以通过序列化器对象的validated-data属性获取数据" class="headerlink" title="验证证成功，可以通过序列化器对象的validated_data属性获取数据"></a>验证证成功，可以通过序列化器对象的<strong>validated_data</strong>属性获取数据</h6></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ser = BookSerializer(data=data)  </span><br><span class="line">ser.is_valid()  </span><br></pre></td></tr></table></figure><ul><li><h6 id="注意：is-valid-会根据序列化器中字段对应的约束来进行校验"><a href="#注意：is-valid-会根据序列化器中字段对应的约束来进行校验" class="headerlink" title="注意：is_valid()会根据序列化器中字段对应的约束来进行校验"></a>注意：is_valid()会根据序列化器中字段对应的约束来进行校验</h6></li></ul></li></ul><h4 id="2、常用字段说明"><a href="#2、常用字段说明" class="headerlink" title="2、常用字段说明"></a>2、常用字段说明</h4><ul><li><h5 id="1、字段长度和是否校验的参数"><a href="#1、字段长度和是否校验的参数" class="headerlink" title="1、字段长度和是否校验的参数"></a>1、字段长度和是否校验的参数</h5><p>字段选项参数前面都列出来了，常用的几个字段</p><blockquote><ul><li><h6 id="max-length-字段的长度校验"><a href="#max-length-字段的长度校验" class="headerlink" title="max_length:字段的长度校验"></a>max_length:字段的长度校验</h6></li><li><h6 id="min-length-字段的长度校验"><a href="#min-length-字段的长度校验" class="headerlink" title="min_length:字段的长度校验"></a>min_length:字段的长度校验</h6></li><li><h6 id="required-x3D-False：不需要校验字段是否为空"><a href="#required-x3D-False：不需要校验字段是否为空" class="headerlink" title="required&#x3D;False：不需要校验字段是否为空"></a>required&#x3D;False：不需要校验字段是否为空</h6></li></ul></blockquote></li><li><h5 id="2、控制序列化和反序列化的字段"><a href="#2、控制序列化和反序列化的字段" class="headerlink" title="2、控制序列化和反序列化的字段"></a>2、控制序列化和反序列化的字段</h5><blockquote><ul><li><h6 id="read-only-x3D-Ture：只参与序列号返回，不参与反序列化校验"><a href="#read-only-x3D-Ture：只参与序列号返回，不参与反序列化校验" class="headerlink" title="read_only &#x3D; Ture：只参与序列号返回，不参与反序列化校验"></a>read_only &#x3D; Ture：只参与序列号返回，不参与反序列化校验</h6></li></ul></blockquote></li></ul><blockquote><ul><li><h6 id="write-only-x3D-True-：只参与反序列化校验，不参与序列号返回"><a href="#write-only-x3D-True-：只参与反序列化校验，不参与序列号返回" class="headerlink" title="write_only &#x3D; True ：只参与反序列化校验，不参与序列号返回"></a>write_only &#x3D; True ：只参与反序列化校验，不参与序列号返回</h6></li></ul></blockquote><p>​         </p><h4 id="3、自定义验证方法"><a href="#3、自定义验证方法" class="headerlink" title="3、自定义验证方法"></a>3、自定义验证方法</h4><ul><li><h5 id="对单一字段进行验证"><a href="#对单一字段进行验证" class="headerlink" title="对单一字段进行验证"></a>对单一字段进行验证</h5><ul><li><h6 id="验证方法名的规范：validate-字段名"><a href="#验证方法名的规范：validate-字段名" class="headerlink" title="验证方法名的规范：validate_字段名"></a>验证方法名的规范：validate_字段名</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">validate_title</span>(<span class="params">self,value</span>):               </span><br><span class="line">:params value : 字段值                </span><br><span class="line">验证处理逻辑  </span><br></pre></td></tr></table></figure></li><li><h5 id="对多个字段进行验证"><a href="#对多个字段进行验证" class="headerlink" title="对多个字段进行验证"></a>对多个字段进行验证</h5><ul><li><h6 id="验证方法名-validate"><a href="#验证方法名-validate" class="headerlink" title="验证方法名:validate"></a>验证方法名:validate</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self,attrs</span>):                </span><br><span class="line">    :params attrs : 包含所有字段的值的（类似字典）                   </span><br><span class="line">    验证处理逻辑</span><br></pre></td></tr></table></figure></li><li><h4 id="通过validators字段指定验证方法"><a href="#通过validators字段指定验证方法" class="headerlink" title="通过validators字段指定验证方法"></a>通过validators字段指定验证方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">length_validate</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span>(<span class="number">10</span>&lt;<span class="built_in">len</span>(value)&lt;<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;字段的长度不在10-20之间&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.Serializer):</span><br><span class="line">    stu_number = serializers.CharField(max_length=<span class="number">20</span>,validators=[])</span><br><span class="line">    sum_number = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    course_score = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    price = serializers.CharField(max_length=<span class="number">40</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="4、保存数据：save方法"><a href="#4、保存数据：save方法" class="headerlink" title="4、保存数据：save方法"></a>4、保存数据：save方法</h4><p>验证通过后，如需保存数据，直接调用序列化器对象的save方法即可，save方法会自动触发序列化器中对应的方法来保存数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line">ser = BookSerializer(data=data)   </span><br><span class="line"><span class="comment"># 校验数据</span></span><br><span class="line">ser.is_valid()   </span><br><span class="line"><span class="comment"># 保存数据</span></span><br><span class="line">ser.save() </span><br></pre></td></tr></table></figure><ul><li><h5 id="注意点：-1"><a href="#注意点：-1" class="headerlink" title="注意点："></a>注意点：</h5><ul><li><h6 id="保存：sava会调用序列化器中定义create方法"><a href="#保存：sava会调用序列化器中定义create方法" class="headerlink" title="保存：sava会调用序列化器中定义create方法"></a>保存：sava会调用序列化器中定义create方法</h6></li><li><h6 id="更新：sava会调用序列化器中定义update方"><a href="#更新：sava会调用序列化器中定义update方" class="headerlink" title="更新：sava会调用序列化器中定义update方"></a>更新：sava会调用序列化器中定义update方</h6></li></ul></li></ul><h3 id="5、模型序列化器"><a href="#5、模型序列化器" class="headerlink" title="5、模型序列化器"></a>5、模型序列化器</h3><p>为了方便我们定义序列化器，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。</p><p>ModelSerializer与常规的Serializer相同，但提供了：</p><ul><li>基于模型类自动生成一系列字段</li><li>基于模型类自动为Serializer生成validators，比如unique_together</li><li>包含默认的create()和update()的实现</li></ul><h4 id="1、模型序列化器的使用"><a href="#1、模型序列化器的使用" class="headerlink" title="1、模型序列化器的使用"></a>1、模型序列化器的使用</h4><ul><li><h6 id="定义模型序列化器类，直接继承于serializers-ModelSerializer即可"><a href="#定义模型序列化器类，直接继承于serializers-ModelSerializer即可" class="headerlink" title="定义模型序列化器类，直接继承于serializers.ModelSerializer即可"></a>定义模型序列化器类，直接继承于serializers.ModelSerializer即可</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><h5 id="指定模型类和需要序列化得字段"><a href="#指定模型类和需要序列化得字段" class="headerlink" title="指定模型类和需要序列化得字段"></a>指定模型类和需要序列化得字段</h5><ul><li><h6 id="model-指明参照哪个模型类"><a href="#model-指明参照哪个模型类" class="headerlink" title="model 指明参照哪个模型类"></a>model 指明参照哪个模型类</h6></li><li><h6 id="fields-指明为模型类的哪些字段生成"><a href="#fields-指明为模型类的哪些字段生成" class="headerlink" title="fields 指明为模型类的哪些字段生成"></a>fields 指明为模型类的哪些字段生成</h6></li></ul></li></ul><h4 id="2、指定字段"><a href="#2、指定字段" class="headerlink" title="2、指定字段"></a>2、指定字段</h4><h5 id="1、fields"><a href="#1、fields" class="headerlink" title="1、fields"></a>1、fields</h5><ul><li><h6 id="fields-x3D-all-代表模型类中得所有字段都进行序列化"><a href="#fields-x3D-all-代表模型类中得所有字段都进行序列化" class="headerlink" title="fields &#x3D; __all__代表模型类中得所有字段都进行序列化"></a>fields &#x3D; <code>__all__</code>代表模型类中得所有字段都进行序列化</h6></li><li><h6 id="也可以通过fields指定具体字段"><a href="#也可以通过fields指定具体字段" class="headerlink" title="也可以通过fields指定具体字段"></a>也可以通过fields指定具体字段</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line"> <span class="comment"># fields = &#x27;__all__&#x27;   # 所有字段</span></span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;tu_number&#x27;</span>,<span class="string">&#x27;sum_number&#x27;</span>)  <span class="comment"># 指定序列化得字段</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="2、exclude"><a href="#2、exclude" class="headerlink" title="2、exclude"></a>2、exclude</h5><ul><li><h6 id="使用exclude可以明确排除掉哪些字段"><a href="#使用exclude可以明确排除掉哪些字段" class="headerlink" title="使用exclude可以明确排除掉哪些字段"></a>使用exclude可以明确排除掉哪些字段</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line">        exclude = (<span class="string">&#x27;id&#x27;</span>,)  <span class="comment"># id字段不参与序列化</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="3、-read-only-fields"><a href="#3、-read-only-fields" class="headerlink" title="3、 read_only_fields"></a>3、 read_only_fields</h5><ul><li><h6 id="通过read-only-fields可以指明只读的字段"><a href="#通过read-only-fields可以指明只读的字段" class="headerlink" title="通过read_only_fields可以指明只读的字段"></a>通过read_only_fields可以指明只读的字段</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span>  </span><br><span class="line">        read_only_fields = (<span class="string">&#x27;id&#x27;</span>,) </span><br></pre></td></tr></table></figure></li></ul><h4 id="3、修改字段的参数选项"><a href="#3、修改字段的参数选项" class="headerlink" title="3、修改字段的参数选项"></a>3、修改字段的参数选项</h4><ul><li><h6 id="使用extra-kwargs参数为ModelSerializer添加或修改原有的选项参数"><a href="#使用extra-kwargs参数为ModelSerializer添加或修改原有的选项参数" class="headerlink" title="使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数"></a>使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数</h6><ul><li>通过字段名指定字段对应的参数和值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line"> <span class="comment"># fields = &#x27;__all__&#x27;   </span></span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;tu_number&#x27;</span>,<span class="string">&#x27;sum_number&#x27;</span>)  </span><br><span class="line">extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;tu_numbe&#x27;</span>: &#123;<span class="string">&#x27;min_value&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;sum_number&#x27;</span>: &#123;<span class="string">&#x27;min_value&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、视图"><a href="#四、视图" class="headerlink" title="四、视图"></a>四、视图</h2><h3 id="1、Request对象"><a href="#1、Request对象" class="headerlink" title="1、Request对象"></a>1、Request对象</h3><p>​REST framework 传入视图的request对象不再是Django默认的HttpRequest对象，而是REST framework提供的扩展了HttpRequest类的Request类的对象。无论前端发送的哪种格式的数据，我们都可以以统一的方式读取数据。</p><h4 id="1、data属性"><a href="#1、data属性" class="headerlink" title="1、data属性"></a>1、data属性</h4><p>request.data 获取请求体数据。</p><ul><li>不仅支持表单类型数据，也支持JSON数据，还支持文件数据的获取</li></ul><h4 id="2、query-params"><a href="#2、query-params" class="headerlink" title="2、query_params"></a>2、query_params</h4><p>request.query_params获取查询字符串参数的，Django的<code>request.GET</code>的作用一样</p><h3 id="2、Response对象"><a href="#2、Response对象" class="headerlink" title="2、Response对象"></a>2、Response对象</h3><p>rest_framework.response.Response</p><p>REST framework提供了一个响应类<code>Response</code>，使用该类构造响应对象时，响应的具体数据内容会被转换（render渲染）成符合前端需求的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response(data, status=<span class="literal">None</span>, template_name=<span class="literal">None</span>, headers=<span class="literal">None</span>, content_type=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><code>data</code>不能是复杂结构的数据，如Django的模型类对象，对于这样的数据我们可以使用<code>Serializer</code>序列化器序列化处理后（转为了Python字典类型）再传递给<code>data</code>参数。</p><h4 id="1、Response参数说明"><a href="#1、Response参数说明" class="headerlink" title="1、Response参数说明:"></a>1、Response参数说明:</h4><ul><li><code>data</code>: 为响应准备的序列化处理后的数据；</li><li><code>status</code>: 状态码，默认200；</li><li><code>template_name</code>: 模板名称，如果使用<code>HTMLRenderer</code> 时需指明；</li><li><code>headers</code>: 用于存放响应头信息的字典；</li><li><code>content_type</code>: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数</li></ul><h3 id="3、APIView"><a href="#3、APIView" class="headerlink" title="3、APIView"></a>3、APIView</h3><p> rest_framework.views.APIView 继承django的View ，在View的基础上做了更多的功能扩展。</p><h4 id="1、APIView与View的区别："><a href="#1、APIView与View的区别：" class="headerlink" title="1、APIView与View的区别："></a>1、<code>APIView</code>与<code>View</code>的区别：</h4><ul><li><h6 id="传入到视图方法中的是REST-framework的Request对象"><a href="#传入到视图方法中的是REST-framework的Request对象" class="headerlink" title="传入到视图方法中的是REST framework的Request对象"></a>传入到视图方法中的是REST framework的<code>Request</code>对象</h6></li><li><h6 id="视图方法可以返回REST-framework的Response对象"><a href="#视图方法可以返回REST-framework的Response对象" class="headerlink" title="视图方法可以返回REST framework的Response对象"></a>视图方法可以返回REST framework的<code>Response</code>对象</h6></li><li><h6 id="任何APIException异常都会被捕获到，并且处理成合适的响应信息；"><a href="#任何APIException异常都会被捕获到，并且处理成合适的响应信息；" class="headerlink" title="任何APIException异常都会被捕获到，并且处理成合适的响应信息；"></a>任何<code>APIException</code>异常都会被捕获到，并且处理成合适的响应信息；</h6></li><li><h6 id="扩展了身份认证、权限检查、流量控制这三个功能"><a href="#扩展了身份认证、权限检查、流量控制这三个功能" class="headerlink" title="扩展了身份认证、权限检查、流量控制这三个功能"></a>扩展了身份认证、权限检查、流量控制这三个功能</h6></li></ul><h4 id="2、扩展的功能（后面讲）："><a href="#2、扩展的功能（后面讲）：" class="headerlink" title="2、扩展的功能（后面讲）："></a>2、扩展的功能（后面讲）：</h4><ul><li><h6 id="authentication-classes-：身份认证"><a href="#authentication-classes-：身份认证" class="headerlink" title="authentication_classes  ：身份认证"></a><strong>authentication_classes</strong>  ：身份认证</h6></li><li><h6 id="permissoin-classes-：权限检查"><a href="#permissoin-classes-：权限检查" class="headerlink" title="permissoin_classes ：权限检查"></a><strong>permissoin_classes</strong> ：权限检查</h6></li><li><h6 id="throttle-classes-：-限流"><a href="#throttle-classes-：-限流" class="headerlink" title="throttle_classes ： 限流"></a><strong>throttle_classes</strong> ： 限流</h6></li></ul><h3 id="4、GenericAPIView"><a href="#4、GenericAPIView" class="headerlink" title="4、GenericAPIView"></a>4、GenericAPIView</h3><p>rest_framework.generics.GenericAPIView 继承自<code>APIVIew</code>，增加了对于列表视图和详情视图可能用到的通用支持方法。</p><h4 id="1、扩展的类属性："><a href="#1、扩展的类属性：" class="headerlink" title="1、扩展的类属性："></a>1、扩展的类属性：</h4><ul><li><h6 id="queryset：-指定当前类视图使用的查询集"><a href="#queryset：-指定当前类视图使用的查询集" class="headerlink" title="queryset： 指定当前类视图使用的查询集"></a>queryset： 指定当前类视图使用的查询集</h6></li><li><h6 id="serializer-class-：类视图使用的序列化器"><a href="#serializer-class-：类视图使用的序列化器" class="headerlink" title="serializer_class  ：类视图使用的序列化器"></a>serializer_class  ：类视图使用的序列化器</h6></li></ul><h4 id="2、扩展的方法："><a href="#2、扩展的方法：" class="headerlink" title="2、扩展的方法："></a>2、扩展的方法：</h4><ul><li><h6 id="self-queryset-获取查询集"><a href="#self-queryset-获取查询集" class="headerlink" title="self.queryset():获取查询集"></a>self.queryset():获取查询集</h6></li><li><h6 id="self-serializer-获取序列化器"><a href="#self-serializer-获取序列化器" class="headerlink" title="self.serializer():获取序列化器"></a>self.serializer():获取序列化器</h6></li><li><h6 id="self-get-object-获取指定的单一对象"><a href="#self-get-object-获取指定的单一对象" class="headerlink" title="self.get_object():获取指定的单一对象"></a>self.get_object():获取指定的单一对象</h6></li></ul><h4 id="3、扩展功能（后面讲）："><a href="#3、扩展功能（后面讲）：" class="headerlink" title="3、扩展功能（后面讲）："></a>3、扩展功能（后面讲）：</h4><ul><li><h6 id="pagination-class-：数据分页"><a href="#pagination-class-：数据分页" class="headerlink" title="pagination_class ：数据分页"></a>pagination_class ：数据分页</h6></li><li><h6 id="filter-backends：数据过滤-amp-排序"><a href="#filter-backends：数据过滤-amp-排序" class="headerlink" title="filter_backends：数据过滤&amp;排序"></a>filter_backends：数据过滤&amp;排序</h6></li><li><p>指定单一数据获取的参数字段：</p><ul><li><strong>lookup_field</strong> 查询单一数据库对象时使用的条件字段，默认为’<code>pk</code>‘</li><li><strong>lookup_url_kwarg</strong> 查询单一数据时URL中的参数关键字名称，默认与<strong>look_field</strong>相同</li></ul></li></ul><h3 id="5、视图扩展类"><a href="#5、视图扩展类" class="headerlink" title="5、视图扩展类"></a>5、视图扩展类</h3><h4 id="1、基本扩展类"><a href="#1、基本扩展类" class="headerlink" title="1、基本扩展类"></a>1、基本扩展类</h4><ul><li><h5 id="ListModelMixin："><a href="#ListModelMixin：" class="headerlink" title="ListModelMixin："></a>ListModelMixin：</h5><ul><li><h6 id="列表视图扩展类，提供-96-list方法快速实现列表视图"><a href="#列表视图扩展类，提供-96-list方法快速实现列表视图" class="headerlink" title="列表视图扩展类，提供&#96;list方法快速实现列表视图"></a>列表视图扩展类，提供&#96;list方法快速实现列表视图</h6></li><li><h6 id="返回200状态码"><a href="#返回200状态码" class="headerlink" title="返回200状态码"></a>返回200状态码</h6></li></ul></li><li><h5 id="CreateModelMixin-："><a href="#CreateModelMixin-：" class="headerlink" title="CreateModelMixin ："></a>CreateModelMixin ：</h5><ul><li><h6 id="创建视图扩展类，提供create方法快速实现创建资源的视图"><a href="#创建视图扩展类，提供create方法快速实现创建资源的视图" class="headerlink" title="创建视图扩展类，提供create方法快速实现创建资源的视图"></a>创建视图扩展类，提供create方法快速实现创建资源的视图</h6></li><li><h6 id="成功返回201状态码，如果序列化器对前端发送的数据验证失败，返回400错误"><a href="#成功返回201状态码，如果序列化器对前端发送的数据验证失败，返回400错误" class="headerlink" title="成功返回201状态码，如果序列化器对前端发送的数据验证失败，返回400错误"></a>成功返回201状态码，如果序列化器对前端发送的数据验证失败，返回400错误</h6></li></ul></li><li><h5 id="RetrieveModelMixin：获取单一数据"><a href="#RetrieveModelMixin：获取单一数据" class="headerlink" title="RetrieveModelMixin：获取单一数据"></a>RetrieveModelMixin：获取单一数据</h5><ul><li><h6 id="详情视图扩展类，提供retrieve方法，可以快速实现返回一个存在的数据对象。"><a href="#详情视图扩展类，提供retrieve方法，可以快速实现返回一个存在的数据对象。" class="headerlink" title="详情视图扩展类，提供retrieve方法，可以快速实现返回一个存在的数据对象。"></a>详情视图扩展类，提供retrieve方法，可以快速实现返回一个存在的数据对象。</h6></li><li><h6 id="如果成功，返回200，-否则返回404。"><a href="#如果成功，返回200，-否则返回404。" class="headerlink" title="如果成功，返回200， 否则返回404。"></a>如果成功，返回200， 否则返回404。</h6></li></ul></li><li><h5 id="UpdateModelMixin：更新数据"><a href="#UpdateModelMixin：更新数据" class="headerlink" title="UpdateModelMixin：更新数据"></a>UpdateModelMixin：更新数据</h5><ul><li><h6 id="更新视图扩展类，提供update方法和partial-update方法，可以快速实现更新一个存在的数据对象。"><a href="#更新视图扩展类，提供update方法和partial-update方法，可以快速实现更新一个存在的数据对象。" class="headerlink" title="更新视图扩展类，提供update方法和partial_update方法，可以快速实现更新一个存在的数据对象。"></a>更新视图扩展类，提供update方法和partial_update方法，可以快速实现更新一个存在的数据对象。</h6></li><li><h6 id="成功返回200，序列化器校验数据失败时，返回400错误。"><a href="#成功返回200，序列化器校验数据失败时，返回400错误。" class="headerlink" title="成功返回200，序列化器校验数据失败时，返回400错误。"></a>成功返回200，序列化器校验数据失败时，返回400错误。</h6></li></ul></li><li><h5 id="DestroyModelMixin："><a href="#DestroyModelMixin：" class="headerlink" title="DestroyModelMixin："></a>DestroyModelMixin：</h5><ul><li><h6 id="删除视图扩展类，提供destroy方法，可以快速实现删除一个存在的数据对象。"><a href="#删除视图扩展类，提供destroy方法，可以快速实现删除一个存在的数据对象。" class="headerlink" title="删除视图扩展类，提供destroy方法，可以快速实现删除一个存在的数据对象。"></a>删除视图扩展类，提供destroy方法，可以快速实现删除一个存在的数据对象。</h6></li><li><h6 id="成功返回204，不存在返回404。"><a href="#成功返回204，不存在返回404。" class="headerlink" title="成功返回204，不存在返回404。"></a>成功返回204，不存在返回404。</h6></li></ul></li></ul><h4 id="2、视图扩展类"><a href="#2、视图扩展类" class="headerlink" title="2、视图扩展类"></a>2、视图扩展类</h4><ul><li><h5 id="1、CreateAPIView"><a href="#1、CreateAPIView" class="headerlink" title="1、CreateAPIView"></a>1、CreateAPIView</h5><ul><li><h6 id="继承自：-GenericAPIView、CreateModelMixin"><a href="#继承自：-GenericAPIView、CreateModelMixin" class="headerlink" title="继承自： GenericAPIView、CreateModelMixin"></a>继承自： GenericAPIView、CreateModelMixin</h6></li><li><h6 id="提供-post-方法"><a href="#提供-post-方法" class="headerlink" title="提供 post 方法"></a>提供 post 方法</h6></li></ul></li><li><h5 id="2、ListAPIView"><a href="#2、ListAPIView" class="headerlink" title="2、ListAPIView"></a>2、ListAPIView</h5><ul><li><h6 id="继承自：GenericAPIView、ListModelMixin"><a href="#继承自：GenericAPIView、ListModelMixin" class="headerlink" title="继承自：GenericAPIView、ListModelMixin"></a>继承自：GenericAPIView、ListModelMixin</h6></li><li><h6 id="提供-get-方法"><a href="#提供-get-方法" class="headerlink" title="提供 get 方法"></a>提供 get 方法</h6></li></ul></li><li><h5 id="3、RetireveAPIView"><a href="#3、RetireveAPIView" class="headerlink" title="3、RetireveAPIView"></a>3、RetireveAPIView</h5><ul><li><h6 id="继承自-GenericAPIView、RetrieveModelMixin"><a href="#继承自-GenericAPIView、RetrieveModelMixin" class="headerlink" title="继承自: GenericAPIView、RetrieveModelMixin"></a>继承自: GenericAPIView、RetrieveModelMixin</h6></li><li><h6 id="提供-get-方法-1"><a href="#提供-get-方法-1" class="headerlink" title="提供 get 方法"></a>提供 get 方法</h6></li></ul></li><li><h5 id="4、DestoryAPIView"><a href="#4、DestoryAPIView" class="headerlink" title="4、DestoryAPIView"></a>4、DestoryAPIView</h5><ul><li><h6 id="继承自：GenericAPIView、DestoryModelMixin"><a href="#继承自：GenericAPIView、DestoryModelMixin" class="headerlink" title="继承自：GenericAPIView、DestoryModelMixin"></a>继承自：GenericAPIView、DestoryModelMixin</h6></li><li><h6 id="提供-delete-方法"><a href="#提供-delete-方法" class="headerlink" title="提供 delete 方法"></a>提供 delete 方法</h6></li></ul></li><li><h5 id="5、UpdateAPIView"><a href="#5、UpdateAPIView" class="headerlink" title="5、UpdateAPIView"></a>5、UpdateAPIView</h5><ul><li><h6 id="继承自：GenericAPIView、UpdateModelMixin"><a href="#继承自：GenericAPIView、UpdateModelMixin" class="headerlink" title="继承自：GenericAPIView、UpdateModelMixin"></a>继承自：GenericAPIView、UpdateModelMixin</h6></li><li><h6 id="提供-put-和-patch-方法"><a href="#提供-put-和-patch-方法" class="headerlink" title="提供 put 和 patch 方法"></a>提供 put 和 patch 方法</h6></li></ul></li><li><h5 id="6、RetrieveUpdateAPIView"><a href="#6、RetrieveUpdateAPIView" class="headerlink" title="6、RetrieveUpdateAPIView"></a>6、RetrieveUpdateAPIView</h5><ul><li><h6 id="继承自：-GenericAPIView、RetrieveModelMixin、UpdateModelMixin"><a href="#继承自：-GenericAPIView、RetrieveModelMixin、UpdateModelMixin" class="headerlink" title="继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin"></a>继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin</h6></li><li><h6 id="提供-get、put、patch方法"><a href="#提供-get、put、patch方法" class="headerlink" title="提供 get、put、patch方法"></a>提供 get、put、patch方法</h6></li></ul></li><li><h5 id="7、RetrieveUpdateDestoryAPIView"><a href="#7、RetrieveUpdateDestoryAPIView" class="headerlink" title="7、RetrieveUpdateDestoryAPIView"></a>7、RetrieveUpdateDestoryAPIView</h5><ul><li><h6 id="继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin"><a href="#继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin" class="headerlink" title="继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin"></a>继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin</h6></li><li><h6 id="提供-get、put、patch、delete方法"><a href="#提供-get、put、patch、delete方法" class="headerlink" title="提供 get、put、patch、delete方法"></a>提供 get、put、patch、delete方法</h6></li></ul></li></ul><h3 id="6、视图集"><a href="#6、视图集" class="headerlink" title="6、视图集"></a>6、视图集</h3><h4 id="1、视图集的使用"><a href="#1、视图集的使用" class="headerlink" title="1、视图集的使用"></a>1、视图集的使用</h4><p>ViewSet视图集类不再实现get()、post()等方法，而是实现动作 <strong>action</strong> 如 list() 、create() 等。将一系列逻辑相关的动作放到一个类中：</p><ul><li><h6 id="list-提供一组数据"><a href="#list-提供一组数据" class="headerlink" title="list() 提供一组数据"></a>list() 提供一组数据</h6></li><li><h6 id="retrieve-提供单个数据"><a href="#retrieve-提供单个数据" class="headerlink" title="retrieve() 提供单个数据"></a>retrieve() 提供单个数据</h6></li><li><h6 id="create-创建数据"><a href="#create-创建数据" class="headerlink" title="create() 创建数据"></a>create() 创建数据</h6></li><li><h6 id="update-保存数据"><a href="#update-保存数据" class="headerlink" title="update() 保存数据"></a>update() 保存数据</h6></li><li><h6 id="destory-删除数据"><a href="#destory-删除数据" class="headerlink" title="destory() 删除数据"></a>destory() 删除数据</h6></li></ul><h5 id="注意点：-2"><a href="#注意点：-2" class="headerlink" title="注意点："></a>注意点：</h5><p>在使用视图集的时候，在配置路由的时候，用自行指定请求方法和处理的视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^books/$&#x27;</span>, XXViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;list&#x27;</span>&#125;),</span><br><span class="line">    url(<span class="string">r&#x27;^books/(?P&lt;pk&gt;\d+)/$&#x27;</span>, XXXnfoViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span>&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="2、action属性"><a href="#2、action属性" class="headerlink" title="2、action属性"></a>2、action属性</h4><p>视图集只在使用as_view()方法的时候，才会将<strong>action</strong>动作与具体请求方式对应上。</p><h4 id="3、常用视图集类"><a href="#3、常用视图集类" class="headerlink" title="3、常用视图集类"></a>3、常用视图集类</h4><h5 id="1）-ViewSet"><a href="#1）-ViewSet" class="headerlink" title="1） ViewSet"></a>1） ViewSet</h5><p>继承自<code>APIView</code>，作用也与APIView基本类似，提供了身份认证、权限校验、流量管理等。</p><p>在ViewSet中，没有提供任何动作action方法，需要我们自己实现action方法。</p><h5 id="2）GenericViewSet"><a href="#2）GenericViewSet" class="headerlink" title="2）GenericViewSet"></a>2）GenericViewSet</h5><p>继承自<code>GenericAPIView</code>，作用也与GenericAPIVIew类似，提供了get_object、get_queryset等方法便于列表视图与详情信息视图的开发。</p><h5 id="3）ModelViewSet"><a href="#3）ModelViewSet" class="headerlink" title="3）ModelViewSet"></a>3）ModelViewSet</h5><p>继承自<code>GenericAPIVIew</code>，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。</p><h5 id="4）ReadOnlyModelViewSet"><a href="#4）ReadOnlyModelViewSet" class="headerlink" title="4）ReadOnlyModelViewSet"></a>4）ReadOnlyModelViewSet</h5><p>继承自<code>GenericAPIVIew</code>，同时包括了ListModelMixin、RetrieveModelMixin。</p><h3 id="7、路由"><a href="#7、路由" class="headerlink" title="7、路由"></a>7、路由</h3><p>对于视图集ViewSet，我们除了可以自己手动指明请求方式与动作action之间的对应关系外，还可以使用Routers来帮助我们快速实现路由信息。</p><p>REST framework提供了两个router</p><ul><li><h6 id="SimpleRouter（推荐）"><a href="#SimpleRouter（推荐）" class="headerlink" title="SimpleRouter（推荐）"></a>SimpleRouter（推荐）</h6></li><li><h6 id="DefaultRouter（不推荐）"><a href="#DefaultRouter（不推荐）" class="headerlink" title="DefaultRouter（不推荐）"></a>DefaultRouter（不推荐）</h6></li><li><h6 id="DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图"><a href="#DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图" class="headerlink" title="DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图"></a>DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图</h6></li></ul><h4 id="1、-创建router对象并注册"><a href="#1、-创建router对象并注册" class="headerlink" title="1、 创建router对象并注册"></a>1、 创建router对象并注册</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import routers</span><br><span class="line"></span><br><span class="line">router = routers.SimpleRouter()</span><br><span class="line">router.register(r&#x27;vips&#x27;, BookInfoViewSet)</span><br></pre></td></tr></table></figure><ul><li><h5 id="register-prefix-viewset-base-name"><a href="#register-prefix-viewset-base-name" class="headerlink" title="register(prefix, viewset, base_name)"></a>register(prefix, viewset, base_name)</h5><ul><li><h6 id="prefix-该视图集的路由前缀"><a href="#prefix-该视图集的路由前缀" class="headerlink" title="prefix 该视图集的路由前缀"></a>prefix 该视图集的路由前缀</h6></li><li><h6 id="viewset-视图集"><a href="#viewset-视图集" class="headerlink" title="viewset 视图集"></a>viewset 视图集</h6></li><li><h6 id="base-name-路由名称的前缀"><a href="#base-name-路由名称的前缀" class="headerlink" title="base_name 路由名称的前缀"></a>base_name 路由名称的前缀</h6></li></ul></li></ul><p>如上述代码会形成的路由如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^vips/$    </span><br><span class="line">^vip/&#123;pk&#125;/$  </span><br></pre></td></tr></table></figure><h4 id="2、添加路由数据"><a href="#2、添加路由数据" class="headerlink" title="2、添加路由数据"></a>2、添加路由数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure><h2 id="五、其他功能"><a href="#五、其他功能" class="headerlink" title="五、其他功能"></a>五、其他功能</h2><h3 id="1、认证-amp-权限"><a href="#1、认证-amp-权限" class="headerlink" title="1、认证&amp;权限"></a>1、认证&amp;权限</h3><h4 id="1、认证"><a href="#1、认证" class="headerlink" title="1、认证"></a>1、认证</h4><h5 id="1）、全局配置"><a href="#1）、全局配置" class="headerlink" title="1）、全局配置"></a>1）、全局配置</h5><ul><li><p>在配置文件中配置全局默认的认证方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    &#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;: (</span><br><span class="line">        &#x27;rest_framework.authentication.BasicAuthentication&#x27;,   # Basic认证</span><br><span class="line">        &#x27;rest_framework.authentication.SessionAuthentication&#x27;,  # session认证</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2）、单个视图配置"><a href="#2）、单个视图配置" class="headerlink" title="2）、单个视图配置"></a>2）、单个视图配置</h5><p>在视图中通过设置authentication_classess属性来设置视图的认证方案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication, BasicAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIPView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 指定认证的方式</span></span><br><span class="line">    authentication_classes = (SessionAuthentication, BasicAuthentication)</span><br></pre></td></tr></table></figure><p>认证失败会有两种可能的返回值：</p><ul><li>401 Unauthorized 未认证</li><li>403 Permission Denied 权限被禁止</li></ul><h4 id="2、权限"><a href="#2、权限" class="headerlink" title="2、权限"></a>2、权限</h4><p>权限控制可以限制用户对于视图的访问和对于具体数据对象的访问。</p><ul><li>在执行视图的dispatch()方法前，会先进行视图访问权限的判断</li><li>在通过get_object()获取具体对象时，会进行对象访问权限的判断</li></ul><h5 id="1-、全局权限管理"><a href="#1-、全局权限管理" class="headerlink" title="1)、全局权限管理"></a>1)、全局权限管理</h5><p>在配置文件中设置默认的权限管理类，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.permissions.IsAuthenticated&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果未指明，默认采用如下默认配置（所有用户均可访问）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (</span><br><span class="line">   <span class="string">&#x27;rest_framework.permissions.AllowAny&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="2-、单个视图权限"><a href="#2-、单个视图权限" class="headerlink" title="2)、单个视图权限"></a>2)、单个视图权限</h5><p>在视图中通过permission_classes属性来设置权限，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIPView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    permission_classes = (IsAuthenticated,)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h5 id="3-、权限选项"><a href="#3-、权限选项" class="headerlink" title="3)、权限选项"></a>3)、权限选项</h5><ul><li><h6 id="AllowAny-允许所有用户"><a href="#AllowAny-允许所有用户" class="headerlink" title="AllowAny 允许所有用户"></a>AllowAny 允许所有用户</h6></li><li><h6 id="IsAuthenticated-仅通过认证的用户"><a href="#IsAuthenticated-仅通过认证的用户" class="headerlink" title="IsAuthenticated 仅通过认证的用户"></a>IsAuthenticated 仅通过认证的用户</h6></li><li><h6 id="IsAdminUser-仅管理员用户"><a href="#IsAdminUser-仅管理员用户" class="headerlink" title="IsAdminUser 仅管理员用户"></a>IsAdminUser 仅管理员用户</h6></li><li><h6 id="IsAuthenticatedOrReadOnly-认证的用户可以完全操作，否则只能get读取"><a href="#IsAuthenticatedOrReadOnly-认证的用户可以完全操作，否则只能get读取" class="headerlink" title="IsAuthenticatedOrReadOnly 认证的用户可以完全操作，否则只能get读取"></a>IsAuthenticatedOrReadOnly 认证的用户可以完全操作，否则只能get读取</h6></li></ul><h3 id="2、限流"><a href="#2、限流" class="headerlink" title="2、限流"></a>2、限流</h3><p>对接口访问的频次进行限制，以减轻服务器压力(反爬虫的一种手段)。</p><h4 id="1、限流类型"><a href="#1、限流类型" class="headerlink" title="1、限流类型"></a>1、限流类型</h4><ul><li><h5 id="AnonRateThrottle"><a href="#AnonRateThrottle" class="headerlink" title="AnonRateThrottle"></a>AnonRateThrottle</h5><ul><li><h6 id="限制所有匿名未认证用户，使用IP区分用户。"><a href="#限制所有匿名未认证用户，使用IP区分用户。" class="headerlink" title="限制所有匿名未认证用户，使用IP区分用户。"></a>限制所有匿名未认证用户，使用IP区分用户。</h6></li><li><h6 id="使用DEFAULT-THROTTLE-RATES-‘anon’-来设置频次"><a href="#使用DEFAULT-THROTTLE-RATES-‘anon’-来设置频次" class="headerlink" title="使用DEFAULT_THROTTLE_RATES[‘anon’] 来设置频次"></a>使用DEFAULT_THROTTLE_RATES[‘anon’] 来设置频次</h6></li></ul></li><li><h5 id="UserRateThrottle"><a href="#UserRateThrottle" class="headerlink" title="UserRateThrottle"></a>UserRateThrottle</h5><ul><li><h6 id="限制认证用户，使用User-id-来区分。"><a href="#限制认证用户，使用User-id-来区分。" class="headerlink" title="限制认证用户，使用User id 来区分。"></a>限制认证用户，使用User id 来区分。</h6></li><li><h6 id="使用DEFAULT-THROTTLE-RATES-‘user’-来设置频次"><a href="#使用DEFAULT-THROTTLE-RATES-‘user’-来设置频次" class="headerlink" title="使用DEFAULT_THROTTLE_RATES[‘user’]来设置频次"></a>使用DEFAULT_THROTTLE_RATES[‘user’]来设置频次</h6></li></ul></li><li><h5 id="ScopedRateThrottle"><a href="#ScopedRateThrottle" class="headerlink" title="ScopedRateThrottle"></a>ScopedRateThrottle</h5><ul><li><h6 id="限制用户对于具体视图的访问频次，通过ip或user-id。"><a href="#限制用户对于具体视图的访问频次，通过ip或user-id。" class="headerlink" title="限制用户对于具体视图的访问频次，通过ip或user id。"></a>限制用户对于具体视图的访问频次，通过ip或user id。</h6></li><li><h6 id="视图中使用throttle-scope-指定频次"><a href="#视图中使用throttle-scope-指定频次" class="headerlink" title="视图中使用throttle_scope 指定频次"></a>视图中使用throttle_scope 指定频次</h6></li></ul></li></ul><h4 id="2、全局配置"><a href="#2、全局配置" class="headerlink" title="2、全局配置"></a>2、全局配置</h4><ul><li><h6 id="DEFAULT-THROTTLE-CLASSES-设置限流类型"><a href="#DEFAULT-THROTTLE-CLASSES-设置限流类型" class="headerlink" title="DEFAULT_THROTTLE_CLASSES:设置限流类型"></a>DEFAULT_THROTTLE_CLASSES:设置限流类型</h6></li><li><h6 id="DEFAULT-THROTTLE-RATES：设置限制的频次"><a href="#DEFAULT-THROTTLE-RATES：设置限制的频次" class="headerlink" title="DEFAULT_THROTTLE_RATES：设置限制的频次"></a>DEFAULT_THROTTLE_RATES：设置限制的频次</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;100/day&#x27;</span>,  <span class="comment"># 未认证的用户，每天100次</span></span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;1000/day&#x27;</span>  <span class="comment"># 认证的用户，每天100次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="频率周期"><a href="#频率周期" class="headerlink" title="频率周期"></a>频率周期</h5><ul><li><h6 id="second：每秒"><a href="#second：每秒" class="headerlink" title="second：每秒"></a>second：每秒</h6></li><li><h6 id="minute：每分钟"><a href="#minute：每分钟" class="headerlink" title="minute：每分钟"></a>minute：每分钟</h6></li><li><h6 id="hour：每小时"><a href="#hour：每小时" class="headerlink" title="hour：每小时"></a>hour：每小时</h6></li><li><h6 id="day：每天"><a href="#day：每天" class="headerlink" title="day：每天"></a>day：每天</h6></li></ul></li></ul><h4 id="3、局部配置"><a href="#3、局部配置" class="headerlink" title="3、局部配置"></a>3、局部配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;10/day&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在具体视图中通过throttle_classess属性来指定限流的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 类视图中指定限流类型</span></span><br><span class="line">    throttle_classes = (UserRateThrottle,)</span><br></pre></td></tr></table></figure><h3 id="3、过滤"><a href="#3、过滤" class="headerlink" title="3、过滤"></a>3、过滤</h3><p>对于列表数据可能需要根据字段进行过滤，我们可以通过添加django-fitlter扩展来增强支持。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-filter</span><br></pre></td></tr></table></figure><p>在配置文件中增加过滤后端的设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 注册应用，</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;django_filters&#x27;</span>, </span><br><span class="line">]</span><br><span class="line"><span class="comment"># 指定过滤器</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: (<span class="string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>,)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在视图中添加filter_fields属性，指定可以过滤的字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentView</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    queryset = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line">    filter_fields = (<span class="string">&#x27;age&#x27;</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 127.0.0.1:8000/students/?age=18</span></span><br></pre></td></tr></table></figure><h3 id="4、排序"><a href="#4、排序" class="headerlink" title="4、排序"></a>4、排序</h3><p>对于列表数据，REST framework提供了OrderingFilter过滤器来帮助我们快速指明数据按照指定字段进行排序。</p><ul><li><h6 id="filter-backends-指定排序过滤器"><a href="#filter-backends-指定排序过滤器" class="headerlink" title="filter_backends:指定排序过滤器"></a>filter_backends:指定排序过滤器</h6></li><li><h6 id="ordering-fields：指定排序的可选字段"><a href="#ordering-fields：指定排序的可选字段" class="headerlink" title="ordering_fields：指定排序的可选字段"></a>ordering_fields：指定排序的可选字段</h6><p>REST framework会在请求的查询字符串参数中检查是否包含了ordering参数，如果包含了ordering参数，则按照ordering参数指明的排序字段对数据集进行排序。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> OrderingFilter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentView</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    queryset = Student.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = StudentSerializer</span><br><span class="line">    filter_backends = [OrderingFilter] <span class="comment"># 指定排序的过滤器</span></span><br><span class="line">    ordering_fields = (<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;id&#x27;</span> ) <span class="comment"># 指定排序的字段</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># url 指明通过age字段排序</span></span><br><span class="line"><span class="comment"># 127.0.0.1:8000/students/?ordering=age  </span></span><br><span class="line"><span class="comment"># url 指明通过id字段排序</span></span><br><span class="line"><span class="comment"># 127.0.0.1:8000/students/?ordering=id</span></span><br></pre></td></tr></table></figure><h3 id="5、分页"><a href="#5、分页" class="headerlink" title="5、分页"></a>5、分页</h3><p>REST framework提供了分页的支持。</p><h4 id="1、全局配置"><a href="#1、全局配置" class="headerlink" title="1、全局配置"></a>1、全局配置</h4><p>在配置文件中设置全局的分页方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>:  <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">10</span>  <span class="comment"># 每页数据量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、局部配置"><a href="#2、局部配置" class="headerlink" title="2、局部配置"></a>2、局部配置</h4><p>​在不同的视图中可以通过pagination_clas属性来指定不同的分页器</p><ul><li><h5 id="自定义分页器"><a href="#自定义分页器" class="headerlink" title="自定义分页器"></a>自定义分页器</h5><p>定义一个继承PageNumberPagination的类型，在子类中通过属性定义分页器的数据：</p><ul><li><h6 id="page-size-每页默认的数据条数"><a href="#page-size-每页默认的数据条数" class="headerlink" title="page_size 每页默认的数据条数"></a>page_size 每页默认的数据条数</h6></li><li><h6 id="page-query-param-前端发送的页数关键字名，默认为”page”"><a href="#page-query-param-前端发送的页数关键字名，默认为”page”" class="headerlink" title="page_query_param 前端发送的页数关键字名，默认为”page”"></a>page_query_param 前端发送的页数关键字名，默认为”page”</h6></li><li><h6 id="page-size-query-param-前端发送的每页数目关键字名，默认为None"><a href="#page-size-query-param-前端发送的每页数目关键字名，默认为None" class="headerlink" title="page_size_query_param 前端发送的每页数目关键字名，默认为None"></a>page_size_query_param 前端发送的每页数目关键字名，默认为None</h6></li><li><h6 id="max-page-size-每页最多的数据条数"><a href="#max-page-size-每页最多的数据条数" class="headerlink" title="max_page_size 每页最多的数据条数"></a>max_page_size 每页最多的数据条数</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StuPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    <span class="comment"># 默认每页数据量</span></span><br><span class="line">    page_size = <span class="number">20</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;page_size&#x27;</span></span><br><span class="line">    <span class="comment"># 每页的数据量的最大值</span></span><br><span class="line">    max_page_size = <span class="number">10000</span></span><br></pre></td></tr></table></figure></li><li><h5 id="使用分页器"><a href="#使用分页器" class="headerlink" title="使用分页器"></a>使用分页器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StuView</span>(<span class="title class_ inherited__">RetrieveAPIView</span>):</span><br><span class="line">    queryset = Students.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = StudentsSerializer</span><br><span class="line">    pagination_class = StuPagination</span><br></pre></td></tr></table></figure></li><li><h5 id="关闭分页功能"><a href="#关闭分页功能" class="headerlink" title="关闭分页功能"></a>关闭分页功能</h5><p>如果在视图内关闭分页功能，只需在视图内设置**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pagination_class = None</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、分页器类型"><a href="#3、分页器类型" class="headerlink" title="3、分页器类型"></a>3、分页器类型</h4><h5 id="1）-PageNumberPagination"><a href="#1）-PageNumberPagination" class="headerlink" title="1） PageNumberPagination"></a>1） PageNumberPagination</h5><ul><li><h5 id="前端访问网址形式："><a href="#前端访问网址形式：" class="headerlink" title="前端访问网址形式："></a>前端访问网址形式：</h5></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/students/?page=4</span><br></pre></td></tr></table></figure><ul><li><h5 id="子类中定义的属性："><a href="#子类中定义的属性：" class="headerlink" title="子类中定义的属性："></a>子类中定义的属性：</h5><ul><li><h6 id="page-size-每页数目"><a href="#page-size-每页数目" class="headerlink" title="page_size 每页数目"></a>page_size 每页数目</h6></li><li><h6 id="page-query-param-前端发送的页数关键字名，默认为”page”-1"><a href="#page-query-param-前端发送的页数关键字名，默认为”page”-1" class="headerlink" title="page_query_param 前端发送的页数关键字名，默认为”page”"></a>page_query_param 前端发送的页数关键字名，默认为”page”</h6></li><li><h6 id="page-size-query-param-前端发送的每页数目关键字名，默认为None-1"><a href="#page-size-query-param-前端发送的每页数目关键字名，默认为None-1" class="headerlink" title="page_size_query_param 前端发送的每页数目关键字名，默认为None"></a>page_size_query_param 前端发送的每页数目关键字名，默认为None</h6></li><li><h6 id="max-page-size-前端最多能设置的每页数量"><a href="#max-page-size-前端最多能设置的每页数量" class="headerlink" title="max_page_size 前端最多能设置的每页数量"></a>max_page_size 前端最多能设置的每页数量</h6></li></ul></li></ul><h5 id="2）LimitOffsetPagination"><a href="#2）LimitOffsetPagination" class="headerlink" title="2）LimitOffsetPagination"></a>2）LimitOffsetPagination</h5><ul><li><h5 id="前端访问网址形式：-1"><a href="#前端访问网址形式：-1" class="headerlink" title="前端访问网址形式："></a>前端访问网址形式：</h5></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/students/?limit=100&amp;offset=400</span><br></pre></td></tr></table></figure><ul><li><h5 id="可以在子类中定义的属性："><a href="#可以在子类中定义的属性：" class="headerlink" title="可以在子类中定义的属性："></a>可以在子类中定义的属性：</h5><ul><li><h6 id="default-limit-默认限制，默认值与PAGE-SIZE设置一直"><a href="#default-limit-默认限制，默认值与PAGE-SIZE设置一直" class="headerlink" title="default_limit 默认限制，默认值与PAGE_SIZE设置一直"></a>default_limit 默认限制，默认值与PAGE_SIZE设置一直</h6></li><li><h6 id="limit-query-param-limit参数名，默认’limit’"><a href="#limit-query-param-limit参数名，默认’limit’" class="headerlink" title="limit_query_param limit参数名，默认’limit’"></a>limit_query_param limit参数名，默认’limit’</h6></li><li><h6 id="offset-query-param-offset参数名，默认’offset’"><a href="#offset-query-param-offset参数名，默认’offset’" class="headerlink" title="offset_query_param offset参数名，默认’offset’"></a>offset_query_param offset参数名，默认’offset’</h6></li><li><h6 id="max-limit-最大limit限制，默认None"><a href="#max-limit-最大limit限制，默认None" class="headerlink" title="max_limit 最大limit限制，默认None"></a>max_limit 最大limit限制，默认None</h6></li></ul></li></ul><h3 id="6、异常处理"><a href="#6、异常处理" class="headerlink" title="6、异常处理"></a>6、异常处理</h3><p>REST framework提供了异常处理，如果没有自定义默认会采用默认的处理方法方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># REST framework中默认的异常处理方法</span></span><br><span class="line">    <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;rest_framework.views.exception_handler&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1、自定义异常处理的方法"><a href="#1、自定义异常处理的方法" class="headerlink" title="1、自定义异常处理的方法"></a>1、自定义异常处理的方法</h4><ul><li><h5 id="1、定义异常处理的方法"><a href="#1、定义异常处理的方法" class="headerlink" title="1、定义异常处理的方法"></a>1、定义异常处理的方法</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_exception_handler</span>(<span class="params">exc, context</span>):</span><br><span class="line">    <span class="comment"># Call REST framework&#x27;s default exception handler first,</span></span><br><span class="line">    <span class="comment"># to get the standard error response.</span></span><br><span class="line">    response = exception_handler(exc, context)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now add the HTTP status code to the response.</span></span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        response.data[<span class="string">&#x27;status_code&#x27;</span>] = response.status_code</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="2、在配置文件中指定自定义的异常处理"><a href="#2、在配置文件中指定自定义的异常处理" class="headerlink" title="2、在配置文件中指定自定义的异常处理"></a>2、在配置文件中指定自定义的异常处理</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;project.app.except_handle.exception_handle&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、REST-framework定义的异常"><a href="#2、REST-framework定义的异常" class="headerlink" title="2、REST framework定义的异常"></a>2、REST framework定义的异常</h4><ul><li>APIException 所有异常的父类</li><li>ParseError 解析错误</li><li>AuthenticationFailed 认证失败</li><li>NotAuthenticated 尚未认证</li><li>PermissionDenied 权限决绝</li><li>NotFound 未找到</li><li>MethodNotAllowed 请求方式不支持</li><li>NotAcceptable 要获取的数据格式不支持</li><li>Throttled 超过限流次数</li><li>ValidationError 校验失败</li></ul><h3 id="7、文件上传"><a href="#7、文件上传" class="headerlink" title="7、文件上传"></a>7、文件上传</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadFile</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;文件上传&quot;&quot;&quot;</span></span><br><span class="line">    file = models.FileField()</span><br><span class="line">    path = models.CharField(max_length=<span class="number">200</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;upload_file&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&quot;文件上传&quot;</span></span><br><span class="line"><span class="comment"># 序列化器        </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadFileSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;文件上传&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = UploadFile</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UpFileAPIView</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;文件上传&quot;&quot;&quot;</span></span><br><span class="line">    serializer_class = UploadFileSerializer</span><br><span class="line">    queryset = UploadFile.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        res = <span class="built_in">super</span>().create(request, *args, **kwargs)</span><br><span class="line">        obj = UploadFile.objects.get(<span class="built_in">id</span>=res.data[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">        obj.path = obj.file.name</span><br><span class="line">        obj.save()</span><br><span class="line">        res.data[<span class="string">&#x27;path&#x27;</span>] = obj.name</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">destroy</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;文件删除&quot;&quot;&quot;</span></span><br><span class="line">        res = <span class="built_in">super</span>().destroy(request, *args, **kwargs)</span><br><span class="line">        <span class="comment"># 删除保存的文件</span></span><br><span class="line">        os.remove(<span class="string">&#x27;files/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.get_object().name))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8、接口文档"><a href="#8、接口文档" class="headerlink" title="8、接口文档"></a>8、接口文档</h3><p>REST framework通过第三方库可以自动帮助我们生成网页版的接口文档，自动接口文档能生成的是继承自<code>APIView</code>及其子类的视图。</p><h4 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h4><p>REST framewrok生成接口文档需要<code>coreapi</code>库的支持。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install coreapi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、设置接口文档访问路径"><a href="#2、设置接口文档访问路径" class="headerlink" title="2、设置接口文档访问路径"></a>2、设置接口文档访问路径</h4><ul><li>在项目路由中添加接口文档的路由，配置如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^docs/&#x27;</span>, include_docs_urls(title=<span class="string">&#x27;接口文档&#x27;</span>))</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="浏览器访问-127-0-0-1-8000-x2F-docs-x2F-，即可看到自动生成的接口文档。"><a href="#浏览器访问-127-0-0-1-8000-x2F-docs-x2F-，即可看到自动生成的接口文档。" class="headerlink" title="浏览器访问 127.0.0.1:8000&#x2F;docs&#x2F;，即可看到自动生成的接口文档。"></a>浏览器访问 127.0.0.1:8000&#x2F;docs&#x2F;，即可看到自动生成的接口文档。</h5></li></ul><p>加上配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    # 接口文档配置</span><br><span class="line">    &#x27;DEFAULT_SCHEMA_CLASS&#x27;: &#x27;rest_framework.schemas.coreapi.AutoSchema&#x27;,</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、文档接口说明"><a href="#3、文档接口说明" class="headerlink" title="3、文档接口说明"></a>3、文档接口说明</h4><ul><li><h5 id="1）-单一方法的视图，可直接使用类视图的文档字符串"><a href="#1）-单一方法的视图，可直接使用类视图的文档字符串" class="headerlink" title="1） 单一方法的视图，可直接使用类视图的文档字符串"></a>1） 单一方法的视图，可直接使用类视图的文档字符串</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentsView</span>(generics.ListAPIView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回所有学生信息.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义"><a href="#2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义" class="headerlink" title="2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义"></a>2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentsListCreateView</span>(generics.ListCreateAPIView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    get:</span></span><br><span class="line"><span class="string">    返回所有学生信息.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    post:</span></span><br><span class="line"><span class="string">    添加学生</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="3）对于视图集ViewSet，仍在类视图的文档字符串中分开定义"><a href="#3）对于视图集ViewSet，仍在类视图的文档字符串中分开定义" class="headerlink" title="3）对于视图集ViewSet，仍在类视图的文档字符串中分开定义"></a>3）对于视图集ViewSet，仍在类视图的文档字符串中分开定义</h5><h6 id="注意点：-视图集ViewSet中的retrieve名称，在接口文档网站中叫做read"><a href="#注意点：-视图集ViewSet中的retrieve名称，在接口文档网站中叫做read" class="headerlink" title="注意点： 视图集ViewSet中的retrieve名称，在接口文档网站中叫做read"></a>注意点： 视图集ViewSet中的retrieve名称，在接口文档网站中叫做read</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoViewSet</span>(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">    获取所有学生数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    retrieve:</span></span><br><span class="line"><span class="string">    获取一个学生</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4、添加参数描述信息"><a href="#4、添加参数描述信息" class="headerlink" title="4、添加参数描述信息"></a>4、添加参数描述信息</h4><p>参数的描述需要在模型类或序列化器类的字段中以help_text选项定义，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">XXX</span>(models.Model):</span><br><span class="line">    age = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;年龄&#x27;</span>, help_text=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六、ajax跨域"><a href="#六、ajax跨域" class="headerlink" title="六、ajax跨域"></a>六、ajax跨域</h2><p>针对于前后端分离的项目，前端和后台是分开部署的，因此服务端要支持<code>CORS(跨域源资源共享)</code>策略，需要在响应头中加上Access-Control-Allow-Origin: *&#96;。</p><table><thead><tr><th>位置</th><th>域名</th></tr></thead><tbody><tr><td>前端服务</td><td>127.0.0.1:8080</td></tr><tr><td>后端服务</td><td>127.0.0.1:8000</td></tr></tbody></table><p>前端与后端分别是不同的端口，这就涉及到跨域访问数据的问题，因为浏览器的同源策略，默认是不支持两个不同域名间相互访问数据，而我们需要在两个域名间相互传递数据，这时我们就要为后端添加跨域访问的支持。**</p><h3 id="1、django-cors-headers"><a href="#1、django-cors-headers" class="headerlink" title="1、django-cors-headers"></a>1、django-cors-headers</h3><ul><li><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cors-headers</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h4 id="添加应用"><a href="#添加应用" class="headerlink" title="添加应用"></a>添加应用</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="中间键设置"><a href="#中间键设置" class="headerlink" title="中间键设置"></a>中间键设置</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="添加白名单"><a href="#添加白名单" class="headerlink" title="添加白名单"></a>添加白名单</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CORS</span></span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    <span class="string">&#x27;127.0.0.1:8080&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;localhost:8080&#x27;</span>,</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span>  <span class="comment"># 允许携带cookie</span></span><br><span class="line"><span class="comment"># 凡是出现在白名单中的域名，都可以访问后端接口</span></span><br><span class="line"><span class="comment"># CORS_ALLOW_CREDENTIALS 指明在跨域访问中，后端是否支持对cookie的操作。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="注意点：-3"><a href="#注意点：-3" class="headerlink" title="注意点："></a>注意点：</h5><ul><li><h6 id="1、浏览器会第一次先发送options请求询问后端是否允许跨域"><a href="#1、浏览器会第一次先发送options请求询问后端是否允许跨域" class="headerlink" title="1、浏览器会第一次先发送options请求询问后端是否允许跨域"></a>1、浏览器会第一次先发送options请求询问后端是否允许跨域</h6></li><li><h6 id="2、后端在响应结果中告知浏览器允许跨域，允许的情况下浏览器再发送跨域请求"><a href="#2、后端在响应结果中告知浏览器允许跨域，允许的情况下浏览器再发送跨域请求" class="headerlink" title="2、后端在响应结果中告知浏览器允许跨域，允许的情况下浏览器再发送跨域请求"></a>2、后端在响应结果中告知浏览器允许跨域，允许的情况下浏览器再发送跨域请求</h6></li></ul></li></ul><h2 id="七、DRF-JWT"><a href="#七、DRF-JWT" class="headerlink" title="七、DRF JWT"></a>七、DRF JWT</h2><h3 id="1、token鉴权和JWT介绍"><a href="#1、token鉴权和JWT介绍" class="headerlink" title="1、token鉴权和JWT介绍"></a>1、token鉴权和JWT介绍</h3><pre><code>   针对前后端分离的项目，ajax跨域请求时，不会自动携带cookie信息，我们不再使用Session认证机制，而使用JWT(Json Web Token)认证机制，JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。今天给大家介绍JWT的原理和用法</code></pre><h4 id="1、token鉴权机制"><a href="#1、token鉴权机制" class="headerlink" title="1、token鉴权机制"></a>1、token鉴权机制</h4><p><img src="/2022/08/31/DRF/课件\images\1559723672450.png" alt="1559723672450"> </p><h4 id="2、JWT的构成"><a href="#2、JWT的构成" class="headerlink" title="2、JWT的构成"></a>2、JWT的构成</h4><p>一个JWT是由三个部分来组成的，头部（header),载荷（payload)，签名（signature).</p><p>下面是一个JWT </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo2LCJ1c2VybmFtZSI6Im11c2VuMDAxIiwiZXhwIjoxNjEwMDg3OTM0LCJlbWFpbCI6Im11c2VuMDAyQHFxLmNvbSJ9.A0rsMrRgiY9_c1lm6_P15Hbx9F95XExmGQhhOzjLytQ</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-、header"><a href="#1-、header" class="headerlink" title="1)、header"></a>1)、header</h5><p>在头部中一般包含两部分信息：一部分是类型，一部分是加密算法 这里是jwt</p><ul><li><h5 id="头部数据"><a href="#头部数据" class="headerlink" title="头部数据"></a>头部数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;typ&#x27;</span>: <span class="string">&#x27;JWT&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;alg&#x27;</span>: <span class="string">&#x27;HS256</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure></li></ul><p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分</p><ul><li><h5 id="加密后的头部"><a href="#加密后的头部" class="headerlink" title="加密后的头部"></a>加密后的头部</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-、payload"><a href="#2-、payload" class="headerlink" title="2)、payload"></a>2)、payload</h5><p>​载荷是 JSON Web Token 的主体内容部分，里面存放一些有效信息，JSON Web Token 标准定义了几个标准字段：</p><ul><li><h6 id="iss-该JWT的签发者"><a href="#iss-该JWT的签发者" class="headerlink" title="iss: 该JWT的签发者"></a>iss: 该JWT的签发者</h6></li><li><h6 id="sub-该JWT所面向的用户"><a href="#sub-该JWT所面向的用户" class="headerlink" title="sub: 该JWT所面向的用户"></a>sub: 该JWT所面向的用户</h6></li><li><h6 id="aud-接收该JWT的一方"><a href="#aud-接收该JWT的一方" class="headerlink" title="aud: 接收该JWT的一方"></a>aud: 接收该JWT的一方</h6></li><li><h6 id="exp-什么时候过期，这里是一个Unix时间戳"><a href="#exp-什么时候过期，这里是一个Unix时间戳" class="headerlink" title="exp: 什么时候过期，这里是一个Unix时间戳"></a>exp: 什么时候过期，这里是一个Unix时间戳</h6></li><li><h6 id="at-在什么时候签发的"><a href="#at-在什么时候签发的" class="headerlink" title="at: 在什么时候签发的"></a>at: 在什么时候签发的</h6></li></ul><p> 除了标准定义中的字段外，我们还可以自定义字段，比如在 JWT 中，我们的载荷信息可能如下 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;lemonban01&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;musen&quot;</span>,</span><br><span class="line">  <span class="string">&quot;admin&quot;</span>: true,</span><br><span class="line">  <span class="string">&quot;exp:&quot;</span>:<span class="number">12132323423423</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后将其进行base64加密，得到JWT的第二部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-、signature"><a href="#3-、signature" class="headerlink" title="3)、signature"></a>3)、signature</h5><p>签名是 JSON Web Token 中比较重要的一部分，前面两部分都是使用 Base64 进行编码的，signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名，签名的作用是保证 JWT 没有被篡改过。 </p><p>JWT的第三部分签证信息由三部分组成：</p><ul><li><h6 id="header-base64后的"><a href="#header-base64后的" class="headerlink" title="header :(base64后的)"></a>header :(base64后的)</h6></li><li><h6 id="payload-base64后的"><a href="#payload-base64后的" class="headerlink" title="payload :(base64后的)"></a>payload :(base64后的)</h6></li><li><h6 id="secret-私钥"><a href="#secret-私钥" class="headerlink" title="secret: 私钥"></a>secret: 私钥</h6></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">加密后的header +加密后的payload   结合私钥secret，用加密算法加密，得到最后的签名</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、RESTframework-JWT"><a href="#2、RESTframework-JWT" class="headerlink" title="2、RESTframework JWT"></a>2、RESTframework JWT</h3><p>关于签发和核验JWT，我们可以使用Django REST framework JWT扩展来完成。</p><ul><li><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework-jwt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h4 id="settings配置"><a href="#settings配置" class="headerlink" title="settings配置"></a>settings配置</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="comment"># 指明token的有效期</span></span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、账号登录"><a href="#3、账号登录" class="headerlink" title="3、账号登录"></a>3、账号登录</h4><h5 id="1-业务说明"><a href="#1-业务说明" class="headerlink" title="1. 业务说明"></a>1. 业务说明</h5><p>验证用户名和密码，验证成功后，为用户签发JWT，前端将签发的JWT保存下来。</p><h5 id="2-后端接口设计"><a href="#2-后端接口设计" class="headerlink" title="2. 后端接口设计"></a>2. 后端接口设计</h5><p><strong>请求方式</strong>： POST &#x2F;login&#x2F;</p><p><strong>请求参数</strong>： JSON 或 表单</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>username</td><td>str</td><td>是</td><td>用户名</td></tr><tr><td>password</td><td>str</td><td>是</td><td>密码</td></tr></tbody></table><p><strong>返回数据</strong>： JSON</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo5LCJ1c2VybmFtZSI6InB5dGhvbjgiLCJleHAiOjE1MjgxODI2MzQsImVtYWlsIjoiIn0.ejjVvEWxrBvbp18QIjQbL1TFE0c0ejQgizui_AROlAU&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>返回值</th><th>类型</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>username</td><td>str</td><td>是</td><td>用户名</td></tr><tr><td>id</td><td>int</td><td>是</td><td>用户id</td></tr><tr><td>token</td><td>str</td><td>是</td><td>身份认证凭据</td></tr></tbody></table><h3 id="3-后端实现"><a href="#3-后端实现" class="headerlink" title="3. 后端实现"></a>3. 后端实现</h3><p>Django REST framework JWT提供了登录签发JWT的视图，可以直接使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^login/$&#x27;</span>, obtain_jwt_token),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是默认的返回值仅有token，我们还需在返回值中增加username和user_id。</p><p>通过修改该视图的返回值可以完成我们的需求。</p><p>在项目中自定义一个模块，创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">jwt_response_data</span>(<span class="params">token, user=<span class="literal">None</span>, request=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义jwt认证成功返回数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: user.<span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: user.username</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JWT配置</span></span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">    <span class="string">&#x27;JWT_RESPONSE_PAYLOAD_HANDLER&#x27;</span>: <span class="string">&#x27;自定义认证类模块路径.jwt_response_data&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-增加支持管理员用户登录账号"><a href="#4-增加支持管理员用户登录账号" class="headerlink" title="4. 增加支持管理员用户登录账号"></a>4. 增加支持管理员用户登录账号</h3><p>JWT扩展的登录视图，在收到用户名与密码时，也是调用Django的认证系统中提供的**authenticate()**来检查用户名与密码是否正确。</p><p>我们可以通过修改Django认证系统的认证后端（主要是authenticate方法）来支持登录账号既可以是用户名也可以是手机号。</p><p><strong>修改Django认证系统的认证后端需要继承<code>django.contrib.auth.backends.ModelBackend</code>，并重写authenticate方法。</strong></p><p><code>authenticate(self, request, username=None, password=None, **kwargs)</code>方法的参数说明：</p><ul><li>request 本次认证的请求对象</li><li>username 本次认证提供的用户账号</li><li>password 本次认证提供的密码</li></ul><p><strong>我们想要让管理员用户才能登录我们的admin后台,这时我们就要修改django原有的用户验证方法。</strong></p><p>重写authenticate方法的思路：</p><ol><li>根据username参数查找用户User对象，在查询条件中在加上is_staff&#x3D;True的条件</li><li>若查找到User对象，调用User对象的check_password方法检查密码是否正确</li></ol><p>在utils&#x2F;authenticate.py中编写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> users.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MusenModelBackend</span>(<span class="title class_ inherited__">ModelBackend</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request, username=<span class="literal">None</span>, password=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 判断是否通过vue组件发送请求</span></span><br><span class="line">        <span class="keyword">if</span> request <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                user = User.objects.get(username=username, is_staff=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 判断密码</span></span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                user = User.objects.get(username=username)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    user = User.objects.get(mobile=username)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断密码</span></span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在settings.py文件中告知Django使用我们自定义的认证后端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AUTHENTICATION_BACKENDS = [</span><br><span class="line">    <span class="string">&#x27;自定义认证类模块路径.MusenModelBackend&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="前端保存token"><a href="#前端保存token" class="headerlink" title="前端保存token"></a>前端保存token</h4><p>前端可以将JWT保存在浏览器的本地存储里，浏览器的本地存储提供了sessionStorage 和 localStorage 两种：</p><ul><li><strong>sessionStorage</strong> 浏览器关闭即失效</li><li><strong>localStorage</strong> 长期有效</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF统筹-简略版</title>
      <link href="/2022/08/28/DRF%E7%BB%9F%E7%AD%B9/"/>
      <url>/2022/08/28/DRF%E7%BB%9F%E7%AD%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="DRF阶段"><a href="#DRF阶段" class="headerlink" title="DRF阶段"></a>DRF阶段</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0 web开发模型，混合开发和前后端分离</span></span><br><span class="line"><span class="comment"># 1 restful规范--10条</span></span><br><span class="line"><span class="comment"># 2 django上写符合restful规范的接口</span></span><br><span class="line"><span class="comment"># 3 drf写接口</span></span><br><span class="line"><span class="comment"># 4 APIView--》继承了原生View---》get，post方法</span></span><br><span class="line">-（为什么get请求来了，就会执行get方法：原生View的dispatch控制的）</span><br><span class="line">    -路由配置：视图类.as_view()----&gt;view（闭包函数）的内存地址</span><br><span class="line">    -请求来了，就会执行view(requst,分组分出的字段，默认传的字段)---》self.dispatch()--&gt;处理的</span><br><span class="line">    </span><br><span class="line">    -APIView重写了dispatch：包装了request对象，解析器，分页，三大认证，响应器，全局异常，去掉了csrf</span><br><span class="line"><span class="comment"># 5 Request对象：request._request,request.data，重写了__getattr__，request.method--&gt;去原生request中拿</span></span><br><span class="line">-前端传过来的数据从那取？</span><br><span class="line">    -地址栏里：request.GET/query_params</span><br><span class="line">       -请求体中的数据：request.data/POST(json格式解释不了)---》request.body中取</span><br><span class="line">        -请求头中数据：request.META.get(<span class="string">&quot;HTTP_变成大写&quot;</span>)</span><br><span class="line"><span class="comment">#6  Response对象---》封装了原生的HttpResponse，Response（data，headers=&#123;&#125;,status=1/2/3/4/5开头的）</span></span><br><span class="line"><span class="comment">#7  自己封装了Response对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8 序列化类：</span></span><br><span class="line">-Serializer</span><br><span class="line">    -写字段，字段名要跟表的字段对应，想不对应（source可以修改），有属性，read_only,max_len...</span><br><span class="line">        -SerializerMethodField必须配套一个get_字段名，返回什么，前台就看到什么</span><br><span class="line">    -ModelSerializer</span><br><span class="line">    -<span class="keyword">class</span> <span class="title class_">Meta</span>：</span><br><span class="line">        表对应</span><br><span class="line">            取出的字段（__all__,列表）</span><br><span class="line">            排除的字段（用的很少）</span><br><span class="line">            extra_kwargs会给字段的属性</span><br><span class="line">            </span><br><span class="line">        -重写某个字段</span><br><span class="line">        password=serializers.SerializerMethodField()</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">get_password</span>(<span class="params">self,instance</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;***&quot;</span></span><br><span class="line">        -校验：字段自己的校验，局部钩子，全局钩子</span><br><span class="line">        -只要序列化类的对象执行了is_valiad(),这些钩子都会走，可以再钩子里写逻辑</span><br><span class="line">        -在表模型（model）中写方法，可以在上面取出的字段中直接写，不参与反序列化</span><br><span class="line">   -序列化多条（many=<span class="literal">True</span>）:本质，ListSerializer内部套了一个个的serializer对象</span><br><span class="line">   -重写ListSerializer，让序列化对象和自己写的ListSerializer对应上（了解）</span><br><span class="line">-序列化类(instance,data,many,context=&#123;requtst:request&#125;)</span><br><span class="line">-视图函数中给序列化对象传递数据，使用context，传回来，放进去直接使用序列化对象.context.get()</span><br><span class="line"><span class="comment"># 9 视图</span></span><br><span class="line">-两个视图基类 APIView，GenericAPIView（继承APIView）：涉及到数据库和序列化类的操作，尽量用GenericAPIView</span><br><span class="line">    -<span class="number">5</span>个视图扩展类（父类都是<span class="built_in">object</span>）</span><br><span class="line">        CreateModelMixin：create</span><br><span class="line">        DestroyModelMixin：destory</span><br><span class="line">        ListModelMixin</span><br><span class="line">        RetrieveModelMixin</span><br><span class="line">        UpdateModelMixin</span><br><span class="line">    -<span class="number">9</span>个视图子类（GenericAPIView+上面<span class="number">5</span>个视图扩展类中的一个或多个）</span><br><span class="line">    RetrieveUpdateDestroyAPIView</span><br><span class="line">        CreateAPIView</span><br><span class="line">        RetrieveAPIView</span><br><span class="line">        DestroyAPIView</span><br><span class="line">        RetrieveUpdateAPIView</span><br><span class="line">        ListCreateAPIView</span><br><span class="line">        UpdateAPIView</span><br><span class="line">        ListAPIView</span><br><span class="line">        RetrieveDestroyAPIView</span><br><span class="line">    -视图集</span><br><span class="line">    -ModelViewSet:<span class="number">5</span>大接口都有了</span><br><span class="line">        -ReadOnlyModelViewSet：获取一条和获取多条的接口</span><br><span class="line">    -GenericViewSet：ViewSetMixin+GenericAPIView        </span><br><span class="line">        ViewSet:ViewSetMixin+APIView</span><br><span class="line">        ViewSetMixin:类重写了as_view,路由配置就变样了</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 10 路由</span></span><br><span class="line">-基本配置：跟之前一样</span><br><span class="line">    -有action的：必须继承ViewSetMixin</span><br><span class="line">    -自动生成：DefaultRouter和SimpleRouter</span><br><span class="line">    -导入，实例化得到对象，注册多个，对象.urls(自动生成的路由)</span><br><span class="line">        -路由相加urlpatterns+=router.urls/include:path(<span class="string">&#x27;&#x27;</span>, include(router.urls))</span><br><span class="line">    -视图类中自己定义的方法，如何自动生成路由</span><br><span class="line">    -在自己定义的方法上加装饰器（action）</span><br><span class="line">        -两个参数methods=[GET,POST],表示这两种请求都能接受</span><br><span class="line">        -两个参数detail=<span class="literal">True</span>,表示生成带pk的连接</span><br><span class="line"><span class="comment"># 11 三大认证</span></span><br><span class="line">-认证组件：校验用户是否登录</span><br><span class="line">    -写一个认证类，继承BaseAuthentication，重写authenticate，内部写认证逻辑，认证通过返回两个值，第一个是user，认证失败，抛去异常</span><br><span class="line">        -全局使用，局部使用，局部禁用</span><br><span class="line">    -权限：校验用户是否有权限进行后续操作</span><br><span class="line">    -写一个类，继承BasePermission，重写has_permission，<span class="literal">True</span>和<span class="literal">False</span></span><br><span class="line">        -全局使用，局部使用，局部禁用</span><br><span class="line">    -频率：限制用户访问频次</span><br><span class="line">    -写一个类，继承SimpleRateThrottle，重写get_cache_key，返回什么，就以谁做限制，scop=luffy字段，需要跟setting中的key对应   luffy:<span class="number">3</span>/h(一小时访问三次)</span><br><span class="line">        </span><br><span class="line">        -全局配置，局部配置，局部禁用</span><br><span class="line">        -需求：发送短信验证码的接口，一分钟只能发送一次，局部使用，配在视图类上</span><br><span class="line"><span class="comment"># 12 解析器：前端传的编码格式，能不能解析（默认三种全配了，基本不需要改），可能你写了个上传文件接口，局部配置一下，只能传form-data格式  局部使用：MultiPartParser</span></span><br><span class="line"><span class="comment"># 13 响应器：响应的数据，是json格式还是带浏览器的那种（不需要配）</span></span><br><span class="line"><span class="comment"># 14 过滤器：借助于第三方django-filter</span></span><br><span class="line">-注册应用</span><br><span class="line">    -setting中配置DjangoFilterBackend或者局部配置</span><br><span class="line">    -filter_fields = (<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>)</span><br><span class="line"><span class="comment"># 15 排序</span></span><br><span class="line">-全局或者局部配置rest_framework.filters.OrderingFilter</span><br><span class="line">    -视图类中配置： ordering_fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 16 分页</span></span><br><span class="line">-使用：</span><br><span class="line">        继承了APIView的视图类中使用</span><br><span class="line">         page=Mypage()</span><br><span class="line">            <span class="comment"># 在数据库中获取分页的数据</span></span><br><span class="line">            page_list=page.paginate_queryset(queryset对象,request,view=self)</span><br><span class="line">            <span class="comment"># 对分页进行序列化</span></span><br><span class="line">            ser=BookSerializer1(instance=page_list,many=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># return Response(ser.data)</span></span><br><span class="line">        继承了视图子类的视图中使用</span><br><span class="line">         pagination_class = PageNumberPagination（配置成自己重写的，可以修改字段）</span><br><span class="line">-CursorPagination</span><br><span class="line">        cursor_query_param:默认查询字段，不需要修改</span><br><span class="line">        page_size：每页数目</span><br><span class="line">        ordering：按什么排序，需要指定</span><br><span class="line">-LimitOffsetPagination</span><br><span class="line">    default_limit 默认限制，默认值与PAGE_SIZE设置一直</span><br><span class="line">        limit_query_param limit参数名，默认’limit’</span><br><span class="line">        offset_query_param offset参数名，默认’offset’</span><br><span class="line">        max_limit 最大limit限制，默认<span class="literal">None</span></span><br><span class="line">-PageNumberPagination：最常用的，需要在setting中配置page_size，四个参数</span><br><span class="line">        page_size 每页数目</span><br><span class="line">        page_query_param 前端发送的页数关键字名，默认为”page”</span><br><span class="line">        page_size_query_param 前端发送的每页数目关键字名，默认为<span class="literal">None</span></span><br><span class="line">        max_page_size 前端最多能设置的每页数量</span><br><span class="line"><span class="comment"># 17 全局异常</span></span><br><span class="line">-写一个方法</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exception_handler</span>(<span class="params">exc, context</span>):</span><br><span class="line">            <span class="comment"># 走drf原来的异常，原理异常有一些处理</span></span><br><span class="line">            response = drf_exception_handler(exc, context)</span><br><span class="line"><span class="comment"># 我们自己处理，drf没有处理，丢给django的异常</span></span><br><span class="line">            <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(exc, DatabaseError):<span class="comment">#处理了一下数据库错误</span></span><br><span class="line">                    response = Response(&#123;<span class="string">&#x27;detail&#x27;</span>: <span class="string">&#x27;数据库错误&#x27;</span>&#125;, status=status.HTTP_507_INSUFFICIENT_STORAGE)</span><br><span class="line">                <span class="keyword">else</span>:<span class="comment">#其他异常</span></span><br><span class="line">                    response = Response(&#123;<span class="string">&#x27;detail&#x27;</span>: <span class="string">&#x27;未知错误&#x27;</span>&#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">    -配置文件中配置（以后所有drf的异常，都会走到这里）</span><br><span class="line">    REST_FRAMEWORK = &#123;</span><br><span class="line">            <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;my_project.my_app.utils.custom_exception_handler&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"> -<span class="number">18</span> jwt</span><br><span class="line">-是什么json web token  新的认证方式</span><br><span class="line">    -三段：头，荷载（用户信息），签名</span><br><span class="line">    -使用：最简单方式（在路由中配置）</span><br><span class="line">    -path(<span class="string">&#x27;login/&#x27;</span>, obtain_jwt_token),</span><br><span class="line">    -自定制：</span><br><span class="line">    多方式登录，手动签发token（两个方法）</span><br><span class="line">    -自定制基于jwt的认证类</span><br><span class="line">    -取出token</span><br><span class="line">        -调用jwt提供的解析出payload的方法（校验是否过期，是否合法，如果合法，返回荷载信息）</span><br><span class="line">        -转成user对象</span><br><span class="line">        -返回</span><br><span class="line">        </span><br><span class="line">  -<span class="number">19</span> RBAC：基于角色的权限控制（django默认的auth就是给你做了这个事），公司内部权限管理</span><br><span class="line">对外的权限管理就是用三大认证</span><br><span class="line">-用户表</span><br><span class="line">    -用户组表</span><br><span class="line">    -权限表</span><br><span class="line">    -用户对用户组中间表</span><br><span class="line">    -用户组对权限中间表</span><br><span class="line">    -用户对权限中间表</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF-JWT-基于JWT认证</title>
      <link href="/2022/08/26/DRF-JWT-%E5%9F%BA%E4%BA%8EJWT%E8%AE%A4%E8%AF%81/"/>
      <url>/2022/08/26/DRF-JWT-%E5%9F%BA%E4%BA%8EJWT%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="自动生成接口文档"><a href="#自动生成接口文档" class="headerlink" title="自动生成接口文档"></a>自动生成接口文档</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 安装：pip install coreapi/swagger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 在路由中配置</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</span><br><span class="line">    urlpatterns = [</span><br><span class="line">        path(<span class="string">&#x27;docs/&#x27;</span>, include_docs_urls(title=<span class="string">&#x27;开发文档测试&#x27;</span>))</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line"><span class="comment">#3 视图类：自动接口文档能生成的是继承自APIView及其子类的视图。</span></span><br><span class="line">-<span class="number">1</span> ） 单一方法的视图，可直接使用类视图的文档字符串，如</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">BookListView</span>(generics.ListAPIView):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            返回所有图书信息.</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">    -<span class="number">2</span>)包含多个方法的视图，在类视图的文档字符串中，分开方法定义，如</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">BookListCreateView</span>(generics.ListCreateAPIView):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            get:</span></span><br><span class="line"><span class="string">            返回所有图书信息.</span></span><br><span class="line"><span class="string">            post:</span></span><br><span class="line"><span class="string">            新建图书.</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">    -<span class="number">3</span>)对于视图集ViewSet，仍在类视图的文档字符串中封开定义，但是应使用action名称区分，如</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">BookInfoViewSet</span>(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        list:</span></span><br><span class="line"><span class="string">        返回图书列表数据</span></span><br><span class="line"><span class="string">        retrieve:</span></span><br><span class="line"><span class="string">        返回图书详情数据</span></span><br><span class="line"><span class="string">        latest:</span></span><br><span class="line"><span class="string">        返回最新的图书数据</span></span><br><span class="line"><span class="string">        read:</span></span><br><span class="line"><span class="string">        修改图书的阅读量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#settings.py配置</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_SCHEMA_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.schemas.coreapi.AutoSchema&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">jwt=Json Web token</span><br><span class="line"><span class="comment">#原理</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1）jwt分三段式：头,体,签名 （head,payload,sgin）</span></span><br><span class="line"><span class="string">2）头和体是可逆加密，让服务器可以反解出user对象；签名是不可逆加密，保证整个token的安全性的</span></span><br><span class="line"><span class="string">3）头体签名三部分，都是采用json格式的字符串，进行加密，可逆加密一般采用base64算法，不可逆加密一般采用HMAC、SHA256算法</span></span><br><span class="line"><span class="string">4）头中的内容是基本信息：公司信息、项目组信息、token采用的加密方式信息</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;company&quot;: &quot;公司信息&quot;,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">5）体中的内容是关键信息：用户主键、用户名、签发时客户端信息(设备号、地址)、过期时间</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;user_id&quot;: 1,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">6）签名中的内容时安全信息：头的加密结果 + 体的加密结果 + 服务器不对外公开的安全码 进行加密</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;head&quot;: &quot;头的加密字符串&quot;,</span></span><br><span class="line"><span class="string">&quot;payload&quot;: &quot;体的加密字符串&quot;,</span></span><br><span class="line"><span class="string">&quot;secret_key&quot;: &quot;安全码&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="base64使用"><a href="#base64使用" class="headerlink" title="base64使用"></a>base64使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># base64编码和解码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编码（字符串，json格式字符串）</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">dic_str=json.dumps(dic, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">ret=base64.b64encode(dic_str.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line">ret2=base64.b64decode(ret)</span><br><span class="line"><span class="built_in">print</span>(ret2)</span><br></pre></td></tr></table></figure><h2 id="jwt认证流程"><a href="#jwt认证流程" class="headerlink" title="jwt认证流程"></a>jwt认证流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1）将token按 . 拆分为三段字符串，第一段 头加密字符串 一般不需要做任何处理</span><br><span class="line">2）第二段 体加密字符串，要反解出用户主键，通过主键从User表中就能得到登录用户，过期时间和设备信息都是安全信息，确保token没过期，且时同一设备来的</span><br><span class="line">3）再用 第一段 + 第二段 + 服务器安全码 不可逆加密，与第三段 签名字符串 进行碰撞校验，通过后才能代表第二段校验得到的user对象就是合法的登录用户</span><br><span class="line"></span><br><span class="line">DRF项目的jwt认证开发流程:</span><br><span class="line">1）用账号密码访问登录接口，登录接口逻辑中调用 签发token 算法，得到token，返回给客户端，客户端自己存到cookies中</span><br><span class="line"></span><br><span class="line">2）校验token的算法应该写在认证类中(在认证类中调用)，全局配置给认证组件，所有视图类请求，都会进行认证校验，所以请求带了token，就会反解出user对象，在视图类中用request.user就能访问登录的用户</span><br><span class="line"></span><br><span class="line">注：登录接口需要做 认证 + 权限 两个局部禁用</span><br></pre></td></tr></table></figure><h2 id="jwt简单使用"><a href="#jwt简单使用" class="headerlink" title="jwt简单使用"></a>jwt简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装pip install djangorestframework-jwt</span></span><br><span class="line"> <span class="comment">#urls.py</span></span><br><span class="line">    <span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> ObtainJSONWebToken,obtain_jwt_token</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, obtain_jwt_token),</span><br><span class="line">    </span><br><span class="line">obtain_jwt_token对象继承APIView,携带用户名和密码发送post请求即可看到产生的token    </span><br></pre></td></tr></table></figure><h2 id="视图集案例"><a href="#视图集案例" class="headerlink" title="视图集案例"></a>视图集案例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py </span></span><br><span class="line"><span class="comment"># 1.自定义User表,新增mobile唯一约束字段;新增icon图片字段;</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>)</span><br><span class="line">    icon = models.ImageField(upload_to=<span class="string">&#x27;icon&#x27;</span>, default=<span class="string">&#x27;icon/default.png&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ser.py</span></span><br><span class="line"><span class="comment"># 2.在自定义User表基础上，用 GenericViewSet + CreateModelMixin + serializer 完成User表新增接口（注册接口;重要提示：序列化类要重写create方法，不然密码就是明文了）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 表中没有的字段</span></span><br><span class="line">    confirm_password = serializers.CharField(max_length=<span class="number">16</span>, min_length=<span class="number">6</span>, write_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.User</span><br><span class="line">        fields = [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;confirm_password&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>, <span class="string">&#x27;icon&#x27;</span>]</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;max_length&#x27;</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="string">&#x27;min_length&#x27;</span>: <span class="number">4</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_mobile</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(data) == <span class="number">11</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;手机号不合法&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> attrs.get(<span class="string">&#x27;password&#x27;</span>) == attrs.get(<span class="string">&#x27;confirm_password&#x27;</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;两次密码不一致&#x27;</span>)</span><br><span class="line">        <span class="comment"># 需要将确认密码弹出</span></span><br><span class="line">        attrs.pop(<span class="string">&#x27;confirm_password&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        user = models.User.objects.create_user(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserReadOnlyModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.User</span><br><span class="line">        fields = [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;icon&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserImageModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.User</span><br><span class="line">        fields = [<span class="string">&#x27;icon&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>在自定义User表基础上，用 GenericViewSet + RetrieveModelMixin + serializer 完成User表单查(就是用户中心);</span><br><span class="line"><span class="number">4.</span>在自定义User表基础上，用 GenericViewSet + UpdateModelMixin + serializer 完成用户头像的修改</span><br><span class="line"><span class="comment"># 通过重写get_serializer_class方法配置不同方法对应不同的序列化类.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterView</span>(GenericViewSet, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin):</span><br><span class="line">    queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># serializer_class = UserModelSerializer</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_serializer_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">&#x27;create&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> UserModelSerializer</span><br><span class="line">        <span class="keyword">elif</span> self.action == <span class="string">&#x27;retrieve&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> UserReadOnlyModelSerializer</span><br><span class="line">        <span class="keyword">elif</span> self.action == <span class="string">&#x27;update&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> UserImageModelSerializer</span><br></pre></td></tr></table></figure><h2 id="权限控制登录后访问和不登录就能访问"><a href="#权限控制登录后访问和不登录就能访问" class="headerlink" title="权限控制登录后访问和不登录就能访问"></a>权限控制登录后访问和不登录就能访问</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAPIView</span>(<span class="title class_ inherited__">APIView</span>):<span class="comment"># 登录才能</span></span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication,]</span><br><span class="line">    <span class="comment"># 权限控制</span></span><br><span class="line">    permission_classes = [IsAuthenticated,]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;这是订单信息&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeAPIView</span>(<span class="title class_ inherited__">APIView</span>):<span class="comment"># 登录才能</span></span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication,]</span><br><span class="line">    <span class="comment"># 权限控制</span></span><br><span class="line">    <span class="comment"># permission_classes = [IsAuthenticated,]</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;这是首页信息&#x27;</span>)    </span><br></pre></td></tr></table></figure><h2 id="自定义认证返回的数据格式"><a href="#自定义认证返回的数据格式" class="headerlink" title="自定义认证返回的数据格式"></a>自定义认证返回的数据格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rest_framework_jwt.utils.jwt_response_payload_handler返数据只有token,有时候我们需要携带其他数据返回;自定义返回数据格式</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制登录接口返回的数据格式(使用内置)1.自定义 2.内置</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jwt_response_payload_handler</span>(<span class="params">token, user=<span class="literal">None</span>, request=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: user.username,</span><br><span class="line">        <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;登陆成功&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>: status.HTTP_200_OK,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;JWT_RESPONSE_PAYLOAD_HANDLER&#x27;</span>: <span class="string">&#x27;api.jwt_response_utils.jwt_response_payload_handler&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义基于jwt的认证"><a href="#自定义基于jwt的认证" class="headerlink" title="自定义基于jwt的认证"></a>自定义基于jwt的认证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> AuthenticationFailed</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> (</span><br><span class="line">    BaseJSONWebTokenAuthentication, jwt_decode_handler, get_authorization_header)</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于drf的Authentication认证</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JWTAuthentication</span>(<span class="title class_ inherited__">BaseAuthentication</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request</span>):</span><br><span class="line">        token = request.META.get(<span class="string">&#x27;HTTP_AUTHORIZATION&#x27;</span>)</span><br><span class="line">        <span class="comment"># 未携带token</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;Authorization字段是必须携带的.&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt_decode_handler(token)</span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignature:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;签名已经过期&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;非法用户&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="built_in">str</span>(e))</span><br><span class="line">        user_id = payload.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">        <span class="comment"># user = models.User.objects.filter(pk=user_id).first()</span></span><br><span class="line">        <span class="comment"># 这个对象并不完整,可适当减少数据库压力</span></span><br><span class="line">        user = models.User(<span class="built_in">id</span>=user_id, username=payload.get(<span class="string">&#x27;username&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> user, token</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 基于drf_jwt的Authentication认证</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JsonWebTokenAuthentication</span>(<span class="title class_ inherited__">BaseJSONWebTokenAuthentication</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request</span>):</span><br><span class="line">        jwt_value = get_authorization_header(request)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> jwt_value:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;Authorization字段是必须携带的.&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt_decode_handler(jwt_value)</span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignature:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;签名已经过期&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;非法用户&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="built_in">str</span>(e))</span><br><span class="line">        user = self.authenticate_credentials(payload)</span><br><span class="line">        <span class="keyword">return</span> user, jwt_value   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局使用</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;api.auth_token.JsonWebTokenAuthentication&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#局部使用</span></span><br><span class="line">authentication_classes = [JsonWebTokenAuthentication]    </span><br></pre></td></tr></table></figure><h2 id="手动签发token（多方式登录）"><a href="#手动签发token（多方式登录）" class="headerlink" title="手动签发token（多方式登录）"></a>手动签发token（多方式登录）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现用户名，手机号，邮箱，都可以登录</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.serializers <span class="keyword">import</span> jwt_encode_handler, jwt_payload_handler</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py 基于ViewSet的登录视图,多方式登录，逻辑写在序列化类中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">ViewSet</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 使用序列化对象的is_valid()进行校验后返回</span></span><br><span class="line">        login_serializer = LoginModelSerializer(data=request.data)</span><br><span class="line">        login_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 获取校验后生成的token</span></span><br><span class="line">        username = login_serializer.context.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        token = login_serializer.context.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;登陆成功&#x27;</span>, <span class="string">&#x27;token&#x27;</span>: token&#125;,status=status.HTTP_200_OK)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># ser.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 此处需要重写username字段因为数据库里有一个唯一的username字段,post方法以为你是新增自己的校验没有过.</span></span><br><span class="line">    username = serializers.CharField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.User</span><br><span class="line">        <span class="comment"># 此处也可使用name防止数据库冲突</span></span><br><span class="line">        fields = [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        username = attrs.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = attrs.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断手机号，邮箱，用户名,此处也可以使用Q查询写或语句</span></span><br><span class="line">        <span class="comment"># user = models.User.objects.filter(Q(username=username) | Q(mobile=username) | Q(email=username)).first()</span></span><br><span class="line">        <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">&#x27;^1[3-9][0-9]&#123;9&#125;$&#x27;</span>, username):</span><br><span class="line">            user = models.User.objects.<span class="built_in">filter</span>(mobile=username).first()</span><br><span class="line">        <span class="keyword">elif</span> re.<span class="keyword">match</span>(<span class="string">&#x27;.*@.*com$&#x27;</span>, username):</span><br><span class="line">            user = models.User.objects.<span class="built_in">filter</span>(email=username).first()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user = models.User.objects.<span class="built_in">filter</span>(username=username).first()</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="comment"># 在此处签发token</span></span><br><span class="line">                payload = jwt_payload_handler(user)</span><br><span class="line">                token = jwt_encode_handler(payload)</span><br><span class="line">                self.context[<span class="string">&#x27;username&#x27;</span>] = user.username</span><br><span class="line">                self.context[<span class="string">&#x27;token&#x27;</span>] = token</span><br><span class="line">                <span class="keyword">return</span> attrs</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;密码错误&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;用户名不存在&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="jwt的配置参数"><a href="#jwt的配置参数" class="headerlink" title="jwt的配置参数"></a>jwt的配置参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">配置过期时间、返回自定义数据格式</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">JWT_AUTH=&#123;</span><br><span class="line">    <span class="string">&#x27;JWT_RESPONSE_PAYLOAD_HANDLER&#x27;</span>:<span class="string">&#x27;api.jwt_response_utils.jwt_response_payload_handler&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">7</span>), <span class="comment"># 过期时间，手动配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis操作</title>
      <link href="/2022/08/24/redis%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/08/24/redis%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push&#x2F;pop、add&#x2F;remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">特点：可以持久化；单线程，单进程；后续版本出了多线程；</span><br><span class="line"></span><br><span class="line">1. 使用Redis有哪些好处？</span><br><span class="line"></span><br><span class="line">(1) 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)</span><br><span class="line"></span><br><span class="line">(2) 支持丰富数据类型，支持string，list，set，sorted set，hash</span><br><span class="line"></span><br><span class="line">(3) 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</span><br><span class="line"></span><br><span class="line">(4) 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. redis相比memcached有哪些优势？</span><br><span class="line"></span><br><span class="line">(1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</span><br><span class="line"></span><br><span class="line">(2) redis的速度比memcached快很多</span><br><span class="line"></span><br><span class="line">(3) redis可以持久化其数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. redis常见性能问题和解决方案：</span><br><span class="line"></span><br><span class="line">(1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件</span><br><span class="line"></span><br><span class="line">(2) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次</span><br><span class="line"></span><br><span class="line">(3) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内</span><br><span class="line"></span><br><span class="line">(4) 尽量避免在压力很大的主库上增加从库</span><br><span class="line"></span><br><span class="line">(5) 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3...</span><br><span class="line"></span><br><span class="line">这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</span><br><span class="line"></span><br><span class="line"> 相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6种数据淘汰策略：</span><br><span class="line"></span><br><span class="line">voltile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</span><br><span class="line"></span><br><span class="line">volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</span><br><span class="line"></span><br><span class="line">volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</span><br><span class="line"></span><br><span class="line">allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</span><br><span class="line"></span><br><span class="line">allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</span><br><span class="line"></span><br><span class="line">no-enviction（驱逐）：禁止驱逐数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5. Memcache与Redis的区别都有哪些？</span><br><span class="line"></span><br><span class="line">1)、存储方式</span><br><span class="line"></span><br><span class="line">Memecache把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。</span><br><span class="line"></span><br><span class="line">Redis有部份存在硬盘上，这样能保证数据的持久性。</span><br><span class="line"></span><br><span class="line">2)、数据支持类型</span><br><span class="line"></span><br><span class="line">Memcache对数据类型支持相对简单。</span><br><span class="line"></span><br><span class="line">Redis有复杂的数据类型。</span><br><span class="line"></span><br><span class="line">3），value大小</span><br><span class="line"></span><br><span class="line">redis最大可以达到1GB，而memcache只有1MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6. Redis 常见的性能问题都有哪些？如何解决？</span><br><span class="line"> </span><br><span class="line">1).Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。</span><br><span class="line"></span><br><span class="line">2).Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">3).Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。</span><br><span class="line"></span><br><span class="line">4). Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7, redis 最适合的场景</span><br><span class="line"></span><br><span class="line">Redis最适合所有数据in-momory的场景，虽然Redis也提供持久化功能，但实际更多的是一个disk-backed的功能，跟传统意义上的持久化有比较大的差别，那么可能大家就会有疑问，似乎Redis更像一个加强版的Memcached，那么何时使用Memcached,何时使用Redis呢?</span><br><span class="line"></span><br><span class="line">       如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：</span><br><span class="line"></span><br><span class="line">     1 、Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</span><br><span class="line">     2 、Redis支持数据的备份，即master-slave模式的数据备份。</span><br><span class="line">     3 、Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</span><br><span class="line"></span><br><span class="line">（1）、会话缓存（Session Cache）</span><br><span class="line"></span><br><span class="line">最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？</span><br><span class="line"></span><br><span class="line">幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。</span><br><span class="line"></span><br><span class="line">（2）、全页缓存（FPC）</span><br><span class="line"></span><br><span class="line">除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。</span><br><span class="line"></span><br><span class="line">再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。</span><br><span class="line"></span><br><span class="line">此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</span><br><span class="line"></span><br><span class="line">（3）、队列</span><br><span class="line"></span><br><span class="line">Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。</span><br><span class="line"></span><br><span class="line">如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。</span><br><span class="line"></span><br><span class="line">（4），排行榜/计数器</span><br><span class="line"></span><br><span class="line">Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：</span><br><span class="line"></span><br><span class="line">当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：</span><br><span class="line"></span><br><span class="line">ZRANGE user_scores 0 10 WITHSCORES</span><br><span class="line"></span><br><span class="line">Agora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。</span><br><span class="line"></span><br><span class="line">（5）发布/订阅</span><br><span class="line"></span><br><span class="line">最后（但肯定不是最不重要的）是Redis的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！（不，这是真的，你可以去核实）。</span><br><span class="line"></span><br><span class="line">Redis提供的所有特性中，我感觉这个是喜欢的人最少的一个，虽然它为用户提供如果此多功能。</span><br></pre></td></tr></table></figure><p><strong>支持的数据类型（5大数据类型）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String：缓存、限流、计时器、分布式锁、分布式Session</span><br><span class="line">Hash：存储用户信息、用户页面访问量、组合查询</span><br><span class="line"><span class="type">List</span>：微博关注人时间列表、简单队列</span><br><span class="line"><span class="type">Set</span>：赞、踩、标签、好友关系</span><br><span class="line">Zset：排行榜</span><br><span class="line">redis=&#123;</span><br><span class="line">        k1:<span class="string">&#x27;123&#x27;</span>,      字符串</span><br><span class="line">        k2:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],   列表/数组</span><br><span class="line">        k3:&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;     集合</span><br><span class="line">        k4:&#123;name:jason,age:<span class="number">18</span>&#125;  字典/哈希表</span><br><span class="line">        k5:&#123;(<span class="string">&#x27;jason&#x27;</span>,<span class="number">18</span>),(<span class="string">&#x27;egon&#x27;</span>,<span class="number">33</span>)&#125;  有序集合</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="redis的安装和使用"><a href="#redis的安装和使用" class="headerlink" title="redis的安装和使用"></a>redis的安装和使用</h2><p><strong>linux下安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.0.6.tar.gz</span><br><span class="line">tar xzf redis-3.0.6.tar.gz</span><br><span class="line">cd redis-3.0.6</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>启动服务端</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src/redis-server</span><br></pre></td></tr></table></figure><p><strong>启动客户端</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src/redis-cli</span><br><span class="line">redis&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br></pre></td></tr></table></figure><p><strong>Windows下安装</strong></p><p>傻瓜式安装记得添加环境变量</p><h2 id="Python操作Redis之安装"><a href="#Python操作Redis之安装" class="headerlink" title="Python操作Redis之安装"></a>Python操作Redis之安装</h2><p><strong>安装redis模块</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install redis</span><br></pre></td></tr></table></figure><h2 id="Python操作Redis之普通连接"><a href="#Python操作Redis之普通连接" class="headerlink" title="Python操作Redis之普通连接"></a>Python操作Redis之普通连接</h2><p>redis-py提供两个类Redis和StrictRedis用于实现Redis的命令，StrictRedis用于实现大部分官方的命令，并使用官方的语法和命令，Redis是StrictRedis的子类，用于向后兼容旧版本的redis-py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line"></span><br><span class="line">r = redis.Redis(host=&#x27;127.0.0.1&#x27;, port=6379)</span><br><span class="line">r.set(&#x27;foo&#x27;, &#x27;Bar&#x27;)</span><br><span class="line">print(r.get(&#x27;foo&#x27;))</span><br></pre></td></tr></table></figure><h2 id="Python操作Redis之连接池"><a href="#Python操作Redis之连接池" class="headerlink" title="Python操作Redis之连接池"></a>Python操作Redis之连接池</h2><p>redis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=&#x27;127.0.0.1&#x27;, port=6379)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.set(&#x27;foo&#x27;, &#x27;Bar&#x27;)</span><br><span class="line">print(r.get(&#x27;foo&#x27;))</span><br></pre></td></tr></table></figure><h2 id="操作之String操作"><a href="#操作之String操作" class="headerlink" title="操作之String操作"></a>操作之String操作</h2><p>String操作，redis中的String在在内存中按照一个name对应一个value来存储。如图：</p><p><img src="/2022/08/24/redis%E6%93%8D%E4%BD%9C/string.png" alt="string"></p><p><strong>set(name, value, ex&#x3D;None, px&#x3D;None, nx&#x3D;False, xx&#x3D;False)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在Redis中设置值，默认，不存在则创建，存在则修改</span><br><span class="line">参数：</span><br><span class="line">     ex，过期时间（秒）</span><br><span class="line">     px，过期时间（毫秒）</span><br><span class="line">     nx，如果设置为True，则只有name不存在时，当前set操作才执行,值存在，就修改不了，执行没效果</span><br><span class="line">     xx，如果设置为True，则只有name存在时，当前set操作才执行，值存在才能修改，值不存在，不会设置新值</span><br></pre></td></tr></table></figure><p><strong>setnx(name, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置值，只有name不存在时，执行设置操作（添加）,如果存在，不会修改</span><br></pre></td></tr></table></figure><p><strong>setex(name, value, time)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置值</span><br><span class="line"># 参数：</span><br><span class="line">    # time，过期时间（数字秒 或 timedelta对象）</span><br></pre></td></tr></table></figure><p><strong>psetex(name, time_ms, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置值</span><br><span class="line"># 参数：</span><br><span class="line">    # time_ms，过期时间（数字毫秒 或 timedelta对象</span><br></pre></td></tr></table></figure><p>*<em>mset(*args, *<em>kwargs)</em></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">批量设置值</span><br><span class="line">如：</span><br><span class="line">    mset(k1=&#x27;v1&#x27;, k2=&#x27;v2&#x27;)</span><br><span class="line">    或</span><br><span class="line">    mget(&#123;&#x27;k1&#x27;: &#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;&#125;)</span><br></pre></td></tr></table></figure><p><strong>get(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取值</span><br></pre></td></tr></table></figure><p><strong>mget(keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">批量获取</span><br><span class="line">如：</span><br><span class="line">    mget(&#x27;k1&#x27;, &#x27;k2&#x27;)</span><br><span class="line">    或</span><br><span class="line">    r.mget([&#x27;k3&#x27;, &#x27;k4&#x27;])</span><br></pre></td></tr></table></figure><p><strong>getset(name, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置新值并获取原来的值</span><br></pre></td></tr></table></figure><p><strong>getrange(key, start, end)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 获取子序列（根据字节获取，非字符）</span><br><span class="line"># 参数：</span><br><span class="line">    # name，Redis 的 name</span><br><span class="line">    # start，起始位置（字节）</span><br><span class="line">    # end，结束位置（字节）</span><br><span class="line"># 如： &quot;刘三刀&quot; ，0-3表示 &quot;刘&quot;</span><br></pre></td></tr></table></figure><p><strong>setrange(name, offset, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）</span><br><span class="line"># 参数：</span><br><span class="line">    # offset，字符串的索引，字节（一个汉字三个字节）</span><br><span class="line">    # value，要设置的值</span><br></pre></td></tr></table></figure><p><strong>setbit(name, offset, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 对name对应值的二进制表示的位进行操作</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # offset，位的索引（将值变换成二进制后再进行索引）</span><br><span class="line">    # value，值只能是 1 或 0</span><br><span class="line"> </span><br><span class="line"># 注：如果在Redis中有一个对应： n1 = &quot;foo&quot;，</span><br><span class="line">        那么字符串foo的二进制表示为：01100110 01101111 01101111</span><br><span class="line">    所以，如果执行 setbit(&#x27;n1&#x27;, 7, 1)，则就会将第7位设置为1，</span><br><span class="line">        那么最终二进制则变成 01100111 01101111 01101111，即：&quot;goo&quot;</span><br></pre></td></tr></table></figure><p><strong>getbit(name, offset)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的值的二进制表示中的某位的值 （0或1）</span><br></pre></td></tr></table></figure><p><strong>bitcount(key, start&#x3D;None, end&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的值的二进制表示中 1 的个数</span><br><span class="line"># 参数：</span><br><span class="line">    # key，Redis的name</span><br><span class="line">    # start，位起始位置</span><br><span class="line">    # end，位结束位置</span><br></pre></td></tr></table></figure><p><strong>bitop(operation, dest, *keys)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）</span><br><span class="line">    # dest, 新的Redis的name</span><br><span class="line">    # *keys,要查找的Redis的name</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    bitop(&quot;AND&quot;, &#x27;new_name&#x27;, &#x27;n1&#x27;, &#x27;n2&#x27;, &#x27;n3&#x27;)</span><br><span class="line">    # 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>strlen(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 返回name对应值的字节长度（一个汉字3个字节）</span><br></pre></td></tr></table></figure><p><strong>incr(self, name, amount&#x3D;1)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name,Redis的name</span><br><span class="line">    # amount,自增数（必须是整数）</span><br><span class="line"> </span><br><span class="line"># 注：同incrby</span><br></pre></td></tr></table></figure><p><strong>incrbyfloat(self, name, amount&#x3D;1.0)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name,Redis的name</span><br><span class="line">    # amount,自增数（浮点型）</span><br></pre></td></tr></table></figure><p><strong>decr(self, name, amount&#x3D;1)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name,Redis的name</span><br><span class="line">    # amount,自减数（整数）</span><br></pre></td></tr></table></figure><p><strong>append(key, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在redis name对应的值后面追加内容</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    key, redis的name</span><br><span class="line">    value, 要追加的字符串</span><br></pre></td></tr></table></figure><h2 id="操作之Hash操作"><a href="#操作之Hash操作" class="headerlink" title="操作之Hash操作"></a>操作之Hash操作</h2><p>Hash操作，redis中Hash在内存中的存储格式如下图：</p><p><img src="/2022/08/24/redis%E6%93%8D%E4%BD%9C/hash.png" alt="hash"></p><p><strong>hset(name, key, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># name对应的hash中设置一个键值对（不存在，则创建；否则，修改）</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # key，name对应的hash中的key</span><br><span class="line">    # value，name对应的hash中的value</span><br><span class="line"> </span><br><span class="line"># 注：</span><br><span class="line">    # hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）</span><br></pre></td></tr></table></figure><p><strong>hmset(name, mapping)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的hash中批量设置键值对</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # mapping，字典，如：&#123;&#x27;k1&#x27;:&#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;&#125;</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    # r.hmset(&#x27;xx&#x27;, &#123;&#x27;k1&#x27;:&#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;&#125;)</span><br></pre></td></tr></table></figure><p><strong>hget(name,key)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的hash中获取根据key获取value</span><br></pre></td></tr></table></figure><p><strong>hmget(name, keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的hash中获取多个key的值</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，reids对应的name</span><br><span class="line">    # keys，要获取key集合，如：[&#x27;k1&#x27;, &#x27;k2&#x27;, &#x27;k3&#x27;]</span><br><span class="line">    # *args，要获取的key，如：k1,k2,k3</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    # r.mget(&#x27;xx&#x27;, [&#x27;k1&#x27;, &#x27;k2&#x27;])</span><br><span class="line">    # 或</span><br><span class="line">    # print r.hmget(&#x27;xx&#x27;, &#x27;k1&#x27;, &#x27;k2&#x27;)</span><br></pre></td></tr></table></figure><p><strong>hgetall(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应hash的所有键值</span><br><span class="line">print(re.hgetall(&#x27;xxx&#x27;).get(b&#x27;name&#x27;))</span><br></pre></td></tr></table></figure><p><strong>hlen(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的hash中键值对的个数</span><br></pre></td></tr></table></figure><p><strong>hkeys(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的hash中所有的key的值</span><br></pre></td></tr></table></figure><p><strong>hvals(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的hash中所有的value的值</span><br></pre></td></tr></table></figure><p><strong>hexists(name, key)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 检查name对应的hash是否存在当前传入的key</span><br></pre></td></tr></table></figure><p><strong>hdel(name,*keys)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 将name对应的hash中指定key的键值对删除</span><br><span class="line">print(re.hdel(&#x27;xxx&#x27;,&#x27;sex&#x27;,&#x27;name&#x27;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>hincrby(name, key, amount&#x3D;1)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis中的name</span><br><span class="line">    # key， hash对应的key</span><br><span class="line">    # amount，自增数（整数）</span><br></pre></td></tr></table></figure><p><strong>hincrbyfloat(name, key, amount&#x3D;1.0)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis中的name</span><br><span class="line">    # key， hash对应的key</span><br><span class="line">    # amount，自增数（浮点数）</span><br><span class="line"> </span><br><span class="line"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span><br></pre></td></tr></table></figure><p><strong>hscan(name, cursor&#x3D;0, match&#x3D;None, count&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # cursor，游标（基于游标分批取获取数据）</span><br><span class="line">    # match，匹配指定key，默认None 表示所有的key</span><br><span class="line">    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    # 第一次：cursor1, data1 = r.hscan(&#x27;xx&#x27;, cursor=0, match=None, count=None)</span><br><span class="line">    # 第二次：cursor2, data1 = r.hscan(&#x27;xx&#x27;, cursor=cursor1, match=None, count=None)</span><br><span class="line">    # ...</span><br><span class="line">    # 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕</span><br></pre></td></tr></table></figure><p><strong>hscan_iter(name, match&#x3D;None, count&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 利用yield封装hscan创建生成器，实现分批去redis中获取数据</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # match，匹配指定key，默认None 表示所有的key</span><br><span class="line">    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    # for item in r.hscan_iter(&#x27;xx&#x27;):</span><br><span class="line">    #     print item</span><br></pre></td></tr></table></figure><h2 id="操作之List操作"><a href="#操作之List操作" class="headerlink" title="操作之List操作"></a>操作之List操作</h2><p>List操作，redis中的List在在内存中按照一个name对应一个List来存储。如图：</p><p><img src="/2022/08/24/redis%E6%93%8D%E4%BD%9C/list.png" alt="list"></p><p><strong>lpush(name,values)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的list中添加元素，每个新的元素都添加到列表的最左边</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    # r.lpush(&#x27;oo&#x27;, 11,22,33)</span><br><span class="line">    # 保存顺序为: 33,22,11</span><br><span class="line"> </span><br><span class="line"># 扩展：</span><br><span class="line">    # rpush(name, values) 表示从右向左操作</span><br></pre></td></tr></table></figure><p><strong>lpushx(name,value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # rpushx(name, value) 表示从右向左操作</span><br></pre></td></tr></table></figure><p><strong>llen(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># name对应的list元素的个数</span><br></pre></td></tr></table></figure><p><strong>linsert(name, where, refvalue, value))</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的列表的某一个值前或后插入一个新值</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # where，BEFORE或AFTER(小写也可以)</span><br><span class="line">    # refvalue，标杆值，即：在它前后插入数据（如果存在多个标杆值，以找到的第一个为准）</span><br><span class="line">    # value，要插入的数据</span><br></pre></td></tr></table></figure><p><strong>lset(name, index, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 对name对应的list中的某一个索引位置重新赋值</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # index，list的索引位置</span><br><span class="line">    # value，要设置的值</span><br></pre></td></tr></table></figure><p><strong>lrem(name, count, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的list中删除指定的值</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # value，要删除的值</span><br><span class="line">    # count，  count=0，删除列表中所有的指定值；</span><br><span class="line">           # count=2,从前到后，删除2个；</span><br><span class="line">           # count=-2,从后向前，删除2个</span><br></pre></td></tr></table></figure><p><strong>lpop(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # rpop(name) 表示从右向左操作</span><br></pre></td></tr></table></figure><p><strong>lindex(name, index)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在name对应的列表中根据索引获取列表元素</span><br></pre></td></tr></table></figure><p><strong>lrange(name, start, end)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的列表分片获取数据</span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # start，索引的起始位置</span><br><span class="line">    # end，索引结束位置  print(re.lrange(&#x27;aa&#x27;,0,re.llen(&#x27;aa&#x27;)))</span><br></pre></td></tr></table></figure><p><strong>ltrim(name, start, end)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的列表中移除没有在start-end索引之间的值</span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # start，索引的起始位置</span><br><span class="line">    # end，索引结束位置（大于列表长度，则代表不移除任何）</span><br></pre></td></tr></table></figure><p><strong>rpoplpush(src, dst)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边</span><br><span class="line"># 参数：</span><br><span class="line">    # src，要取数据的列表的name</span><br><span class="line">    # dst，要添加数据的列表的name</span><br></pre></td></tr></table></figure><p><strong>blpop(keys, timeout)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 将多个列表排列，按照从左到右去pop对应列表的元素</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # keys，redis的name的集合</span><br><span class="line">    # timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # r.brpop(keys, timeout)，从右向左获取数据</span><br><span class="line">爬虫实现简单分布式：多个url放到列表里，往里不停放URL，程序循环取值，但是只能一台机器运行取值，可以把url放到redis中，多台机器从redis中取值，爬取数据，实现简单分布式</span><br></pre></td></tr></table></figure><p><strong>brpoplpush(src, dst, timeout&#x3D;0)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # src，取出并要移除元素的列表对应的name</span><br><span class="line">    # dst，要插入元素的列表对应的name</span><br><span class="line">    # timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞</span><br></pre></td></tr></table></figure><p><strong>自定义增量迭代</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：</span><br><span class="line">    # 1、获取name对应的所有列表</span><br><span class="line">    # 2、循环列表</span><br><span class="line"># 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：</span><br><span class="line">import redis</span><br><span class="line">conn=redis.Redis(host=&#x27;127.0.0.1&#x27;,port=6379)</span><br><span class="line"># conn.lpush(&#x27;test&#x27;,*[1,2,3,4,45,5,6,7,7,8,43,5,6,768,89,9,65,4,23,54,6757,8,68])</span><br><span class="line"># conn.flushall()</span><br><span class="line">def scan_list(name,count=2):</span><br><span class="line">    index=0</span><br><span class="line">    while True:</span><br><span class="line">        data_list=conn.lrange(name,index,count+index-1)</span><br><span class="line">        if not data_list:</span><br><span class="line">            return</span><br><span class="line">        index+=count</span><br><span class="line">        for item in data_list:</span><br><span class="line">            yield item</span><br><span class="line">print(conn.lrange(&#x27;test&#x27;,0,100))</span><br><span class="line">for item in scan_list(&#x27;test&#x27;,5):</span><br><span class="line">    print(&#x27;---&#x27;)</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h2 id="操作之Set操作"><a href="#操作之Set操作" class="headerlink" title="操作之Set操作"></a>操作之Set操作</h2><p>Set操作，Set集合就是不允许重复的列表</p><p> <strong>sadd(name,values)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># name对应的集合中添加元素</span><br></pre></td></tr></table></figure><p><strong>scard(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取name对应的集合中元素个数</span><br></pre></td></tr></table></figure><p><strong>sdiff(keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在第一个name对应的集合中且不在其他name对应的集合的元素集合</span><br></pre></td></tr></table></figure><p><strong>sdiffstore(dest, keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中</span><br></pre></td></tr></table></figure><p><strong>sinter(keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取多一个name对应集合的并集</span><br></pre></td></tr></table></figure><p><strong>sinterstore(dest, keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取多一个name对应集合的并集，再讲其加入到dest对应的集合中</span><br></pre></td></tr></table></figure><p><strong>sismember(name, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 检查value是否是name对应的集合的成员</span><br></pre></td></tr></table></figure><p><strong>smembers(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的集合的所有成员</span><br></pre></td></tr></table></figure><p><strong>smove(src, dst, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 将某个成员从一个集合中移动到另外一个集合</span><br></pre></td></tr></table></figure><p><strong>spop(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 从集合的右侧（尾部）移除一个成员，并将其返回</span><br></pre></td></tr></table></figure><p><strong>srandmember(name, numbers)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 从name对应的集合中随机获取 numbers 个元素</span><br></pre></td></tr></table></figure><p><strong>srem(name, values)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的集合中删除某些值</span><br></pre></td></tr></table></figure><p><strong>srem(name, values)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的集合中删除某些值</span><br></pre></td></tr></table></figure><p><strong>sunion(keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取多一个name对应的集合的并集</span><br></pre></td></tr></table></figure><p><strong>sunionstore(dest,keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中</span><br></pre></td></tr></table></figure><p><strong>sscan(name, cursor&#x3D;0, match&#x3D;None, count&#x3D;None)</strong><br><strong>sscan_iter(name, match&#x3D;None, count&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大</span><br></pre></td></tr></table></figure><p><strong>有序集合，在集合的基础上，为每元素排序；元素的排序需要根据另外一个值来进行比较，所以，对于有序集合，每一个元素有两个值，即：值和分数，分数专门用来做排序。</strong></p><p> *<em>zadd(name, *args, *<em>kwargs)</em></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的有序集合中添加元素</span><br><span class="line"># 如：</span><br><span class="line">     # zadd(&#x27;zz&#x27;, &#x27;n1&#x27;, 1, &#x27;n2&#x27;, 2)</span><br><span class="line">     # 或</span><br><span class="line">     # zadd(&#x27;zz&#x27;, n1=11, n2=22)</span><br></pre></td></tr></table></figure><p><strong>zcard(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的有序集合元素的数量</span><br></pre></td></tr></table></figure><p><strong>zcount(name, min, max)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的有序集合中分数 在 [min,max] 之间的个数</span><br></pre></td></tr></table></figure><p><strong>zincrby(name, value, amount)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 自增name对应的有序集合的 name 对应的分数</span><br></pre></td></tr></table></figure><p><strong>r.zrange( name, start, end, desc&#x3D;False, withscores&#x3D;False, score_cast_func&#x3D;float)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 按照索引范围获取name对应的有序集合的元素</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # start，有序集合索引起始位置（非分数）</span><br><span class="line">    # end，有序集合索引结束位置（非分数）</span><br><span class="line">    # desc，排序规则，默认按照分数从小到大排序</span><br><span class="line">    # withscores，是否获取元素的分数，默认只获取元素的值</span><br><span class="line">    # score_cast_func，对分数进行数据转换的函数</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # 从大到小排序</span><br><span class="line">    # zrevrange(name, start, end, withscores=False, score_cast_func=float)</span><br><span class="line"> </span><br><span class="line">    # 按照分数范围获取name对应的有序集合的元素</span><br><span class="line">    # zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)</span><br><span class="line">    # 从大到小排序</span><br><span class="line">    # zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)</span><br></pre></td></tr></table></figure><p><strong>zrank(name, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取某个值在 name对应的有序集合中的排行（从 0 开始）</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # zrevrank(name, value)，从大到小排序</span><br></pre></td></tr></table></figure><p><strong>zrangebylex(name, min, max, start&#x3D;None, num&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的 值 （lexicographical ordering）来进行排序，而这个命令则可以返回给定的有序集合键 key 中， 元素的值介于 min 和 max 之间的成员</span><br><span class="line"># 对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。 如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # min，左区间（值）。 + 表示正无限； - 表示负无限； ( 表示开区间； [ 则表示闭区间</span><br><span class="line">    # min，右区间（值）</span><br><span class="line">    # start，对结果进行分片处理，索引位置</span><br><span class="line">    # num，对结果进行分片处理，索引后面的num个元素</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    # ZADD myzset 0 aa 0 ba 0 ca 0 da 0 ea 0 fa 0 ga</span><br><span class="line">    # r.zrangebylex(&#x27;myzset&#x27;, &quot;-&quot;, &quot;[ca&quot;) 结果为：[&#x27;aa&#x27;, &#x27;ba&#x27;, &#x27;ca&#x27;]</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # 从大到小排序</span><br><span class="line">    # zrevrangebylex(name, max, min, start=None, num=None)</span><br></pre></td></tr></table></figure><p><strong>zrem(name, values)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除name对应的有序集合中值是values的成员</span><br><span class="line"> </span><br><span class="line"># 如：zrem(&#x27;zz&#x27;, [&#x27;s1&#x27;, &#x27;s2&#x27;])</span><br></pre></td></tr></table></figure><p><strong>zremrangebyrank(name, min, max)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 根据排行范围删除</span><br></pre></td></tr></table></figure><p><strong>zremrangebyscore(name, min, max)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 根据分数范围删除</span><br></pre></td></tr></table></figure><p><strong>zremrangebylex(name, min, max)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 根据值返回删除</span><br></pre></td></tr></table></figure><p><strong>zscore(name, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应有序集合中 value 对应的分数</span><br></pre></td></tr></table></figure><p><strong>zinterstore(dest, keys, aggregate&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作</span><br><span class="line"># aggregate的值为:  SUM  MIN  MAX</span><br></pre></td></tr></table></figure><p><strong>zunionstore(dest, keys, aggregate&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作</span><br><span class="line"># aggregate的值为:  SUM  MIN  MAX</span><br></pre></td></tr></table></figure><p><strong>zscan(name, cursor&#x3D;0, match&#x3D;None, count&#x3D;None, score_cast_func&#x3D;float)</strong><br><strong>zscan_iter(name, match&#x3D;None, count&#x3D;None,score_cast_func&#x3D;float)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作</span><br></pre></td></tr></table></figure><h2 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h2><p><strong>delete(*names)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 根据删除redis中的任意数据类型</span><br></pre></td></tr></table></figure><p><strong>exists(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 检测redis的name是否存在</span><br></pre></td></tr></table></figure><p><strong>keys(pattern&#x3D;’*‘)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 根据模型获取redis的name</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # KEYS * 匹配数据库中所有 key 。</span><br><span class="line">    # KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。</span><br><span class="line">    # KEYS h*llo 匹配 hllo 和 heeeeello 等。</span><br><span class="line">    # KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo </span><br></pre></td></tr></table></figure><p><strong>expire(name ,time)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 为某个redis的某个name设置超时时间</span><br></pre></td></tr></table></figure><p><strong>rename(src, dst)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 对redis的name重命名为</span><br></pre></td></tr></table></figure><p><strong>move(name, db))</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 将redis的某个值移动到指定的db下</span><br></pre></td></tr></table></figure><p><strong>randomkey()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 随机获取一个redis的name（不删除）</span><br></pre></td></tr></table></figure><p><strong>type(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应值的类型</span><br></pre></td></tr></table></figure><p><strong>scan(cursor&#x3D;0, match&#x3D;None, count&#x3D;None)</strong><br><strong>scan_iter(match&#x3D;None, count&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 同字符串操作，用于增量迭代获取key</span><br></pre></td></tr></table></figure><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>redis-py默认在执行每次请求都会创建（连接池申请连接）和(断开归还连接池)一次连接操作，如果想要在一次请求中指定多个命令，则可以使用pipline实现一次请求指定多个命令，并且默认情况下一次pipline 是原子性操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line"> </span><br><span class="line">pool = redis.ConnectionPool(host=&#x27;10.211.55.4&#x27;, port=6379)</span><br><span class="line"> </span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line"> </span><br><span class="line"># pipe = r.pipeline(transaction=False)</span><br><span class="line">pipe = r.pipeline(transaction=True)</span><br><span class="line">pipe.multi()</span><br><span class="line">pipe.set(&#x27;name&#x27;, &#x27;jason&#x27;)</span><br><span class="line">pipe.set(&#x27;role&#x27;, &#x27;danger&#x27;)</span><br><span class="line"> </span><br><span class="line">pipe.execute()</span><br></pre></td></tr></table></figure><h2 id="Django中使用redis"><a href="#Django中使用redis" class="headerlink" title="Django中使用redis"></a>Django中使用redis</h2><p><strong>方式一：</strong></p><p>utils文件夹下，建立redis_pool.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line">POOL = redis.ConnectionPool(host=&#x27;127.0.0.1&#x27;, port=6379,password=&#x27;1234&#x27;,max_connections=1000)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>视图函数中使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line">from django.shortcuts import render,HttpResponse</span><br><span class="line">from utils.redis_pool import POOL</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    conn = redis.Redis(connection_pool=POOL)</span><br><span class="line">    conn.hset(&#x27;kkk&#x27;,&#x27;age&#x27;,18)</span><br><span class="line"></span><br><span class="line">    return HttpResponse(&#x27;设置成功&#x27;)</span><br><span class="line">def order(request):</span><br><span class="line">    conn = redis.Redis(connection_pool=POOL)</span><br><span class="line">    conn.hget(&#x27;kkk&#x27;,&#x27;age&#x27;)</span><br><span class="line"></span><br><span class="line">    return HttpResponse(&#x27;获取成功&#x27;)</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong></p><p>安装django-redis模块</p><p>pip3 install django-redis</p><p>setting里配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis配置</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CONNECTION_POOL_KWARGS&quot;</span>: &#123;<span class="string">&quot;max_connections&quot;</span>: <span class="number">100</span>&#125;</span><br><span class="line">            <span class="comment"># &quot;PASSWORD&quot;: &quot;123&quot;,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-使用两种方式</span><br><span class="line">    <span class="number">1</span> 使用cache</span><br><span class="line">        <span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line">        cache.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>,user,<span class="number">10</span>)设置过期时间为10s</span><br><span class="line">        cache.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>,user)不用考虑数据类型</span><br><span class="line">        <span class="number">2</span> 直接使用conn对象</span><br><span class="line">        <span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line">        conn = get_redis_connection(<span class="string">&#x27;default&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(conn.hgetall(<span class="string">&#x27;xxx&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF图书接口-分页器-自定义频率限制</title>
      <link href="/2022/08/21/DRF%E5%9B%BE%E4%B9%A6%E6%8E%A5%E5%8F%A3-%E5%88%86%E9%A1%B5%E5%99%A8-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A2%91%E7%8E%87%E9%99%90%E5%88%B6/"/>
      <url>/2022/08/21/DRF%E5%9B%BE%E4%B9%A6%E6%8E%A5%E5%8F%A3-%E5%88%86%E9%A1%B5%E5%99%A8-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A2%91%E7%8E%87%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="数据模型设计"><a href="#数据模型设计" class="headerlink" title="数据模型设计"></a>数据模型设计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseModel</span>(models.Model):</span><br><span class="line">    is_delete=models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># auto_now_add=True 只要记录创建，不需要手动插入时间，自动把当前时间插入</span></span><br><span class="line">    create_time=models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># auto_now=True,只要更新，就会把当前时间插入</span></span><br><span class="line">    last_update_time=models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 单个字段:有唯一(unique)，有索引(db_index)</span></span><br><span class="line">        <span class="comment"># 多个字段:联合索引(index_together),联合唯一(unique_together)</span></span><br><span class="line">        abstract=<span class="literal">True</span>  <span class="comment"># 抽象表，不在数据库建立出表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># verbose_name admin中显示中文</span></span><br><span class="line">    name=models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">&#x27;书名&#x27;</span>,help_text=<span class="string">&#x27;这里填书名&#x27;</span>)</span><br><span class="line">    price=models.DecimalField(max_digits=<span class="number">5</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#db_constraint=False  逻辑上的关联，实质上没有外键联系，增删不会受外键影响，而且orm查询不影响</span></span><br><span class="line">              publish=models.ForeignKey(to=<span class="string">&#x27;Publish&#x27;</span>,on_delete=models.DO_NOTHING,db_constraint=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 不能写on_delete</span></span><br><span class="line">    authors=models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>,db_constraint=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name_plural=<span class="string">&#x27;书表&#x27;</span>  <span class="comment"># admin中表名的显示</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">publish_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.publish.name</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">author_list</span>(<span class="params">self</span>):</span><br><span class="line">        author_list=self.authors.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># ll=[]</span></span><br><span class="line">        <span class="comment"># for author in author_list:</span></span><br><span class="line">        <span class="comment">#     ll.append(&#123;&#x27;name&#x27;:author.name,&#x27;sex&#x27;:author.get_sex_display()&#125;)</span></span><br><span class="line">        <span class="comment"># return ll</span></span><br><span class="line">        <span class="keyword">return</span> [ &#123;<span class="string">&#x27;name&#x27;</span>:author.name,<span class="string">&#x27;sex&#x27;</span>:author.get_sex_display()&#125;<span class="keyword">for</span> author <span class="keyword">in</span> author_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Publish</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    addr=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    sex=models.IntegerField(choices=((<span class="number">1</span>,<span class="string">&#x27;男&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;女&#x27;</span>)))</span><br><span class="line">    <span class="comment">#OneToOneField本质就是ForeignKey+unique</span></span><br><span class="line">    authordetail = models.OneToOneField(to=<span class="string">&#x27;AuthorDetail&#x27;</span>,db_constraint=<span class="literal">False</span>,</span><br><span class="line">on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorDetail</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    mobile=models.CharField(max_length=<span class="number">11</span>)</span><br></pre></td></tr></table></figure><h2 id="表断关联"><a href="#表断关联" class="headerlink" title="表断关联"></a>表断关联</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、表之间没有外键关联，但是有外键逻辑关联(有充当外键的字段)</span><br><span class="line"><span class="number">2</span>、级联关系</span><br><span class="line">      作者没了，详情也没：on_delete=models.CASCADE</span><br><span class="line">      出版社没了，书还是那个出版社出版：on_delete=models.DO_NOTHING</span><br><span class="line">      部门没了，员工没有部门(空不能)：null=<span class="literal">True</span>, on_delete=models.SET_NULL</span><br><span class="line">      部门没了，员工进入默认部门(默认值)：default=<span class="number">0</span>, on_delete=models.SET_DEFAULT</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于APIView的多增多改</span></span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.BookApiView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:pk&gt;/&#x27;</span>, views.BookApiView.as_view()),</span><br><span class="line"><span class="comment"># 基于GenericAPIView的多增多改</span></span><br><span class="line">    path(<span class="string">&#x27;books2/&#x27;</span>, views.BookGenericApiView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;books2/&lt;int:pk&gt;/&#x27;</span>, views.BookGenericApiView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="APIView视图"><a href="#APIView视图" class="headerlink" title="APIView视图"></a>APIView视图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookApiView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取单条数据</span></span><br><span class="line">        <span class="keyword">if</span> kwargs.get(<span class="string">&#x27;pk&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            book = models.Book.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=kwargs.get(<span class="string">&#x27;pk&#x27;</span>)).first()</span><br><span class="line">            books_serializer = BookModelSerializer(instance=book)</span><br><span class="line">            <span class="keyword">return</span> Response(books_serializer.data)</span><br><span class="line">        book_list = models.Book.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>)</span><br><span class="line">        book_serializer = BookModelSerializer(book_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(data=book_serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 增单条</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(request.data, <span class="built_in">dict</span>):</span><br><span class="line">            book_serializer = BookModelSerializer(data=request.data)</span><br><span class="line">            book_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(book_serializer.data)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(request.data, <span class="built_in">list</span>):</span><br><span class="line">            book_serializer = BookModelSerializer(data=request.data, many=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.save()</span><br><span class="line">            <span class="comment"># 此处没有传instance对象（Book模型对象）调用self.create()方法</span></span><br><span class="line">            <span class="comment"># 批量新增--&gt;ListSerializer--&gt;create return [self.child.create(attrs) for attrs in validated_data]</span></span><br><span class="line">            <span class="comment"># self.child为BookModelSerializer对象，最终调用的还是BookModelSerializer.create()</span></span><br><span class="line">            <span class="keyword">return</span> Response(book_serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> kwargs.get(<span class="string">&#x27;pk&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            book = models.Book.objects.<span class="built_in">filter</span>(pk=kwargs.get(<span class="string">&#x27;pk&#x27;</span>)).first()</span><br><span class="line">            book_serializer = BookModelSerializer(instance=book, data=request.data, partial=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(data=book_serializer.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 第一种方案:for循环实现,有个bug只显示修改后的最后一条数据</span></span><br><span class="line">            <span class="comment"># for item in request.data:</span></span><br><span class="line">            <span class="comment">#     print(item)</span></span><br><span class="line">            <span class="comment">#     book = models.Book.objects.filter(id=item.get(&#x27;id&#x27;)).first()</span></span><br><span class="line">            <span class="comment">#     book_serializer = BookModelSerializer(instance=book, data=item)</span></span><br><span class="line">            <span class="comment">#     book_serializer.is_valid(raise_exception=True)</span></span><br><span class="line">            <span class="comment">#     book_serializer.save()</span></span><br><span class="line">            <span class="comment"># return Response(data=book_serializer.data)</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 修改多个:前端传递数据格式[&#123;id:1,&#x27;name&#x27;:name···&#125;,&#123;id:2,&#x27;name&#x27;:name···&#125;]</span></span><br><span class="line">            <span class="comment"># 处理传入的数据对象列表[book1,book2]   数据列表[&#123;&#x27;name&#x27;:jaosn..&#125;,&#123;&#x27;name&#x27;:egon..&#125;]</span></span><br><span class="line">            book_list = []</span><br><span class="line">            modify_data = []</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> request.data:</span><br><span class="line">                pk = item.pop(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">                book = models.Book.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=pk).first()</span><br><span class="line">                book_list.append(book)</span><br><span class="line">                modify_data.append(item)</span><br><span class="line">            book_serializer = BookModelSerializer(instance=book_list, data=modify_data, many=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(book_serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 单个删除和多个删除做联合处理</span></span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        pk_list = []</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            pk_list.append(pk)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pk_list = request.data.get(<span class="string">&#x27;pk_list&#x27;</span>)</span><br><span class="line">        <span class="comment"># 受影响的行数</span></span><br><span class="line">        res = models.Book.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, pk__in=pk_list).update(is_delete=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> res:</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功&#x27;</span>, <span class="string">&#x27;info&#x27;</span>: <span class="string">f&#x27;删除了<span class="subst">&#123;res&#125;</span>条数据&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;没有要删除的数据&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多改需要重写ListSerializer的update,继承ListSerializer,重写update</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookListSerializer</span>(serializers.ListSerializer):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        <span class="comment"># 保存数据</span></span><br><span class="line">        <span class="comment"># ll=[]</span></span><br><span class="line">        <span class="comment"># for i,si_data in enumerate(validated_data):</span></span><br><span class="line">        <span class="comment">#     ret=self.child.update(instance[i],si_data)</span></span><br><span class="line">        <span class="comment">#     ll.append(ret)</span></span><br><span class="line">        <span class="comment"># return ll</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="comment"># self.child.update(对象，字典) for attrs in validated_data</span></span><br><span class="line">            self.child.update(instance[i],attrs) <span class="keyword">for</span> i,attrs <span class="keyword">in</span> <span class="built_in">enumerate</span>(validated_data)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 一种方案（只序列化可以，反序列化有问题）# 第二种方案，models中写方法</span></span><br><span class="line">    <span class="comment"># publish=serializers.CharField(source=&#x27;publish.name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        list_serializer_class=BookListSerializer</span><br><span class="line">        model=models.Book</span><br><span class="line">        <span class="comment"># fields=&#x27;__all__&#x27;</span></span><br><span class="line">        fields = (<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;authors&#x27;</span>,<span class="string">&#x27;publish&#x27;</span>,<span class="string">&#x27;publish_name&#x27;</span>,<span class="string">&#x27;author_list&#x27;</span>)</span><br><span class="line">        extra_kwargs=&#123;</span><br><span class="line">            <span class="string">&#x27;publish&#x27;</span>:&#123;<span class="string">&#x27;write_only&#x27;</span>:<span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;publish_name&#x27;</span>:&#123;<span class="string">&#x27;read_only&#x27;</span>:<span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;authors&#x27;</span>:&#123;<span class="string">&#x27;write_only&#x27;</span>:<span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;author_list&#x27;</span>:&#123;<span class="string">&#x27;read_only&#x27;</span>:<span class="literal">True</span>&#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="GenericAPIView视图"><a href="#GenericAPIView视图" class="headerlink" title="GenericAPIView视图"></a>GenericAPIView视图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookGenericApiView</span>(<span class="title class_ inherited__">GenericAPIView</span>):</span><br><span class="line">    queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            book = self.get_object()</span><br><span class="line">            books_serializer = self.get_serializer(instance=book)</span><br><span class="line">            <span class="keyword">return</span> Response(books_serializer.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            book_list = self.get_queryset()</span><br><span class="line">            books_serializer = self.get_serializer(book_list, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> Response(books_serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(request.data, <span class="built_in">dict</span>):</span><br><span class="line">            books_serializer = self.get_serializer(data=request.data)</span><br><span class="line">            books_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(data=books_serializer.data)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(request.data, <span class="built_in">list</span>):</span><br><span class="line">            books_serializer = self.get_serializer(data=request.data, many=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(data=books_serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            book = self.get_object()</span><br><span class="line">            books_serializer = self.get_serializer(instance=book, data=request.data, partial=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(data=books_serializer.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            book_list = []</span><br><span class="line">            modify_data = []</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> request.data:</span><br><span class="line">                pk = item.pop(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">                book = self.get_queryset().<span class="built_in">filter</span>(<span class="built_in">id</span>=pk).first()</span><br><span class="line">                book_list.append(book)</span><br><span class="line">                modify_data.append(item)</span><br><span class="line">            books_serializer = self.get_serializer(instance=book_list, data=modify_data, many=<span class="literal">True</span>, partial=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(data=books_serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        pk_list = []</span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            pk_list.append(pk)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pk_list = request.data.get(<span class="string">&#x27;pk_list&#x27;</span>)</span><br><span class="line">        res = self.get_queryset().<span class="built_in">filter</span>(id__in=pk_list, is_delete=<span class="literal">False</span>).update(is_delete=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> res:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;没有可删除的数据&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="分页器"><a href="#分页器" class="headerlink" title="分页器"></a>分页器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination, CursorPagination, LimitOffsetPagination</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserPageNumberPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    <span class="comment"># 每页的个数</span></span><br><span class="line">    page_size = <span class="number">3</span></span><br><span class="line">    <span class="comment"># 查询第几页的key值</span></span><br><span class="line">    page_query_param = <span class="string">&#x27;page&#x27;</span></span><br><span class="line">    <span class="comment"># 每一页显示的条数</span></span><br><span class="line">    max_page_size = <span class="number">4</span></span><br><span class="line">    <span class="comment"># 每一页显示的最大条数</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;size&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserLimitOffsetPagination</span>(<span class="title class_ inherited__">LimitOffsetPagination</span>):</span><br><span class="line">    <span class="comment"># 每页的个数</span></span><br><span class="line">    default_limit = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 限制个数的key</span></span><br><span class="line">    limit_query_param = <span class="string">&#x27;limit&#x27;</span></span><br><span class="line">    <span class="comment"># 从第几条开始偏移（标杆）</span></span><br><span class="line">    offset_query_param = <span class="string">&#x27;offset&#x27;</span></span><br><span class="line">    <span class="comment"># 最大偏移量</span></span><br><span class="line">    max_limit = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserCursorPagination</span>(<span class="title class_ inherited__">CursorPagination</span>):</span><br><span class="line">    <span class="comment"># 每页的个数</span></span><br><span class="line">    page_size = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 页码的key值</span></span><br><span class="line">    cursor_query_param = <span class="string">&#x27;cursor&#x27;</span></span><br><span class="line">    <span class="comment"># 排序字段</span></span><br><span class="line">    ordering = <span class="string">&#x27;-id&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页器的使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回所有图书的信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookModelSerializer</span><br><span class="line">    pagination_class = UserCursorPagination   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="IP频率限制"><a href="#IP频率限制" class="headerlink" title="IP频率限制"></a>IP频率限制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个类，继承SimpleRateThrottle，只需要重写get_cache_key; 按照返回值进行限定</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> ScopedRateThrottle,SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserThrottle</span>(<span class="title class_ inherited__">SimpleRateThrottle</span>):</span><br><span class="line">    scope=<span class="string">&#x27;user&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_cache_key</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="built_in">print</span>(request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部使用</span></span><br><span class="line">throttle_classes = [UserThrottling]    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局使用 </span></span><br><span class="line">REST_FRAMEWORK=&#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;utils.throttling.UserThrottle&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;3/m&#x27;</span>  <span class="comment"># key要跟类中的scop对应</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内置频率源码分析"><a href="#内置频率源码分析" class="headerlink" title="内置频率源码分析"></a>内置频率源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">通过APIView源码可知从allow_request()进行频率检验</span><br><span class="line"><span class="comment"># SimpleRateThrottle源码分析</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">getattr</span>(self, <span class="string">&#x27;rate&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            <span class="comment"># get_rate返回 settings中配置的scope别名对应的值</span></span><br><span class="line">            self.rate = self.get_rate()</span><br><span class="line">        <span class="comment"># parse_rate返回3, 60</span></span><br><span class="line">        self.num_requests, self.duration = self.parse_rate(self.rate)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_rate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 需要在类中定义scope类属性</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">getattr</span>(self, <span class="string">&#x27;scope&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            msg = (<span class="string">&quot;You must set either `.scope` or `.rate` for &#x27;%s&#x27; throttle&quot;</span> %</span><br><span class="line">                   self.__class__.__name__)</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.THROTTLE_RATES[self.scope]  <span class="comment"># scope：&#x27;user&#x27; =&gt; &#x27;3/min&#x27;</span></span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            msg = <span class="string">&quot;No default throttle rate set for &#x27;%s&#x27; scope&quot;</span> % self.scope</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_rate</span>(<span class="params">self, rate</span>):</span><br><span class="line">        <span class="keyword">if</span> rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        num, period = rate.split(<span class="string">&#x27;/&#x27;</span>)  <span class="comment"># rate：&#x27;3/min&#x27;</span></span><br><span class="line">        num_requests = <span class="built_in">int</span>(num)</span><br><span class="line">        <span class="comment"># 取斜杠后的第一个字母进行配对</span></span><br><span class="line">        duration = &#123;<span class="string">&#x27;s&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">3600</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">86400</span>&#125;[period[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">return</span> (num_requests, duration)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_request</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="keyword">if</span> self.rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment">#当前登录用户的ip地址; 后续项目采用拼接的key：&#x27;throttle_user_phone/ip&#x27;</span></span><br><span class="line">        self.key = self.get_cache_key(request, view)  </span><br><span class="line">        <span class="keyword">if</span> self.key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初次访问缓存为空，self.history为[]，是存放时间的列表</span></span><br><span class="line">        self.history = self.cache.get(self.key, [])</span><br><span class="line">        <span class="comment"># 获取一下当前时间，存放到 self.now</span></span><br><span class="line">        self.now = self.timer()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前访问与第一次访问时间间隔如果大于60s,第一次记录清除</span></span><br><span class="line">        <span class="keyword">while</span> self.history <span class="keyword">and</span>  self.now - self.history[-<span class="number">1</span>] &gt;= self.duration:</span><br><span class="line">            self.history.pop()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># history的长度与限制次数num_requests=3进行比较</span></span><br><span class="line">        <span class="comment"># history 长度第一次访问0，第二次访问1，第三次访问2，第四次访问3失败</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.history) &gt;= self.num_requests:</span><br><span class="line">            <span class="comment"># 直接返回False，代表频率限制了</span></span><br><span class="line">            <span class="keyword">return</span> self.throttle_failure()</span><br><span class="line">        <span class="comment"># history的长度未达到限制次数3，代表可以访问</span></span><br><span class="line">        <span class="comment"># 将当前时间插入到history列表的开头，将history列表作为数据存到缓存中，key是ip，过期时间60s</span></span><br><span class="line">        <span class="keyword">return</span> self.throttle_success()</span><br></pre></td></tr></table></figure><h2 id="自定制频率限制-仿源码"><a href="#自定制频率限制-仿源码" class="headerlink" title="自定制频率限制(仿源码)"></a>自定制频率限制(仿源码)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">-<span class="comment"># 判断是否限次：没有限次可以请求True，限次了不可以请求False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_request</span>(<span class="params">self, request, view</span>):</span><br><span class="line">-<span class="comment"># 限次后调用，显示还需等待多长时间才能再访问，返回等待的时间seconds</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IpThrottling</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    （1）取出访问者ip</span></span><br><span class="line"><span class="string">    （2）判断当前ip不在访问字典里，添加进去，并且直接返回True,表示第一次访问，在字典里，继续往下走</span></span><br><span class="line"><span class="string">    （3）循环判断当前ip的列表，有值，并且当前时间减去列表的最后一个时间大于60s，把这种数据pop掉，这样列表中只有60s以内的访问时间，</span></span><br><span class="line"><span class="string">    （4）判断，当列表小于3，说明一分钟以内访问不足三次，把当前时间插入到列表第一个位置，返回True，顺利通过</span></span><br><span class="line"><span class="string">    （5）当大于等于3，说明一分钟内访问超过三次，返回False验证失败</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    VISITOR_DIC = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.history_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_request</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        ip = request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>)</span><br><span class="line">        current_time = time.time()</span><br><span class="line">        <span class="keyword">if</span> ip <span class="keyword">not</span> <span class="keyword">in</span> self.VISITOR_DIC:</span><br><span class="line">            self.VISITOR_DIC[ip] = [current_time]</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 将当前访问者时间列表拿出来</span></span><br><span class="line">        self.history_list = self.VISITOR_DIC[ip]</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> current_time - self.history_list[-<span class="number">1</span>] &gt; <span class="number">60</span>:</span><br><span class="line">                self.history_list.pop()  <span class="comment"># 把最后一个移除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.history_list) &lt; <span class="number">3</span>:</span><br><span class="line">            self.history_list.insert(<span class="number">0</span>, current_time)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">self</span>):</span><br><span class="line">        current_time = time.time()</span><br><span class="line">        <span class="comment"># 当前时间，减去列表中最后一个时间</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span>-(current_time-self.history_list[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF-权限频率过滤排序异常处理</title>
      <link href="/2022/08/17/DRF-%E6%9D%83%E9%99%90%E9%A2%91%E7%8E%87%E8%BF%87%E6%BB%A4%E6%8E%92%E5%BA%8F%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2022/08/17/DRF-%E6%9D%83%E9%99%90%E9%A2%91%E7%8E%87%E8%BF%87%E6%BB%A4%E6%8E%92%E5%BA%8F%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="权限源码分析"><a href="#权限源码分析" class="headerlink" title="权限源码分析"></a>权限源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">权限源码:APIView--&gt;view--&gt;dispatch--&gt;self.initial()--&gt;self.check_permissions(request)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_permissions</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 遍历权限对象列表得到权限对象，进行权限验证</span></span><br><span class="line">        <span class="comment"># 返回值：有权限返回True，无权限返回False</span></span><br><span class="line">        <span class="keyword">for</span> permission <span class="keyword">in</span> self.get_permissions():</span><br><span class="line">            <span class="comment"># 权限类一定有一个has_permission权限方法，用来做权限认证的</span></span><br><span class="line">        <span class="comment"># 参数：权限对象self、请求对象request、视图类对象</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> permission.has_permission(request, self):</span><br><span class="line">                self.permission_denied(</span><br><span class="line">                    request,</span><br><span class="line">                    message=<span class="built_in">getattr</span>(permission, <span class="string">&#x27;message&#x27;</span>, <span class="literal">None</span>),</span><br><span class="line">                    code=<span class="built_in">getattr</span>(permission, <span class="string">&#x27;code&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">                )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_permissions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回权限类组成的权限对象列表</span></span><br><span class="line">        <span class="keyword">return</span> [permission() <span class="keyword">for</span> permission <span class="keyword">in</span> self.permission_classes]</span><br></pre></td></tr></table></figure><h2 id="权限的使用"><a href="#权限的使用" class="headerlink" title="权限的使用"></a>权限的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个类继承BasePermission，重写has_permission方法；权限通过，就返回True，不通过就返回False；</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserPermission</span>(<span class="title class_ inherited__">BasePermission</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_permission</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="comment"># 实现超级用户访问，普通用户限制,由于认证已经过了request已经有user对象了</span></span><br><span class="line">        user = request.user</span><br><span class="line">        <span class="comment"># 通过get_字段名_display()可以获取choices中的中文</span></span><br><span class="line">        <span class="built_in">print</span>(user.get_user_type_display())</span><br><span class="line">        <span class="keyword">if</span> user.user_type == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 局部使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    permission_classes = [app_auth.UserPermission]</span><br><span class="line"><span class="comment"># 全局使用</span></span><br><span class="line">REST_FRAMEWORK=&#123;</span><br><span class="line">    <span class="string">&quot;DEFAULT_AUTHENTICATION_CLASSES&quot;</span>:[<span class="string">&quot;app01.auth_utils.UserPermission&quot;</span>,],</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;app01.app_auth.UserPermission&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 局部禁用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    permission_classes = []</span><br></pre></td></tr></table></figure><h2 id="内置权限–了解"><a href="#内置权限–了解" class="headerlink" title="内置权限–了解"></a>内置权限–了解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 演示一下内置权限的使用：IsAdminUser，控制是否对网站后台有权限的人</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAdminUser</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    authentication_classes=[SessionAuthentication,]</span><br><span class="line">    permission_classes = [IsAdminUser]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;测试数据，超级管理员可以看&#x27;</span>)</span><br><span class="line"><span class="comment"># 正常的话，普通管理员，没有权限看（判断的是is_staff字段）</span></span><br></pre></td></tr></table></figure><h2 id="内置的频率限制-限制未登录用户"><a href="#内置的频率限制-限制未登录用户" class="headerlink" title="内置的频率限制(限制未登录用户)"></a>内置的频率限制(限制未登录用户)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局使用  限制未登录用户1分钟访问5次</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;3/m&#x27;</span>,  <span class="comment"># 从restframework中的默认设置项里找</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAdminUser</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    authentication_classes=[]</span><br><span class="line">    permission_classes = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;我是未登录用户&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    authentication_classes=[]</span><br><span class="line">    permission_classes = []</span><br><span class="line">    throttle_classes = [AnonRateThrottle]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;我是未登录用户&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="内置频率限制登录用户的访问频次"><a href="#内置频率限制登录用户的访问频次" class="headerlink" title="内置频率限制登录用户的访问频次"></a>内置频率限制登录用户的访问频次</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需求：未登录用户1分钟访问5次，登录用户一分钟访问10次</span></span><br><span class="line">全局：在setting中</span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">  <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;10/m&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;5/m&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">局部配置：在视图类中配一个就行;settings配置</span><br><span class="line">    REST_FRAMEWORK = &#123;</span><br><span class="line">        <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;10/m&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;5/m&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 安装：pip3 install django-filter</span></span><br><span class="line"><span class="comment">#2 注册，在app中注册 django-filters</span></span><br><span class="line"><span class="comment">#3 全局配，或者局部配</span></span><br><span class="line"> <span class="string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: (<span class="string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>,)</span><br><span class="line"><span class="comment">#4 视图类</span></span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    <span class="comment"># 局部配</span></span><br><span class="line">    filter_backends = [DjangoFilterBackend]</span><br><span class="line">    queryset = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    filter_fields = (<span class="string">&#x27;name&#x27;</span>,)  <span class="comment">#配置可以按照哪个字段来过滤</span></span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListAPIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> OrderingFilter</span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> Book</span><br><span class="line"><span class="keyword">from</span> app01.ser <span class="keyword">import</span> BookSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book2View</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    queryset = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    filter_backends = [OrderingFilter]</span><br><span class="line">    ordering_fields = (<span class="string">&#x27;price&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用：</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/books2/?ordering=-price</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/books2/?ordering=price</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义异常方法，替换掉全局</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">customize_exception_handler</span>(<span class="params">exc, context</span>):</span><br><span class="line">    response=exception_handler(exc, context)</span><br><span class="line">    <span class="comment"># 两种情况，一个是None，drf没有处理</span></span><br><span class="line">    <span class="comment">#response对象，django处理了，但是处理的不符合restful规范</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> response:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(exc, ZeroDivisionError):</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">777</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;除以0的错误&quot;</span> + <span class="built_in">str</span>(exc)&#125;, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">999</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="built_in">str</span>(exc)&#125;,status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">888</span>,<span class="string">&#x27;msg&#x27;</span>:response.data.get(<span class="string">&#x27;detail&#x27;</span>)&#125;,status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 全局配置setting.py</span></span><br><span class="line"><span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;app01.app_auth.customize_exception_handler&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="封装Response对象"><a href="#封装Response对象" class="headerlink" title="封装Response对象"></a>封装Response对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APIResponse</span>(<span class="title class_ inherited__">Response</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,code=<span class="number">100</span>,msg=<span class="string">&#x27;成功&#x27;</span>,data=<span class="literal">None</span>,status=<span class="literal">None</span>,headers=<span class="literal">None</span>,**kwargs</span>):</span><br><span class="line">        dic = &#123;<span class="string">&#x27;code&#x27;</span>: code, <span class="string">&#x27;msg&#x27;</span>: msg&#125;</span><br><span class="line">        <span class="keyword">if</span>  data:</span><br><span class="line">            dic = &#123;<span class="string">&#x27;code&#x27;</span>: code, <span class="string">&#x27;msg&#x27;</span>: msg,<span class="string">&#x27;data&#x27;</span>:data&#125;</span><br><span class="line">        dic.update(kwargs)</span><br><span class="line">        <span class="built_in">super</span>().__init__(data=dic, status=status,headers=headers)</span><br><span class="line">使用:<span class="keyword">return</span> APIResponse(code=<span class="string">&#x27;101&#x27;</span>,msg=<span class="string">&#x27;错误&#x27;</span>,data=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;jason&#x27;</span>&#125;,token=<span class="string">&#x27;xx&#x27;</span>,headers=&#123;&#125;) </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF-路由和认证</title>
      <link href="/2022/08/13/DRF-%E8%B7%AF%E7%94%B1%E5%92%8C%E8%AE%A4%E8%AF%81/"/>
      <url>/2022/08/13/DRF-%E8%B7%AF%E7%94%B1%E5%92%8C%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>几种路由的写法</span><br><span class="line">继承APIView和GenericAPIView</span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BookView.as_view()),</span><br><span class="line"><span class="comment"># 使用转换器</span></span><br><span class="line">path(<span class="string">&#x27;books/&lt;int:pk&gt;/&#x27;</span>, views.BookView.as_view()),</span><br><span class="line"><span class="comment"># 继承了ViewSetMixin</span></span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BookView.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;list&#x27;</span>,<span class="string">&#x27;post&#x27;</span>:<span class="string">&#x27;create&#x27;</span>&#125;))</span><br><span class="line"><span class="comment"># 继承自视图类ModelViewSet，自动生成路由</span></span><br><span class="line">    <span class="comment"># 第一步：导入routers模块</span></span><br><span class="line">    <span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line">    <span class="comment"># 第二步：有两个类,实例化得到对象</span></span><br><span class="line">    <span class="comment"># routers.DefaultRouter() 生成的路由更多</span></span><br><span class="line">    <span class="comment"># routers.SimpleRouter()</span></span><br><span class="line">    router=routers.SimpleRouter()</span><br><span class="line">    <span class="comment"># 第三步：注册</span></span><br><span class="line">    <span class="comment"># router.register(&#x27;前缀&#x27;,&#x27;继承自ModelViewSet视图类&#x27;,&#x27;别名&#x27;)</span></span><br><span class="line">    router.register(<span class="string">&#x27;books&#x27;</span>,views.BookViewSet) <span class="comment"># 不要加斜杠了</span></span><br><span class="line">    <span class="comment"># 第四步</span></span><br><span class="line">    <span class="comment"># router.urls # 自动生成的路由,加入到原路由中</span></span><br><span class="line">    <span class="comment"># urlpatterns+=router.urls</span></span><br><span class="line">-views.py</span><br><span class="line">    <span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line">    <span class="keyword">from</span> app01.models <span class="keyword">import</span> Book</span><br><span class="line">    <span class="keyword">from</span> app01.ser <span class="keyword">import</span> BookSerializer</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">BookViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset =Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookSerializer   </span><br></pre></td></tr></table></figure><h2 id="action的使用"><a href="#action的使用" class="headerlink" title="action的使用"></a>action的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">功能:给继承ViewSet的视图类中定义的函数也添加路由</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset =Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    <span class="comment"># methods第一个参数，传一个列表，列表中放请求方式，</span></span><br><span class="line">    <span class="comment"># detail：布尔类型 如果是True,路由后带有pk</span></span><br><span class="line">    <span class="comment">#^books/(?P&lt;pk&gt;[^/.]+)/get_1/$ [name=&#x27;book-get-1&#x27;]</span></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>],detail=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_1</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        book=self.get_queryset()[:<span class="number">2</span>]  <span class="comment"># 从0开始截取一条</span></span><br><span class="line">        ser=self.get_serializer(book,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 装饰器，放在被装饰的函数上方，method：请求方式，detail：是否带pk</span></span><br></pre></td></tr></table></figure><h2 id="认证的实现"><a href="#认证的实现" class="headerlink" title="认证的实现"></a>认证的实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义类，继承BaseAuthentication，重写authenticate，认证的逻辑写在里面，认证通过，返回两个值，一个值最终给了Requet对象的user，认证失败，抛异常：APIException或者AuthenticationFailed全局使用，局部使用。</span><br></pre></td></tr></table></figure><h2 id="认证的源码分析"><a href="#认证的源码分析" class="headerlink" title="认证的源码分析"></a>认证的源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">APIVIew----&gt;dispatch方法---&gt;self.initial(request, *args, **kwargs)----&gt;有认证，权限，频率--&gt;</span><br><span class="line">认证 self.perform_authentication(request)--&gt;request.user--&gt;Request类中寻找user属性或者方法--&gt;</span><br><span class="line">request = Request(request,authenticators = self.get_authenticators()···)括号内的request为django原生request --&gt;self._authenticate;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_authenticators</span>()  <span class="comment"># authentication_classes=[认证类1，认证类2]</span></span><br><span class="line"><span class="comment"># 生成认证对象的列表</span></span><br><span class="line"><span class="keyword">return</span> [auth() <span class="keyword">for</span> auth <span class="keyword">in</span> self.authentication_classes]</span><br><span class="line">核心:Request类的 _authenticate(self):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_authenticate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 遍历拿到认证对象,进行认证; self.authenticators为配置的认证类产生的认证类对象组成的 list</span></span><br><span class="line">        <span class="keyword">for</span> authenticator <span class="keyword">in</span> self.authenticators:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 认证器(对象)调用认证方法authenticate(认证类对象self, request请求对象)</span></span><br><span class="line">                <span class="comment"># 返回值：登陆的用户与认证的信息组成的 tuple</span></span><br><span class="line">                <span class="comment"># 该方法被try包裹，代表该方法会抛异常，抛异常就代表认证失败</span></span><br><span class="line">                user_auth_tuple = authenticator.authenticate(self) <span class="comment">#注意这self是request对象</span></span><br><span class="line">            <span class="keyword">except</span> exceptions.APIException:</span><br><span class="line">                self._not_authenticated()</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">if</span> user_auth_tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                self._authenticator = authenticator</span><br><span class="line">                <span class="comment"># 如何有返回值，就将 登陆用户与登陆认证分别保存到request.user、request.auth</span></span><br><span class="line">                self.user, self.auth = user_auth_tuple</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 如果返回值user_auth_tuple为空，代表认证通过，但是没有 登陆用户 与 登陆认证信息，代表游客</span></span><br><span class="line">        self._not_authenticated()</span><br></pre></td></tr></table></figure><h2 id="认证组件的使用"><a href="#认证组件的使用" class="headerlink" title="认证组件的使用"></a>认证组件的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    user_type = models.IntegerField(choices=(</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;超级用户&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;普通用户&#x27;</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;非活跃用户&#x27;</span>),</span><br><span class="line">    ))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserToken</span>(models.Model):</span><br><span class="line">    token = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    <span class="comment"># user = models.OneToOneField(to=&#x27;User&#x27;, on_delete=models.DO_NOTHING())</span></span><br><span class="line">    user = models.OneToOneField(to=<span class="string">&#x27;User&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 写一个认证类 auth_utils.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> AuthenticationFailed</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthBaseAuthentication</span>(<span class="title class_ inherited__">BaseAuthentication</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># print(request.META)</span></span><br><span class="line">        token=request.GET.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="comment"># token = request.META.get(&#x27;HTTP_TOKEN&#x27;)</span></span><br><span class="line">        <span class="keyword">if</span> token:</span><br><span class="line">            user_token = models.UserToken.objects.<span class="built_in">filter</span>(token=token).first()</span><br><span class="line">            <span class="comment"># 认证通过</span></span><br><span class="line">            <span class="keyword">if</span> user_token:</span><br><span class="line">                <span class="keyword">return</span> user_token.user, user_token.token</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;用户token校验失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;请求地址需要携带token&#x27;</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 可以有多个认证，从左到右依次执行;全局使用,在setting.py中配置</span></span><br><span class="line">REST_FRAMEWORK=&#123;</span><br><span class="line">    <span class="string">&quot;DEFAULT_AUTHENTICATION_CLASSES&quot;</span>:[<span class="string">&quot;app01.auth_utils.AuthBaseAuthentication&quot;</span>,]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 局部使用，在视图类上写</span></span><br><span class="line">authentication_classes=[AuthBaseAuthentication]</span><br><span class="line"><span class="comment"># 局部禁用</span></span><br><span class="line">authentication_classes=[]         </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF视图及扩展类</title>
      <link href="/2022/08/08/DRF%E8%A7%86%E5%9B%BE%E5%8F%8A%E6%89%A9%E5%B1%95%E7%B1%BB/"/>
      <url>/2022/08/08/DRF%E8%A7%86%E5%9B%BE%E5%8F%8A%E6%89%A9%E5%B1%95%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="视图-扩展类-视图子类"><a href="#视图-扩展类-视图子类" class="headerlink" title="视图|扩展类|视图子类"></a>视图|扩展类|视图子类</h1><h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求对象</span></span><br><span class="line"><span class="comment"># from rest_framework.request import Request</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, request, parsers=<span class="literal">None</span>, authenticators=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 negotiator=<span class="literal">None</span>, parser_context=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 二次封装request，将原生request作为drf request对象的 _request 属性</span></span><br><span class="line">        self._request = request</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>（self，item）：</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getattr</span>(self._request,item)</span><br><span class="line"><span class="comment"># 请求对象.data:前端以三种编码方式传入的数据，都可以取出来</span></span><br><span class="line"><span class="comment"># 请求对象.query_params 与Django标准的request.GET相同，只是更换了更正确的名称而已。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应对象</span></span><br><span class="line"><span class="comment">#from rest_framework.response import Response</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data=<span class="literal">None</span>, status=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 template_name=<span class="literal">None</span>, headers=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 exception=<span class="literal">False</span>, content_type=<span class="literal">None</span></span>):</span><br><span class="line"><span class="comment">#data：你要返回的数据，字典</span></span><br><span class="line"><span class="comment">#status：返回的状态码，默认是200，</span></span><br><span class="line">-<span class="keyword">from</span> rest_framework <span class="keyword">import</span> status在这个路径下，它把所有使用到的状态码都定义成了常量</span><br><span class="line"><span class="comment">#template_name 渲染的模板名字（自定制模板）</span></span><br><span class="line"><span class="comment">#headers:响应头，可以往响应头放东西，就是一个字典</span></span><br><span class="line"><span class="comment">#content_type：响应的编码格式，application/json和text/html;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器响应成浏览器的格式，postman响应成json格式</span></span><br><span class="line"><span class="comment"># drf有默认的配置文件---》先从项目的setting中找，找不到，采用默认的</span></span><br><span class="line"><span class="comment"># drf的配置信息，先从自己类中找--》项目的setting中找---》默认的找</span></span><br><span class="line">-局部使用:对某个视图类有效</span><br><span class="line">    -在视图类中写如下</span><br><span class="line">    <span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer</span><br><span class="line">    renderer_classes=[JSONRenderer,]</span><br><span class="line">    -全局使用：全局的视图类，所有请求，都有效</span><br><span class="line">    -在setting.py中加入如下</span><br><span class="line">    REST_FRAMEWORK = &#123;</span><br><span class="line">        <span class="string">&#x27;DEFAULT_RENDERER_CLASSES&#x27;</span>: (  <span class="comment"># 默认响应渲染类</span></span><br><span class="line">            <span class="string">&#x27;rest_framework.renderers.JSONRenderer&#x27;</span>,  <span class="comment"># json渲染器</span></span><br><span class="line">            <span class="string">&#x27;rest_framework.renderers.BrowsableAPIRenderer&#x27;</span>,  <span class="comment"># 浏览API渲染器</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="基于APIView的接口"><a href="#基于APIView的接口" class="headerlink" title="基于APIView的接口"></a>基于APIView的接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> Book</span><br><span class="line"><span class="keyword">from</span> app01.ser <span class="keyword">import</span> BookSerializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于APIView写的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        book_list=Book.objects.<span class="built_in">all</span>()</span><br><span class="line">        book_ser=BookSerializer(book_list,many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        book_ser = BookSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            book_ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">101</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;校验失败&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookDetailView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request,pk</span>):</span><br><span class="line">        book = Book.objects.<span class="built_in">all</span>().<span class="built_in">filter</span>(pk=pk).first()</span><br><span class="line">        book_ser = BookSerializer(book)</span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request,pk</span>):</span><br><span class="line">        book = Book.objects.<span class="built_in">all</span>().<span class="built_in">filter</span>(pk=pk).first()</span><br><span class="line">        book_ser = BookSerializer(instance=book,data=request.data)</span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            book_ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">101</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;校验失败&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        ret=Book.objects.<span class="built_in">filter</span>(pk=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功&#x27;</span>&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#models.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price=models.DecimalField(max_digits=<span class="number">5</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#ser.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model=Book</span><br><span class="line">        fields=<span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BookView.as_view()),</span><br><span class="line">re_path(<span class="string">&#x27;books/(?P&lt;pk&gt;\d+)&#x27;</span>, views.BookDetailView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="基于GenericAPIView的接口"><a href="#基于GenericAPIView的接口" class="headerlink" title="基于GenericAPIView的接口"></a>基于GenericAPIView的接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book2View</span>(<span class="title class_ inherited__">GenericAPIView</span>):</span><br><span class="line">    <span class="comment">#queryset要传queryset对象，查询了所有的图书</span></span><br><span class="line">    <span class="comment"># serializer_class使用哪个序列化类来序列化这堆数据</span></span><br><span class="line">    queryset=Book.objects</span><br><span class="line">    <span class="comment"># queryset=Book.objects.all()</span></span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        book_list=self.get_queryset()</span><br><span class="line">        book_ser=self.get_serializer(book_list,many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        book_ser = self.get_serializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            book_ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">101</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;校验失败&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book2DetailView</span>(<span class="title class_ inherited__">GenericAPIView</span>):</span><br><span class="line">    queryset = Book.objects</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request,pk</span>):</span><br><span class="line">        book = self.get_object()</span><br><span class="line">        book_ser = self.get_serializer(book)</span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request,pk</span>):</span><br><span class="line">        book = self.get_object()</span><br><span class="line">        book_ser = self.get_serializer(instance=book,data=request.data)</span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            book_ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">101</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;校验失败&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        ret=self.get_object().delete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功&#x27;</span>&#125;)</span><br><span class="line">    </span><br><span class="line"> <span class="comment">#url.py</span></span><br><span class="line">    <span class="comment"># 使用GenericAPIView重写的</span></span><br><span class="line">    path(<span class="string">&#x27;books2/&#x27;</span>, views.Book2View.as_view()),</span><br><span class="line">    re_path(<span class="string">&#x27;books2/(?P&lt;pk&gt;\d+)&#x27;</span>, views.Book2DetailView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="基于GenericAPIView和5个视图扩展类的接口"><a href="#基于GenericAPIView和5个视图扩展类的接口" class="headerlink" title="基于GenericAPIView和5个视图扩展类的接口"></a>基于GenericAPIView和5个视图扩展类的接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span>  ListModelMixin,CreateModelMixin,UpdateModelMixin,DestroyModelMixin,RetrieveModelMixin</span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book3View</span>(GenericAPIView,ListModelMixin,CreateModelMixin):</span><br><span class="line"></span><br><span class="line">    queryset=Book.objects</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.create(request)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book3DetailView</span>(GenericAPIView,RetrieveModelMixin,DestroyModelMixin,UpdateModelMixin):</span><br><span class="line">    queryset = Book.objects</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request,pk</span>):</span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request,pk)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request,pk</span>):</span><br><span class="line">        <span class="keyword">return</span> self.update(request,pk)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        <span class="keyword">return</span> self.destroy(request,pk)</span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">    <span class="comment"># 使用GenericAPIView+5 个视图扩展类  重写的</span></span><br><span class="line">    path(<span class="string">&#x27;books3/&#x27;</span>, views.Book3View.as_view()),</span><br><span class="line">    re_path(<span class="string">&#x27;books3/(?P&lt;pk&gt;\d+)&#x27;</span>, views.Book3DetailView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="使用ModelViewSet编写5个接口"><a href="#使用ModelViewSet编写5个接口" class="headerlink" title="使用ModelViewSet编写5个接口"></a>使用ModelViewSet编写5个接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py #5个接口都有，路由该怎么配呢？根据actions配置字典</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book5View</span>(<span class="title class_ inherited__">ModelViewSet</span>):  </span><br><span class="line">    queryset = Book.objects</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    </span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="comment"># 使用ModelViewSet编写5个接口</span></span><br><span class="line">    path(<span class="string">&#x27;books5/&#x27;</span>, views.Book5View.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;list&#x27;</span>,<span class="string">&#x27;post&#x27;</span>:<span class="string">&#x27;create&#x27;</span>&#125;)), <span class="comment">#当路径匹配，又是get请求，会执行Book5View的list方法</span></span><br><span class="line">    re_path(<span class="string">&#x27;books5/(?P&lt;pk&gt;\d+)&#x27;</span>, views.Book5View.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;retrieve&#x27;</span>,<span class="string">&#x27;put&#x27;</span>:<span class="string">&#x27;update&#x27;</span>,<span class="string">&#x27;delete&#x27;</span>:<span class="string">&#x27;destroy&#x27;</span>&#125;)),</span><br></pre></td></tr></table></figure><h2 id="源码分析ViewSetMixin"><a href="#源码分析ViewSetMixin" class="headerlink" title="源码分析ViewSetMixin"></a>源码分析ViewSetMixin</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重写了as_view</span></span><br><span class="line"><span class="comment"># 核心代码（所以路由中只要配置了对应关系，比如(actions=&#123;&#x27;get&#x27;:&#x27;list&#x27;&#125;）,当get请求来，就会执行list方法</span></span><br><span class="line"><span class="keyword">for</span> method, action <span class="keyword">in</span> actions.items():</span><br><span class="line">    <span class="comment">#method：get</span></span><br><span class="line">    <span class="comment"># action：list</span></span><br><span class="line">    handler = <span class="built_in">getattr</span>(self, action)</span><br><span class="line">    <span class="comment">#执行完上一句，handler就变成了list的内存地址</span></span><br><span class="line">    <span class="built_in">setattr</span>(self, method, handler)</span><br><span class="line">    <span class="comment">#执行完上一句  对象.get=list</span></span><br><span class="line">    <span class="comment">#for循环执行完毕 对象.get:对着list方法   对象.post：对着create</span></span><br></pre></td></tr></table></figure><h2 id="继承ViewSetMixin的视图类"><a href="#继承ViewSetMixin的视图类" class="headerlink" title="继承ViewSetMixin的视图类"></a>继承ViewSetMixin的视图类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ViewSetMixin</span><br><span class="line"><span class="comment">#一定要放在APIVIew前,因为APIView里面也有as_view()方法，先继承APIView后配置的actions会失效</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book6View</span>(ViewSetMixin,APIView): </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_all_book</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line">        book_list = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">        book_ser = BookSerializer(book_list, many=<span class="literal">True</span>) <span class="comment"># 查询多个记得加上many=True</span></span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">    <span class="comment">#继承ViewSetMixin的视图类，路由可以改写成这样</span></span><br><span class="line">    path(<span class="string">&#x27;books6/&#x27;</span>, views.Book6View.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;get_all_book&#x27;</span>&#125;)),</span><br></pre></td></tr></table></figure><h2 id="GenericAPIView源码分析"><a href="#GenericAPIView源码分析" class="headerlink" title="GenericAPIView源码分析"></a>GenericAPIView源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">常用类属性：queryset，serializer_class，filter_backends，pagination_class，lookup_field=<span class="string">&#x27;pk&#x27;</span></span><br><span class="line">常用方法:get_queryset();get_serializer();get_serializer_class()通过重写实现不同方法配置不同序列化类；</span><br><span class="line">get_object()获取一条数据；</span><br><span class="line">-源码分析</span><br><span class="line">    <span class="comment"># 获取所有的queryset对象</span></span><br><span class="line">    queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">    lookup_url_kwarg = self.lookup_url_kwarg <span class="keyword">or</span> self.lookup_field <span class="comment"># pk</span></span><br><span class="line">    obj = get_object_or_404(queryset, **filter_kwargs) <span class="comment"># 通过pk获取数据对象</span></span><br><span class="line">    <span class="keyword">return</span> obj  <span class="comment"># 返回数据对象    </span></span><br></pre></td></tr></table></figure><h2 id="视图合集"><a href="#视图合集" class="headerlink" title="视图合集"></a>视图合集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Django原生View  顶层视图</span><br><span class="line">  -APIView---》继承自View</span><br><span class="line">  -GenicAPIView---》APIView，做了一些扩展：</span><br><span class="line">  -<span class="number">5</span> 个视图扩展类（继承了<span class="built_in">object</span>），每个里面写了一个方法（ListModelMixin：<span class="built_in">list</span>方法）</span><br><span class="line">        ListModelMixin,</span><br><span class="line">        CreateModelMixin,</span><br><span class="line">        UpdateModelMixin,</span><br><span class="line">        DestroyModelMixin,</span><br><span class="line">        RetrieveModelMixin</span><br><span class="line"> -GenericAPIView的视图子类，<span class="number">9</span>个，继承了GenicAPIView+一个或者两个或者三个视图扩展类</span><br><span class="line">        CreateAPIView,</span><br><span class="line">        ListAPIView,</span><br><span class="line">        UpdateAPIView,</span><br><span class="line">        RetrieveAPIView,</span><br><span class="line">        DestroyAPIView,</span><br><span class="line">        ListCreateAPIView,</span><br><span class="line">        RetrieveUpdateDestroyAPIView,</span><br><span class="line">        RetrieveDestroyAPIView,</span><br><span class="line">        RetrieveUpdateAPIView</span><br><span class="line"> -视图集顶层：ViewSetMixin(重写了as_view方法),只要继承它的，路由得写成&#123;‘get’：‘自己定义的方法’&#125;</span><br><span class="line">-ViewSet = ViewSetMixin+ views.APIView ：ViewSetMixin要放在前面</span><br><span class="line">    -GenericViewSet = ViewSetMixin + GenicAPIView</span><br><span class="line">    -ModelViewSet = <span class="number">5</span>个视图扩展类 + GenericViewSet</span><br><span class="line">    <span class="comment"># 只读(获取所有和单个)</span></span><br><span class="line">    -ReadOnlyModelViewSet = ListModelMixin + RetrieveModelMixin + GenericViewSet</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF序列化器的使用</title>
      <link href="/2022/08/05/DRF%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/08/05/DRF%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="DRF序列化器之Serializer和ModelSerializer"><a href="#DRF序列化器之Serializer和ModelSerializer" class="headerlink" title="DRF序列化器之Serializer和ModelSerializer"></a>DRF序列化器之Serializer和ModelSerializer</h1><h2 id="序列化组件介绍"><a href="#序列化组件介绍" class="headerlink" title="序列化组件介绍"></a>序列化组件介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 序列化,序列化器会把模型对象转换成字典,经过response以后变成json字符串</span><br><span class="line"><span class="number">2.</span> 反序列化,把客户端发送过来的数据,经过request以后变成字典,序列化器可以把字典转成模型</span><br><span class="line"><span class="number">3.</span> 反序列化,完成数据校验功能</span><br></pre></td></tr></table></figure><h2 id="序列化器简单使用"><a href="#序列化器简单使用" class="headerlink" title="序列化器简单使用"></a>序列化器简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ser.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="comment"># id=serializers.CharField()</span></span><br><span class="line">    name=serializers.CharField()</span><br><span class="line">    <span class="comment"># price=serializers.DecimalField()</span></span><br><span class="line">    price=serializers.CharField()</span><br><span class="line">    author=serializers.CharField()  </span><br><span class="line">    publish=serializers.CharField()</span><br><span class="line">        </span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        book=Book.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=pk).first()</span><br><span class="line">        <span class="comment">#用一个类，毫无疑问，一定要实例化</span></span><br><span class="line">        <span class="comment">#要序列化谁，就把谁传过来</span></span><br><span class="line">        book_ser=BookSerializer(book)  <span class="comment"># 调用类的__init__</span></span><br><span class="line">        <span class="comment"># book_ser.data   序列化对象.data就是序列化后的字典</span></span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books/&lt;int:pk&gt;/&#x27;</span>, views.BookView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="序列化类的字段类型"><a href="#序列化类的字段类型" class="headerlink" title="序列化类的字段类型"></a>序列化类的字段类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需要记住：CharField，IntegerField，DateField,PrimaryKeyRelatedField，SerializerMethodField</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示course这个字段能与Course那张表做关联</span></span><br><span class="line">特殊： course = serializers.PrimaryKeyRelatedField(queryset=Course.objects.<span class="built_in">all</span>(), write_only=<span class="literal">True</span>, many=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="read-only和write-only"><a href="#read-only和write-only" class="headerlink" title="read_only和write_only"></a>read_only和write_only</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">read_only表明该字段仅用于序列化输出，默认<span class="literal">False</span>,如果设置成<span class="literal">True</span>，postman中可以看到该字段，修改时，不需要传该字段</span><br><span class="line">write_only表明该字段仅用于反序列化输入，默认<span class="literal">False</span>，如果设置成<span class="literal">True</span>，postman中看不到该字段，修改时，该字段需要传</span><br><span class="line">max_length:最大长度</span><br><span class="line">min_length：最小长度   </span><br><span class="line"><span class="comment"># 相关了解</span></span><br><span class="line">required表明该字段在反序列化时必须输入，默认<span class="literal">True</span></span><br><span class="line">default反序列化时使用的默认值</span><br><span class="line">allow_null表明该字段是否允许传入<span class="literal">None</span>，默认<span class="literal">False</span></span><br><span class="line">validators该字段使用的验证器</span><br><span class="line">error_messages包含错误编号与错误信息的字典</span><br></pre></td></tr></table></figure><h2 id="序列化组件修改数据"><a href="#序列化组件修改数据" class="headerlink" title="序列化组件修改数据"></a>序列化组件修改数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 写一个序列化的类，继承Serializer</span><br><span class="line"><span class="number">2</span> 在类中写要反序列化的字段，想反序列化哪个字段，就在类中写哪个字段，字段的属性（max_lenth......）</span><br><span class="line">max_length最大长度</span><br><span class="line">    min_lenght最小长度</span><br><span class="line">    allow_blank是否允许为空</span><br><span class="line">    trim_whitespace是否截断空白字符</span><br><span class="line">    max_value最小值</span><br><span class="line">    min_value最大值</span><br><span class="line"><span class="number">3</span> 在视图类中使用，导入--》实例化得到序列化类的对象，把要要修改的对象传入，修改的数据传入</span><br><span class="line">boo_ser=BookSerializer(book,request.data)</span><br><span class="line">    boo_ser=BookSerializer(instance=book,data=request.data)</span><br><span class="line"><span class="number">4</span> 数据校验 <span class="keyword">if</span> boo_ser.is_valid()</span><br><span class="line"><span class="number">5</span> 如果校验通过，就保存,此处为序列化类的对象</span><br><span class="line">boo_ser.save()  <span class="comment"># 注意不是book.save()</span></span><br><span class="line"><span class="number">6</span> 如果不通过，逻辑自己写</span><br><span class="line"></span><br><span class="line"><span class="number">7</span> 如果字段的校验规则不够，可以写钩子函数（局部和全局）</span><br><span class="line"></span><br><span class="line"><span class="number">8</span> 可以使用字段的author=serializers.CharField(validators=[check_author]) ，来校验</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span>=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price=models.DecimalField(max_digits=<span class="number">5</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">    author=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    publish=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ser.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="comment"># 需要继承 Serializer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_author</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">if</span> data.startswith(<span class="string">&#x27;sb&#x27;</span>):</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;作者名字不能以sb开头&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承Serializer需要重写create和update方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="comment"># id=serializers.CharField()</span></span><br><span class="line">    name=serializers.CharField(max_length=<span class="number">16</span>,min_length=<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># price=serializers.DecimalField()</span></span><br><span class="line">    price=serializers.CharField()</span><br><span class="line">    author=serializers.CharField(validators=[check_author])  <span class="comment"># validators=[] 列表中写函数内存地址</span></span><br><span class="line">    publish=serializers.CharField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_price</span>(<span class="params">self, data</span>):   <span class="comment"># 局部钩子,validate_字段名  接收一个参数</span></span><br><span class="line">        <span class="comment">#如果价格小于10，就校验不通过</span></span><br><span class="line">        <span class="comment"># print(type(data))</span></span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">float</span>(data)&gt;<span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#校验失败，抛异常</span></span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;价格太低&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, validate_data</span>):   <span class="comment"># 全局钩子</span></span><br><span class="line">        <span class="built_in">print</span>(validate_data)</span><br><span class="line">        author=validate_data.get(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">        publish=validate_data.get(<span class="string">&#x27;publish&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> author == publish:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;作者名字跟出版社一样&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> validate_data</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        <span class="comment">#instance是book这个对象</span></span><br><span class="line">        <span class="comment">#validated_data是校验后的数据,一定要返回.</span></span><br><span class="line">        instance.name=validated_data.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        instance.price=validated_data.get(<span class="string">&#x27;price&#x27;</span>)</span><br><span class="line">        instance.author=validated_data.get(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">        instance.publish=validated_data.get(<span class="string">&#x27;publish&#x27;</span>)</span><br><span class="line">        instance.save()  <span class="comment">#book.save()   django 的orm提供的</span></span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line"><span class="comment">#views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        book=Book.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=pk).first()</span><br><span class="line">        <span class="comment">#用一个类，毫无疑问，一定要实例化,要序列化谁，就把谁传过来</span></span><br><span class="line">        book_ser=BookSerializer(book)  <span class="comment"># 调用类的__init__</span></span><br><span class="line">        <span class="comment"># book_ser.data   序列化对象.data就是序列化后的字典</span></span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">        <span class="comment"># return JsonResponse(book_ser.data)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        response_msg=&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;成功&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># 找到这个对象</span></span><br><span class="line">        book = Book.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=pk).first()</span><br><span class="line">        <span class="comment"># 得到一个序列化类的对象</span></span><br><span class="line">        <span class="comment"># boo_ser=BookSerializer(book,request.data)</span></span><br><span class="line">        boo_ser=BookSerializer(instance=book,data=request.data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 要数据验证（回想form表单的验证）</span></span><br><span class="line">        <span class="keyword">if</span> boo_ser.is_valid():  <span class="comment"># 返回True表示验证通过</span></span><br><span class="line">            boo_ser.save()  </span><br><span class="line">            response_msg[<span class="string">&#x27;data&#x27;</span>]=boo_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response_msg[<span class="string">&#x27;status&#x27;</span>]=<span class="number">101</span></span><br><span class="line">            response_msg[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;数据校验失败&#x27;</span></span><br><span class="line">            response_msg[<span class="string">&#x27;data&#x27;</span>]=boo_ser.errors</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(response_msg)</span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books/&lt;int:pk&gt;/&#x27;</span>, views.BookView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BooksView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        response_msg = &#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;成功&#x27;</span>&#125;</span><br><span class="line">        books=Book.objects.<span class="built_in">all</span>()</span><br><span class="line">        book_ser=BookSerializer(books,many=<span class="literal">True</span>)  <span class="comment">#序列化多条,如果序列化一条，不需要写</span></span><br><span class="line">        response_msg[<span class="string">&#x27;data&#x27;</span>]=book_ser.data</span><br><span class="line">        <span class="keyword">return</span> Response(response_msg)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BooksView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BooksView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新增</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        response_msg = &#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;成功&#x27;</span>&#125;</span><br><span class="line">        <span class="comment">#修改才有instance，新增没有instance，只有data</span></span><br><span class="line">        book_ser = BookSerializer(data=request.data)</span><br><span class="line">        <span class="comment"># book_ser = BookSerializer(request.data)  # 这个按位置传request.data会给instance，就报错了</span></span><br><span class="line">        <span class="comment"># 校验字段</span></span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            book_ser.save()</span><br><span class="line">            response_msg[<span class="string">&#x27;data&#x27;</span>]=book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response_msg[<span class="string">&#x27;status&#x27;</span>]=<span class="number">102</span></span><br><span class="line">            response_msg[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;数据校验失败&#x27;</span></span><br><span class="line">            response_msg[<span class="string">&#x27;data&#x27;</span>]=book_ser.errors</span><br><span class="line">        <span class="keyword">return</span> Response(response_msg)</span><br><span class="line"><span class="comment">#ser.py 序列化类重写create方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        instance=Book.objects.create(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BooksView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="删除一个数据"><a href="#删除一个数据" class="headerlink" title="删除一个数据"></a>删除一个数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        ret=Book.objects.<span class="built_in">filter</span>(pk=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;删除成功&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books/&lt;int:pk&gt;/&#x27;</span>, views.BookView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="模型类序列化器ModelSerializer"><a href="#模型类序列化器ModelSerializer" class="headerlink" title="模型类序列化器ModelSerializer"></a>模型类序列化器ModelSerializer</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model=Book  <span class="comment"># 对应上models.py中的模型</span></span><br><span class="line">        fields=<span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">        <span class="comment"># fields=(&#x27;name&#x27;,&#x27;price&#x27;,&#x27;id&#x27;,&#x27;author&#x27;) # 只序列化指定的字段</span></span><br><span class="line">        <span class="comment"># exclude=(&#x27;name&#x27;,) #跟fields不能都写，写谁，就表示排除谁</span></span><br><span class="line">        extra_kwargs = &#123; <span class="comment"># name=serializers.CharField(max_length=16,min_length=4)</span></span><br><span class="line">            <span class="string">&#x27;price&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># 其他使用一模一样；不需要重写create和updata方法了</span></span><br></pre></td></tr></table></figure><h2 id="源码分析many-x3D-True的用途"><a href="#源码分析many-x3D-True的用途" class="headerlink" title="源码分析many&#x3D;True的用途"></a>源码分析many&#x3D;True的用途</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类创建一个对象的方法：类的__new__()方法控制对象的生成；对象=类名(name=jason)，触发类的__init__()</span></span><br><span class="line"><span class="comment"># 序列化多条，需要传many=True，所产生的序列化对象是不一样的</span></span><br><span class="line">book_ser=BookModelSerializer(books,many=<span class="literal">True</span>)</span><br><span class="line">book_one_ser=BookModelSerializer(book)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(book_ser))</span><br><span class="line"><span class="comment">#&lt;class &#x27;rest_framework.serializers.ListSerializer&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(book_one_ser))</span><br><span class="line"><span class="comment">#&lt;class &#x27;app01.ser.BookModelSerializer&#x27;&gt;自定义的序列化类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">    <span class="keyword">if</span> kwargs.pop(<span class="string">&#x27;many&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">        <span class="keyword">return</span> cls.many_init(*args, **kwargs)</span><br><span class="line">    <span class="comment"># 没有传many=True,走下面，正常的对象实例化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, *args, **kwargs)</span><br><span class="line">后续如果是post方法，传了many=<span class="literal">True</span>后，判断是否传了instance对象进行判断采用create方法或者update方法</span><br></pre></td></tr></table></figure><h2 id="Serializer高级用法"><a href="#Serializer高级用法" class="headerlink" title="Serializer高级用法"></a>Serializer高级用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># source的使用:指向的是数据库对应的字段名</span></span><br><span class="line"><span class="number">1</span> 可以改字段名字  xxx=serializers.CharField(source=<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    <span class="number">2</span> 可以.跨表publish=serializers.CharField(source=<span class="string">&#x27;publish.email&#x27;</span>)</span><br><span class="line">    <span class="number">3</span> 可以执行方法 pub_date=serializers.CharField(source=<span class="string">&#x27;test&#x27;</span>) test是Book表模型中的方法</span><br><span class="line">    </span><br><span class="line"><span class="comment"># SerializerMethodField(）的使用</span></span><br><span class="line"><span class="number">1</span> 它需要有个配套方法，方法名叫get_字段名，返回值就是要显示的东西</span><br><span class="line">    authors=serializers.SerializerMethodField()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_authors</span>(<span class="params">self,instance</span>):</span><br><span class="line">        <span class="comment"># book对象 # 取出所有作者</span></span><br><span class="line">        authors=instance.authors.<span class="built_in">all</span>()  </span><br><span class="line">        ll=[]</span><br><span class="line">        <span class="keyword">for</span> author <span class="keyword">in</span> authors:</span><br><span class="line">            ll.append(&#123;<span class="string">&#x27;name&#x27;</span>:author.name,<span class="string">&#x27;age&#x27;</span>:author.age&#125;)</span><br><span class="line">        <span class="keyword">return</span> ll</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF前置及API源码分析</title>
      <link href="/2022/08/02/DRF%E5%89%8D%E7%BD%AE%E5%8F%8AAPI%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2022/08/02/DRF%E5%89%8D%E7%BD%AE%E5%8F%8AAPI%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="DRF介绍和APIView源码"><a href="#DRF介绍和APIView源码" class="headerlink" title="DRF介绍和APIView源码"></a>DRF介绍和APIView源码</h1><h2 id="web开发模式"><a href="#web开发模式" class="headerlink" title="web开发模式"></a>web开发模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前后端混合开发（前后端不分离）：返回的是html的内容，需要写模板</span></span><br><span class="line"><span class="comment">#前后端分离：只专注于写后端接口，返回json，xml格式数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># xml格式</span></span><br><span class="line">&lt;xml&gt;</span><br><span class="line">&lt;name&gt;jason&lt;/name&gt;</span><br><span class="line">&lt;/xml&gt;</span><br><span class="line"><span class="comment"># json</span></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;jason&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># java---》jsp</span></span><br><span class="line">https://www.pearvideo.com/category_loading.jsp</span><br><span class="line"><span class="comment">#php写的</span></span><br><span class="line">http://www.aa7a.cn/user.php</span><br><span class="line"><span class="comment"># python写的</span></span><br><span class="line">http://www.aa7a.cn/user.html</span><br><span class="line">    </span><br><span class="line"><span class="comment">#什么是动态页面（查数据库的），什么是静态页面（静止的html）</span></span><br></pre></td></tr></table></figure><h2 id="api接口"><a href="#api接口" class="headerlink" title="api接口"></a>api接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过网络，规定了前后台信息交互规则的url链接，也就是前后台信息交互的媒介</span></span><br><span class="line"><span class="comment">#百度地图的api接口 </span></span><br><span class="line">https://api.<span class="built_in">map</span>.baidu.com/place/v2/search?ak=6E823f587c95f0148c19993539b99295&amp;region=%E4%B8%8A%E6%B5%B7&amp;query=%E8%<span class="number">82</span>%AF%E5%BE%B7%E5%9F%BA&amp;output=xml</span><br></pre></td></tr></table></figure><h2 id="postman的使用"><a href="#postman的使用" class="headerlink" title="postman的使用"></a>postman的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># postman是目前最好用的，模拟发送http请求的工具</span></span><br><span class="line"><span class="comment"># 解析json的网站</span></span><br><span class="line">http://www.json.cn/</span><br><span class="line">    </span><br><span class="line"><span class="comment">#请求头中User-Agent：客户端的类型</span></span><br><span class="line"><span class="comment"># 请求头中加其他参数；</span></span><br><span class="line"><span class="comment"># 批量接口导出和测试</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/02/DRF%E5%89%8D%E7%BD%AE%E5%8F%8AAPI%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.png" alt="1"></p><h2 id="Restful规范"><a href="#Restful规范" class="headerlink" title="Restful规范"></a>Restful规范</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">REST全称是Representational State Transfer，中文意思是表述（编者注：通常译为表征性状态转移）。 </span><br><span class="line">RESTful是一种定义Web API接口的设计风格，尤其适用于前后端分离的应用模式中。</span><br><span class="line"></span><br><span class="line">这种风格的理念认为后端开发任务就是提供数据的，对外提供的是数据资源的访问接口，所以在定义接口时，客户端访问的URL路径就表示这种要操作的数据资源。</span><br><span class="line">事实上，我们可以使用任何一个框架都可以实现符合restful规范的API接口。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规范</span></span><br><span class="line"><span class="number">1</span>  数据的安全保障：url链接一般都采用https协议进行传输 注：采用https协议，可以提高数据交互过程中的安全性</span><br><span class="line"><span class="number">2</span> 接口特征表现，一看就知道是个api接口</span><br><span class="line">    - 用api关键字标识接口url：</span><br><span class="line">      - [https://api.baidu.com](https://api.baidu.com/)</span><br><span class="line">      - https://www.baidu.com/api</span><br><span class="line">      注：看到api字眼，就代表该请求url链接是完成前后台数据交互的</span><br><span class="line">      -例如：https://api.luffycity.com/api/v1/course/free/</span><br><span class="line"><span class="number">3</span> 多数据版本共存</span><br><span class="line">    - 在url链接中标识数据版本</span><br><span class="line">    - https://api.baidu.com/v1</span><br><span class="line">    - https://api.baidu.com/v2</span><br><span class="line">    注：url链接中的v1、v2就是不同数据版本的体现（只有在一种数据资源有多版本情况下）</span><br><span class="line"><span class="number">4</span> 数据即是资源，均使用名词（可复数）</span><br><span class="line">    - 接口一般都是完成前后台数据的交互，交互的数据我们称之为资源</span><br><span class="line">      - https://api.baidu.com/users</span><br><span class="line">      - https://api.baidu.com/books</span><br><span class="line">      - https://api.baidu.com/book</span><br><span class="line"></span><br><span class="line">      注：一般提倡用资源的复数形式，在url链接中奖励不要出现操作资源的动词，错误示范：https://api.baidu.com/delete-user</span><br><span class="line">    - 特殊的接口可以出现动词，因为这些接口一般没有一个明确的资源，或是动词就是接口的核心含义</span><br><span class="line"></span><br><span class="line">      - https://api.baidu.com/place/search</span><br><span class="line">      - https://api.baidu.com/login</span><br><span class="line"><span class="number">5</span> 资源操作由请求方式决定（method）</span><br><span class="line">    - 操作资源一般都会涉及到增删改查，我们提供请求方式来标识增删改查动作</span><br><span class="line">      - https://api.baidu.com/books - get请求：获取所有书</span><br><span class="line">      - https://api.baidu.com/books/<span class="number">1</span> - get请求：获取主键为<span class="number">1</span>的书</span><br><span class="line">      - https://api.baidu.com/books - post请求：新增一本书书</span><br><span class="line">      - https://api.baidu.com/books/<span class="number">1</span> - put请求：整体修改主键为<span class="number">1</span>的书</span><br><span class="line">      - https://api.baidu.com/books/<span class="number">1</span> - patch请求：局部修改主键为<span class="number">1</span>的书</span><br><span class="line">      - https://api.baidu.com/books/<span class="number">1</span> - delete请求：删除主键为<span class="number">1</span>的书</span><br><span class="line"><span class="number">6</span> 过滤，通过在url上传参的形式传递搜索条件</span><br><span class="line">    - https://api.example.com/v1/zoos?limit=<span class="number">10</span>：指定返回记录的数量</span><br><span class="line">    - https://api.example.com/v1/zoos?offset=<span class="number">10</span>：指定返回记录的开始位置</span><br><span class="line">    - https://api.example.com/v1/zoos?page=<span class="number">2</span>&amp;per_page=<span class="number">100</span>：指定第几页，以及每页的记录数</span><br><span class="line">    - https://api.example.com/v1/zoos?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序</span><br><span class="line">    - https://api.example.com/v1/zoos?animal_type_id=<span class="number">1</span>：指定筛选条件</span><br><span class="line">        </span><br><span class="line"><span class="number">7</span> 响应状态码</span><br><span class="line">   <span class="number">7.1</span> 正常响应</span><br><span class="line">    - 响应状态码2xx</span><br><span class="line">      - <span class="number">200</span>：常规请求</span><br><span class="line">      - <span class="number">201</span>：创建成功</span><br><span class="line">   <span class="number">7.2</span> 重定向响应</span><br><span class="line">    - 响应状态码3xx</span><br><span class="line">      - <span class="number">301</span>：永久重定向</span><br><span class="line">      - <span class="number">302</span>：暂时重定向</span><br><span class="line">   <span class="number">7.3</span> 客户端异常</span><br><span class="line">    - 响应状态码4xx</span><br><span class="line">      - <span class="number">403</span>：请求无权限</span><br><span class="line">      - <span class="number">404</span>：请求路径不存在</span><br><span class="line">      - <span class="number">405</span>：请求方法不存在</span><br><span class="line"><span class="number">7.4</span> 服务器异常</span><br><span class="line">    - 响应状态码5xx</span><br><span class="line">      - <span class="number">500</span>：服务器异常</span><br><span class="line"> <span class="number">8</span> 错误处理，应返回错误信息，error当做key</span><br><span class="line">    &#123;</span><br><span class="line">        error: <span class="string">&quot;无权限操作&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="number">9</span> 返回结果，针对不同操作，服务器向用户返回的结果应该符合以下规范</span><br><span class="line">    GET /collection：返回资源对象的列表（数组）</span><br><span class="line">    GET /collection/resource：返回单个资源对象</span><br><span class="line">    POST /collection：返回新生成的资源对象</span><br><span class="line">    PUT /collection/resource：返回完整的资源对象</span><br><span class="line">    PATCH /collection/resource：返回完整的资源对象</span><br><span class="line">    DELETE /collection/resource：返回一个空文档</span><br><span class="line">    </span><br><span class="line"> <span class="number">10</span> 需要url请求的资源需要访问资源的请求链接</span><br><span class="line">     <span class="comment"># Hypermedia API，RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">            <span class="string">&quot;results&quot;</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;肯德基(罗餐厅)&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;img&quot;</span>: <span class="string">&quot;https://image.baidu.com/kfc/001.png&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">                ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="drf的安装和简单使用"><a href="#drf的安装和简单使用" class="headerlink" title="drf的安装和简单使用"></a>drf的安装和简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装：pip install djangorestframework==3.12.4</span></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="number">1</span> 在setting.py 的app中注册</span><br><span class="line">        INSTALLED_APPS = [</span><br><span class="line">        <span class="string">&#x27;rest_framework&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    <span class="number">2</span> 在models.py中写表模型</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">            <span class="comment"># 也可不写该字段会自动创建</span></span><br><span class="line">            nid=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">            name=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">            price=models.DecimalField(max_digits=<span class="number">5</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">            author=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="number">3</span> 新建一个序列化类（先演示出效果）</span><br><span class="line">    <span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line">        <span class="keyword">from</span> app01.models <span class="keyword">import</span>  Book</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">BookModelSerializer</span>(<span class="title class_ inherited__">ModelSerializer</span>):</span><br><span class="line">            <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">                model = Book</span><br><span class="line">                fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line">    <span class="number">4</span> 在视图中写视图类(两行代码五个接口)</span><br><span class="line">        <span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line">        <span class="keyword">from</span> app01.models <span class="keyword">import</span> Book</span><br><span class="line">        <span class="keyword">from</span> app01.ser <span class="keyword">import</span> BookModelSerializer</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">BooksViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">            queryset = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">            serializer_class = BookModelSerializer</span><br><span class="line">    <span class="number">5</span> 写路由关系</span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">        <span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line">        router = DefaultRouter()  <span class="comment"># 可以处理视图的路由器</span></span><br><span class="line">        router.register(<span class="string">&#x27;book&#x27;</span>, views.BooksViewSet)  <span class="comment"># 向路由器中注册视图集</span></span><br><span class="line">          <span class="comment"># 将路由器中的所以路由信息追到到django的路由列表中</span></span><br><span class="line">        urlpatterns = [</span><br><span class="line">            path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">        ]</span><br><span class="line">        <span class="comment"># 两个列表相加</span></span><br><span class="line">        urlpatterns += router.urls</span><br><span class="line">    <span class="number">6</span> 启动，在postman中测试即可</span><br></pre></td></tr></table></figure><h2 id="cbv源码"><a href="#cbv源码" class="headerlink" title="cbv源码"></a>cbv源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ModelViewSet继承View（django原生View）</span></span><br><span class="line"><span class="comment"># APIView继承了View</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先读View的源码</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books1/&#x27;</span>, views.Books.as_view()),  <span class="comment">#在这个地方应该写个函数内存地址,views.Books.as_view()执行完，是个函数内存地址,as_view是一个类方法，类直接来调用，会把类自动传入</span></span><br><span class="line">放了一个view的内存地址（View--》as_view--》内层函数）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求来了，如果路径匹配，会执行，  函数内存地址(request)</span></span><br><span class="line">http_method_names = [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;options&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">    <span class="comment">#request是当次请求的request</span></span><br><span class="line">    self = cls(**initkwargs)  <span class="comment">#实例化得到一个对象，Book对象</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;get&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;head&#x27;</span>):</span><br><span class="line">        self.head = self.get</span><br><span class="line">        self.request = request</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line"><span class="comment">#request是当次请求的request   self是book对象</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            <span class="comment">#handler现在是：</span></span><br><span class="line">            handler=<span class="built_in">getattr</span>(self,<span class="string">&#x27;get&#x27;</span>),你写的Book类的get方法的内存地址</span><br><span class="line">            handler = <span class="built_in">getattr</span>(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="keyword">return</span> handler(request, *args, **kwargs)  <span class="comment">#执行get(request)</span></span><br></pre></td></tr></table></figure><h2 id="APIView源码分析"><a href="#APIView源码分析" class="headerlink" title="APIView源码分析"></a>APIView源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#from rest_framework.views import APIView</span></span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;booksapiview/&#x27;</span>, views.BooksAPIView.as_view()),  <span class="comment">#在这个地方应该写个函数内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#APIView的as_view方法（类的绑定方法）</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">as_view</span>(<span class="params">cls, **initkwargs</span>):</span><br><span class="line">        view = <span class="built_in">super</span>().as_view(**initkwargs)  <span class="comment"># 调用父类（View）的as_view(**initkwargs)</span></span><br><span class="line">        view.cls = cls</span><br><span class="line">        view.initkwargs = initkwargs</span><br><span class="line">        <span class="comment"># 以后所有的请求，都没有csrf认证了，只要继承了APIView，就没有csrf的认证</span></span><br><span class="line">        <span class="keyword">return</span> csrf_exempt(view)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">#请求来了---》路由匹配上---》view（request）---》调用了self.dispatch(),会执行apiview的dispatch</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># APIView的dispatch方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line"></span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        <span class="comment"># 重新包装成一个request对象，以后再用的request对象，就是新的request对象了</span></span><br><span class="line">        request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line">        self.headers = self.default_response_headers  <span class="comment"># deprecate?反对</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 三大认证模块</span></span><br><span class="line">            self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">            <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">                handler = <span class="built_in">getattr</span>(self, request.method.lower(),</span><br><span class="line">                                  self.http_method_not_allowed)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 响应模块</span></span><br><span class="line">            response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="comment"># 异常模块</span></span><br><span class="line">            response = self.handle_exception(exc)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 渲染模块</span></span><br><span class="line">        self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.response</span><br><span class="line">   </span><br><span class="line"><span class="comment"># APIView的initial方法</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">initial</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 认证组件：校验用户 - 游客、合法用户、非法用户</span></span><br><span class="line">        <span class="comment"># 游客：代表校验通过，直接进入下一步校验（权限校验）</span></span><br><span class="line">        <span class="comment"># 合法用户：代表校验通过，将用户存储在request.user中，再进入下一步校验（权限校验）</span></span><br><span class="line">        <span class="comment"># 非法用户：代表校验失败，抛出异常，返回403权限异常结果</span></span><br><span class="line">        self.perform_authentication(request)</span><br><span class="line">        <span class="comment"># 权限组件：校验用户权限 - 必须登录、所有用户、登录读写游客只读、自定义用户角色</span></span><br><span class="line">        <span class="comment"># 认证通过：可以进入下一步校验（频率认证）</span></span><br><span class="line">        <span class="comment"># 认证失败：抛出异常，返回403权限异常结果</span></span><br><span class="line">        self.check_permissions(request)</span><br><span class="line">        <span class="comment"># 频率组件：限制视图接口被访问的频率次数 - 限制的条件(IP、id、唯一键)、频率周期时间(s、m、h)、频率的次数（3/s）</span></span><br><span class="line">        <span class="comment"># 没有达到限次：正常访问接口</span></span><br><span class="line">        <span class="comment"># 达到限次：限制时间内不能访问，限制时间达到后，可以重新访问</span></span><br><span class="line">        self.check_throttles(request)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="comment"># 只要继承了APIView，视图类中的request对象，都是新的，也就是上面那个request的对象了</span></span><br><span class="line"><span class="comment"># 老的request在新的request._request</span></span><br><span class="line"><span class="comment"># 以后使用reqeust对象，就像使用之前的request是一模一样（因为重写了__getattr__方法）</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, attr</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(self._request, attr) <span class="comment">#通过反射，取原生的request对象，取出属性或方法</span></span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">return</span> self.__getattribute__(attr)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># request.data 感觉是个数据属性，其实是个方法，@property，修饰了</span></span><br><span class="line">它是一个字典，post请求不管使用什么编码，传过来的数据，都在request.data</span><br><span class="line"> <span class="comment">#get请求传过来数据，从哪取？</span></span><br><span class="line">request.GET</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query_params</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        更为正确的语义地名字给了request.GET</span></span><br><span class="line"><span class="string">        More semantically correct name for request.GET.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._request.GET</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#视图类中</span></span><br><span class="line">     <span class="built_in">print</span>(request.query_params)  <span class="comment">#get请求，地址中的参数</span></span><br><span class="line">     <span class="comment"># 原来在</span></span><br><span class="line">     <span class="built_in">print</span>(request.GET)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django之BBS</title>
      <link href="/2022/07/31/Django%E4%B9%8BBBS/"/>
      <url>/2022/07/31/Django%E4%B9%8BBBS/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">表设计(8张)</span><br><span class="line">1、用户表: UserInfo表</span><br><span class="line">2、博客表: Blog表</span><br><span class="line">3、分类表: Category</span><br><span class="line">4、标签表: Tag</span><br><span class="line">5、文章: Article(文章和详情一个表)</span><br><span class="line">6、评论: Comment</span><br><span class="line">7、点赞点踩表: UpAndDown</span><br><span class="line">8、文章标签中间表:ArticleToTag</span><br><span class="line"></span><br><span class="line"><span class="code">1.用户表UserInfo</span></span><br><span class="line"><span class="code">继承AbstractUser</span></span><br><span class="line"><span class="code">扩展</span></span><br><span class="line"><span class="code">phone   电话号码</span></span><br><span class="line"><span class="code">avatar  用户头像</span></span><br><span class="line"><span class="code">create_time 创建时间</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">外键字段blog</span></span><br><span class="line"><span class="code">一对一个人站点表</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2.个人站点表Blog</span></span><br><span class="line"><span class="code">site_name 站点名称</span></span><br><span class="line"><span class="code">site_title  站点标题</span></span><br><span class="line"><span class="code">site_theme 站点样式</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3.文章标签表Tag</span></span><br><span class="line"><span class="code">name标签名</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">外键字段blog</span></span><br><span class="line"><span class="code">一对多个人站点 </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">4.文章分类表Category</span></span><br><span class="line"><span class="code">name分类名</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">外键字段blog</span></span><br><span class="line"><span class="code">一对多个人站点</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">5.文章表Article</span></span><br><span class="line"><span class="code">title文章标题</span></span><br><span class="line"><span class="code">desc文章简介</span></span><br><span class="line"><span class="code">content文章内容</span></span><br><span class="line"><span class="code">create_date 发布日期(后续做归档需要用到)</span></span><br><span class="line"><span class="code">create_time 发布时间</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">数据库字段设计优化(虽然下述的三个字段可以从其他表里面跨表查询计算得出，但是频繁查询影响跨表效率)</span></span><br><span class="line"><span class="code">up_num点赞数</span></span><br><span class="line"><span class="code">down_num点踩数</span></span><br><span class="line"><span class="code">comment_num 评论数</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">外键字段</span></span><br><span class="line"><span class="code">一对多个人站点blog</span></span><br><span class="line"><span class="code">多对多文章标签tag</span></span><br><span class="line"><span class="code">一对多文章分类category(实质是多对多,简化流程)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">6.点赞点踩表UpAndDown</span></span><br><span class="line"><span class="code">记录哪个用户给哪篇文章点了赞还是点了踩</span></span><br><span class="line"><span class="code">userForeignKey(to=&quot;User&quot;)</span></span><br><span class="line"><span class="code">articleForeignKey(to=&quot;Article&quot;)</span></span><br><span class="line"><span class="code">is_upBooleanField()</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">111</span></span><br><span class="line"><span class="code">121</span></span><br><span class="line"><span class="code">130</span></span><br><span class="line"><span class="code">211</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">7.文章评论表Comment</span></span><br><span class="line"><span class="code">记录哪个用户给哪篇文章写了哪些评论内容</span></span><br><span class="line"><span class="code">userForeignKey(to=&quot;User&quot;)</span></span><br><span class="line"><span class="code">articleForeignKey(to=&quot;Article&quot;)</span></span><br><span class="line"><span class="code">contentCharField()</span></span><br><span class="line"><span class="code">comment_timeDateField()</span></span><br><span class="line"><span class="code"># 自关联</span></span><br><span class="line"><span class="code">parent_commentForeignKey(to=&quot;Comment&quot;,null=True)</span></span><br><span class="line"><span class="code"># ORM专门提供的自关联写法</span></span><br><span class="line"><span class="code">parentForeignKey(to=&quot;self&quot;,null=True)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">iduser_idarticle_idparent_id</span></span><br><span class="line"><span class="code">1 11</span></span><br><span class="line"><span class="code">2 21 1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">根评论与子评论是一对多的关系</span></span><br></pre></td></tr></table></figure><h2 id="数据库表创建及同步"><a href="#数据库表创建及同步" class="headerlink" title="数据库表创建及同步"></a>数据库表创建及同步</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;app01.UserInfo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    phone = models.BigIntegerField(verbose_name=<span class="string">&#x27;手机号&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    avatar = models.FileField(verbose_name=<span class="string">&#x27;头像&#x27;</span>, upload_to=<span class="string">&#x27;avatar/&#x27;</span>, default=<span class="string">&#x27;avatar/default.png&#x27;</span>)</span><br><span class="line">    <span class="comment"># auto_now_add=True 创建数据记录的时候会把当前时间添加到数据库</span></span><br><span class="line">    <span class="comment"># auto_now=True，每次更新数据记录的时候会更新该字段</span></span><br><span class="line">    create_time = models.DateField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 外键字段</span></span><br><span class="line">    blog = models.ForeignKey(to=<span class="string">&#x27;Blog&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;用户信息表&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Blog</span>(models.Model):</span><br><span class="line">    site_name = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&#x27;站点名称&#x27;</span>)</span><br><span class="line">    site_title = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&#x27;站点标题&#x27;</span>)</span><br><span class="line">    site_theme = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&#x27;站点样式&#x27;</span>) <span class="comment"># 存css/js文件路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.site_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Category</span>(models.Model):</span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;文章分类&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    blog = models.ForeignKey(to=<span class="string">&#x27;Blog&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tag</span>(models.Model):</span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;文章标签&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    blog = models.ForeignKey(to=<span class="string">&#x27;Blog&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(models.Model):</span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&#x27;文章标题&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    desc = models.CharField(verbose_name=<span class="string">&#x27;文章描述&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    content = models.TextField(verbose_name=<span class="string">&#x27;文章内容&#x27;</span>)</span><br><span class="line">    create_date = models.DateField(verbose_name=<span class="string">&#x27;发布日期&#x27;</span>, auto_now_add=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    create_time = models.DateTimeField(verbose_name=<span class="string">&#x27;发布时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 数据库字段设计优化</span></span><br><span class="line">    up_num = models.IntegerField(verbose_name=<span class="string">&#x27;点赞数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    down_num = models.IntegerField(verbose_name=<span class="string">&#x27;点踩数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    comment_num = models.IntegerField(verbose_name=<span class="string">&#x27;评论数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 外键字段</span></span><br><span class="line">    blog = models.ForeignKey(to=<span class="string">&#x27;Blog&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    category = models.ForeignKey(to=<span class="string">&#x27;Category&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    tag = models.ManyToManyField(to=<span class="string">&#x27;Tag&#x27;</span>, through=<span class="string">&#x27;ArticleToTag&#x27;</span>, through_fields=(<span class="string">&#x27;article&#x27;</span>, <span class="string">&#x27;tag&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleToTag</span>(models.Model):</span><br><span class="line">    article = models.ForeignKey(to=<span class="string">&#x27;Article&#x27;</span>)</span><br><span class="line">    tag = models.ForeignKey(to=<span class="string">&#x27;Tag&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UpAndDown</span>(models.Model):</span><br><span class="line">    user = models.ForeignKey(to=<span class="string">&#x27;UserInfo&#x27;</span>)</span><br><span class="line">    article = models.ForeignKey(to=<span class="string">&#x27;Article&#x27;</span>)</span><br><span class="line">    is_up = models.BooleanField(verbose_name=<span class="string">&#x27;点赞/点踩&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comment</span>(models.Model):</span><br><span class="line">    user = models.ForeignKey(to=<span class="string">&#x27;UserInfo&#x27;</span>)</span><br><span class="line">    article = models.ForeignKey(to=<span class="string">&#x27;Article&#x27;</span>)</span><br><span class="line">    content = models.CharField(verbose_name=<span class="string">&#x27;评论内容&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    comment_time = models.DateTimeField(verbose_name=<span class="string">&#x27;评论时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    parent_comment = models.ForeignKey(verbose_name=<span class="string">&#x27;根评论&#x27;</span>, to=<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>)  <span class="comment"># 允许只有根评论</span></span><br></pre></td></tr></table></figure><h2 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h2><h3 id="forms组件校验数据"><a href="#forms组件校验数据" class="headerlink" title="forms组件校验数据"></a>forms组件校验数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  blog_forms.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterForm</span>(forms.Form):</span><br><span class="line">    username = forms.CharField(label=<span class="string">&#x27;用户名&#x27;</span>, min_length=<span class="number">3</span>, max_length=<span class="number">8</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;用户名不能为空&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;min_length&#x27;</span>: <span class="string">&#x27;长度最少3位&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;用户名最长8位&#x27;</span>,</span><br><span class="line">    &#125;, widget=forms.widgets.TextInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    password = forms.CharField(label=<span class="string">&#x27;密码&#x27;</span>, min_length=<span class="number">3</span>, max_length=<span class="number">8</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;密码不能为空&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;min_length&#x27;</span>: <span class="string">&#x27;密码长度最少3位&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;密码长度最多8位&#x27;</span>,</span><br><span class="line">    &#125;, widget=forms.widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    password = forms.CharField(label=<span class="string">&#x27;密码&#x27;</span>, min_length=<span class="number">3</span>, max_length=<span class="number">8</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;密码不能为空&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;min_length&#x27;</span>: <span class="string">&#x27;密码长度最少3位&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;密码长度最多8位&#x27;</span>,</span><br><span class="line">    &#125;, widget=forms.widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    confirm_password = forms.CharField(label=<span class="string">&#x27;确认密码&#x27;</span>, min_length=<span class="number">3</span>, max_length=<span class="number">8</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;确认密码不能为空&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;min_length&#x27;</span>: <span class="string">&#x27;确认密码长度最少3位&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;确认密码长度最多8位&#x27;</span>,</span><br><span class="line">    &#125;, widget=forms.widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    email = forms.EmailField(label=<span class="string">&#x27;邮箱&#x27;</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;邮箱不能为空&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;invalid&#x27;</span>: <span class="string">&#x27;邮箱格式不正确&#x27;</span></span><br><span class="line">    &#125;, widget=forms.widgets.EmailInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 局部钩子校验用户名是否存在</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_username</span>(<span class="params">self</span>):</span><br><span class="line">        username = self.cleaned_data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        is_exist = models.UserInfo.objects.<span class="built_in">filter</span>(username=username)</span><br><span class="line">        <span class="keyword">if</span> is_exist:</span><br><span class="line">            self.add_error(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;用户名已存在!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局钩子校验两次密码是否一致</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean</span>(<span class="params">self</span>):</span><br><span class="line">        password = self.cleaned_data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        confirm_password = self.cleaned_data.get(<span class="string">&#x27;confirm_password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> password == confirm_password:</span><br><span class="line">            self.add_error(<span class="string">&#x27;confirm_password&#x27;</span>, <span class="string">&#x27;两次密码不一致&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure><h3 id="注册HTML"><a href="#注册HTML" class="headerlink" title="注册HTML"></a>注册HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form_data&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 不用form表单提交--&gt;</span></span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                &#123;% for form in form_obj %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--form.auto_id可以自动获取form组件渲染的input框的id值 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&#123;&#123; form.auto_id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; form.label &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        &#123;&#123; form &#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: darkred&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;img_file&quot;</span>&gt;</span>头像</span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;img/default.png&#x27; %&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img_avatar&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 20px&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img_file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info pull-right&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_commit&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注册js"><a href="#注册js" class="headerlink" title="注册js"></a>注册js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 文本域变化事件</span></span><br><span class="line">    $(<span class="string">&#x27;#img_file&#x27;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 1.先生成文件阅读器对象</span></span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">FileReaderObj</span> = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">        <span class="comment">// 2.获取用户上传的头像文件</span></span><br><span class="line">        <span class="keyword">let</span> fileObj = $(<span class="variable language_">this</span>)[<span class="number">0</span>].<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 3.将文件对象交给阅读器对象 并且是异步操作 不会等待文件阅读完毕,会执行下一句代码</span></span><br><span class="line">        <span class="title class_">FileReaderObj</span>.<span class="title function_">readAsDataURL</span>(fileObj)</span><br><span class="line">        <span class="comment">// 4.利用文件阅读器对象将文件展示到前端页面  实质上是修改图片的src属性</span></span><br><span class="line">        <span class="comment">// 等待阅读器加载完毕后再执行</span></span><br><span class="line">        <span class="title class_">FileReaderObj</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;#img_avatar&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>,<span class="title class_">FileReaderObj</span>.<span class="property">result</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测用户名是否存在，当光标不在username控件上就会发送ajax请求去后台查询</span></span><br><span class="line">    $(<span class="string">&#x27;#id_username&#x27;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> _this = $(<span class="variable language_">this</span>);</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/check_username/&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:&#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>:$(<span class="string">&#x27;#id_username&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>:$(<span class="string">&quot;[name=csrfmiddlewaretoken]&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(args.<span class="property">code</span>!==<span class="number">1000</span>)&#123;</span><br><span class="line">                    _this.<span class="title function_">next</span>().<span class="title function_">text</span>(args.<span class="property">msg</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交注册请求</span></span><br><span class="line">    $(<span class="string">&#x27;#id_commit&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> formDataObj = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        <span class="comment">// 1.添加普通键值对数据</span></span><br><span class="line">        <span class="comment">// 数组套对象循环出来就是一个个对象</span></span><br><span class="line">        &#123;#<span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#form_data&#x27;</span>).<span class="title function_">serializeArray</span>());#&#125;</span><br><span class="line">        $.<span class="title function_">each</span>($(<span class="string">&#x27;#form_data&#x27;</span>).<span class="title function_">serializeArray</span>(),<span class="keyword">function</span> (<span class="params">index,obj</span>) &#123;</span><br><span class="line">            &#123;#<span class="variable language_">console</span>.<span class="title function_">log</span>(index,obj)#&#125;</span><br><span class="line">            formDataObj.<span class="title function_">append</span>(obj.<span class="property">name</span>,obj.<span class="property">value</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 2.添加文件数据</span></span><br><span class="line">        formDataObj.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, $(<span class="string">&#x27;#img_file&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 3.发送Ajax请求</span></span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:formDataObj,</span><br><span class="line">            <span class="attr">contentType</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">processData</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(args.<span class="property">code</span>==<span class="number">1000</span>)&#123;</span><br><span class="line">                    <span class="comment">// 跳转到登录页</span></span><br><span class="line">                    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = args.<span class="property">url</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    $.<span class="title function_">each</span>(args.<span class="property">msg</span>,<span class="keyword">function</span> (<span class="params">index,obj</span>) &#123;</span><br><span class="line">                        &#123;#<span class="variable language_">console</span>.<span class="title function_">log</span>(index,obj)  <span class="comment">// username [&#x27;用户名不能为空&#x27;]#&#125;</span></span><br><span class="line">                        <span class="keyword">let</span> targetId = <span class="string">&#x27;#id_&#x27;</span> + index</span><br><span class="line">                        $(targetId).<span class="title function_">next</span>().<span class="title function_">text</span>(obj[<span class="number">0</span>]).<span class="title function_">parent</span>().<span class="title function_">addClass</span>(<span class="string">&#x27;has-error&#x27;</span>)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给所有的input框绑定获取焦点事件</span></span><br><span class="line">    $(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">focus</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 将input下面的span标签内容置空和input外的div标签修改内容及属性</span></span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">next</span>().<span class="title function_">text</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">parent</span>().<span class="title function_">removeClass</span>(<span class="string">&#x27;has-error&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询用户是否已经注册</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_username</span>(<span class="params">request</span>):</span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        count = UserInfo.objects.<span class="built_in">filter</span>(username=username).count()</span><br><span class="line">        <span class="keyword">if</span> count:</span><br><span class="line">            back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">2000</span></span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;该用户已存在&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(back_dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">request</span>):</span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    form_obj = RegisterForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        form_obj = RegisterForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form_obj.is_valid():</span><br><span class="line">            <span class="comment"># 将校验通过的数据赋值给一个变量</span></span><br><span class="line">            cleaned_data = form_obj.cleaned_data</span><br><span class="line">            cleaned_data.pop(<span class="string">&#x27;confirm_password&#x27;</span>)</span><br><span class="line">            file_obj = request.FILES.get(<span class="string">&#x27;avatar&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> file_obj:</span><br><span class="line">                cleaned_data[<span class="string">&#x27;avatar&#x27;</span>] = file_obj</span><br><span class="line">            models.UserInfo.objects.create_user(**cleaned_data)</span><br><span class="line">            back_dic[<span class="string">&#x27;url&#x27;</span>] = <span class="string">&#x27;/login/&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">2000</span></span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = form_obj.errors</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dic)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;register.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h2 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h2><h3 id="随机生成三基色"><a href="#随机生成三基色" class="headerlink" title="随机生成三基色"></a>随机生成三基色</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_random</span>():</span><br><span class="line">    <span class="keyword">return</span> random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br></pre></td></tr></table></figure><h3 id="生成随机验证码"><a href="#生成随机验证码" class="headerlink" title="生成随机验证码"></a>生成随机验证码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_code</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 生成图片验证码对象</span></span><br><span class="line">    img_obj = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">300</span>, <span class="number">35</span>), get_random())</span><br><span class="line">    <span class="comment"># 画笔</span></span><br><span class="line">    img_draw = ImageDraw.Draw(img_obj)</span><br><span class="line">    img_font = ImageFont.truetype(<span class="string">&#x27;static/font/msyh.ttf&#x27;</span>, <span class="number">30</span>)  <span class="comment"># 字体样式 大小</span></span><br><span class="line">    <span class="comment"># 随机验证码</span></span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        random_lower = <span class="built_in">chr</span>(random.randint(<span class="number">97</span>, <span class="number">122</span>))</span><br><span class="line">        random_int = <span class="built_in">str</span>(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">        tmp = random.choice([random_lower, random_int])</span><br><span class="line">        <span class="comment"># 通过画笔对象进行书写</span></span><br><span class="line">        img_draw.text((i * <span class="number">75</span>, <span class="number">0</span>), tmp, get_random(), img_font)  <span class="comment"># 坐标 文本内容 三基色 字体样式</span></span><br><span class="line">        code += tmp</span><br><span class="line">    <span class="built_in">print</span>(code)</span><br><span class="line">    <span class="comment"># 随机验证码在登录的时候需要做校验，找个地方存起来并且其他视图函数能拿到例如session</span></span><br><span class="line">    request.session[<span class="string">&#x27;code&#x27;</span>] = code</span><br><span class="line">    io_obj = BytesIO()</span><br><span class="line">    img_obj.save(io_obj, <span class="string">&#x27;png&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(io_obj.getvalue())</span><br></pre></td></tr></table></figure><h3 id="登录HTML"><a href="#登录HTML" class="headerlink" title="登录HTML"></a>登录HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form_data&quot;</span>&gt;</span></span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;id_username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;id_password&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;id_code&quot;</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;code&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_code&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-offset-5&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/get_code/&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;35&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_img&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success text-center&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_commit&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: darkred&quot;</span> <span class="attr">id</span>=<span class="string">&quot;error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="登录js"><a href="#登录js" class="headerlink" title="登录js"></a>登录js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&#x27;#id_img&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在点击事件中位img的src重新赋值，主动朝目标url发送get请求，实现方式拼接时间戳即可</span></span><br><span class="line">        <span class="keyword">let</span> cur_time = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;/get_code/?&#x27;</span> + cur_time)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&#x27;#id_commit&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> formDataObj = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        $.<span class="title function_">each</span>($(<span class="string">&#x27;#form_data&#x27;</span>).<span class="title function_">serializeArray</span>(),<span class="keyword">function</span> (<span class="params">index,obj</span>) &#123;</span><br><span class="line">            formDataObj.<span class="title function_">append</span>(obj.<span class="property">name</span>,obj.<span class="property">value</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="attr">data</span>:&#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>:$(<span class="string">&#x27;#id_username&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>:$(<span class="string">&#x27;#id_password&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="string">&#x27;code&#x27;</span>:$(<span class="string">&#x27;#id_code&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                &#123;#<span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>:$(<span class="string">&quot;[name=csrfmiddlewaretoken]&quot;</span>).<span class="title function_">val</span>(),#&#125;</span><br><span class="line">                <span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>:<span class="string">&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(args.<span class="property">code</span>==<span class="number">1000</span>)&#123;</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = args.<span class="property">url</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $(<span class="string">&#x27;#error&#x27;</span>).<span class="title function_">text</span>(args.<span class="property">msg</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="首页搭建"><a href="#首页搭建" class="headerlink" title="首页搭建"></a>首页搭建</h2><h3 id="首页HTML"><a href="#首页HTML" class="headerlink" title="首页HTML"></a>首页HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>BBS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>博客 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>更多 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;navbar-form navbar-left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">          &#123;% if request.user.is_authenticated %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; request.user.username &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; request.user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>更多操作 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;.bs-example-modal-lg&quot;</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/set/avatar/&quot;</span>&gt;</span>修改头像<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/backend/&quot;</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout/&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          &#123;% else %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;register&#x27; %&#125;&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;login&#x27; %&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade bs-example-modal-lg&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myLargeModalLabel&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog modal-lg&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; request.user.username &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>原密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;old_password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_old_password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>新密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;new_password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_new_password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;confirm_password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_confirm_password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;password_error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_edit&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>AMD-YYDS<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            苏妈放大招啦</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-danger&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>烤全羊好吃吗<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            我的回答是太好吃啦</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>Intel-牙膏厂<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            牙膏厂的参数</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;media-list&quot;</span>&gt;</span></span><br><span class="line">          &#123;% for article_obj in article_queryset %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;media&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;media-heading&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; article_obj.blog.userinfo_set.first.username &#125;&#125;/article/&#123;&#123; article_obj.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; article_obj.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;media-left&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;media-object&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/media/&#123;&#123; article_obj.blog.userinfo_set.first.avatar &#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> <span class="attr">width</span>=<span class="string">&quot;75px&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;media-body&quot;</span>&gt;</span></span><br><span class="line">                  &#123;&#123; article_obj.desc &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; article_obj.blog.userinfo_set.first.username &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; article_obj.blog.userinfo_set.first.username&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>发布于<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; article_obj.create_time|date:&#x27;Y-m-d&#x27; &#125;&#125;<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-comment&quot;</span>&gt;</span>评论数(&#123;&#123; article_obj.comment_num &#125;&#125;)<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-thumbs-up&quot;</span>&gt;</span>点赞数(&#123;&#123; article_obj.up_num &#125;&#125;)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">        &#123;&#123; page_obj.page_html|safe &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>快乐是什么<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            吃饭睡觉</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>自由是什么<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            想不干嘛就不干</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-info&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>何为智慧<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            知行合一</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改密码js"><a href="#修改密码js" class="headerlink" title="修改密码js"></a>修改密码js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&#x27;#id_edit&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;/set_password/&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:&#123;</span><br><span class="line">                <span class="string">&#x27;old_password&#x27;</span>:$(<span class="string">&#x27;#id_old_password&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="string">&#x27;new_password&#x27;</span>:$(<span class="string">&#x27;#id_new_password&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="string">&#x27;confirm_password&#x27;</span>:$(<span class="string">&#x27;#id_confirm_password&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>:<span class="string">&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(args.<span class="property">code</span> ==<span class="number">1000</span>)&#123;</span><br><span class="line">                    <span class="title function_">alert</span>(args.<span class="property">msg</span>)</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>()</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    $(<span class="string">&#x27;#password_error&#x27;</span>).<span class="title function_">text</span>(args.<span class="property">msg</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="获取首页内容"><a href="#获取首页内容" class="headerlink" title="获取首页内容"></a>获取首页内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 带分页</span></span><br><span class="line">    article_list = models.Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    current_page = request.GET.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    all_count = article_list.count()</span><br><span class="line">    page_obj = Pagination(current_page=current_page, all_count=all_count)</span><br><span class="line">    article_queryset = article_list[page_obj.start:page_obj.end]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;home.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pagination</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, current_page, all_count, per_page_num=<span class="number">2</span>, pager_count=<span class="number">11</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        封装分页相关数据</span></span><br><span class="line"><span class="string">        :param current_page: 当前页</span></span><br><span class="line"><span class="string">        :param all_count:    数据库中的数据总条数</span></span><br><span class="line"><span class="string">        :param per_page_num: 每页显示的数据条数</span></span><br><span class="line"><span class="string">        :param pager_count:  最多显示的页码个数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            current_page = <span class="built_in">int</span>(current_page)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            current_page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current_page &lt; <span class="number">1</span>:</span><br><span class="line">            current_page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.current_page = current_page</span><br><span class="line"></span><br><span class="line">        self.all_count = all_count</span><br><span class="line">        self.per_page_num = per_page_num</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 总页码</span></span><br><span class="line">        all_pager, tmp = <span class="built_in">divmod</span>(all_count, per_page_num)</span><br><span class="line">        <span class="keyword">if</span> tmp:</span><br><span class="line">            all_pager += <span class="number">1</span></span><br><span class="line">        self.all_pager = all_pager</span><br><span class="line"></span><br><span class="line">        self.pager_count = pager_count</span><br><span class="line">        self.pager_count_half = <span class="built_in">int</span>((pager_count - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将方法伪装成属性，不用加括号也可以运行</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.current_page - <span class="number">1</span>) * self.per_page_num</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.current_page * self.per_page_num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 如果总页码 &lt; 11个：</span></span><br><span class="line">        <span class="keyword">if</span> self.all_pager &lt;= self.pager_count:</span><br><span class="line">            pager_start = <span class="number">1</span></span><br><span class="line">            pager_end = self.all_pager + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 总页码  &gt; 11</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 当前页如果&lt;=11/2(页面上最多显示11/2个页码)</span></span><br><span class="line">            <span class="keyword">if</span> self.current_page &lt;= self.pager_count_half:</span><br><span class="line">                pager_start = <span class="number">1</span></span><br><span class="line">                pager_end = self.pager_count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前页大于5</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 页码翻到最后 如果当前页加页码个数一半大于总页数则  起始页=总页数-页码数+1</span></span><br><span class="line">                <span class="keyword">if</span> (self.current_page + self.pager_count_half) &gt; self.all_pager:</span><br><span class="line">                    pager_end = self.all_pager + <span class="number">1</span></span><br><span class="line">                    pager_start = self.all_pager - self.pager_count + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pager_start = self.current_page - self.pager_count_half</span><br><span class="line">                    pager_end = self.current_page + self.pager_count_half + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        page_html_list = []</span><br><span class="line">        <span class="comment"># 添加前面的nav和ul标签</span></span><br><span class="line">        page_html_list.append(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                    &lt;nav aria-label=&#x27;Page navigation&gt;&#x27;</span></span><br><span class="line"><span class="string">                    &lt;ul class=&#x27;pagination&#x27;&gt;</span></span><br><span class="line"><span class="string">                &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        first_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (<span class="number">1</span>)</span><br><span class="line">        page_html_list.append(first_page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.current_page &lt;= <span class="number">1</span>:</span><br><span class="line">            prev_page = <span class="string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.current_page - <span class="number">1</span>,)</span><br><span class="line"></span><br><span class="line">        page_html_list.append(prev_page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pager_start, pager_end):</span><br><span class="line">            <span class="keyword">if</span> i == self.current_page:</span><br><span class="line">                temp = <span class="string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (i, i,)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (i, i,)</span><br><span class="line">            page_html_list.append(temp)</span><br><span class="line">        <span class="comment"># 判断是否还有下一页</span></span><br><span class="line">        <span class="keyword">if</span> self.current_page &gt;= self.all_pager:</span><br><span class="line">            next_page = <span class="string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            next_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.current_page + <span class="number">1</span>,)</span><br><span class="line">        page_html_list.append(next_page)</span><br><span class="line"></span><br><span class="line">        last_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.all_pager,)</span><br><span class="line">        page_html_list.append(last_page)</span><br><span class="line">        <span class="comment"># 尾部添加标签</span></span><br><span class="line">        page_html_list.append(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                                           &lt;/nav&gt;</span></span><br><span class="line"><span class="string">                                           &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                                       &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(page_html_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改密码后台"><a href="#修改密码后台" class="headerlink" title="修改密码后台"></a>修改密码后台</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_password</span>(<span class="params">request</span>):</span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        old_password = request.POST.get(<span class="string">&#x27;old_password&#x27;</span>)</span><br><span class="line">        new_password = request.POST.get(<span class="string">&#x27;new_password&#x27;</span>)</span><br><span class="line">        confirm_password = request.POST.get(<span class="string">&#x27;confirm_password&#x27;</span>)</span><br><span class="line">        is_right = request.user.check_password(old_password)</span><br><span class="line">        <span class="keyword">if</span> is_right:</span><br><span class="line">            <span class="keyword">if</span> new_password == confirm_password:</span><br><span class="line">                request.user.set_password(new_password)</span><br><span class="line">                request.user.save() </span><br><span class="line">                back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;修改成功&#x27;</span></span><br><span class="line">                back_dic[<span class="string">&#x27;url&#x27;</span>] = <span class="string">&#x27;/login/&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">2000</span></span><br><span class="line">                back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;两次密码不一致&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">3000</span></span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;原密码错误&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(back_dic)</span><br></pre></td></tr></table></figure><h3 id="注销登录"><a href="#注销登录" class="headerlink" title="注销登录"></a>注销登录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>(<span class="params">request</span>):</span><br><span class="line">    auth.logout(request)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/home/&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="admin后台管理"><a href="#admin后台管理" class="headerlink" title="admin后台管理"></a>admin后台管理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">django给你提供了一个可视化的界面用来让你方便的对你的模型表进行数据的增删改查操作</span><br><span class="line"></span><br><span class="line">如果使用amdin后台管理操作模型表;需要先注册模型表告诉admin需要操作哪些表;去应用下的admin.py中注册模型表</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line">admin.site.register(models.UserInfo)</span><br><span class="line">admin.site.register(models.Blog)</span><br><span class="line">admin.site.register(models.Category)</span><br><span class="line">admin.site.register(models.Tag)</span><br><span class="line">admin.site.register(models.Article)</span><br><span class="line">admin.site.register(models.ArticleToTag)</span><br><span class="line">admin.site.register(models.UpAndDown)</span><br><span class="line">admin.site.register(models.Comment)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.数据绑定尤其需要注意的是用户和个人站点不要忘记绑定了</span></span><br></pre></td></tr></table></figure><h2 id="用户头像展示"><a href="#用户头像展示" class="headerlink" title="用户头像展示"></a>用户头像展示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py  配置用户上传的文件存储位置</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR,<span class="string">&#x27;media&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line">url(<span class="string">r&#x27;^media/(?P&lt;path&gt;.*)&#x27;</span>,serve,&#123;<span class="string">&#x27;document_root&#x27;</span>:settings.MEDIA_ROOT&#125;)</span><br></pre></td></tr></table></figure><h2 id="图片防盗链"><a href="#图片防盗链" class="headerlink" title="图片防盗链"></a>图片防盗链</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改请求头refer</span><br></pre></td></tr></table></figure><h2 id="个人站点"><a href="#个人站点" class="headerlink" title="个人站点"></a>个人站点</h2><h3 id="模板base-html"><a href="#模板base-html" class="headerlink" title="模板base.html"></a>模板base.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;js/jquery-3.6.4.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/css/bootstrap.min.css&#x27; %&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/media/css/&#123;&#123; blog.site_theme &#125;&#125;/&quot;</span>&gt;</span></span><br><span class="line">    &#123;% block css %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;&#123; blog.site_title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>博客 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>更多 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;navbar-form navbar-left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">          &#123;% if request.user.is_authenticated %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; request.user.username &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; request.user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/home/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>更多操作 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/set/avatar/&quot;</span>&gt;</span>修改头像<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/backend/&quot;</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout/&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          &#123;% else %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;register&#x27; %&#125;&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;login&#x27; %&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">            &#123;% load mytag %&#125;</span><br><span class="line">            &#123;% left_menu username %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="个人站点HTML"><a href="#个人站点HTML" class="headerlink" title="个人站点HTML"></a>个人站点HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;media-list&quot;</span>&gt;</span></span><br><span class="line">          &#123;% for article_obj in article_list %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;media&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;media-heading&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; username &#125;&#125;/article/&#123;&#123; article_obj.id &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; article_obj.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;media-left&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;media-object&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/media/&#123;&#123; article_obj.blog.userinfo_set.first.avatar &#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> <span class="attr">width</span>=<span class="string">&quot;75px&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;media-body&quot;</span>&gt;</span></span><br><span class="line">                  &#123;&#123; article_obj.desc &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>posted <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; article_obj.create_time|date:&#x27;Y-m-d H:i:s&#x27; &#125;&#125;<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; article_obj.blog.userinfo_set.first.username&#125;&#125;<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-comment&quot;</span>&gt;</span>评论数(&#123;&#123; article_obj.comment_num &#125;&#125;)<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-thumbs-up&quot;</span>&gt;</span>点赞数(&#123;&#123; article_obj.up_num &#125;&#125;)<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="未找到用户错误页面"><a href="#未找到用户错误页面" class="headerlink" title="未找到用户错误页面"></a>未找到用户错误页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;utf-8&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://img-blog.csdnimg.cn/img_convert/54a9969a8f2a11014d9fddf7ac2083ce.png&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404_页面不存在<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&#x27;text/css&#x27;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">8%</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">min-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;PingFang SC&#x27;</span>, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, <span class="string">&#x27;Helvetica Neue&#x27;</span>, <span class="string">&#x27;Helvetica&#x27;</span>, <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#555</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#404040</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;/home/&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;/static/img/django_pic.png&#x27;</span> <span class="attr">alt</span>=<span class="string">&#x27;BBS&#x27;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>404.<span class="tag">&lt;/<span class="name">b</span>&gt;</span> 抱歉，您访问的资源不存在。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;d&#x27;</span>&gt;</span>请确认您输入的网址是否正确，如果问题持续存在，请发邮件至 contact<span class="symbol">&amp;#64;</span>python666.com 与我们联系。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;/home/&#x27;</span>&gt;</span>返回网站首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="侧边栏及筛选功能"><a href="#侧边栏及筛选功能" class="headerlink" title="侧边栏及筛选功能"></a>侧边栏及筛选功能</h2><h3 id="制作侧边栏"><a href="#制作侧边栏" class="headerlink" title="制作侧边栏"></a>制作侧边栏</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app下创建templatetags文件夹,创建mytag.py</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line"><span class="keyword">from</span> django.db.models.functions <span class="keyword">import</span> TruncMonth</span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register.inclusion_tag(<span class="params"><span class="string">&#x27;left_menu.html&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left_menu</span>(<span class="params">username</span>):</span><br><span class="line">    user_obj = models.UserInfo.objects.<span class="built_in">filter</span>(username=username).first()</span><br><span class="line">    blog = user_obj.blog</span><br><span class="line">    <span class="comment"># 1.查询当前用户所有的分类及分类下的文章数量</span></span><br><span class="line">    <span class="comment"># 分组统计个数 先从分类表中过滤出分类 聚合函数  models后面点什么 就是按什么分组</span></span><br><span class="line">    category_list = models.Category.objects.<span class="built_in">filter</span>(blog=blog) \</span><br><span class="line">        .annotate(article_num=Count(<span class="string">&#x27;article__pk&#x27;</span>)).values(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;article_num&#x27;</span>, <span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.查询当前用户所有的标签及标签下的文章数  查询的结果为标签名字及文章数量</span></span><br><span class="line">    tag_list = models.Tag.objects.<span class="built_in">filter</span>(blog=blog).annotate(count_num=Count(<span class="string">&#x27;article__pk&#x27;</span>)) \</span><br><span class="line">        .values_list(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;count_num&#x27;</span>, <span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 3.按照年月统计所有的文章 会创建出一张虚拟表</span></span><br><span class="line">    date_list = models.Article.objects.<span class="built_in">filter</span>(blog=blog).annotate(month=TruncMonth(<span class="string">&#x27;create_date&#x27;</span>)) \</span><br><span class="line">        .values(<span class="string">&#x27;month&#x27;</span>).annotate(count_num=Count(<span class="string">&#x27;id&#x27;</span>)).values_list(<span class="string">&#x27;month&#x27;</span>, <span class="string">&#x27;count_num&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">locals</span>()</span><br><span class="line"></span><br><span class="line">使用方式：</span><br><span class="line">&#123;% load mytag %&#125;</span><br><span class="line">    &#123;% left_menu username %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># left_menu.html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>文章分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                &#123;% for category in category_list %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; username &#125;&#125;/category/&#123;&#123; category.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; category.name &#125;&#125;(&#123;&#123; category.article_num &#125;&#125;)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-danger&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>文章标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for tag in tag_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; username &#125;&#125;/tag/&#123;&#123; tag.2 &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; tag.0 &#125;&#125;(&#123;&#123; tag.1 &#125;&#125;)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>日期归档<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for date_obj in date_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; username &#125;&#125;/archive/&#123;&#123; date_obj.0|date:&#x27;Y-m&#x27; &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; date_obj.0|date:&#x27;Y年m月&#x27; &#125;&#125;(&#123;&#123; date_obj.1 &#125;&#125;)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="筛选功能"><a href="#筛选功能" class="headerlink" title="筛选功能"></a>筛选功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由：url(r&#x27;^(?P&lt;username&gt;\w+)/(?P&lt;condition&gt;category|tag|archive)/(?P&lt;param&gt;.*)/&#x27;, views.site)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">site</span>(<span class="params">request, username, **kwargs</span>):</span><br><span class="line">    <span class="comment"># 先校验当前用户名对应的个人站点是否存在</span></span><br><span class="line">    user_obj = models.UserInfo.objects.<span class="built_in">filter</span>(username=username).first()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user_obj:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;errors.html&#x27;</span>)</span><br><span class="line">    blog = user_obj.blog</span><br><span class="line">    <span class="comment"># 查询当前个人站点下的所有文章</span></span><br><span class="line">    article_list = models.Article.objects.<span class="built_in">filter</span>(blog=blog)</span><br><span class="line">    <span class="keyword">if</span> kwargs:</span><br><span class="line">        condition = kwargs.get(<span class="string">&#x27;condition&#x27;</span>)</span><br><span class="line">        param = kwargs.get(<span class="string">&#x27;param&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断用户想按照那个条件进行筛选</span></span><br><span class="line">        <span class="keyword">if</span> condition == <span class="string">&#x27;category&#x27;</span>:</span><br><span class="line">            <span class="comment"># 查询分类主键为param的文章</span></span><br><span class="line">            article_list = article_list.<span class="built_in">filter</span>(category_id=param)</span><br><span class="line">        <span class="keyword">elif</span> condition == <span class="string">&#x27;tag&#x27;</span>:</span><br><span class="line">            article_list = article_list.<span class="built_in">filter</span>(tag__id=param)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            year, month = param.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            article_list = article_list.<span class="built_in">filter</span>(create_date__year=year, create_date__month=month)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;site.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h2 id="文章详情页"><a href="#文章详情页" class="headerlink" title="文章详情页"></a>文章详情页</h2><h3 id="详情页HTML"><a href="#详情页HTML" class="headerlink" title="详情页HTML"></a>详情页HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block css %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#div_digg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">128px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.diggit</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">46px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">52px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;/static/img/upup.gif&#x27;</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buryit</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">46px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">52px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;/static/img/downdown.gif&#x27;</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.clear</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.diggword</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#808080</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; article_obj.title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article_content&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; article_obj.content|safe &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--点赞点踩开始--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div_digg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;diggit action&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;diggnum&quot;</span> <span class="attr">id</span>=<span class="string">&quot;digg_count&quot;</span>&gt;</span>&#123;&#123; article_obj.up_num &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buryit action&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;burynum&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bury_count&quot;</span>&gt;</span>&#123;&#123; article_obj.down_num &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;diggword&quot;</span> <span class="attr">id</span>=<span class="string">&quot;digg_tips&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--点赞点踩结束--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--评论楼渲染开始--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #2aabd2&quot;</span>&gt;</span>文章评论<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">          &#123;% for comment in comment_list %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>#&#123;&#123; forloop.counter &#125;&#125;楼<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; comment.comment_time|date:&#x27;Y-m-d H:i:s&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; comment.user.username &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; comment.user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;pull-right reply&quot;</span> <span class="attr">username</span>=<span class="string">&quot;&#123;&#123; comment.user.username &#125;&#125;&quot;</span> <span class="attr">comment_id</span>=<span class="string">&quot;&#123;&#123; comment.id &#125;&#125;&quot;</span>&gt;</span>回复<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    &#123;% if comment.parent_comment %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; comment.parent_comment.user.username &#125;&#125;/&quot;</span>&gt;</span>@&#123;&#123; comment.parent_comment.user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                    &#123;&#123; comment.content &#125;&#125;</span><br><span class="line">                  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--评论楼渲染结束--&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% if request.user.is_authenticated %&#125;</span><br><span class="line">    <span class="comment">&lt;!--文章评论开始--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-comment&quot;</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_comment&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_submit&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;error&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: orangered&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;register&#x27; %&#125;&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;login&#x27; %&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="comment">&lt;!--文章评论结束--&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="详情页js"><a href="#详情页js" class="headerlink" title="详情页js"></a>详情页js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="string">&#x27;.action&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            &#123;#<span class="title function_">alert</span>($(<span class="variable language_">this</span>).<span class="title function_">hasClass</span>(<span class="string">&#x27;diggit&#x27;</span>))#&#125;</span><br><span class="line">            <span class="keyword">let</span> is_Up = $(<span class="variable language_">this</span>).<span class="title function_">hasClass</span>(<span class="string">&#x27;diggit&#x27;</span>);</span><br><span class="line">            <span class="keyword">let</span> parent_tag = $(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="comment">// 朝后端发送ajax请求</span></span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;/up_or_down/&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;article_id&#x27;</span>: <span class="string">&#x27;&#123;&#123; article_obj.id &#125;&#125;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;is_up&#x27;</span>: is_Up,</span><br><span class="line">                    <span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>: <span class="string">&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (args.<span class="property">code</span> == <span class="number">1000</span>) &#123;</span><br><span class="line">                        $(<span class="string">&#x27;#digg_tips&#x27;</span>).<span class="title function_">text</span>(args.<span class="property">msg</span>)</span><br><span class="line">                        <span class="comment">// window.location.reload()</span></span><br><span class="line">                        <span class="comment">// 先获取到之前的数字</span></span><br><span class="line">                        <span class="keyword">let</span> old_num = parent_tag.<span class="title function_">children</span>().<span class="title function_">text</span>();</span><br><span class="line">                        parent_tag.<span class="title function_">children</span>().<span class="title function_">text</span>(<span class="title class_">Number</span>(old_num)+<span class="number">1</span>);</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="keyword">if</span>(args.<span class="property">code</span>==<span class="number">2000</span>)&#123;</span><br><span class="line">                        <span class="keyword">let</span> old_num = parent_tag.<span class="title function_">children</span>().<span class="title function_">text</span>();</span><br><span class="line">                        $(<span class="string">&#x27;#digg_tips&#x27;</span>).<span class="title function_">html</span>(args.<span class="property">msg</span>);</span><br><span class="line">                        parent_tag.<span class="title function_">children</span>().<span class="title function_">text</span>(<span class="title class_">Number</span>(old_num)-<span class="number">1</span>);</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="keyword">if</span>(args.<span class="property">code</span>==<span class="number">3000</span>)&#123;</span><br><span class="line">                        $(<span class="string">&#x27;#digg_tips&#x27;</span>).<span class="title function_">text</span>(args.<span class="property">msg</span>)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        $(<span class="string">&#x27;#digg_tips&#x27;</span>).<span class="title function_">html</span>(args.<span class="property">msg</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置一个全局parentId</span></span><br><span class="line">        <span class="keyword">let</span> parentId = <span class="literal">null</span>;</span><br><span class="line">        $(<span class="string">&#x27;#id_submit&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> content = $(<span class="string">&#x27;#id_comment&#x27;</span>).<span class="title function_">val</span>();</span><br><span class="line">            <span class="comment">// 先判断是否为子评论</span></span><br><span class="line">            <span class="keyword">if</span>(parentId)&#123;</span><br><span class="line">                <span class="keyword">let</span> indexNum = content.<span class="title function_">indexOf</span>(<span class="string">&#x27;\n&#x27;</span>) + <span class="number">1</span></span><br><span class="line">                <span class="comment">// 将索引之前的所有数据切除，只保留后面一部分</span></span><br><span class="line">                content = content.<span class="title function_">slice</span>(indexNum);</span><br><span class="line">            &#125;</span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>:<span class="string">&#x27;/comment/&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>:&#123;</span><br><span class="line">                    <span class="string">&#x27;article_id&#x27;</span>:<span class="string">&#x27;&#123;&#123; article_id &#125;&#125;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;parent_id&#x27;</span>:parentId,</span><br><span class="line">                    <span class="string">&#x27;content&#x27;</span>:content,</span><br><span class="line">                    <span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>:<span class="string">&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                    $(<span class="string">&#x27;#error&#x27;</span>).<span class="title function_">text</span>(args.<span class="property">msg</span>);</span><br><span class="line">                    <span class="comment">// 将评论里面的内容清空</span></span><br><span class="line">                    $(<span class="string">&#x27;#id_comment&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                    <span class="comment">// 临时渲染评论楼</span></span><br><span class="line">                    <span class="keyword">let</span> userName = <span class="string">&#x27;&#123;&#123; request.user.username &#125;&#125;&#x27;</span>;</span><br><span class="line">                    <span class="keyword">let</span> temp = <span class="string">`</span></span><br><span class="line"><span class="string">                    &lt;span&gt;<span class="subst">$&#123;userName&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                    &lt;span&gt;&lt;a href=&quot;#&quot; class=&quot;pull-right&quot;&gt;回复&lt;/a&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;</span></span><br><span class="line"><span class="string">                      <span class="subst">$&#123;content&#125;</span></span></span><br><span class="line"><span class="string">                      &lt;hr&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;`</span></span><br><span class="line">                    $(<span class="string">&#x27;.panel-body&#x27;</span>).<span class="title function_">append</span>(temp);</span><br><span class="line">                    parentId = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 给回复按钮绑定点击事件</span></span><br><span class="line">        $(<span class="string">&#x27;.reply&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 需要获取对应的评论人姓名还需要评论的主键值</span></span><br><span class="line">            <span class="comment">// 获取用户名，主键值</span></span><br><span class="line">            <span class="keyword">let</span> commentUserName = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">            parentId = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;comment_id&#x27;</span>);</span><br><span class="line">            <span class="comment">// 拼接信息塞给评论框</span></span><br><span class="line">            $(<span class="string">&#x27;#id_comment&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;@&#x27;</span>+commentUserName+<span class="string">&#x27;\n&#x27;</span>).<span class="title function_">focus</span>();</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="comment">// 子评论需要做的事情 评论框自动聚焦，将回复按钮所在哪一行的评论人的用户名拼接成@username 评论框自动换行</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h2 id="文章点赞点踩"><a href="#文章点赞点踩" class="headerlink" title="文章点赞点踩"></a>文章点赞点踩</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">up_or_down</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 先检验用户是否登录，判断文章是否为自己点的，判断当前用户是否已经点过了后操作数据库</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="keyword">if</span> request.user.is_authenticated():</span><br><span class="line">            article_id = request.POST.get(<span class="string">&#x27;article_id&#x27;</span>)</span><br><span class="line">            is_up = request.POST.get(<span class="string">&#x27;is_up&#x27;</span>)</span><br><span class="line">            is_up = json.loads(is_up)</span><br><span class="line">            <span class="built_in">print</span>(is_up)</span><br><span class="line">            <span class="comment"># 根据文章id查询文章对象，根据文章对象查询作者，作者与request.user做比较</span></span><br><span class="line">            article_obj = models.Article.objects.<span class="built_in">filter</span>(pk=article_id).first()</span><br><span class="line">            <span class="comment"># 注意跨表查询是有多个对象时需要加_set.first()才是查询出来的用户对象</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> article_obj.blog.userinfo_set.first() == request.user:</span><br><span class="line">                <span class="comment"># print(article_obj.blog.userinfo_set.first(), request.user)</span></span><br><span class="line">                <span class="comment"># 根据点赞点踩表查询用户是否点赞  同步增加文章表中的普通字段</span></span><br><span class="line">                is_click = models.UpAndDown.objects.<span class="built_in">filter</span>(user=request.user, article=article_obj)</span><br><span class="line">                <span class="built_in">print</span>(is_click)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> is_click:</span><br><span class="line">                    <span class="comment"># 点赞</span></span><br><span class="line">                    <span class="keyword">if</span> is_up:</span><br><span class="line">                        models.Article.objects.<span class="built_in">filter</span>(pk=article_id).update(up_num=F(<span class="string">&#x27;up_num&#x27;</span>) + <span class="number">1</span>)</span><br><span class="line">                        back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;推荐成功&#x27;</span></span><br><span class="line">                    <span class="comment"># 点踩</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        models.Article.objects.<span class="built_in">filter</span>(pk=article_id).update(down_num=F(<span class="string">&#x27;down_num&#x27;</span>) + <span class="number">1</span>)</span><br><span class="line">                        back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;反对成功&#x27;</span></span><br><span class="line">                    models.UpAndDown.objects.create(user=request.user, article=article_obj, is_up=is_up)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="string">&#x27;2000&#x27;</span></span><br><span class="line">                    <span class="keyword">if</span> is_up:</span><br><span class="line">                        models.Article.objects.<span class="built_in">filter</span>(pk=article_id).update(up_num=F(<span class="string">&#x27;up_num&#x27;</span>) - <span class="number">1</span>)</span><br><span class="line">                        back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;取消推荐&#x27;</span></span><br><span class="line">                    <span class="comment"># 点踩</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        models.Article.objects.<span class="built_in">filter</span>(pk=article_id).update(down_num=F(<span class="string">&#x27;down_num&#x27;</span>) - <span class="number">1</span>)</span><br><span class="line">                        back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;取消反对&#x27;</span></span><br><span class="line">                    models.UpAndDown.objects.<span class="built_in">filter</span>(user=request.user, article=article_obj).delete()</span><br><span class="line">                <span class="comment"># back_dic[&#x27;code&#x27;] = &#x27;2000&#x27;</span></span><br><span class="line">                <span class="comment"># back_dic[&#x27;msg&#x27;] = &#x27;取消成功&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="string">&#x27;3000&#x27;</span></span><br><span class="line">                back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;不能给自己的文章点喔&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="string">&#x27;4000&#x27;</span></span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;请先&lt;a href=&quot;/login/&quot;&gt;登录&lt;/a&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dic)</span><br></pre></td></tr></table></figure><h2 id="文章评论"><a href="#文章评论" class="headerlink" title="文章评论"></a>文章评论</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">comment</span>(<span class="params">request</span>):</span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="keyword">if</span> request.user.is_authenticated():</span><br><span class="line">            article_id = request.POST.get(<span class="string">&#x27;article_id&#x27;</span>)</span><br><span class="line">            content = request.POST.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">            parent_id = request.POST.get(<span class="string">&#x27;parent_id&#x27;</span>)</span><br><span class="line">            <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">                models.Article.objects.<span class="built_in">filter</span>(pk=article_id).update(comment_num=F(<span class="string">&#x27;comment_num&#x27;</span>) + <span class="number">1</span>)</span><br><span class="line">                models.Comment.objects.create(user=request.user, article_id=article_id, content=content,</span><br><span class="line">                                              parent_comment_id=parent_id)</span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;评论成功&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">2000</span></span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;用户未登录&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dic)</span><br></pre></td></tr></table></figure><h2 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h2><h3 id="前端模板backend-base-html"><a href="#前端模板backend-base-html" class="headerlink" title="前端模板backend_base.html"></a>前端模板backend_base.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;js/jquery-3.6.4.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/css/bootstrap.min.css&#x27; %&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    &#123;% block css %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">data-target</span>=<span class="string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;&#123; request.user.blog.site_title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>博客<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>更多 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;navbar-form navbar-left&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">                &#123;% if request.user.is_authenticated %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; request.user.username &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; request.user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>更多操作 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;.bs-example-modal-lg&quot;</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>修改头像<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/backend/&quot;</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout/&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;register&#x27; %&#125;&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;login&#x27; %&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade bs-example-modal-lg&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myLargeModalLabel&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog modal-lg&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; request.user.username &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                                           <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>原密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;old_password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_old_password&quot;</span></span></span><br><span class="line"><span class="tag">                                           <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>新密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;new_password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_new_password&quot;</span></span></span><br><span class="line"><span class="tag">                                           <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;confirm_password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_confirm_password&quot;</span></span></span><br><span class="line"><span class="tag">                                           <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;password_error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_edit&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-group&quot;</span> <span class="attr">id</span>=<span class="string">&quot;accordion&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tablist&quot;</span> <span class="attr">aria-multiselectable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">id</span>=<span class="string">&quot;headingOne&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-parent</span>=<span class="string">&quot;#accordion&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#collapseOne&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">aria-expanded</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;collapseOne&quot;</span>&gt;</span></span><br><span class="line">                                更多操作</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;collapseOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;panel-collapse collapse in&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">aria-labelledby</span>=<span class="string">&quot;headingOne&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/add/article/&quot;</span>&gt;</span>添加文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>添加随笔<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>草稿箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- Nav tabs --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tablist&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#home&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;home&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span></span></span><br><span class="line"><span class="tag">                                                              <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#profile&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;profile&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span></span></span><br><span class="line"><span class="tag">                                               <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>随笔<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#messages&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;messages&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span></span></span><br><span class="line"><span class="tag">                                               <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>草稿<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#file&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;file&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#settings&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;settings&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span></span></span><br><span class="line"><span class="tag">                                               <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>设置<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane active&quot;</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">                        &#123;% block article_page %&#125;</span><br><span class="line"></span><br><span class="line">                        &#123;% endblock %&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;profile&quot;</span>&gt;</span>随笔页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span>草稿页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;settings&quot;</span>&gt;</span>设置页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="backend-x2F-backend-html"><a href="#backend-x2F-backend-html" class="headerlink" title="backend&#x2F;backend.html"></a>backend&#x2F;backend.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;backend/backend_base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block article_page %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-hover&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>评论数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>点赞数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        &#123;% for article in article_queryset %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; request.user.username &#125;&#125;/article/&#123;&#123; article.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; article.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; article.comment_num &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; article.up_num &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger del&quot;</span> <span class="attr">del_id</span>=<span class="string">&quot;&#123;&#123; article.id &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">id</span>=<span class="string">&quot;del_&#123;&#123; article.id &#125;&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; page_obj.page_html|safe &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;layer/layer.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        $(&#x27;.del&#x27;).click(function () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            let id = $(this).attr(&#x27;del_id&#x27;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            let currentButton = $(this)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            layer.confirm(&#x27;您确定要删除吗？&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                btn: [&#x27;确定&#x27;, &#x27;取消&#x27;]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;, function () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                $.ajax(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    url: &#x27;&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    type: &#x27;post&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    data: &#123;&#x27;id&#x27;: id, &#x27;csrfmiddlewaretoken&#x27;: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">csrf_token</span> &#125;&#125;</span><span class="language-xml">&#x27;&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    success: function (args) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        if (args.code == 1000) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            layer.msg(args.msg, &#123;icon: 1&#125;, function () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                                window.location.reload();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            // 2.利用DOM操作 动态刷新tr标签</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            &#123;#layer.msg(args.msg,&#123;icon:1&#125;)#&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            &#123;#currentButton.parent().parent().remove()#&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            layer.msg(args.msg)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;, function () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                layer.msg(&#x27;取消删除&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="后端逻辑"><a href="#后端逻辑" class="headerlink" title="后端逻辑"></a>后端逻辑</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backend</span>(<span class="params">request</span>):</span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;1000&#x27;</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功&#x27;</span>&#125;</span><br><span class="line">    article_list = models.Article.objects.<span class="built_in">filter</span>(blog=request.user.blog)</span><br><span class="line">    page_obj = Pagination(current_page=request.GET.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>), all_count=article_list.count())</span><br><span class="line">    article_queryset = article_list[page_obj.start:page_obj.end]</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        article_id = request.POST.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        models.ArticleToTag.objects.<span class="built_in">filter</span>(article_id=article_id).delete()</span><br><span class="line">        models.Article.objects.<span class="built_in">filter</span>(pk=article_id).delete()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dic)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;backend/backend.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h2 id="富文本编辑器上传图片"><a href="#富文本编辑器上传图片" class="headerlink" title="富文本编辑器上传图片"></a>富文本编辑器上传图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">image_upload</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    //成功时 url当前文件所在的后端路径</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">        &quot;error&quot; : 0,</span></span><br><span class="line"><span class="string">        &quot;url&quot; : &quot;http://www.example.com/path/to/file.ext&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//失败时</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">        &quot;error&quot; : 1,</span></span><br><span class="line"><span class="string">        &quot;message&quot; : &quot;错误信息&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;error&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># imgFile: 文件form名称</span></span><br><span class="line">        <span class="comment"># print(request.FILES)</span></span><br><span class="line">        file_obj = request.FILES.get(<span class="string">&#x27;imgFile&#x27;</span>)</span><br><span class="line">        <span class="comment"># 后手动拼接存储文件的路径</span></span><br><span class="line">        file_dir = os.path.join(BASE_DIR, <span class="string">&#x27;media&#x27;</span>, <span class="string">&#x27;article_img&#x27;</span>)</span><br><span class="line">        <span class="comment"># 优化操作，优先判断文件夹是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(file_dir):</span><br><span class="line">            os.mkdir(file_dir)  <span class="comment"># 只会创建一层目录结构</span></span><br><span class="line">            <span class="comment"># 拼接图片的完整路径</span></span><br><span class="line">        <span class="comment"># 做一个唯一标识的拼接</span></span><br><span class="line">        img_name = <span class="built_in">str</span>(uuid4()) + <span class="string">&#x27;-&#x27;</span> + file_obj.name</span><br><span class="line">        file_path = os.path.join(file_dir, img_name)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> file_obj:</span><br><span class="line">                f.write(data)</span><br><span class="line">        back_dic[<span class="string">&#x27;url&#x27;</span>] = <span class="string">f&#x27;/media/article_img/<span class="subst">&#123;img_name&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(back_dic)</span><br></pre></td></tr></table></figure><h3 id="add-article-html"><a href="#add-article-html" class="headerlink" title="add_article.html"></a>add_article.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;backend/backend_base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block article_page %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>添加文章<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_content&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;% for category in category_list %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span><span class="attr">name</span>=<span class="string">&quot;category&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; category.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; category.name &#125;&#125;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;% for tag in tag_list %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; tag.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; tag.name &#125;&#125;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info btn-block&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;kindeditor/kindeditor-all.js&#x27;%&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;kindeditor/lang/zh-CN.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">KindEditor</span>.<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params">K</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">editor</span> = K.<span class="title function_">create</span>(<span class="string">&#x27;#id_content&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">width</span>:<span class="string">&#x27;100%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">height</span>:<span class="string">&#x27;400px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">resizeType</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                uploadJson : <span class="string">&#x27;/image_upload/&#x27;</span>,  <span class="comment">// 上传图片的后端接口路由</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 需要提交额外的参数</span></span></span><br><span class="line"><span class="language-javascript">                extraFileUploadParams : &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>:<span class="string">&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="add-article-request"><a href="#add-article-request" class="headerlink" title="add_article(request)"></a>add_article(request)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_article</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.POST.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        content = request.POST.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">        category_id = request.POST.get(<span class="string">&#x27;category&#x27;</span>)</span><br><span class="line">        tag_id_list = request.POST.getlist(<span class="string">&#x27;tag&#x27;</span>)</span><br><span class="line">        <span class="comment"># 使用模块防范xss攻击</span></span><br><span class="line">        soup = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        <span class="comment"># 获取所有标签</span></span><br><span class="line">        tags = soup.find_all()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">            <span class="built_in">print</span>(tag.name)</span><br><span class="line">            <span class="keyword">if</span> tag.name == <span class="string">&#x27;script&#x27;</span>:</span><br><span class="line">                <span class="comment"># 删除标签</span></span><br><span class="line">                tag.decompose()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 文章简介，先暴力截取</span></span><br><span class="line">        <span class="comment"># desc = content[0:150]</span></span><br><span class="line">        desc = soup.text[<span class="number">0</span>:<span class="number">150</span>]</span><br><span class="line">        <span class="comment"># 保存处理之后的结果字符</span></span><br><span class="line">        article_obj = models.Article.objects.create(title=title, desc=desc, content=<span class="built_in">str</span>(soup),</span><br><span class="line">                                                    blog=request.user.blog, category_id=category_id)</span><br><span class="line">        <span class="comment"># 自己操作关系表，一次性可能插入多条数据，使用批量插入bulk_creat</span></span><br><span class="line">        article_obj_list = []</span><br><span class="line">        <span class="keyword">for</span> tag_id <span class="keyword">in</span> tag_id_list:</span><br><span class="line">            article_tag_obj = models.ArticleToTag(article=article_obj, tag_id=tag_id)</span><br><span class="line">            article_obj_list.append(article_tag_obj)</span><br><span class="line">            <span class="comment"># article_obj_list.append(models.ArticleToTag(article=article_obj, tag_id=tag_id))</span></span><br><span class="line">        <span class="comment"># 批量插入数据</span></span><br><span class="line">        models.ArticleToTag.objects.bulk_create(article_obj_list)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/backend/&#x27;</span>)</span><br><span class="line">    <span class="comment"># 查询当前用户创建的所有分类和标签</span></span><br><span class="line">    category_list = models.Category.objects.<span class="built_in">filter</span>(blog=request.user.blog)</span><br><span class="line">    tag_list = models.Tag.objects.<span class="built_in">filter</span>(blog=request.user.blog)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;backend/add_article.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h2 id="修改用户头像"><a href="#修改用户头像" class="headerlink" title="修改用户头像"></a>修改用户头像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_avatar</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        file_obj = request.FILES.get(<span class="string">&#x27;avatar&#x27;</span>)</span><br><span class="line">        <span class="comment"># 错误写法;会省略media文件前缀</span></span><br><span class="line">        <span class="comment"># models.UserInfo.objects.filter(pk=request.user.id).update(avatar=file_obj)</span></span><br><span class="line">        <span class="comment"># 1.手动拼接</span></span><br><span class="line">        <span class="comment"># 2.换一种更新方式.</span></span><br><span class="line">        user_obj = request.user</span><br><span class="line">        user_obj.avatar = file_obj</span><br><span class="line">        user_obj.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/home/&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;set_avatar.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h3 id="set-avatar-html"><a href="#set-avatar-html" class="headerlink" title="set_avatar.html"></a>set_avatar.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;js/jquery-3.6.4.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/css/bootstrap.min.css&#x27; %&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/set/avatar/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            原头像:</span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/media/&#123;&#123; request.user.avatar &#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;img_file&quot;</span>&gt;</span>新头像</span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;img/default.png&#x27; %&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img_avatar&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 20px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img_file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 文本域变化事件</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#img_file&#x27;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.先生成文件阅读器对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> <span class="title class_">FileReaderObj</span> = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.获取用户上传的头像文件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> fileObj = $(<span class="variable language_">this</span>)[<span class="number">0</span>].<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.将文件对象交给阅读器对象 并且是异步操作 不会等待文件阅读完毕,会执行下一句代码</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">FileReaderObj</span>.<span class="title function_">readAsDataURL</span>(fileObj)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4.利用文件阅读器对象将文件展示到前端页面  实质上是修改图片的src属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 等待阅读器加载完毕后再执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">FileReaderObj</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#img_avatar&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, <span class="title class_">FileReaderObj</span>.<span class="property">result</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">主要功能总结</span><br><span class="line"><span class="code">表设计开发流程(流程粗糙|可以细化)</span></span><br><span class="line"><span class="code">  注册功能</span></span><br><span class="line"><span class="code">  forms组件使用</span></span><br><span class="line"><span class="code">    头像动态展示</span></span><br><span class="line"><span class="code">    错误信息提示</span></span><br><span class="line"><span class="code">  登陆功能</span></span><br><span class="line"><span class="code">  图片验证码</span></span><br><span class="line"><span class="code">  首页展示</span></span><br><span class="line"><span class="code">  media配置</span></span><br><span class="line"><span class="code">    主动暴露任意资源接口</span></span><br><span class="line"><span class="code">  个人站点展示</span></span><br><span class="line"><span class="code">  侧边栏展示</span></span><br><span class="line"><span class="code">    侧边栏筛选</span></span><br><span class="line"><span class="code">    侧边栏inclusion_tag</span></span><br><span class="line"><span class="code">  文章详情页</span></span><br><span class="line"><span class="code">  点赞点踩</span></span><br><span class="line"><span class="code">    评论</span></span><br><span class="line"><span class="code">  后台管理</span></span><br><span class="line"><span class="code">  增加文章</span></span><br><span class="line"><span class="code">  更换头像</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django统筹</title>
      <link href="/2022/07/28/Django%E7%BB%9F%E7%AD%B9/"/>
      <url>/2022/07/28/Django%E7%BB%9F%E7%AD%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="Django阶段"><a href="#Django阶段" class="headerlink" title="Django阶段"></a>Django阶段</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RBAC-Django缓存</title>
      <link href="/2022/07/24/RBAC-Django%E7%BC%93%E5%AD%98/"/>
      <url>/2022/07/24/RBAC-Django%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="基于角色的权限控制（django内置auth体系）"><a href="#基于角色的权限控制（django内置auth体系）" class="headerlink" title="基于角色的权限控制（django内置auth体系）"></a>基于角色的权限控制（django内置auth体系）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RBAC :是基于角色的访问控制(Role-Based Access Control)</span></span><br><span class="line"><span class="comment"># django的auth就是内置了一套基于RBAC的权限系统</span></span><br><span class="line"><span class="comment"># django中</span></span><br><span class="line">user表</span><br><span class="line">    permssion表</span><br><span class="line">    group表</span><br><span class="line">    user_groups表是user和group的中间表</span><br><span class="line">    group_permissions表是group和permssion中间表</span><br><span class="line">    user_user_permissions表是user和permission中间表</span><br></pre></td></tr></table></figure><h2 id="前后台权限控制"><a href="#前后台权限控制" class="headerlink" title="前后台权限控制"></a>前后台权限控制</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）后台用户对各表操作，是后台项目完成的，我们可以直接借助admin后台项目（Django自带的）</span><br><span class="line"></span><br><span class="line">2）前台用户的权限管理如何处理</span><br><span class="line"><span class="code">    定义了一堆数据接口的视图类，不同的登录用户是否能访问这些视图类，能就代表有权限，不能就代表无权限</span></span><br><span class="line"><span class="code">    前台用户权限用drf框架的 三大认证(认证、权限、频率)</span></span><br></pre></td></tr></table></figure><h2 id="权限三表"><a href="#权限三表" class="headerlink" title="权限三表"></a>权限三表</h2><p><img src="/2022/07/24/RBAC-Django%E7%BC%93%E5%AD%98/1.jpg" alt="1"></p><h2 id="权限六表"><a href="#权限六表" class="headerlink" title="权限六表"></a>权限六表</h2><p><img src="/2022/07/24/RBAC-Django%E7%BC%93%E5%AD%98/2.jpg" alt="2"></p><h2 id="实操案例"><a href="#实操案例" class="headerlink" title="实操案例"></a>实操案例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.username</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.admin <span class="keyword">import</span> UserAdmin <span class="keyword">as</span> DjangoUserAdmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义User表后，admin界面管理User类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserAdmin</span>(<span class="title class_ inherited__">DjangoUserAdmin</span>):</span><br><span class="line">    <span class="comment"># 添加用户可操作字段</span></span><br><span class="line">    add_fieldsets = (</span><br><span class="line">        (<span class="literal">None</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;classes&#x27;</span>: (<span class="string">&#x27;wide&#x27;</span>,),</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password1&#x27;</span>, <span class="string">&#x27;password2&#x27;</span>, <span class="string">&#x27;is_staff&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>, <span class="string">&#x27;groups&#x27;</span>, <span class="string">&#x27;user_permissions&#x27;</span>),</span><br><span class="line">        &#125;),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 展示用户呈现的字段</span></span><br><span class="line">    list_display = (<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>, <span class="string">&#x27;is_staff&#x27;</span>, <span class="string">&#x27;is_active&#x27;</span>, <span class="string">&#x27;is_superuser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">admin.site.register(models.User, UserAdmin)</span><br><span class="line">admin.site.register(models.Book)</span><br><span class="line">admin.site.register(models.Car)</span><br><span class="line"><span class="comment"># 登陆到admin后台进行操作</span></span><br></pre></td></tr></table></figure><h2 id="Django缓存"><a href="#Django缓存" class="headerlink" title="Django缓存"></a>Django缓存</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前端混合开发缓存的使用</span></span><br><span class="line">-缓存的位置，通过配置文件来操作（以文件为例）</span><br><span class="line">    -缓存的粒度：</span><br><span class="line">    -全站缓存</span><br><span class="line">        中间件</span><br><span class="line">            MIDDLEWARE = [</span><br><span class="line">                <span class="comment"># 最上面，响应中间件执行顺序由下往上</span></span><br><span class="line">                <span class="string">&#x27;django.middleware.cache.UpdateCacheMiddleware&#x27;</span>,</span><br><span class="line">                ...</span><br><span class="line">                <span class="comment"># 最下面，请求中间件执行顺序从上往下</span></span><br><span class="line">                <span class="string">&#x27;django.middleware.cache.FetchFromCacheMiddleware&#x27;</span>,</span><br><span class="line">            ]</span><br><span class="line">            CACHE_MIDDLEWARE_SECONDS=<span class="number">10</span>  <span class="comment"># 全站缓存时间</span></span><br><span class="line">        -单页面缓存</span><br><span class="line">        在视图函数上加装饰器</span><br><span class="line">            <span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="meta">            @cache_page(<span class="params"><span class="number">5</span></span>)  </span><span class="comment"># 缓存5s钟</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">test_cache</span>(<span class="params">request</span>):</span><br><span class="line">                <span class="keyword">import</span> time</span><br><span class="line">                ctime=time.time()</span><br><span class="line">                <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,context=&#123;<span class="string">&#x27;ctime&#x27;</span>:ctime&#125;)</span><br><span class="line">        </span><br><span class="line">        -页面局部缓存</span><br><span class="line">        &#123;% load cache %&#125;</span><br><span class="line">            &#123;% cache <span class="number">5</span> <span class="string">&#x27;name&#x27;</span> %&#125;  <span class="comment"># 5表示5s钟，name是唯一key值</span></span><br><span class="line">             &#123;&#123; ctime &#125;&#125;</span><br><span class="line">            &#123;% endcache %&#125;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 前后端分离缓存的使用</span></span><br><span class="line">- 如何使用</span><br><span class="line">        <span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line">        cache.<span class="built_in">set</span>(<span class="string">&#x27;key&#x27;</span>,value可以是任意数据类型)</span><br><span class="line">        cache.get(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">    -应用场景：</span><br><span class="line">    -第一次查询所有图书，你通过多表联查序列化之后的数据，直接缓存起来</span><br><span class="line">        -后续，直接先去缓存查，如果有直接返回，没有，再去连表查，返回之前再缓存</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django中auth组件的使用</title>
      <link href="/2022/07/22/Django%E4%B8%ADauth%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/22/Django%E4%B8%ADauth%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Auth模块"><a href="#Auth模块" class="headerlink" title="Auth模块"></a>Auth模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">其实在创建好一个django项目之后,直接执行数据库迁移命令会自动生成很多表</span></span><br><span class="line"><span class="string">django_session</span></span><br><span class="line"><span class="string">auth_user</span></span><br><span class="line"><span class="string">django在启动之后就可以直接访问admin路由，需要输入用户名和密码，数据参考的就是auth_user表,并且还必须是管理员用户才能进入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建超级用户(管理员)</span></span><br><span class="line"><span class="string">python3 manage.py createsuperuser</span></span><br><span class="line"><span class="string">依赖于auth_user表完成用户相关的所有功能</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.比对用户名和密码是否正确</span></span><br><span class="line">user_obj = auth.authenticate(request,username=username,password=password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 括号内必须同时传入用户名和密码</span></span><br><span class="line"><span class="built_in">print</span>(user_obj)  <span class="comment"># 用户对象  jason   数据不符合则返回None</span></span><br><span class="line"><span class="built_in">print</span>(user_obj.username)  <span class="comment"># jason</span></span><br><span class="line"><span class="built_in">print</span>(user_obj.password)  <span class="comment"># 密文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.保存用户状态</span></span><br><span class="line">auth.login(request,user_obj)  <span class="comment"># 类似于request.session[key] = user_obj</span></span><br><span class="line"><span class="comment"># 主要执行了该方法 你就可以在任何地方通过request.user获取到当前登陆的用户对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.判断当前用户是否登陆</span></span><br><span class="line">request.user.is_authenticated()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取当前登陆用户</span></span><br><span class="line">request.user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.校验用户是否登陆装饰器</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="comment"># 局部配置</span></span><br><span class="line"><span class="meta">@login_required(<span class="params">login_url=<span class="string">&#x27;/login/&#x27;</span></span>) </span></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">LOGIN_URL = <span class="string">&#x27;/login/&#x27;</span></span><br><span class="line"><span class="number">1.</span>如果局部和全局都有 该听谁的?</span><br><span class="line">    局部 &gt; 全局</span><br><span class="line"><span class="number">2.</span>局部和全局哪个好呢?全局的好处在于无需重复写代码 但是跳转的页面却很单一</span><br><span class="line">    局部的好处在于不同的视图函数在用户没有登陆的情况下可以跳转到不同的页面</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.比对原密码</span></span><br><span class="line">request.user.check_password(old_password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.修改密码</span></span><br><span class="line">request.user.set_password(new_password)  <span class="comment"># 仅仅是在修改对象的属性</span></span><br><span class="line">request.user.save()  <span class="comment"># 这一步才是真正的操作数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.注销</span></span><br><span class="line">auth.logout(request) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.注册</span></span><br><span class="line"><span class="comment"># 操作auth_user表写入数据</span></span><br><span class="line">User.objects.create(username=username,password=password)  <span class="comment"># 写入数据  不能用create 密码没有加密处理</span></span><br><span class="line"><span class="comment"># 创建普通用户</span></span><br><span class="line">User.objects.create_user(username=username,password=password)</span><br><span class="line"><span class="comment"># 创建超级用户(了解):使用代码创建超级用户 邮箱是必填的 而用命令创建则可以不填</span></span><br><span class="line">User.objects.create_superuser(username=username,email=<span class="string">&#x27;123@qq.com&#x27;</span>,password=password)</span><br></pre></td></tr></table></figure><h3 id="如何扩展auth-user表"><a href="#如何扩展auth-user表" class="headerlink" title="如何扩展auth_user表"></a>如何扩展auth_user表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User,AbstractUser</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一种:一对一关系  不推荐</span></span><br><span class="line"><span class="comment"># class UserDetail(models.Model):</span></span><br><span class="line"><span class="comment">#     phone = models.BigIntegerField()</span></span><br><span class="line"><span class="comment">#     user = models.OneToOneField(to=&#x27;User&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种:面向对象的继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    phone = models.BigIntegerField()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    如果继承了AbstractUser</span></span><br><span class="line"><span class="string">    那么在执行数据库迁移命令的时候auth_user表就不会再创建出来了</span></span><br><span class="line"><span class="string">    而UserInfo表中会出现auth_user所有的字段外加自己扩展的字段</span></span><br><span class="line"><span class="string">    这么做的好处在于你能够直接点击你自己的表更加快速的完成操作及扩展</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    前提:</span></span><br><span class="line"><span class="string">        1.在继承之前没有执行过数据库迁移命令</span></span><br><span class="line"><span class="string">            auth_user没有被创建，如果当前库已经创建了那么你就重新换一个库</span></span><br><span class="line"><span class="string">        2.继承的类里面不要覆盖AbstractUser里面的字段名</span></span><br><span class="line"><span class="string">            表里面有的字段都不要动，只扩展额外字段即可</span></span><br><span class="line"><span class="string">        3.需要在配置文件中告诉django你要用UserInfo替代auth_user(******)</span></span><br><span class="line"><span class="string">            AUTH_USER_MODEL = &#x27;app01.UserInfo&#x27;  &#x27;应用名.表名&#x27;</span></span><br><span class="line"><span class="string">你如果自己写表替代了auth_user那么</span></span><br><span class="line"><span class="string">auth模块的功能还是照常使用，参考的表页由原来的auth_user变成了UserInfo</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django中间件及思想</title>
      <link href="/2022/07/17/Django%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E6%80%9D%E6%83%B3/"/>
      <url>/2022/07/17/Django%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="django中间件"><a href="#django中间件" class="headerlink" title="django中间件"></a>django中间件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">django中间件是django的门户</span><br><span class="line"><span class="number">1.</span>请求来的时候需要先经过中间件才能到达真正的django后端</span><br><span class="line"><span class="number">2.</span>响应走的时候最后也需要经过中间件才能发送出去</span><br><span class="line">django自带七个中间件</span><br><span class="line">研究django中间件代码规律</span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SessionMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)</span><br><span class="line">        request.session = self.SessionStore(session_key)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CsrfViewMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        csrf_token = self._get_token(request)</span><br><span class="line">        <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># Use same token next time.</span></span><br><span class="line">            request.META[<span class="string">&#x27;CSRF_COOKIE&#x27;</span>] = csrf_token</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, callback, callback_args, callback_kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> self._accept(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthenticationMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        request.user = SimpleLazyObject(<span class="keyword">lambda</span>: get_user(request))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">django支持程序员自定义中间件并且暴露五个可以自定义的方法</span></span><br><span class="line"><span class="string">1.必须掌握</span></span><br><span class="line"><span class="string">process_request</span></span><br><span class="line"><span class="string">process_response</span></span><br><span class="line"><span class="string">2.了解即可</span></span><br><span class="line"><span class="string">process_view</span></span><br><span class="line"><span class="string">process_template_response</span></span><br><span class="line"><span class="string">process_exception</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="如何自定义中间件"><a href="#如何自定义中间件" class="headerlink" title="如何自定义中间件"></a>如何自定义中间件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.在项目名或者应用名下创建一个任意名称的文件夹</span></span><br><span class="line"><span class="string">2.在该文件夹内创建一个任意名称的py文件</span></span><br><span class="line"><span class="string">3.在该py文件内需要书写类(这个类必须继承MiddlewareMixin)</span></span><br><span class="line"><span class="string">然后在这个类里面就可以自定义五个方法了</span></span><br><span class="line"><span class="string">4.需要将类的路径以字符串的形式注册到配置文件中才能生效</span></span><br><span class="line"><span class="string">MIDDLEWARE = [</span></span><br><span class="line"><span class="string">    &#x27;django.middleware.security.SecurityMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.middleware.common.CommonMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;你自己写的中间件的路径1&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;你自己写的中间件的路径2&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;你自己写的中间件的路径3&#x27;,</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">1.必须掌握</span></span><br><span class="line"><span class="string">process_request </span></span><br><span class="line"><span class="string">1.请求来的时候需要经过每一个中间件里面的process_request方法</span></span><br><span class="line"><span class="string">结果的顺序是按照配置文件中注册的中间件从上往下的顺序依次执行</span></span><br><span class="line"><span class="string">2.如果中间件里面没有定义该方法，那么直接跳过执行下一个中间件</span></span><br><span class="line"><span class="string">3.如果该方法返回了HttpResponse对象，那么请求将不再继续往后执行</span></span><br><span class="line"><span class="string">而是直接原路返回(校验失败不允许访问...)</span></span><br><span class="line"><span class="string">process_request方法就是用来做全局相关的所有限制功能</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">process_response</span></span><br><span class="line"><span class="string">1.响应走的时候需要结果每一个中间件里面的process_response方法</span></span><br><span class="line"><span class="string">该方法有两个额外的参数request,response</span></span><br><span class="line"><span class="string">2.该方法必须返回一个HttpResponse对象</span></span><br><span class="line"><span class="string">1.默认返回的就是形参response</span></span><br><span class="line"><span class="string">2.你也可以自己返回自己的</span></span><br><span class="line"><span class="string">3.顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">如果你没有定义的话 直接跳过执行下一个</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">研究如果在第一个process_request方法就已经返回了HttpResponse对象，那么响应走的时候是经过所有的中间件里面的process_response还是有其他情况</span></span><br><span class="line"><span class="string">是其他情况</span></span><br><span class="line"><span class="string">就是会直接走同级别（自定义中间件类）的process_reponse返回</span></span><br><span class="line"><span class="string">2.了解即可</span></span><br><span class="line"><span class="string">process_view</span></span><br><span class="line"><span class="string">路由匹配成功之后执行视图函数之前，会自动执行中间件里面的该放法</span></span><br><span class="line"><span class="string">顺序是按照配置文件中注册的中间件从上往下的顺序依次执行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">process_template_response</span></span><br><span class="line"><span class="string">返回的HttpResponse对象有render属性的时候才会触发</span></span><br><span class="line"><span class="string">顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">process_exception</span></span><br><span class="line"><span class="string">当视图函数中出现异常的情况下触发</span></span><br><span class="line"><span class="string">顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="csrf跨站请求伪造"><a href="#csrf跨站请求伪造" class="headerlink" title="csrf跨站请求伪造"></a>csrf跨站请求伪造</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">钓鱼网站</span></span><br><span class="line"><span class="string">我搭建一个跟正规网站一模一样的界面(中国银行)</span></span><br><span class="line"><span class="string">用户不小心进入到了我们的网站，用户给某个人打钱</span></span><br><span class="line"><span class="string">打钱的操作确确实实是提交给了中国银行的系统，用户的钱也确确实实减少了</span></span><br><span class="line"><span class="string">但是唯一不同的是打钱的账户不是用户想要打的账户变成了一个莫名其妙的账户</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">内部本质</span></span><br><span class="line"><span class="string">我们在钓鱼网站的页面 针对对方账户 只给用户提供一个没有name属性的普通input框</span></span><br><span class="line"><span class="string">然后我们在内部隐藏一个已经写好name和value的input框</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">规避上述问题:csrf跨站请求伪造校验</span></span><br><span class="line"><span class="string">网站在给用户返回一个具有提交数据功能页面的时候会给这个页面加一个唯一标识</span></span><br><span class="line"><span class="string">当这个页面朝后端发送post请求的时候 我的后端会先校验唯一标识，如果唯一标识不对直接拒绝(403forbbiden)如果成功则正常执行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="如何符合校验"><a href="#如何符合校验" class="headerlink" title="如何符合校验"></a>如何符合校验</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># form表单如何符合校验</span></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;p&gt;username:&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;target_user:&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;target_user&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;money:&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;money&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ajax如何符合校验</span></span><br><span class="line">// 第一种 利用标签查找获取页面上的随机字符串</span><br><span class="line">&#123;<span class="comment">#data:&#123;&quot;username&quot;:&#x27;jason&#x27;,&#x27;csrfmiddlewaretoken&#x27;:$(&#x27;[name=csrfmiddlewaretoken]&#x27;).val()&#125;,#&#125;</span></span><br><span class="line">// 第二种 利用模版语法提供的快捷书写</span><br><span class="line">&#123;<span class="comment">#data:&#123;&quot;username&quot;:&#x27;jason&#x27;,&#x27;csrfmiddlewaretoken&#x27;:&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;&#125;,#&#125;</span></span><br><span class="line">// 第三种 通用方式直接拷贝js代码并应用到自己的html页面上即可</span><br><span class="line">data:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&#x27;jason&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> cookieValue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">cookie</span> &amp;&amp; <span class="variable language_">document</span>.<span class="property">cookie</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookies = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cookies.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> cookie = jQuery.<span class="title function_">trim</span>(cookies[i]);</span><br><span class="line">            <span class="comment">// Does this cookie string begin with the name we want?</span></span><br><span class="line">            <span class="keyword">if</span> (cookie.<span class="title function_">substring</span>(<span class="number">0</span>, name.<span class="property">length</span> + <span class="number">1</span>) === (name + <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line">                cookieValue = <span class="built_in">decodeURIComponent</span>(cookie.<span class="title function_">substring</span>(name.<span class="property">length</span> + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> csrftoken = <span class="title function_">getCookie</span>(<span class="string">&#x27;csrftoken&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">csrfSafeMethod</span>(<span class="params">method</span>) &#123;</span><br><span class="line">  <span class="comment">// these HTTP methods do not require CSRF protection</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="regexp">/^(GET|HEAD|OPTIONS|TRACE)$/</span>.<span class="title function_">test</span>(method));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajaxSetup</span>(&#123;</span><br><span class="line">  <span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params">xhr, settings</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">csrfSafeMethod</span>(settings.<span class="property">type</span>) &amp;&amp; !<span class="variable language_">this</span>.<span class="property">crossDomain</span>) &#123;</span><br><span class="line">      xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;X-CSRFToken&quot;</span>, csrftoken);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="csrf相关装饰器"><a href="#csrf相关装饰器" class="headerlink" title="csrf相关装饰器"></a>csrf相关装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.网站整体都不校验csrf，就单单几个视图函数需要校验</span></span><br><span class="line"><span class="string">2.网站整体都校验csrf，就单单几个视图函数不校验</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_protect,csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">csrf_protect  需要校验</span></span><br><span class="line"><span class="string">    针对csrf_protect符合我们之前所学的装饰器的三种玩法</span></span><br><span class="line"><span class="string">csrf_exempt   忽视校验</span></span><br><span class="line"><span class="string">    针对csrf_exempt只能给dispatch方法加才有效</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># @csrf_exempt</span></span><br><span class="line"><span class="comment"># @csrf_protect</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transfer</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        target_user = request.POST.get(<span class="string">&#x27;target_user&#x27;</span>)</span><br><span class="line">        money = request.POST.get(<span class="string">&#x27;money&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s给%s转了%s元&#x27;</span>%(username,target_user,money))</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;transfer.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment"># @method_decorator(csrf_protect,name=&#x27;post&#x27;)  # 针对csrf_protect 第二种方式可以</span></span><br><span class="line"><span class="comment"># @method_decorator(csrf_exempt,name=&#x27;post&#x27;)  # 针对csrf_exempt 第二种方式不可以</span></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">csrf_exempt,name=<span class="string">&#x27;dispatch&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCsrfToken</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="comment"># @method_decorator(csrf_protect)  # 针对csrf_protect 第三种方式可以</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_exempt)  # 针对csrf_exempt 第三种方式可以</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(MyCsrfToken, self).dispatch(request,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_protect)  # 针对csrf_protect 第一种方式可以</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_exempt)  # 针对csrf_exempt 第一种方式不可以</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块:importlib</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">res = <span class="string">&#x27;myfile.b&#x27;</span></span><br><span class="line">ret = importlib.import_module(res)  <span class="comment"># from myfile import b</span></span><br><span class="line"><span class="comment"># 该方法最小只能到py文件名</span></span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure><h3 id="重要思想"><a href="#重要思想" class="headerlink" title="重要思想"></a>重要思想</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings文件</span></span><br><span class="line">NOTIFY_LIST = [</span><br><span class="line">    <span class="string">&#x27;notify.email.Email&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;notify.wechat.Wechat&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;notify.qq.QQ&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># wechat.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechat</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信通知:%s&#x27;</span> % content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__init__文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_all</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">for</span> path_str <span class="keyword">in</span> settings.NOTIFY_LIST:  <span class="comment">#&#x27;notify.email.Email&#x27;</span></span><br><span class="line">        module_path,class_name = path_str.rsplit(<span class="string">&#x27;.&#x27;</span>,maxsplit=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># module_path = &#x27;notify.email&#x27;  class_name = &#x27;Email&#x27;</span></span><br><span class="line">        <span class="comment"># 1 利用字符串导入模块</span></span><br><span class="line">        module = importlib.import_module(module_path)  <span class="comment"># from notify import email</span></span><br><span class="line">        <span class="comment"># 2 利用反射获取类名</span></span><br><span class="line">        cls = <span class="built_in">getattr</span>(module,class_name)  <span class="comment"># Email、QQ、Wechat</span></span><br><span class="line">        <span class="comment"># 3 生成类的对象</span></span><br><span class="line">        obj = cls()</span><br><span class="line">        <span class="comment"># 4 利用鸭子类型直接调用send方法</span></span><br><span class="line">        obj.send(content)</span><br><span class="line">通过注释或者启用哪个类实现django的中间件思想       </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django之cookie与session</title>
      <link href="/2022/07/15/Django%E4%B9%8Bcookie%E4%B8%8Esession/"/>
      <url>/2022/07/15/Django%E4%B9%8Bcookie%E4%B8%8Esession/</url>
      
        <content type="html"><![CDATA[<h3 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">发展史</span></span><br><span class="line"><span class="string">1.网站都没有保存用户功能的需求 所有用户访问返回的结果都是一样的</span></span><br><span class="line"><span class="string">eg:新闻、博客、文章</span></span><br><span class="line"><span class="string">2.出现了一些需要保存用户信息的网站</span></span><br><span class="line"><span class="string">eg:淘宝、支付宝、京东</span></span><br><span class="line"><span class="string">以登陆功能为例:如果不保存用户登陆状态 也就意味着用户每次访问网站都需要重复的输入用户名和密码(你觉得这样的网站你还想用吗？)</span></span><br><span class="line"><span class="string">当用户第一次登陆成功之后 将用户的用户名密码返回给用户浏览器 让用户浏览器保存在本地，之后访问网站的时候浏览器自动将保存在浏览器上的用户名和密码发送给服务端，服务端获取之后自动验证</span></span><br><span class="line"><span class="string">早期这种方式具有非常大的安全隐患</span></span><br><span class="line"><span class="string">优化:</span></span><br><span class="line"><span class="string">当用户登陆成功之后，服务端产生一个随机字符串(在服务端保存数据,用kv键值对的形式)，交由客户端浏览器保存</span></span><br><span class="line"><span class="string">随机字符串1:用户1相关信息</span></span><br><span class="line"><span class="string">随机字符串2:用户2相关信息</span></span><br><span class="line"><span class="string">随机字符串3:用户3相关信息</span></span><br><span class="line"><span class="string">之后访问服务端的时候，都带着该随机字符串，服务端去数据库中比对是否有对应的随机字符串从而获取到对应的用户信息</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">但是如果你截获到了该随机字符串，那么你就可以冒充当前用户 其实还是有安全隐患的</span></span><br><span class="line"><span class="string">web领域没有绝对的安全也没有绝对的不安全</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">cookie</span><br><span class="line">服务端保存在客户端浏览器上的信息都可以称之为cookie</span><br><span class="line">    它的表现形式一般都是k:v键值对(可以有多个)</span><br><span class="line">session</span><br><span class="line">数据是保存在服务端的并且它的表现形式一般也是k:v键值对(可以有多个)</span><br><span class="line">token</span><br><span class="line">session虽然数据是保存在服务端的 但是禁不住数据量大</span><br><span class="line">  服务端不再保存数据</span><br><span class="line">  登陆成功之后 将一段用户信息进行加密处理(加密算法)</span><br><span class="line">    将加密之后的结果拼接在信息后面 整体返回给浏览器保存 </span><br><span class="line">    浏览器下次访问的时候带着该信息 服务端自动切去前面一段信息再次使用自己的加密算法</span><br><span class="line">    跟浏览器尾部的密文进行比对</span><br><span class="line">jwt认证：三段信息 （先提一嘴后续DRF再续前缘）</span><br><span class="line">总结:</span><br><span class="line">  <span class="number">1.</span>cookie就是保存在客户端浏览器上的信息</span><br><span class="line">    <span class="number">2.</span>session就是保存在服务端上的信息</span><br><span class="line">    <span class="number">3.</span>session是基于cookie工作的(其实大部分的保存用户状态的操作都需要使用到cookie)</span><br></pre></td></tr></table></figure><h3 id="Cookie操作"><a href="#Cookie操作" class="headerlink" title="Cookie操作"></a>Cookie操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虽然cookie是服务端告诉客户端浏览器需要保存内容</span></span><br><span class="line"><span class="comment"># 但是客户端浏览器可以选择拒绝保存 如果禁止了 那么只要是需要记录用户状态的网站登陆功能都无法使用了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图函数的返回值</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse()</span><br><span class="line"><span class="keyword">return</span> render()</span><br><span class="line"><span class="keyword">return</span> redirect()</span><br><span class="line"></span><br><span class="line">obj1 = HttpResponse()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj1</span><br><span class="line"></span><br><span class="line">obj2 = render()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj2</span><br><span class="line"></span><br><span class="line">obj3 = redirect()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj3</span><br><span class="line"><span class="comment"># 如果你想要操作cookie，你就不得不利用obj对象</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">设置cookie</span></span><br><span class="line"><span class="string">obj.set_cookie(key,value)</span></span><br><span class="line"><span class="string">获取cookie</span></span><br><span class="line"><span class="string">request.COOKIES.get(key)</span></span><br><span class="line"><span class="string">在设置cookie的时候可以添加一个超时时间</span></span><br><span class="line"><span class="string">obj.set_cookie(&#x27;username&#x27;, &#x27;jason666&#x27;,max_age=3,expires=3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">max_age</span></span><br><span class="line"><span class="string">expires</span></span><br><span class="line"><span class="string">两者都是设置超时时间的 并且都是以秒为单位</span></span><br><span class="line"><span class="string">需要注意的是 针对IE浏览器需要使用expires</span></span><br><span class="line"><span class="string">主动删除cookie(注销功能)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 我们完成一个真正的登陆功能</span></span><br><span class="line"><span class="comment"># 校验用户是否登陆的装饰器</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用户如果在没有登陆的情况下想访问一个需要登陆的页面</span></span><br><span class="line"><span class="string">那么先跳转到登陆页面 当用户输入正确的用户名和密码之后</span></span><br><span class="line"><span class="string">应该跳转到用户之前想要访问的页面去 而不是直接写死</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_auth</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">request,*args,**kwargs</span>):</span><br><span class="line">        <span class="comment"># print(request.path_info)</span></span><br><span class="line">        <span class="comment"># print(request.get_full_path())  # 能够获取到用户上一次想要访问的url</span></span><br><span class="line">        target_url = request.get_full_path()</span><br><span class="line">        <span class="keyword">if</span> request.COOKIES.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request,*args,**kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/?next=%s&#x27;</span>%target_url)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取用户上一次想要访问的url</span></span><br><span class="line">            target_url = request.GET.get(<span class="string">&#x27;next&#x27;</span>)  <span class="comment"># 这个结果可能是None</span></span><br><span class="line">            <span class="keyword">if</span> target_url:</span><br><span class="line">                obj = redirect(target_url)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 保存用户登陆状态</span></span><br><span class="line">                obj = redirect(<span class="string">&#x27;/home/&#x27;</span>)</span><br><span class="line">            <span class="comment"># 让浏览器记录cookie数据</span></span><br><span class="line">            obj.set_cookie(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;jason666&#x27;</span>)</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            浏览器不单单会帮你存</span></span><br><span class="line"><span class="string">            而且后面每次访问你的时候还会带着它过来</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 跳转到一个需要用户登陆之后才能看的页面</span></span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_auth</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 获取cookie信息 判断你有没有</span></span><br><span class="line">    <span class="comment"># if request.COOKIES.get(&#x27;username&#x27;) == &#x27;jason666&#x27;:</span></span><br><span class="line">    <span class="comment">#     return HttpResponse(&quot;我是home页面，只有登陆的用户才能进来哟~&quot;)</span></span><br><span class="line">    <span class="comment"># # 没有登陆应该跳转到登陆页面</span></span><br><span class="line">    <span class="comment"># return redirect(&#x27;/login/&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;我是home页面，只有登陆的用户才能进来哟~&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="session操作"><a href="#session操作" class="headerlink" title="session操作"></a>session操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">session数据是保存在服务端的，给客户端返回的是一个随机字符串</span></span><br><span class="line"><span class="string">sessionid:随机字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.在默认情况下操作session的时候需要django默认的一张django_session表</span></span><br><span class="line"><span class="string">数据库迁移命令</span></span><br><span class="line"><span class="string">django会自己创建很多表django_session就是其中的一张</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django默认session的过期时间是14天 但是你也可以人为的修改它</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">设置session：request.session[&#x27;key&#x27;] = value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">获取session：request.session.get(&#x27;key&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">设置过期时间：request.session.set_expiry()</span></span><br><span class="line"><span class="string">括号内可以放四种类型的参数</span></span><br><span class="line"><span class="string">1.整数多少秒</span></span><br><span class="line"><span class="string">2.日期对象      到指定日期就失效</span></span><br><span class="line"><span class="string">3.0  一旦当前浏览器窗口关闭立刻失效</span></span><br><span class="line"><span class="string">4.不写 失效时间就取决于django内部全局session默认的失效时间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">清除session</span></span><br><span class="line"><span class="string">request.session.delete()  # 只删服务端的 客户端的不删</span></span><br><span class="line"><span class="string">request.session.flush()  # 浏览器和服务端都清空(推荐使用)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session是保存在服务端的 但是session的保存位置可以有多种选择</span></span><br><span class="line"><span class="string">1.MySQL</span></span><br><span class="line"><span class="string">2.文件</span></span><br><span class="line"><span class="string">3.redis</span></span><br><span class="line"><span class="string">4.memcache</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django_session表中的数据条数是取决于浏览器的</span></span><br><span class="line"><span class="string">同一个计算机上(IP地址)同一个浏览器只会有一条数据生效</span></span><br><span class="line"><span class="string">(当session过期的时候可能会出现多条数据对应一个浏览器，但是该现象不会持续很久，内部会自动识别过期的数据清除 你也可以通过代码清除)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">request.session[<span class="string">&#x27;hobby&#x27;</span>] = <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    内部发送了那些事</span></span><br><span class="line"><span class="string">        1.django内部会自动帮你生成一个随机字符串</span></span><br><span class="line"><span class="string">        2.django内部自动将随机字符串和对应的数据存储到django_session表中</span></span><br><span class="line"><span class="string">            2.1先在内存中产生操作数据的缓存</span></span><br><span class="line"><span class="string">            2.2在响应结果django中间件的时候才真正的操作数据库</span></span><br><span class="line"><span class="string">        3.将产生的随机字符串返回给客户端浏览器保存</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">request.session.get(<span class="string">&#x27;hobby&#x27;</span>)</span><br><span class="line"></span><br><span class="line">内部发生了什么事</span><br><span class="line">      <span class="number">1.</span>自动从浏览器请求中获取sessionid对应的随机字符串</span><br><span class="line">      <span class="number">2.</span>拿着该随机字符串去django_session表中查找对应的数据</span><br><span class="line">      <span class="number">3.</span> 如果比对上了 则将对应的数据取出并以字典的形式封装到request.session中</span><br><span class="line">         如果比对不上 则request.session.get()返回的是<span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django的forms组件</title>
      <link href="/2022/07/11/Django%E7%9A%84forms%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/07/11/Django%E7%9A%84forms%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">写一个注册功能</span></span><br><span class="line"><span class="string">获取用户名和密码 利用form表单提交数据</span></span><br><span class="line"><span class="string">在后端判断用户名和密码是否符合一定的条件</span></span><br><span class="line"><span class="string">用户名中不能含有草</span></span><br><span class="line"><span class="string">密码不能少于三位</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如何符合条件需要你将提示信息展示到前端页面</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_form</span>(<span class="params">request</span>):</span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;草&#x27;</span> <span class="keyword">in</span> username:</span><br><span class="line">            back_dic[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;不符合社会主义核心价值观&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(password) &lt; <span class="number">3</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;password&#x27;</span>] = <span class="string">&#x27;不能太短 不安全!&#x27;</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    无论是post请求还是get请求</span></span><br><span class="line"><span class="string">    页面都能够获取到字典 只不过get请求来的时候 字典值都是空的</span></span><br><span class="line"><span class="string">    而post请求来之后 字典可能有值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;ab_form.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;username:</span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color: red&quot;</span>&gt;&#123;&#123; back_dic.username &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;password:</span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color: red&quot;</span>&gt;&#123;&#123; back_dic.password &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.手动书写前端获取用户数据的html代码 渲染html代码</span></span><br><span class="line"><span class="string">2.后端对用户数据进行校验校验数据</span></span><br><span class="line"><span class="string">3.对不符合要求的数据进行前端提示  展示提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">forms组件</span></span><br><span class="line"><span class="string">能够完成的事情</span></span><br><span class="line"><span class="string">1.渲染html代码</span></span><br><span class="line"><span class="string">2.校验数据</span></span><br><span class="line"><span class="string">3.展示提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span>(forms.Form):</span><br><span class="line">    <span class="comment"># username字符串类型最小3位最大8位</span></span><br><span class="line">    username = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># password字符串类型最小3位最大8位</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># email字段必须符合邮箱格式  xxx@xx.com</span></span><br><span class="line">    email = forms.EmailField()</span><br></pre></td></tr></table></figure><h3 id="校验数据"><a href="#校验数据" class="headerlink" title="校验数据"></a>校验数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="comment"># 1 将带校验的数据组织成字典的形式传入即可</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 2 判断数据是否合法注意该方法只有在所有的数据全部合法的情况下才会返回True</span></span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="comment"># 3 查看所有校验通过的数据</span></span><br><span class="line">form_obj.cleaned_data</span><br><span class="line">&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 4 查看所有不符合校验规则以及不符合的原因</span></span><br><span class="line">form_obj.errors</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;email&#x27;</span>: [<span class="string">&#x27;Enter a valid email address.&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 5 校验数据只校验类中出现的字段 多传不影响 多传的字段直接忽略</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="string">&#x27;hobby&#x27;</span>:<span class="string">&#x27;study&#x27;</span>&#125;)</span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 6 校验数据 默认情况下 类里面所有的字段都必须传值</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;)</span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">也就意味着校验数据的时候 默认情况下数据可以多传但是绝不可能少传</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="渲染标签"><a href="#渲染标签" class="headerlink" title="渲染标签"></a>渲染标签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">forms组件只会自动帮你渲染获取用户输入的标签(input select radio checkbox)</span></span><br><span class="line"><span class="string">不能帮你渲染提交按钮</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 1 先产生一个空对象</span></span><br><span class="line">    form_obj = MyForm()</span><br><span class="line">    <span class="comment"># 2 直接将该空对象传递给html页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端利用空对象做操作</span></span><br><span class="line">    &lt;p&gt;第一种渲染方式:代码书写极少，封装程度太高 不便于后续的扩展 一般情况下只在本地测试使用&lt;/p&gt;</span><br><span class="line">    &#123;&#123; form_obj.as_p &#125;&#125;</span><br><span class="line">    &#123;&#123; form_obj.as_ul &#125;&#125;</span><br><span class="line">    &#123;&#123; form_obj.as_table &#125;&#125;</span><br><span class="line">    &lt;p&gt;第二种渲染方式:可扩展性很强 但是需要书写的代码太多  一般情况下不用&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.username.label &#125;&#125;:&#123;&#123; form_obj.username &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.password.label &#125;&#125;:&#123;&#123; form_obj.password &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.email.label &#125;&#125;:&#123;&#123; form_obj.email &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;第三种渲染方式(推荐使用):代码书写简单 并且扩展性也高&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> form <span class="keyword">in</span> form_obj %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; form.label &#125;&#125;:&#123;&#123; form &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">label属性默认展示的是类中定义的字段首字母大写的形式</span></span><br><span class="line"><span class="string">也可以自己修改 直接给字段对象加label属性即可</span></span><br><span class="line"><span class="string">username = forms.CharField(min_length=3,max_length=8,label=&#x27;用户名&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="展示提示信息"><a href="#展示提示信息" class="headerlink" title="展示提示信息"></a>展示提示信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">浏览器会自动帮你校验数据 但是前端的校验弱不禁风</span></span><br><span class="line"><span class="string">如何让浏览器不做校验</span></span><br><span class="line"><span class="string">&lt;form action=&quot;&quot; method=&quot;post&quot; novalidate&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 1 先产生一个空对象</span></span><br><span class="line">    form_obj = MyForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 2.获取用户数据并且校验</span></span><br><span class="line">        form_obj = MyForm(request.POST)</span><br><span class="line">        <span class="comment"># 3.判断数据是否合法</span></span><br><span class="line">        <span class="keyword">if</span> form_obj.is_valid():</span><br><span class="line">            <span class="comment"># 4.如果合法 操作数据库存储数据</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">        <span class="comment"># 5.不合法 有错误</span></span><br><span class="line">    <span class="comment"># 2 直接将该空对象传递给html页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> form <span class="keyword">in</span> form_obj %&#125;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &#123;&#123; form.label &#125;&#125;:&#123;&#123; form &#125;&#125;</span><br><span class="line">            &lt;span style=<span class="string">&quot;color: red&quot;</span>&gt;&#123;&#123; form.errors<span class="number">.0</span> &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对错误的提示信息还可以自己自定制</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span>(forms.Form):</span><br><span class="line">    <span class="comment"># username字符串类型最小3位最大8位</span></span><br><span class="line">    username = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">                               error_messages=&#123;</span><br><span class="line">                                   <span class="string">&#x27;min_length&#x27;</span>:<span class="string">&#x27;用户名最少3位&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;max_length&#x27;</span>:<span class="string">&#x27;用户名最大8位&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;required&#x27;</span>:<span class="string">&quot;用户名不能为空&quot;</span></span><br><span class="line">                               &#125;</span><br><span class="line">                               )</span><br><span class="line">    <span class="comment"># password字符串类型最小3位最大8位</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">                               error_messages=&#123;</span><br><span class="line">                                   <span class="string">&#x27;min_length&#x27;</span>: <span class="string">&#x27;密码最少3位&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;密码最大8位&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;required&#x27;</span>: <span class="string">&quot;密码不能为空&quot;</span></span><br><span class="line">                               &#125;</span><br><span class="line">                               )</span><br><span class="line">    <span class="comment"># email字段必须符合邮箱格式  xxx@xx.com</span></span><br><span class="line">    email = forms.EmailField(label=<span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">                             error_messages=&#123;</span><br><span class="line">                                 <span class="string">&#x27;invalid&#x27;</span>:<span class="string">&#x27;邮箱格式不正确&#x27;</span>,</span><br><span class="line">                                 <span class="string">&#x27;required&#x27;</span>: <span class="string">&quot;邮箱不能为空&quot;</span></span><br><span class="line">                             &#125;</span><br><span class="line">                             )</span><br></pre></td></tr></table></figure><h3 id="钩子函数-HOOK"><a href="#钩子函数-HOOK" class="headerlink" title="钩子函数(HOOK)"></a>钩子函数(HOOK)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在特定的节点自动触发完成响应操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">钩子函数在forms组件中就类似于第二道关卡，能够让我们自定义校验规则</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在forms组件中有两类钩子</span></span><br><span class="line"><span class="string">1.局部钩子</span></span><br><span class="line"><span class="string">当你需要给单个字段增加校验规则的时候可以使用</span></span><br><span class="line"><span class="string">2.全局钩子</span></span><br><span class="line"><span class="string">  当你需要给多个字段增加校验规则的时候可以使用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 实际案例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.校验用户名中不能含有666只是校验username字段  局部钩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.校验密码和确认密码是否一致password confirm两个字段全局钩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 钩子函数  在类里面书写方法即可</span></span><br><span class="line">    <span class="comment"># 局部钩子</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_username</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取到用户名</span></span><br><span class="line">        username = self.cleaned_data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;666&#x27;</span> <span class="keyword">in</span> username:</span><br><span class="line">            <span class="comment"># 提示前端展示错误信息</span></span><br><span class="line">            self.add_error(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;光喊666是不行滴～&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将钩子函数钩去出来数据再放回去</span></span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局钩子</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean</span>(<span class="params">self</span>):</span><br><span class="line">        password = self.cleaned_data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        confirm_password = self.cleaned_data.get(<span class="string">&#x27;confirm_password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> confirm_password == password:</span><br><span class="line">            self.add_error(<span class="string">&#x27;confirm_password&#x27;</span>,<span class="string">&#x27;两次密码不一致&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将钩子函数钩出来数据再放回去</span></span><br><span class="line">        <span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure><h3 id="forms组件其他参数及补充知识点"><a href="#forms组件其他参数及补充知识点" class="headerlink" title="forms组件其他参数及补充知识点"></a>forms组件其他参数及补充知识点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">label字段名</span><br><span class="line">error_messages  自定义报错信息</span><br><span class="line">initial  默认值</span><br><span class="line">required  控制字段是否必填</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.字段没有样式</span></span><br><span class="line"><span class="string">2.针对不同类型的input如何修改</span></span><br><span class="line"><span class="string">text</span></span><br><span class="line"><span class="string">password</span></span><br><span class="line"><span class="string">date</span></span><br><span class="line"><span class="string">radio</span></span><br><span class="line"><span class="string">checkbox</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">widget=forms.widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;form-control c1 c2&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 多个属性值的话 直接空格隔开即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一道关卡里面还支持正则校验</span></span><br><span class="line">validators=[</span><br><span class="line">            RegexValidator(<span class="string">r&#x27;^[0-9]+$&#x27;</span>, <span class="string">&#x27;请输入数字&#x27;</span>),</span><br><span class="line">            RegexValidator(<span class="string">r&#x27;^159[0-9]+$&#x27;</span>, <span class="string">&#x27;数字必须以159开头&#x27;</span>)</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>其他类型渲染</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># radio</span></span><br><span class="line">    gender = forms.ChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">&quot;男&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;女&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;保密&quot;</span>)),</span><br><span class="line">        label=<span class="string">&quot;性别&quot;</span>,</span><br><span class="line">        initial=<span class="number">3</span>,</span><br><span class="line">        widget=forms.widgets.RadioSelect()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># select</span></span><br><span class="line">    hobby = forms.ChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">&quot;篮球&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;足球&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;双色球&quot;</span>),),</span><br><span class="line">        label=<span class="string">&quot;爱好&quot;</span>,</span><br><span class="line">        initial=<span class="number">3</span>,</span><br><span class="line">        widget=forms.widgets.Select()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 多选</span></span><br><span class="line">    hobby1 = forms.MultipleChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">&quot;篮球&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;足球&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;双色球&quot;</span>),),</span><br><span class="line">        label=<span class="string">&quot;爱好&quot;</span>,</span><br><span class="line">        initial=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">        widget=forms.widgets.SelectMultiple()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 单选checkbox</span></span><br><span class="line">    keep = forms.ChoiceField(</span><br><span class="line">        label=<span class="string">&quot;是否记住密码&quot;</span>,</span><br><span class="line">        initial=<span class="string">&quot;checked&quot;</span>,</span><br><span class="line">        widget=forms.widgets.CheckboxInput()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 多选checkbox</span></span><br><span class="line">    hobby2 = forms.MultipleChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">&quot;篮球&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;足球&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;双色球&quot;</span>),),</span><br><span class="line">        label=<span class="string">&quot;爱好&quot;</span>,</span><br><span class="line">        initial=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">        widget=forms.widgets.CheckboxSelectMultiple()</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="forms组件源码"><a href="#forms组件源码" class="headerlink" title="forms组件源码"></a>forms组件源码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">切入点:</span></span><br><span class="line"><span class="string">form_obj.is_valid()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">self</span>):</span><br><span class="line">        </span><br><span class="line">   <span class="keyword">return</span> self.is_bound <span class="keyword">and</span> <span class="keyword">not</span> self.errors</span><br><span class="line">   <span class="comment"># 如果is_valid要返回True的话 那么self.is_bound要为True self.errors要为Flase</span></span><br><span class="line">  </span><br><span class="line">self.is_bound = data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> files <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>  <span class="comment"># 只要你传值了肯定为True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">errors</span>(<span class="params">self</span>):       </span><br><span class="line">        <span class="keyword">if</span> self._errors <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.full_clean()</span><br><span class="line">        <span class="keyword">return</span> self._errors</span><br><span class="line"></span><br><span class="line"><span class="comment"># forms组件所有的功能基本都出自于该方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">full_clean</span>(<span class="params">self</span>):</span><br><span class="line">  self._clean_fields()  <span class="comment"># 校验字段 + 局部钩子</span></span><br><span class="line">    self._clean_form()  <span class="comment"># 全局钩子</span></span><br><span class="line">    self._post_clean()  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django自定义分页器与批量插入</title>
      <link href="/2022/07/06/Django%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5%E5%99%A8%E4%B8%8E%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/"/>
      <url>/2022/07/06/Django%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5%E5%99%A8%E4%B8%8E%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="分页器简单逻辑"><a href="#分页器简单逻辑" class="headerlink" title="分页器简单逻辑"></a>分页器简单逻辑</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">per_page_num = 10</span></span><br><span class="line"><span class="string">current_page    start_page  end_page</span></span><br><span class="line"><span class="string">1                0          10</span></span><br><span class="line"><span class="string">2                10          20</span></span><br><span class="line"><span class="string">起始页，终止页与数量的关系</span></span><br><span class="line"><span class="string">start_page = (current_page-1)*per_page_num</span></span><br><span class="line"><span class="string">end_page = current_page*per_page_num</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pagination</span>(<span class="params">request</span>):</span><br><span class="line">    book_list = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 想访问哪一页</span></span><br><span class="line">    current_page = request.GET.get(<span class="string">&#x27;page&#x27;</span>,<span class="number">1</span>)  <span class="comment"># 如果获取不到当前页码 就展示第一页</span></span><br><span class="line">    <span class="comment"># 数据类型转换</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        current_page = <span class="built_in">int</span>(current_page)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        current_page = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 每页展示多少条</span></span><br><span class="line">    per_page_num = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 起始位置</span></span><br><span class="line">    start_page = (current_page - <span class="number">1</span>) * per_page_num</span><br><span class="line">    <span class="comment"># 终止位置</span></span><br><span class="line">    end_page = current_page * per_page_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算出到底需要多少页</span></span><br><span class="line">    all_count = book_list.count()</span><br><span class="line"></span><br><span class="line">    page_count, more = <span class="built_in">divmod</span>(all_count, per_page_num)</span><br><span class="line">    <span class="keyword">if</span> more:</span><br><span class="line">        page_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    page_html = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    xxx = current_page</span><br><span class="line">    <span class="keyword">if</span> current_page &lt; <span class="number">6</span>:</span><br><span class="line">        current_page = <span class="number">6</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(current_page-<span class="number">5</span>,current_page+<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> xxx == i:</span><br><span class="line">            page_html += <span class="string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span>%(i,i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            page_html += <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span>%(i,i)</span><br><span class="line">    book_queryset = book_list[start_page:end_page]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;ab_batch.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h3 id="自定义分页器封装"><a href="#自定义分页器封装" class="headerlink" title="自定义分页器封装"></a>自定义分页器封装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pagination</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, current_page, all_count, per_page_num=<span class="number">6</span>, pager_count=<span class="number">11</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        封装分页相关数据</span></span><br><span class="line"><span class="string">        :param current_page: 当前页</span></span><br><span class="line"><span class="string">        :param all_count:    数据库中的数据总条数</span></span><br><span class="line"><span class="string">        :param per_page_num: 每页显示的数据条数</span></span><br><span class="line"><span class="string">        :param pager_count:  最多显示的页码个数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            current_page = <span class="built_in">int</span>(current_page)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            current_page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current_page &lt; <span class="number">1</span>:</span><br><span class="line">            current_page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.current_page = current_page</span><br><span class="line"></span><br><span class="line">        self.all_count = all_count</span><br><span class="line">        self.per_page_num = per_page_num</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 总页码</span></span><br><span class="line">        all_pager, tmp = <span class="built_in">divmod</span>(all_count, per_page_num)</span><br><span class="line">        <span class="keyword">if</span> tmp:</span><br><span class="line">            all_pager += <span class="number">1</span></span><br><span class="line">        self.all_pager = all_pager</span><br><span class="line"></span><br><span class="line">        self.pager_count = pager_count</span><br><span class="line">        self.pager_count_half = <span class="built_in">int</span>((pager_count - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将方法伪装成属性，不用加括号也可以运行</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.current_page - <span class="number">1</span>) * self.per_page_num</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.current_page * self.per_page_num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 如果总页码 &lt; 11个：</span></span><br><span class="line">        <span class="keyword">if</span> self.all_pager &lt;= self.pager_count:</span><br><span class="line">            pager_start = <span class="number">1</span></span><br><span class="line">            pager_end = self.all_pager + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 总页码  &gt; 11</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 当前页如果&lt;=11/2(页面上最多显示11/2个页码)</span></span><br><span class="line">            <span class="keyword">if</span> self.current_page &lt;= self.pager_count_half:</span><br><span class="line">                pager_start = <span class="number">1</span></span><br><span class="line">                pager_end = self.pager_count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前页大于5</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 页码翻到最后 如果当前页加页码个数一半大于总页数则  起始页=总页数-页码数+1</span></span><br><span class="line">                <span class="keyword">if</span> (self.current_page + self.pager_count_half) &gt; self.all_pager:</span><br><span class="line">                    pager_end = self.all_pager + <span class="number">1</span></span><br><span class="line">                    pager_start = self.all_pager - self.pager_count + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pager_start = self.current_page - self.pager_count_half</span><br><span class="line">                    pager_end = self.current_page + self.pager_count_half + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        page_html_list = []</span><br><span class="line">        <span class="comment"># 添加前面的nav和ul标签</span></span><br><span class="line">        page_html_list.append(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                    &lt;nav aria-label=&#x27;Page navigation&gt;&#x27;</span></span><br><span class="line"><span class="string">                    &lt;ul class=&#x27;pagination&#x27;&gt;</span></span><br><span class="line"><span class="string">                &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        first_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (<span class="number">1</span>)</span><br><span class="line">        page_html_list.append(first_page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.current_page &lt;= <span class="number">1</span>:</span><br><span class="line">            prev_page = <span class="string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.current_page - <span class="number">1</span>,)</span><br><span class="line"></span><br><span class="line">        page_html_list.append(prev_page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pager_start, pager_end):</span><br><span class="line">            <span class="keyword">if</span> i == self.current_page:</span><br><span class="line">                temp = <span class="string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (i, i,)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (i, i,)</span><br><span class="line">            page_html_list.append(temp)</span><br><span class="line">        <span class="comment"># 判断是否还有下一页</span></span><br><span class="line">        <span class="keyword">if</span> self.current_page &gt;= self.all_pager:</span><br><span class="line">            next_page = <span class="string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            next_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.current_page + <span class="number">1</span>,)</span><br><span class="line">        page_html_list.append(next_page)</span><br><span class="line"></span><br><span class="line">        last_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.all_pager,)</span><br><span class="line">        page_html_list.append(last_page)</span><br><span class="line">        <span class="comment"># 尾部添加标签</span></span><br><span class="line">        page_html_list.append(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                                           &lt;/nav&gt;</span></span><br><span class="line"><span class="string">                                           &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                                       &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(page_html_list)</span><br></pre></td></tr></table></figure><h3 id="自定义分页器的拷贝及使用"><a href="#自定义分页器的拷贝及使用" class="headerlink" title="自定义分页器的拷贝及使用"></a>自定义分页器的拷贝及使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">自定义的分页器是基于bootstrap样式来的 所以需要提前导入bootstrap,jquery</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_pagination</span>(<span class="params">request</span>):</span><br><span class="line">    book_queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    current_page = request.GET.get(<span class="string">&#x27;page&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    all_count = book_queryset.count()</span><br><span class="line">    <span class="comment"># 1 传值生成对象</span></span><br><span class="line">    page_obj = Pagination(current_page=current_page,all_count=all_count)</span><br><span class="line">    <span class="comment"># 2 直接对总数据进行切片操作</span></span><br><span class="line">    page_queryset = book_queryset[page_obj.start:page_obj.end]</span><br><span class="line">    <span class="comment"># 3 将page_queryset传递到页面 替换之前的book_queryset</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;pagination.html&#x27;</span>, <span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&#123;% <span class="keyword">for</span> book_obj <span class="keyword">in</span> page_queryset %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; book_obj.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;<span class="comment">#利用自定义分页器直接显示分页器样式#&#125;</span></span><br><span class="line">&#123;&#123; page_obj.page_html|safe &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ab_batch</span>(<span class="params">request</span>):</span><br><span class="line">    book_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="comment"># models.Book.objects.create(title=f&#x27;第&#123;i&#125;本书&#x27;)</span></span><br><span class="line">        book_list.append(models.Book(title=<span class="string">f&#x27;第<span class="subst">&#123;i&#125;</span>本书&#x27;</span>))</span><br><span class="line">    <span class="comment"># 一次性插入减少数据库资源消耗</span></span><br><span class="line">    models.Book.objects.bulk_create(book_list)</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django之Ajax操作</title>
      <link href="/2022/07/03/Django%E4%B9%8BAjax%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/07/03/Django%E4%B9%8BAjax%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">异步提交</span></span><br><span class="line"><span class="string">局部刷新</span></span><br><span class="line"><span class="string">例子:github注册,动态获取用户名实时的跟后端确认并实时展示的前端(局部刷新)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">朝后端发送请求的方式</span></span><br><span class="line"><span class="string">1.浏览器地址栏直接输入url回车    GET请求</span></span><br><span class="line"><span class="string">2.a标签href属性  GET请求</span></span><br><span class="line"><span class="string">3.form表单  GET请求/POST请求</span></span><br><span class="line"><span class="string">    4.ajax       GET请求/POST请求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。（这一特点给用户的感受是在不知不觉中完成请求和响应过程）Ajax我们只使用jQuery封装之后的版本</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="小栗子"><a href="#小栗子" class="headerlink" title="小栗子"></a>小栗子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">页面上有三个input框</span></span><br><span class="line"><span class="string">在前两个框中输入数字 点击按钮 朝后端发送ajax请求</span></span><br><span class="line"><span class="string">后端计算出结果 再返回给前端动态展示的到第三个input框中</span></span><br><span class="line"><span class="string">(整个过程页面不准有刷新,也不能在前端计算)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">$(<span class="string">&#x27;#btn&#x27;</span>).click(function () &#123;</span><br><span class="line">        // 朝后端发送ajax请求</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            // <span class="number">1.</span>指定朝哪个后端发送ajax请求</span><br><span class="line">            url:<span class="string">&#x27;&#x27;</span>, // 不写就是朝当前地址提交</span><br><span class="line">            // <span class="number">2.</span>请求方式</span><br><span class="line">            <span class="built_in">type</span>:<span class="string">&#x27;post&#x27;</span>,  // 不指定默认就是get 都是小写</span><br><span class="line">            // <span class="number">3.</span>数据</span><br><span class="line">            &#123;<span class="comment">#data:&#123;&#x27;username&#x27;:&#x27;jason&#x27;,&#x27;password&#x27;:123&#125;,#&#125;</span></span><br><span class="line">            data:&#123;<span class="string">&#x27;i1&#x27;</span>:$(<span class="string">&#x27;#d1&#x27;</span>).val(),<span class="string">&#x27;i2&#x27;</span>:$(<span class="string">&#x27;#d2&#x27;</span>).val()&#125;,</span><br><span class="line">            // <span class="number">4.</span>回调函数:当后端给你返回结果的时候会自动触发 args接受后端的返回结果</span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">                &#123;<span class="comment">#alert(args)  // 通过DOM操作动态渲染到第三个input里面#&#125;</span></span><br><span class="line">                &#123;<span class="comment">#$(&#x27;#d3&#x27;).val(args)#&#125;</span></span><br><span class="line">                console.log(typeof args)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">                        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">针对后端如果是用HttpResponse返回的数据 回调函数不会自动帮你反序列化</span></span><br><span class="line"><span class="string">如果后端直接用的是JsonResponse返回的数据 回调函数会自动帮你反序列化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">HttpResponse解决方式</span></span><br><span class="line"><span class="string">1.自己在前端利用JSON.parse()</span></span><br><span class="line"><span class="string">2.在ajax里面配置一个参数 dataType:&#x27;JSON&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="前后端传输数据的编码格式-contentType"><a href="#前后端传输数据的编码格式-contentType" class="headerlink" title="前后端传输数据的编码格式(contentType)"></a>前后端传输数据的编码格式(contentType)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们主要研究post请求数据的编码格式</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">get请求数据就是直接放在url后面的</span></span><br><span class="line"><span class="string">url?username=jason&amp;password=123</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 可以朝后端发送post请求的方式</span></span><br><span class="line"><span class="string">1.form表单</span></span><br><span class="line"><span class="string">2.ajax请求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">前后端传输数据的编码格式</span></span><br><span class="line"><span class="string">urlencoded</span></span><br><span class="line"><span class="string">formdata</span></span><br><span class="line"><span class="string">json</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 研究form表单</span></span><br><span class="line">默认的数据编码格式是urlencoded</span><br><span class="line">  数据格式:username=jason&amp;password=<span class="number">123</span></span><br><span class="line">  django后端针对符合urlencoded编码格式的数据都会自动帮你解析封装到request.POST中</span><br><span class="line">  username=jason&amp;password=<span class="number">123</span>&gt;&gt;&gt; request.POST</span><br><span class="line">  </span><br><span class="line">如果把编码格式改成formdata，那么针对普通的键值对还是解析到request.POST中将文件解析到request.FILES中</span><br><span class="line">form表单是没有办法发送json格式数据的</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 研究ajax</span></span><br><span class="line">默认的编码格式也是urlencoded 数据格式:username=jason&amp;age=<span class="number">20</span></span><br><span class="line">django后端针对符合urlencoded编码格式的数据都会自动帮你解析封装到request.POST中</span><br><span class="line">username=jason&amp;age=<span class="number">20</span>&gt;&gt;&gt; request.POST</span><br></pre></td></tr></table></figure><h3 id="ajax发送json格式数据"><a href="#ajax发送json格式数据" class="headerlink" title="ajax发送json格式数据"></a>ajax发送json格式数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">前后端传输数据的时候一定要确保编码格式跟数据真正的格式是一致的</span></span><br><span class="line"><span class="string">&#123;&quot;username&quot;:&quot;jason&quot;,&quot;age&quot;:25&#125;  </span></span><br><span class="line"><span class="string">在request.POST里面肯定找不到；django针对json格式的数据 不会做任何的处理 </span></span><br><span class="line"><span class="string">request对象方法补充</span></span><br><span class="line"><span class="string">request.is_ajax()</span></span><br><span class="line"><span class="string">判断当前请求是否是ajax请求 返回布尔值</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&#x27;#d1&#x27;</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="built_in">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            data:JSON.stringify(&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">25</span>&#125;),</span><br><span class="line">            contentType:<span class="string">&#x27;application/json&#x27;</span>,  // 指定编码格式</span><br><span class="line">            success:function () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        json_bytes = request.body</span><br><span class="line">        json_str = json_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        json_dict = json.loads(json_str)</span><br><span class="line">        <span class="comment"># json.loads括号内如果传入了一个二进制格式的数据那么内部自动解码再反序列化</span></span><br><span class="line">        json_dict = json.loads(json_bytes)</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ajax发送json格式数据需要注意点</span></span><br><span class="line"><span class="string">1.contentType参数指定成:application/json</span></span><br><span class="line"><span class="string">2.数据是真正的json格式数据</span></span><br><span class="line"><span class="string">3.django后端不会帮你处理json格式数据需要你自己去request.body获取并处理</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ajax发送文件"><a href="#ajax发送文件" class="headerlink" title="ajax发送文件"></a>ajax发送文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ajax发送文件需要借助于js内置对象FormData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 点击按钮朝后端发送普通键值对和文件数据</span><br><span class="line">    $(<span class="string">&#x27;#d4&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>,function () &#123;</span><br><span class="line">        // <span class="number">1</span> 需要先利用FormData内置对象</span><br><span class="line">        let formDateObj = new FormData();</span><br><span class="line">        // <span class="number">2</span> 添加普通的键值对</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;username&#x27;</span>,$(<span class="string">&#x27;#d1&#x27;</span>).val());</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;password&#x27;</span>,$(<span class="string">&#x27;#d2&#x27;</span>).val());</span><br><span class="line">        // <span class="number">3</span> 添加文件对象</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;myfile&#x27;</span>,$(<span class="string">&#x27;#d3&#x27;</span>)[<span class="number">0</span>].files[<span class="number">0</span>])</span><br><span class="line">        // <span class="number">4</span> 将对象基于ajax发送给后端</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="built_in">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            data:formDateObj,  // 直接将对象放在data后面即可</span><br><span class="line">            // ajax发送文件必须要指定的两个参数</span><br><span class="line">            contentType:false,  // 不需使用任何编码 django后端能够自动识别formdata对象</span><br><span class="line">            processData:false,  // 告诉你的浏览器不要对你的数据进行任何处理</span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_file</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(request.POST)</span><br><span class="line">            <span class="built_in">print</span>(request.FILES)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;ab_file.html&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">总结:</span><br><span class="line"><span class="number">1.</span>需要利用内置对象FormData</span><br><span class="line">// <span class="number">2</span> 添加普通的键值对</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;username&#x27;</span>,$(<span class="string">&#x27;#d1&#x27;</span>).val());</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;password&#x27;</span>,$(<span class="string">&#x27;#d2&#x27;</span>).val());</span><br><span class="line">        // <span class="number">3</span> 添加文件对象</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;myfile&#x27;</span>,$(<span class="string">&#x27;#d3&#x27;</span>)[<span class="number">0</span>].files[<span class="number">0</span>])</span><br><span class="line"><span class="number">2.</span>需要指定两个关键性的参数</span><br><span class="line">contentType:false,  // 不需使用任何编码 django后端能够自动识别formdata对象</span><br><span class="line">        processData:false,  // 告诉你的浏览器不要对你的数据进行任何处理</span><br><span class="line"><span class="number">3.</span>django后端能够直接识别到formdata对象并且能够将内部的普通键值自动解析并封装到request.POST中 文件数据自动解析并封装到request.FILES中</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="django自带的序列化组件-drf做铺垫"><a href="#django自带的序列化组件-drf做铺垫" class="headerlink" title="django自带的序列化组件(drf做铺垫)"></a>django自带的序列化组件(drf做铺垫)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需求:在前端给我获取到后端用户表里面所有的数据 并且要是列表套字典</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_ser</span>(<span class="params">request</span>):</span><br><span class="line">    user_queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    user_list = []</span><br><span class="line">    <span class="comment"># 数据格式[&#123;&#125;,&#123;&#125;,&#123;&#125;……]</span></span><br><span class="line">    <span class="keyword">for</span> user_obj <span class="keyword">in</span> user_queryset:</span><br><span class="line">        tmp = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: user_obj.<span class="built_in">id</span>,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: user_obj.name,</span><br><span class="line">            <span class="string">&#x27;age&#x27;</span>: user_obj.age,</span><br><span class="line">            <span class="string">&#x27;gender&#x27;</span>:user_obj.get_gender_display()</span><br><span class="line">        &#125;</span><br><span class="line">        user_list.append(tmp)</span><br><span class="line">    <span class="comment"># 默认只能序列化字典 序列化其他需要加safe参数</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(user_list, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 序列化</span></span><br><span class="line">    res = serializers.serialize(<span class="string">&#x27;json&#x27;</span>,user_queryset)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;会自动帮你将数据变成json格式的字符串 并且内部非常的全面&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string"> &#123;&quot;pk&quot;: 1, &quot;username&quot;: &quot;jason&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;male&quot;&#125;, </span></span><br><span class="line"><span class="string"> &#123;&quot;pk&quot;: 2, &quot;username&quot;: &quot;egon&quot;, &quot;age&quot;: 31, &quot;gender&quot;: &quot;female&quot;&#125;,</span></span><br><span class="line"><span class="string"> &#123;&quot;pk&quot;: 3, &quot;username&quot;: &quot;kevin&quot;, &quot;age&quot;: 32, &quot;gender&quot;: &quot;others&quot;&#125;, </span></span><br><span class="line"><span class="string"> &#123;&quot;pk&quot;: 4, &quot;username&quot;: &quot;tank&quot;, &quot;age&quot;: 40, &quot;gender&quot;: 4&#125;</span></span><br><span class="line"><span class="string"> ]</span></span><br><span class="line"><span class="string">              </span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">&#123;   &quot;model&quot;: &quot;app01.user&quot;, </span></span><br><span class="line"><span class="string">    &quot;pk&quot;: 1, </span></span><br><span class="line"><span class="string">    &quot;fields&quot;: &#123;&quot;username&quot;: &quot;jason&quot;, &quot;age&quot;: 25, &quot;gender&quot;: 1&#125;&#125;, </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#123;   &quot;model&quot;: &quot;app01.user&quot;, </span></span><br><span class="line"><span class="string">    &quot;pk&quot;: 2, </span></span><br><span class="line"><span class="string">    &quot;fields&quot;: &#123;&quot;username&quot;: &quot;egon&quot;, &quot;age&quot;: 31, &quot;gender&quot;: 2&#125;&#125;, </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#123;   &quot;model&quot;: &quot;app01.user&quot;, </span></span><br><span class="line"><span class="string">    &quot;pk&quot;: 3, </span></span><br><span class="line"><span class="string">    &quot;fields&quot;: &#123;&quot;username&quot;: &quot;kevin&quot;, &quot;age&quot;: 32, &quot;gender&quot;: 3&#125;&#125;,</span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">&#123;   &quot;model&quot;: &quot;app01.user&quot;, </span></span><br><span class="line"><span class="string">    &quot;pk&quot;: 4, </span></span><br><span class="line"><span class="string">    &quot;fields&quot;: &#123;&quot;username&quot;: &quot;tank&quot;, &quot;age&quot;: 40, &quot;gender&quot;: 4&#125;&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ajax结合layer实现删除弹窗"><a href="#ajax结合layer实现删除弹窗" class="headerlink" title="ajax结合layer实现删除弹窗"></a>ajax结合layer实现删除弹窗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">userlist</span>(<span class="params">request</span>):</span><br><span class="line">    user_queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    back_dict = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="built_in">id</span> = request.POST.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        models.User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="built_in">id</span>).delete()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dict)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;userlist.html&#x27;</span>, <span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">        &lt;table <span class="keyword">class</span>=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;name&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;age&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;gender&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">            &#123;% <span class="keyword">for</span> user_obj <span class="keyword">in</span> user_queryset %&#125;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; user_obj.<span class="built_in">id</span> &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; user_obj.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; user_obj.age &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; user_obj.gender &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;a href=<span class="string">&quot;javascript:;&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;btn btn-danger del&quot;</span> del_id=<span class="string">&quot;&#123;&#123; user_obj.id &#125;&#125;&quot;</span></span><br><span class="line">                           <span class="built_in">id</span>=<span class="string">&quot;del_&#123;&#123; user_obj.id &#125;&#125;&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ajax</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&#x27;.del&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> id = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;del_id&#x27;</span>)</span><br><span class="line">        <span class="keyword">var</span> currentBtn = $(<span class="variable language_">this</span>)</span><br><span class="line">        <span class="comment">// alert(id)</span></span><br><span class="line">        layer.<span class="title function_">confirm</span>(<span class="string">&#x27;您确定要删除吗？&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">btn</span>: [<span class="string">&#x27;确定&#x27;</span>, <span class="string">&#x27;取消&#x27;</span>] <span class="comment">//按钮</span></span><br><span class="line">        &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: &#123;<span class="string">&#x27;id&#x27;</span>: id&#125;,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (args.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="comment">// layer.msg(args.msg, &#123;icon: 1&#125;, function () &#123;</span></span><br><span class="line">                            <span class="comment">// location.reload()</span></span><br><span class="line">                        <span class="comment">// &#125;)</span></span><br><span class="line">                        <span class="comment">// 2.利用DOM操作 动态刷新tr标签</span></span><br><span class="line">                        layer.<span class="title function_">msg</span>(args.<span class="property">msg</span>,&#123;<span class="attr">icon</span>:<span class="number">1</span>&#125;)</span><br><span class="line">                        <span class="comment">// $(this).parent().parent().remove()此时this指向当前函数</span></span><br><span class="line">                        currentBtn.<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">remove</span>()</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        layer.<span class="title function_">msg</span>(args.<span class="property">msg</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            layer.<span class="title function_">msg</span>(<span class="string">&#x27;取消删除&#x27;</span>, &#123;</span><br><span class="line">                <span class="comment">// time: 20000, //20s后自动关闭</span></span><br><span class="line">                <span class="comment">// btn: [&#x27;明白了&#x27;, &#x27;知道了&#x27;]</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>刷新页面 location.reload()</span><br><span class="line"><span class="number">2.</span>利用DOM操作 动态刷新tr标签 currentBtn.parent().parent().remove()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORM案例及多对多关系创建</title>
      <link href="/2022/06/30/Django%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/"/>
      <url>/2022/06/30/Django%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/</url>
      
        <content type="html"><![CDATA[<h3 id="图书管理的增删改查"><a href="#图书管理的增删改查" class="headerlink" title="图书管理的增删改查"></a>图书管理的增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect,HttpResponse</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># 首页</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;home.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先查询出所有的书籍信息 传递给html页面</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_list</span>(<span class="params">request</span>):</span><br><span class="line">    book_queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;book_list.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 获取前端提交过来的所有数据</span></span><br><span class="line">        title = request.POST.get(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">        price = request.POST.get(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">        publish_date = request.POST.get(<span class="string">&quot;publish_date&quot;</span>)</span><br><span class="line">        publish_id = request.POST.get(<span class="string">&quot;publish&quot;</span>)</span><br><span class="line">        authors_list = request.POST.getlist(<span class="string">&quot;authors&quot;</span>)  <span class="comment"># [1,2,3,4,]</span></span><br><span class="line">        <span class="comment"># 操作数据库存储数据</span></span><br><span class="line">        book_obj = models.Book.objects.create(title=title,price=price,publish_date=publish_date,publish_id=publish_id)</span><br><span class="line">        <span class="comment"># 书籍与作者的关系表</span></span><br><span class="line">        book_obj.authors.add(*authors_list)</span><br><span class="line">        <span class="comment"># 跳转到书籍的展示页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;book_list&#x27;</span>)</span><br><span class="line">    <span class="comment"># 先获取当前系统中所有的出版社信息和作者信息</span></span><br><span class="line">    publish_queryset = models.Publish.objects.<span class="built_in">all</span>()</span><br><span class="line">    author_queryset = models.Author.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;book_add.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_edit</span>(<span class="params">request,edit_id</span>):</span><br><span class="line">    <span class="comment"># 获取当前用户想要编辑的书籍对象 展示给用户看</span></span><br><span class="line">    edit_obj = models.Book.objects.<span class="built_in">filter</span>(pk=edit_id).first()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.POST.get(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">        price = request.POST.get(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">        publish_date = request.POST.get(<span class="string">&quot;publish_date&quot;</span>)</span><br><span class="line">        publish_id = request.POST.get(<span class="string">&quot;publish&quot;</span>)</span><br><span class="line">        authors_list = request.POST.getlist(<span class="string">&quot;authors&quot;</span>)  <span class="comment"># [1,2,3,4,]</span></span><br><span class="line">        models.Book.objects.<span class="built_in">filter</span>(pk=edit_id).update(title=title,price=price,</span><br><span class="line">        publish_date=publish_date,publish_id=publish_id)</span><br><span class="line">        <span class="comment"># 该第三张关系表</span></span><br><span class="line">        edit_obj.authors.<span class="built_in">set</span>(authors_list)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;book_list&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    publish_queryset = models.Publish.objects.<span class="built_in">all</span>()</span><br><span class="line">    author_queryset = models.Author.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;book_edit.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_delete</span>(<span class="params">request,delete_id</span>):</span><br><span class="line">    <span class="comment"># 简单粗暴 直接删除</span></span><br><span class="line">    models.Book.objects.<span class="built_in">filter</span>(pk=delete_id).delete()</span><br><span class="line">    <span class="comment"># 直接跳转到展示页</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;book_list&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="choices参数-数据库字段设计常见"><a href="#choices参数-数据库字段设计常见" class="headerlink" title="choices参数(数据库字段设计常见)"></a>choices参数(数据库字段设计常见)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 针对某个可以列举完全的可能性字段，我们应该如何存储</span></span><br><span class="line"><span class="comment"># 只要某个字段的可能性是可以列举完全的，那么一般情况下都会采用choices参数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    <span class="comment"># 性别</span></span><br><span class="line">    gender_choices = (</span><br><span class="line">        (<span class="number">1</span>,<span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>,<span class="string">&#x27;其他&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    gender = models.IntegerField(choices=gender_choices)</span><br><span class="line">    </span><br><span class="line">    score_choices = (</span><br><span class="line">        (<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;优秀&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;良好&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;及格&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;不合格&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 保证字段类型跟列举出来的元祖第一个数据类型一致即可</span></span><br><span class="line">    score = models.CharField(choices=score_choices,null=<span class="literal">True</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.gender字段存的数字不在上述元祖列举的范围内容</span></span><br><span class="line"><span class="string">    2.如果在 如何获取对应的中文信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">    <span class="comment"># models.User.objects.create(username=&#x27;jason&#x27;,age=18,gender=1)</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username=&#x27;egon&#x27;,age=85,gender=2)</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username=&#x27;tank&#x27;,age=40,gender=3)</span></span><br><span class="line">    <span class="comment"># 存的时候 没有列举出来的数字也能存（范围还是按照字段类型决定）</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username=&#x27;tony&#x27;,age=45,gender=4)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># print(user_obj.gender)</span></span><br><span class="line">    <span class="comment"># 只要是choices参数的字段 如果你想要获取对应信息 固定写法 get_字段名_display()</span></span><br><span class="line">    <span class="comment"># print(user_obj.get_gender_display())</span></span><br><span class="line"></span><br><span class="line">    user_obj = models.User.objects.<span class="built_in">filter</span>(pk=<span class="number">4</span>).first()</span><br><span class="line">    <span class="comment"># 如果没有对应关系 那么字段是什么还是展示什么</span></span><br><span class="line">    <span class="built_in">print</span>(user_obj.get_gender_display())  <span class="comment"># 4</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="MTV与MVC模型"><a href="#MTV与MVC模型" class="headerlink" title="MTV与MVC模型"></a>MTV与MVC模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MTV:Django号称是MTV模型</span></span><br><span class="line">M:models</span><br><span class="line">T:templates</span><br><span class="line">V:views</span><br><span class="line">    </span><br><span class="line"><span class="comment"># MVC:其实django本质也是MVC</span></span><br><span class="line">M:models</span><br><span class="line">V:views</span><br><span class="line">C:controller</span><br><span class="line">  </span><br><span class="line"><span class="comment"># vue框架:MVVM模型</span></span><br></pre></td></tr></table></figure><h3 id="多对多三种创建方式"><a href="#多对多三种创建方式" class="headerlink" title="多对多三种创建方式"></a>多对多三种创建方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全自动:利用orm自动帮我们创建第三张关系表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">优点:代码不需要你写 非常的方便 还支持orm提供操作第三张关系表的方法...</span></span><br><span class="line"><span class="string">不足之处:第三张关系表的扩展性极差(没有办法额外添加字段...)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 纯手动</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Book2Author</span>(models.Model):</span><br><span class="line">    book_id = models.ForeignKey(to=<span class="string">&#x27;Book&#x27;</span>)</span><br><span class="line">    author_id = models.ForeignKey(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  优点:第三张表完全取决于你自己进行额外的扩展</span></span><br><span class="line"><span class="string">  不足之处:需要写的代码较多，不能够再使用orm提供的简单的方法;</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 半自动</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>,</span><br><span class="line">                                     through=<span class="string">&#x27;Book2Author&#x27;</span>,</span><br><span class="line">                                     through_fields=(<span class="string">&#x27;book&#x27;</span>,<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">                                     )</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># books = models.ManyToManyField(to=&#x27;Book&#x27;,</span></span><br><span class="line">    <span class="comment">#                                  through=&#x27;Book2Author&#x27;,</span></span><br><span class="line">    <span class="comment">#                                  through_fields=(&#x27;author&#x27;,&#x27;book&#x27;)</span></span><br><span class="line">    <span class="comment">#                                  )</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book2Author</span>(models.Model):</span><br><span class="line">    book = models.ForeignKey(to=<span class="string">&#x27;Book&#x27;</span>)</span><br><span class="line">    author = models.ForeignKey(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">through_fields字段先后顺序</span></span><br><span class="line"><span class="string">    判断的本质：</span></span><br><span class="line"><span class="string">        通过第三张表查询对应的表 需要用到哪个字段就把哪个字段放前面</span></span><br><span class="line"><span class="string">    你也可以简化判断</span></span><br><span class="line"><span class="string">        当前表是谁 就把对应的关联字段放前面</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">半自动:可以使用orm的正反向查询 但是没法使用add,set,remove,clear这四个方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">什么时候用自动，什么时候用手动？第三张表只有关联字段，用自动  第三张表有扩展字段，需要手动写</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django模型层</title>
      <link href="/2022/06/26/Django%E6%A8%A1%E5%9E%8B%E5%B1%82/"/>
      <url>/2022/06/26/Django%E6%A8%A1%E5%9E%8B%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="单表查询与外键操作"><a href="#单表查询与外键操作" class="headerlink" title="单表查询与外键操作"></a>单表查询与外键操作</h2><h3 id="单表操作"><a href="#单表操作" class="headerlink" title="单表操作"></a>单表操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django自带的sqlite3数据库对日期格式不是很敏感 处理的时候容易出错</span></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.create(name=&#x27;jason&#x27;,age=18,register_time=&#x27;2002-1-21&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># import datetime</span></span><br><span class="line">    <span class="comment"># ctime = datetime.datetime.now()</span></span><br><span class="line">    <span class="comment"># user_obj = models.User(name=&#x27;keven&#x27;,age=84,register_time=ctime)</span></span><br><span class="line">    <span class="comment"># user_obj.save()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=2).delete()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    pk会自动查找到当前表的主键字段 指代的就是当前表的主键字段</span></span><br><span class="line"><span class="string">    用了pk之后 你就不需要指代当前表的主键字段到底叫什么了</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># user_obj.delete()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># models.User.objects.filter(pk=4).update(name=&#x27;egonDSB&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.get(pk=4)</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=6)</span></span><br><span class="line">    <span class="comment"># get方法返回的直接就是当前数据对象但是该方法不推荐使用 一旦数据不存在该方法会直接报错而filter则不会</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># user_obj.name = &#x27;PPP&#x27;</span></span><br><span class="line">    <span class="comment"># user_obj.save()</span></span><br></pre></td></tr></table></figure><h3 id="必知必会13条"><a href="#必知必会13条" class="headerlink" title="必知必会13条"></a>必知必会13条</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"># 1.all()  查询所有数据</span></span><br><span class="line">   <span class="comment"># 2.filter()     带有过滤条件的查询</span></span><br><span class="line">   <span class="comment"># 3.get()        直接拿数据对象 但是条件不存在直接报错</span></span><br><span class="line">   <span class="comment"># 4.first()      拿queryset里面第一个元素</span></span><br><span class="line">   <span class="comment"># res = models.User.objects.all().first()</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 5.last()</span></span><br><span class="line">   <span class="comment"># res = models.User.objects.all().last()</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 6.values()  可以指定获取的数据字段  select name,age from ...     列表套字典</span></span><br><span class="line">   <span class="comment"># res = models.User.objects.values(&#x27;name&#x27;,&#x27;age&#x27;)  # &lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;jason&#x27;, &#x27;age&#x27;: 18&#125;, &#123;&#x27;name&#x27;: &#x27;egonPPP&#x27;, &#x27;age&#x27;: 84&#125;]&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 7.values_list()  列表套元祖</span></span><br><span class="line">   <span class="comment"># res = models.User.objects.values_list(&#x27;name&#x27;,&#x27;age&#x27;)  # &lt;QuerySet [(&#x27;jason&#x27;, 18), (&#x27;egonPPP&#x27;, 84)]&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">#  # 查看内部封装的sql语句</span></span><br><span class="line">   <span class="comment">#  上述查看sql语句的方式  只能用于queryset对象</span></span><br><span class="line">   <span class="comment">#  只有queryset对象才能够点击query查看内部的sql语句</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 8.distinct()  去重</span></span><br><span class="line">   <span class="comment"># res = models.User.objects.values(&#x27;name&#x27;,&#x27;age&#x27;).distinct()</span></span><br><span class="line">   <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   去重一定要是一模一样的数据</span></span><br><span class="line"><span class="string">   如果带有主键那么肯定不一样 你在往后的查询中一定不要忽略主键</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &quot;&quot;&quot;</span></span><br><span class="line">   <span class="comment"># 9.order_by()</span></span><br><span class="line">   <span class="comment"># res = models.User.objects.order_by(&#x27;age&#x27;)  # 默认升序</span></span><br><span class="line">   <span class="comment"># res = models.User.objects.order_by(&#x27;-age&#x27;)  # 降序</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 10.reverse()  反转的前提是 数据已经排过序了  order_by()</span></span><br><span class="line">   <span class="comment"># res = models.User.objects.all()</span></span><br><span class="line">   <span class="comment"># res1 = models.User.objects.order_by(&#x27;age&#x27;).reverse()</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 11.count()  统计当前数据的个数</span></span><br><span class="line">   <span class="comment"># res = models.User.objects.count()</span></span><br><span class="line">   <span class="comment"># 12.exclude()  排除在外</span></span><br><span class="line">   <span class="comment"># res = models.User.objects.exclude(name=&#x27;jason&#x27;)</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 13.exists()  基本用不到因为数据本身就自带布尔值  返回的是布尔值</span></span><br><span class="line">   <span class="comment"># res = models.User.objects.filter(pk=10).exists()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">当你只是想测试django中的某一个py文件内容 那么你可以不用书写前后端交互的形式</span></span><br><span class="line"><span class="string">而是直接写一个测试脚本即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">脚本代码无论是写在应用下的tests.py还是自己单独开设py文件都可以</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 测试环境的准备 去manage.py中拷贝前四行代码 然后自己写两行</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;day64.settings&quot;</span>)</span><br><span class="line">    <span class="keyword">import</span> django</span><br><span class="line">    django.setup()</span><br><span class="line">    <span class="comment"># 在这个代码块的下面就可以测试django里面的单个py文件了</span></span><br></pre></td></tr></table></figure><h3 id="查看内部sql语句的方式"><a href="#查看内部sql语句的方式" class="headerlink" title="查看内部sql语句的方式"></a>查看内部sql语句的方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">res = models.User.objects.values_list(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)  <span class="comment"># &lt;QuerySet [(&#x27;jason&#x27;, 18), (&#x27;egonPPP&#x27;, 84)]&gt;</span></span><br><span class="line"><span class="built_in">print</span>(res.query)</span><br><span class="line">queryset对象才能够点击query查看内部的sql语句</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2:所有的sql语句都能查看</span></span><br><span class="line"><span class="comment"># 去配置文件中配置一下即可</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;django.db.backends&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="神奇的双下划线查询"><a href="#神奇的双下划线查询" class="headerlink" title="神奇的双下划线查询"></a>神奇的双下划线查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 年龄大于35岁的数据</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__gt=35)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 年龄小于35岁的数据</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__lt=35)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大于等于 小于等于</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__gte=32)</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__lte=32)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 年龄是18 或者 32 或者40</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__in=[18,32,40])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 年龄在18到40岁之间的  首尾都要</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__range=[18,40])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询出名字里面含有s的数据  模糊查询</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(name__contains=&#x27;s&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否区分大小写  查询出名字里面含有p的数据  区分大小写</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(name__contains=&#x27;p&#x27;)</span></span><br><span class="line"><span class="comment"># 忽略大小写</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(name__icontains=&#x27;p&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(name__startswith=&#x27;j&#x27;)</span></span><br><span class="line"><span class="comment"># res1 = models.User.objects.filter(name__endswith=&#x27;j&#x27;)</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查询出注册时间是 2020 1月</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(register_time__month=&#x27;1&#x27;)</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(register_time__year=&#x27;2020&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="一对多外键增删改查"><a href="#一对多外键增删改查" class="headerlink" title="一对多外键增删改查"></a>一对多外键增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line"><span class="comment"># 1  直接写实际字段 id</span></span><br><span class="line"><span class="comment"># models.Book.objects.create(title=&#x27;论语&#x27;,price=899.23,publish_id=1)</span></span><br><span class="line"><span class="comment"># models.Book.objects.create(title=&#x27;聊斋&#x27;,price=444.23,publish_id=2)</span></span><br><span class="line"><span class="comment"># models.Book.objects.create(title=&#x27;老子&#x27;,price=333.66,publish_id=1)</span></span><br><span class="line"><span class="comment"># 2  虚拟字段 对象</span></span><br><span class="line"><span class="comment"># publish_obj = models.Publish.objects.filter(pk=2).first()</span></span><br><span class="line"><span class="comment"># models.Book.objects.create(title=&#x27;红楼梦&#x27;,price=666.23,publish=publish_obj)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line"><span class="comment"># models.Publish.objects.filter(pk=1).delete()  # 级联删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line"><span class="comment"># models.Book.objects.filter(pk=1).update(publish_id=2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># publish_obj = models.Publish.objects.filter(pk=1).first()</span></span><br><span class="line"><span class="comment"># models.Book.objects.filter(pk=1).update(publish=publish_obj)</span></span><br></pre></td></tr></table></figure><h3 id="多对多外键增删改查"><a href="#多对多外键增删改查" class="headerlink" title="多对多外键增删改查"></a>多对多外键增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何给书籍添加作者？</span></span><br><span class="line">    book_obj = models.Book.objects.<span class="built_in">filter</span>(pk=<span class="number">1</span>).first()</span><br><span class="line">    <span class="comment"># print(book_obj.authors)  # 就类似于你已经到了第三张关系表了</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(1)  # 书籍id为1的书籍绑定一个主键为1 的作者</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(2,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj2 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj1,author_obj2)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    add给第三张关系表添加数据</span></span><br><span class="line"><span class="string">        括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(2)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(1,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(author_obj,author_obj1)</span></span><br><span class="line">    <span class="comment"># remove方法括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([1,2])  # 括号内必须给一个可迭代对象</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([3])  # 括号内必须给一个可迭代对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># set括号内必须传一个可迭代对象，该对象内既可以数字也可以对象 并且都支持多个</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([author_obj,author_obj1])  # 括号内必须给一个可迭代对象</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 清空 在第三张关系表中清空某个书籍与作者的绑定关系 clear括号内不要加任何参数</span></span><br><span class="line">    book_obj.authors.clear()</span><br></pre></td></tr></table></figure><h3 id="正反向的概念"><a href="#正反向的概念" class="headerlink" title="正反向的概念"></a>正反向的概念</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正向</span></span><br><span class="line"><span class="comment"># 反向</span></span><br><span class="line">外键字段在我手上那么，我查你就是正向;外键字段如果不在手上，我查你就是反向</span><br><span class="line">  book &gt;&gt;&gt;外键字段在书那儿(正向)&gt;&gt;&gt; publish</span><br><span class="line">  publish&gt;&gt;&gt;外键字段在书那儿(反向)&gt;&gt;&gt;book</span><br><span class="line">  一对一和多对多正反向的判断也是如此</span><br><span class="line">  </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">正向查询按字段   当你的结果可能有多个的时候就需要加.all()</span></span><br><span class="line"><span class="string">反向查询按表名小写 加_set</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="子查询-基于对象的跨表查询"><a href="#子查询-基于对象的跨表查询" class="headerlink" title="子查询(基于对象的跨表查询)"></a>子查询(基于对象的跨表查询)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查询书籍主键为1的出版社</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># # 书查出版社 正向</span></span><br><span class="line">    <span class="comment"># res = book_obj.publish</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.查询书籍主键为2的作者</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># # 书查作者 正向</span></span><br><span class="line">    <span class="comment"># # res = book_obj.authors  # app01.Author.None</span></span><br><span class="line">    <span class="comment"># res = book_obj.authors.all()  # &lt;QuerySet [&lt;Author: Author object&gt;, &lt;Author: Author object&gt;]&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.查询作者jason的电话号码</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name=&#x27;jason&#x27;).first()</span></span><br><span class="line">    <span class="comment"># res = author_obj.author_detail</span></span><br><span class="line">    <span class="comment"># print(res.phone)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    正向什么时候需要加.all()</span></span><br><span class="line"><span class="string">        当你的结果可能有多个的时候就需要加.all()</span></span><br><span class="line"><span class="string">        如果是一个则直接拿到数据对象</span></span><br><span class="line"><span class="string">            book_obj.publish</span></span><br><span class="line"><span class="string">            book_obj.authors.all()</span></span><br><span class="line"><span class="string">            author_obj.author_detail</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 4.查询出版社是东方出版社出版的书</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(name=&#x27;东方出版社&#x27;).first()</span></span><br><span class="line">    <span class="comment"># 出版社查书  反向</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set.all()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.查询作者是jason写过的书</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name=&#x27;jason&#x27;).first()</span></span><br><span class="line">    <span class="comment"># 作者查书      反向</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set.all()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6.查询手机号是110的作者姓名</span></span><br><span class="line">    <span class="comment"># author_detail_obj = models.AuthorDetail.objects.filter(phone=110).first()</span></span><br><span class="line">    <span class="comment"># res = author_detail_obj.author</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    基于对象,反向查询的时候:</span></span><br><span class="line"><span class="string">            当你的查询结果可以有多个的时候 就必须加_set.all()</span></span><br><span class="line"><span class="string">            当你的结果只有一个的时候 不需要加_set.all()</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="联表查询-基于双下划线的跨表查询"><a href="#联表查询-基于双下划线的跨表查询" class="headerlink" title="联表查询(基于双下划线的跨表查询)"></a>联表查询(基于双下划线的跨表查询)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于双下划线的跨表查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.查询jason的手机号和作者姓名</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(name=&#x27;jason&#x27;).values(&#x27;author_detail__phone&#x27;,&#x27;name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.AuthorDetail.objects.filter(author__name=&#x27;jason&#x27;).values(&#x27;phone&#x27;,&#x27;author__name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.查询书籍主键为1的出版社名称和书的名称</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values(&#x27;title&#x27;,&#x27;publish__name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.Publish.objects.filter(book__id=1).values(&#x27;name&#x27;,&#x27;book__title&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.查询书籍主键为1的作者姓名</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values(&#x27;authors__name&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(book__id=1).values(&#x27;name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询书籍主键是1的作者的手机号</span></span><br><span class="line">    <span class="comment"># book author authordetail</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values(&#x27;authors__author_detail__phone&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="ORM中的其他方法及参数"><a href="#ORM中的其他方法及参数" class="headerlink" title="ORM中的其他方法及参数"></a>ORM中的其他方法及参数</h2><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 聚合查询      aggregate</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    聚合查询通常情况下都是配合分组一起使用的</span></span><br><span class="line"><span class="string">    只要是跟数据库相关的模块 </span></span><br><span class="line"><span class="string">        基本上都在django.db.models里面</span></span><br><span class="line"><span class="string">        如果上述没有那么应该在django.db里面</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max,Min,Sum,Count,Avg</span><br><span class="line">    <span class="comment"># 1 所有书的平均价格</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.aggregate(Avg(&#x27;price&#x27;))</span></span><br><span class="line">    <span class="comment"># 2.上述方法一次性使用</span></span><br><span class="line">    res = models.Book.objects.aggregate(Max(<span class="string">&#x27;price&#x27;</span>),Min(<span class="string">&#x27;price&#x27;</span>),Sum(<span class="string">&#x27;price&#x27;</span>),Count(<span class="string">&#x27;pk&#x27;</span>),Avg(<span class="string">&#x27;price&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分组查询  annotate</span></span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max, Min, Sum, Count, Avg</span><br><span class="line">    <span class="comment"># 1.统计每一本书的作者个数</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate()  # models后面点什么 就是按什么分组</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate(author_num=Count(&#x27;authors&#x27;)).values(&#x27;title&#x27;,&#x27;author_num&#x27;)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    author_num是我们自己定义的字段 用来存储统计出来的每本书对应的作者个数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># res1 = models.Book.objects.annotate(author_num=Count(&#x27;authors__id&#x27;)).values(&#x27;title&#x27;,&#x27;author_num&#x27;)</span></span><br><span class="line">    <span class="comment"># print(res,res1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.统计每个出版社卖的最便宜的书的价格(作业:复习原生SQL语句 写出来)</span></span><br><span class="line">    <span class="comment"># res = models.Publish.objects.annotate(min_price=Min(&#x27;book__price&#x27;)).values(&#x27;name&#x27;,&#x27;min_price&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.统计不止一个作者的图书</span></span><br><span class="line">        <span class="comment"># 1.先按照图书分组 求每一本书对应的作者个数</span></span><br><span class="line">        <span class="comment"># 2.过滤出不止一个作者的图书</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate(author_num=Count(&#x27;authors&#x27;)).filter(author_num__gt=1).values(&#x27;title&#x27;,&#x27;author_num&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4.查询每个作者出的书的总价格</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.annotate(sum_price=Sum(&#x27;book__price&#x27;)).values(&#x27;name&#x27;,&#x27;sum_price&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    如果我想按照指定的字段分组该如何处理呢？</span></span><br><span class="line"><span class="string">        models.Book.objects.values(&#x27;price&#x27;).annotate()</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="F与Q查询"><a href="#F与Q查询" class="headerlink" title="F与Q查询"></a>F与Q查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># F查询能够帮助你直接获取到表中某个字段对应的数据</span></span><br><span class="line"><span class="comment"># 1.查询卖出数大于库存数的书籍</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"><span class="comment"># res = models.Book.objects.filter(maichu__gt=F(&#x27;kucun&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.将所有书籍的价格提升500块</span></span><br><span class="line"><span class="comment"># models.Book.objects.update(price=F(&#x27;price&#x27;) + 500)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.将所有书的名称后面加上爆款两个字</span></span><br><span class="line"><span class="comment"># 在操作字符类型的数据的时候 F不能够直接做到字符串的拼接</span></span><br><span class="line"><span class="keyword">from</span> django.db.models.functions <span class="keyword">import</span> Concat</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Value</span><br><span class="line">models.Book.objects.update(title=Concat(F(<span class="string">&#x27;title&#x27;</span>), Value(<span class="string">&#x27;爆款&#x27;</span>)))</span><br><span class="line"><span class="comment"># models.Book.objects.update(title=F(&#x27;title&#x27;) + &#x27;爆款&#x27;)  </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Q查询</span></span><br><span class="line">   <span class="comment"># 1.查询卖出数大于100或者价格小于600的书籍</span></span><br><span class="line">   <span class="comment"># res = models.Book.objects.filter(maichu__gt=100,price__lt=600)</span></span><br><span class="line">   <span class="string">&quot;&quot;&quot;filter括号内多个参数是and关系&quot;&quot;&quot;</span></span><br><span class="line">   <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">   <span class="comment"># res = models.Book.objects.filter(Q(maichu__gt=100),Q(price__lt=600))  # Q包裹逗号分割 还是and关系</span></span><br><span class="line">   <span class="comment"># res = models.Book.objects.filter(Q(maichu__gt=100)|Q(price__lt=600))  # | or关系</span></span><br><span class="line">   <span class="comment"># res = models.Book.objects.filter(~Q(maichu__gt=100)|Q(price__lt=600))  # ~ not关系</span></span><br><span class="line">   <span class="comment"># print(res)  # &lt;QuerySet []&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># Q的高阶用法  能够将查询条件的左边也变成字符串的形式</span></span><br><span class="line">   q = Q()</span><br><span class="line">   q.connector = <span class="string">&#x27;or&#x27;</span></span><br><span class="line">   q.children.append((<span class="string">&#x27;maichu__gt&#x27;</span>,<span class="number">100</span>))</span><br><span class="line">   q.children.append((<span class="string">&#x27;price__lt&#x27;</span>,<span class="number">600</span>))</span><br><span class="line">   res = models.Book.objects.<span class="built_in">filter</span>(q)  <span class="comment"># 默认还是and关系</span></span><br><span class="line">   <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="django中如何开启事务"><a href="#django中如何开启事务" class="headerlink" title="django中如何开启事务"></a>django中如何开启事务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">事务</span></span><br><span class="line"><span class="string">ACID</span></span><br><span class="line"><span class="string">原子性</span></span><br><span class="line"><span class="string">不可分割的最小单位</span></span><br><span class="line"><span class="string">一致性</span></span><br><span class="line"><span class="string">跟原子性是相辅相成</span></span><br><span class="line"><span class="string">隔离性</span></span><br><span class="line"><span class="string">事务之间互相不干扰</span></span><br><span class="line"><span class="string">持久性</span></span><br><span class="line"><span class="string">事务一旦确认永久生效</span></span><br><span class="line"><span class="string">事务的回滚 </span></span><br><span class="line"><span class="string">rollback</span></span><br><span class="line"><span class="string">事务的确认</span></span><br><span class="line"><span class="string">commit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 目前你只需要掌握Django中如何简单的开启事务</span></span><br><span class="line">    <span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">            <span class="comment"># sql1</span></span><br><span class="line">            <span class="comment"># sql2</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="comment"># 在with代码快内书写的所有orm操作都是属于同一个事务</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行其他操作&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="orm中常用字段及参数"><a href="#orm中常用字段及参数" class="headerlink" title="orm中常用字段及参数"></a>orm中常用字段及参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">AutoField</span><br><span class="line">主键字段 primary_key=<span class="literal">True</span></span><br><span class="line">  </span><br><span class="line">CharFieldvarchar</span><br><span class="line">verbose_name字段的注释</span><br><span class="line">max_length长度</span><br><span class="line">  </span><br><span class="line">IntegerField<span class="built_in">int</span></span><br><span class="line">BigIntegerFieldbigint</span><br><span class="line"></span><br><span class="line">DecimalField</span><br><span class="line">max_digits=<span class="number">8</span></span><br><span class="line">    decimal_places=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">EmailFiledvarchar(<span class="number">254</span>)</span><br><span class="line"></span><br><span class="line">DateFielddate</span><br><span class="line">DateTimeFielddatetime</span><br><span class="line"></span><br><span class="line">auto_now:每次修改数据的时候都会自动更新当前时间</span><br><span class="line">auto_now_add:只在创建数据的时候记录创建时间后续不会自动修改了</span><br><span class="line">    </span><br><span class="line">BooleanField(Field)- 布尔值类型</span><br><span class="line">该字段传布尔值(<span class="literal">False</span>/<span class="literal">True</span>) 数据库里面存<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">TextField(Field)- 文本类型</span><br><span class="line">该字段可以用来存大段内容(文章、博客...)  没有字数限制</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FileField(Field)- 字符类型</span><br><span class="line">   upload_to = <span class="string">&quot;/data&quot;</span></span><br><span class="line">  给该字段传一个文件对象，会自动将文件保存到/data目录下然后将文件路径保存到数据库中,例如/data/a.txt</span><br><span class="line"></span><br><span class="line">直接参考博客:https://www.cnblogs.com/Dominic-Ji/p/<span class="number">9203990.</span>html</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># django除了给你提供了很多字段类型之外 还支持你自定义字段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCharField</span>(models.Field):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,max_length,*args,**kwargs</span>):</span><br><span class="line">        self.max_length = max_length</span><br><span class="line">        <span class="comment"># 调用父类的init方法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(max_length=max_length,*args,**kwargs)  <span class="comment"># 一定要是关键字的形式传入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">db_type</span>(<span class="params">self, connection</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        返回真正的数据类型及各种约束条件</span></span><br><span class="line"><span class="string">        :param connection:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;char(%s)&#x27;</span>%self.max_length</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义字段使用</span></span><br><span class="line">myfield = MyCharField(max_length=<span class="number">16</span>,null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 外键字段及参数</span></span><br><span class="line">unique=<span class="literal">True</span></span><br><span class="line">ForeignKey(unique=<span class="literal">True</span>)   ===OneToOneField()</span><br><span class="line">  <span class="comment"># 你在用前面字段创建一对一 orm会有一个提示信息 orm推荐你使用后者但是前者也能用</span></span><br><span class="line">  </span><br><span class="line">db_index</span><br><span class="line">如果db_index=<span class="literal">True</span> 则代表着为此字段设置索引</span><br><span class="line"></span><br><span class="line">to_field</span><br><span class="line">设置要关联的表的字段  默认不写关联的就是另外一张的主键字段</span><br><span class="line"></span><br><span class="line">on_delete</span><br><span class="line">当删除关联表中的数据时，当前表与其关联的行的行为。</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  django2.X及以上版本 需要你自己指定外键字段的级联更新级联删除</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="数据库查询优化"><a href="#数据库查询优化" class="headerlink" title="数据库查询优化"></a>数据库查询优化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">only与defer</span><br><span class="line">select_related与prefetch_related</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">orm语句的特点:</span></span><br><span class="line"><span class="string">惰性查询</span></span><br><span class="line"><span class="string">如果你仅仅只是书写了orm语句 在后面根本没有用到该语句所查询出来的参数</span></span><br><span class="line"><span class="string">那么orm会自动识别 直接不执行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># only与defer</span></span><br><span class="line"><span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># print(res)  # 要用数据了才会走数据库</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 想要获取书籍表中所有数的名字</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.values(&#x27;title&#x27;)</span></span><br><span class="line">    <span class="comment"># for d in res:</span></span><br><span class="line">    <span class="comment">#     print(d.get(&#x27;title&#x27;))</span></span><br><span class="line">    <span class="comment"># 你给我实现获取到的是一个数据对象 然后点title就能够拿到书名 并且没有其他字段</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.only(&#x27;title&#x27;)</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># print(res)  # &lt;QuerySet [&lt;Book: 三国演义爆款&gt;, &lt;Book: 红楼梦爆款&gt;, &lt;Book: 论语爆款&gt;, &lt;Book: 聊斋爆款&gt;, &lt;Book: 老子爆款&gt;]&gt;</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">        <span class="comment"># print(i.title)  # 点击only括号内的字段 不会走数据库</span></span><br><span class="line">        <span class="comment"># print(i.price)  # 点击only括号内没有的字段 会重新走数据库查询而all不需要走了</span></span><br><span class="line"></span><br><span class="line">    res = models.Book.objects.defer(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 对象除了没有title属性之外其他的都有</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(i.price)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    defer与only刚好相反</span></span><br><span class="line"><span class="string">        defer括号内放的字段不在查询出来的对象里面 查询该字段需要重新走数据</span></span><br><span class="line"><span class="string">        而如果查询的是非括号内的字段 则不需要走数据库了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># select_related与prefetch_related</span></span><br><span class="line"><span class="comment"># select_related与prefetch_related  跟跨表操作有关</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">    <span class="comment">#     print(i.publish.name)  # 每循环一次就要走一次数据库查询</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># res = models.Book.objects.select_related(&#x27;authors&#x27;)  # INNER JOIN</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    select_related内部直接先将book与publish连起来 然后一次性将大表里面的所有数据</span></span><br><span class="line"><span class="string">    全部封装给查询出来的对象</span></span><br><span class="line"><span class="string">        这个时候对象无论是点击book表的数据还是publish的数据都无需再走数据库查询了</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    select_related括号内只能放外键字段    一对多 一对一 多对多不行</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">    <span class="comment">#     print(i.publish.name)  # 每循环一次就要走一次数据库查询</span></span><br><span class="line"></span><br><span class="line">    res = models.Book.objects.prefetch_related(<span class="string">&#x27;publish&#x27;</span>)  <span class="comment"># 子查询</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    prefetch_related该方法内部其实就是子查询</span></span><br><span class="line"><span class="string">        将子查询查询出来的所有结果也给你封装到对象中,给你的感觉好像也是一次性搞定的</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(i.publish.name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django模板层</title>
      <link href="/2022/06/23/Django%E6%A8%A1%E6%9D%BF%E5%B1%82/"/>
      <url>/2022/06/23/Django%E6%A8%A1%E6%9D%BF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h3 id="模版语法传值"><a href="#模版语法传值" class="headerlink" title="模版语法传值"></a>模版语法传值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">在模板会经常看到这两个：&#123;&#123;&#125;&#125;:变量相关；&#123;%%&#125;:逻辑相关 django取值是 .取值</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 模版语法可以传递的后端python数据类型</span></span><br><span class="line">    n = <span class="number">123</span></span><br><span class="line">    f = <span class="number">11.11</span></span><br><span class="line">    s = <span class="string">&#x27;我也想睡觉&#x27;</span></span><br><span class="line">    b = <span class="literal">True</span></span><br><span class="line">    l = [<span class="string">&#x27;小红&#x27;</span>,<span class="string">&#x27;姗姗&#x27;</span>,<span class="string">&#x27;花花&#x27;</span>,<span class="string">&#x27;茹茹&#x27;</span>]</span><br><span class="line">    t = (<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>)</span><br><span class="line">    d = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;info&#x27;</span>:<span class="string">&#x27;这个人有点意思&#x27;</span>&#125;</span><br><span class="line">    se = &#123;<span class="string">&#x27;晶晶&#x27;</span>,<span class="string">&#x27;洋洋&#x27;</span>,<span class="string">&#x27;哈哈&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我被执行了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;睡觉了&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_self</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;self&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @staticmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_func</span>():</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;func&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_class</span>(<span class="params">cls</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;cls&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对象被展示到html页面上 就类似于执行了打印操作也会触发__str__方法</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;到底会不会？&#x27;</span>  </span><br><span class="line">        </span><br><span class="line">    obj = MyClass()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return render(request,&#x27;index.html&#x27;,&#123;&#125;)  # 一个个传</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; n &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; f &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; s &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; b &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; l &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; d &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; t &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; se &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;传递函数名会自动加括号调用 但是模版语法不支持给函数传额外的参数:&#123;&#123; func &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;传类名的时候也会自动加括号调用(实例化)&#123;&#123; MyClass &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;内部能够自动判断出当前的变量名是否可以加括号调用 如果可以就会自动执行  针对的是函数名和类名&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_self &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_func &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_class &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># django模版语法的取值 是固定的格式 只能采用“句点符” .</span></span><br><span class="line">&lt;p&gt;&#123;&#123; d.username &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; l<span class="number">.0</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; d.hobby<span class="number">.3</span>.info &#125;&#125;&lt;/p&gt;</span><br><span class="line"><span class="comment"># 即可以点键也可以点索引 还可以两者混用</span></span><br></pre></td></tr></table></figure><h3 id="过滤器-过滤器只能最多有两个参数"><a href="#过滤器-过滤器只能最多有两个参数" class="headerlink" title="过滤器(过滤器只能最多有两个参数)"></a>过滤器(过滤器只能最多有两个参数)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤器就类似于是模版语法内置的 内置方法</span></span><br><span class="line">基本语法：&#123;&#123;数据|过滤器:参数&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义</span></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">|safe</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line">res = mark_safe(<span class="string">&#x27;&lt;h1&gt;新新&lt;/h1&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;过滤器&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;统计长度:&#123;&#123; s|length &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;默认值(第一个参数布尔值是<span class="literal">True</span>就展示第一个参数的值否在展示冒号后面的值):&#123;&#123; b|default:<span class="string">&#x27;啥也不是&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;文件大小:&#123;&#123; file_size|filesizeformat &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;日期格式化:&#123;&#123; current_time|date:<span class="string">&#x27;Y-m-d H:i:s&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切片操作(支持步长):&#123;&#123; l|<span class="built_in">slice</span>:<span class="string">&#x27;0:4:2&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取字符(包含三个点):&#123;&#123; info|truncatechars:<span class="number">9</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取单词(不包含三个点 按照空格切):&#123;&#123; egl|truncatewords:<span class="number">9</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取单词(不包含三个点 按照空格切):&#123;&#123; info|truncatewords:<span class="number">9</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;移除特定的字符:&#123;&#123; msg|cut:<span class="string">&#x27; &#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作:&#123;&#123; l|join:<span class="string">&#x27;$&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作(加法):&#123;&#123; n|add:<span class="number">10</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作(加法):&#123;&#123; s|add:msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; hhh|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; sss|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; res &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for循环</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> l %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; forloop &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;  一个个元素</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">  &#123;<span class="string">&#x27;parentloop&#x27;</span>: &#123;&#125;, <span class="string">&#x27;counter0&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;counter&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;revcounter&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;revcounter0&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;first&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;last&#x27;</span>: <span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># if判断</span></span><br><span class="line">&#123;% <span class="keyword">if</span> b %&#125;</span><br><span class="line">    &lt;p&gt;baby&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">elif</span> s%&#125;</span><br><span class="line">    &lt;p&gt;都来&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;p&gt;哈哈&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for与if混合使用</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> lll %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> forloop.first %&#125;</span><br><span class="line">        &lt;p&gt;这是第一次&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">elif</span> forloop.last %&#125;</span><br><span class="line">        &lt;p&gt;这是最后一次啊&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        &lt;p&gt;<span class="keyword">for</span>循环的可迭代对象内部没有元素 根本没法循环&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理字典其他方法</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.keys %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.values %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.items %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># with起别名</span></span><br><span class="line">&#123;% <span class="keyword">with</span> d.hobby<span class="number">.3</span>.info <span class="keyword">as</span> nb  %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; nb &#125;&#125;&lt;/p&gt;</span><br><span class="line">    在<span class="keyword">with</span>语法内就可以通过<span class="keyword">as</span>后面的别名快速的使用到前面非常复杂获取数据的方式</span><br><span class="line">    &lt;p&gt;&#123;&#123; d.hobby<span class="number">.3</span>.info &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义过滤器、标签、inclusion-tag"><a href="#自定义过滤器、标签、inclusion-tag" class="headerlink" title="自定义过滤器、标签、inclusion_tag"></a>自定义过滤器、标签、inclusion_tag</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">三步走</span></span><br><span class="line"><span class="string">1.在应用下创建一个名字”必须“叫templatetags文件夹</span></span><br><span class="line"><span class="string">2.在该文件夹内创建“任意”名称的py文件 eg:tag_utils.py</span></span><br><span class="line"><span class="string">3.在该py文件内&quot;必须&quot;先书写下面两句话(单词一个都不能错)</span></span><br><span class="line"><span class="string">from django import template</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">register = template.Library()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义过滤器</span></span><br><span class="line"><span class="meta">@register.filter(<span class="params">name=<span class="string">&#x27;baby&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_sum</span>(<span class="params">v1, v2</span>):</span><br><span class="line">    <span class="keyword">return</span> v1 + v2</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">&#123;% load mytag %&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; n|baby:<span class="number">666</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义标签(参数可以有多个)类似于自定义函数</span></span><br><span class="line"><span class="meta">@register.simple_tag(<span class="params">name=<span class="string">&#x27;plus&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">a,b,c,d</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;%s-%s-%s-%s&#x27;</span>%(a,b,c,d)</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">标签多个参数彼此之间空格隔开</span><br><span class="line">&lt;p&gt;&#123;% plus <span class="string">&#x27;jason&#x27;</span> <span class="number">123</span> <span class="number">123</span> <span class="number">123</span> %&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义inclusion_tag</span></span><br><span class="line"><span class="meta">@register.inclusion_tag(<span class="params"><span class="string">&#x27;left_menu.html&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left</span>(<span class="params">n</span>):</span><br><span class="line">    data = [<span class="string">&#x27;第&#123;&#125;项&#x27;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="comment"># 第一种</span></span><br><span class="line">    <span class="comment"># return &#123;&#x27;data&#x27;:data&#125;  # 将data传递给left_menu.html</span></span><br><span class="line">    <span class="comment"># 第二种</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">locals</span>()  <span class="comment"># 将data传递给left_menu.html</span></span><br><span class="line">  </span><br><span class="line">&#123;% left <span class="number">5</span> %&#125;</span><br><span class="line"><span class="comment"># 总结:当html页面某一个地方的页面需要传参数才能够动态的渲染出来，并且在多个页面上都需要使用到该局部 那么就考虑将该局部页面做成inclusion_tag形式</span></span><br></pre></td></tr></table></figure><h3 id="模版的继承"><a href="#模版的继承" class="headerlink" title="模版的继承"></a>模版的继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模版的继承 你自己先选好一个你要想继承的模版页面</span></span><br><span class="line">&#123;% extends <span class="string">&#x27;home.html&#x27;</span> %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承了之后子页面跟模版页面长的是一模一样的 你需要在模版页面上提前划定可以被修改的区域</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">模版内容</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子页面就可以声明想要修改哪块划定了的区域</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">子页面内容</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般情况下模版页面上应该至少有三块可以被修改的区域</span></span><br><span class="line">  <span class="number">1.</span>css区域</span><br><span class="line">  <span class="number">2.</span>html区域</span><br><span class="line">  <span class="number">3.j</span>s区域</span><br><span class="line">    &#123;% block css %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">  </span><br><span class="line">  &#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">  </span><br><span class="line">  &#123;% block js %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">  <span class="comment"># 每一个子页面就都可以有自己独有的css代码 html代码 js代码</span></span><br></pre></td></tr></table></figure><h3 id="模版的导入"><a href="#模版的导入" class="headerlink" title="模版的导入"></a>模版的导入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将页面的某一个局部当成模块的形式哪个地方需要就可以直接导入使用即可</span><br><span class="line">&#123;% include <span class="string">&#x27;wasai.html&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视图层</title>
      <link href="/2022/06/19/Django%E8%A7%86%E5%9B%BE%E5%B1%82/"/>
      <url>/2022/06/19/Django%E8%A7%86%E5%9B%BE%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h3 id="三板斧"><a href="#三板斧" class="headerlink" title="三板斧"></a>三板斧</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">HttpResponse</span></span><br><span class="line"><span class="string">返回字符串类型</span></span><br><span class="line"><span class="string">render</span></span><br><span class="line"><span class="string">返回html页面 并且在返回给浏览器之前还可以给html文件传值</span></span><br><span class="line"><span class="string">redirect</span></span><br><span class="line"><span class="string">重定向</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 视图函数必须要返回一个HttpResponse对象  正确   研究三者的源码即可得处结论</span></span><br><span class="line"><span class="comment"># render简单内部原理</span></span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Template,Context</span><br><span class="line">    res = Template(<span class="string">&#x27;&lt;h1&gt;&#123;&#123; user &#125;&#125;&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">    con = Context(&#123;<span class="string">&#x27;user&#x27;</span>:&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="number">123</span>&#125;&#125;)</span><br><span class="line">    ret = res.render(con)</span><br><span class="line">    <span class="built_in">print</span>(ret)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(ret)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JsonResponse对象"><a href="#JsonResponse对象" class="headerlink" title="JsonResponse对象"></a>JsonResponse对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">json格式的数据有什么用？</span></span><br><span class="line"><span class="string">前后端数据交互需要使用到json作为过渡 实现跨语言传输数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">前端序列化</span></span><br><span class="line"><span class="string">JSON.stringify()json.dumps()</span></span><br><span class="line"><span class="string">JSON.parse()json.loads()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_json</span>(<span class="params">request</span>):</span><br><span class="line">    user_dict = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line">    l = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line">    <span class="comment"># 先转成json格式字符串</span></span><br><span class="line">    <span class="comment"># json_str = json.dumps(user_dict,ensure_ascii=False)</span></span><br><span class="line">    <span class="comment"># 将该字符串返回</span></span><br><span class="line">    <span class="comment"># return HttpResponse(json_str)</span></span><br><span class="line">    <span class="comment"># 读源码掌握用法</span></span><br><span class="line">    <span class="comment"># return JsonResponse(user_dict,json_dumps_params=&#123;&#x27;ensure_ascii&#x27;:False&#125;)</span></span><br><span class="line">   <span class="comment"># In order to allow non-dict objects to be serialized set the safe parameter to False.</span></span><br><span class="line">    <span class="comment"># 默认只能序列化字典 序列化其他需要加safe参数</span></span><br><span class="line">    <span class="comment"># return JsonResponse(l,safe=False)  </span></span><br></pre></td></tr></table></figure><h3 id="form表单上传文件及后端如何操作"><a href="#form表单上传文件及后端如何操作" class="headerlink" title="form表单上传文件及后端如何操作"></a>form表单上传文件及后端如何操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">form表单上传文件类型的数据</span></span><br><span class="line"><span class="string">1.method必须指定成post</span></span><br><span class="line"><span class="string">2.enctype必须换成formdata</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_file</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># print(request.POST)  # 只能获取普通的简直对数据 文件不行</span></span><br><span class="line">        <span class="built_in">print</span>(request.FILES)  <span class="comment"># 获取文件数据</span></span><br><span class="line">        <span class="comment"># &lt;MultiValueDict: &#123;&#x27;file&#x27;: [&lt;InMemoryUploadedFile: u=1288812541,1979816195&amp;fm=26&amp;gp=0.jpg (image/jpeg)&gt;]&#125;&gt;</span></span><br><span class="line">        file_obj = request.FILES.get(<span class="string">&#x27;file&#x27;</span>)  <span class="comment"># 文件对象</span></span><br><span class="line">        <span class="built_in">print</span>(file_obj.name)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_obj.name,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj.chunks():  <span class="comment"># 推荐加上chunks方法</span></span><br><span class="line">                f.write(line)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;form.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="request对象方法"><a href="#request对象方法" class="headerlink" title="request对象方法"></a>request对象方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">request.method</span></span><br><span class="line"><span class="string">request.POST</span></span><br><span class="line"><span class="string">request.GET</span></span><br><span class="line"><span class="string">request.FILES</span></span><br><span class="line"><span class="string">request.body  # 原生的浏览器发过来的二进制数据  </span></span><br><span class="line"><span class="string">request.path </span></span><br><span class="line"><span class="string">request.path_info</span></span><br><span class="line"><span class="string">request.get_full_path()  能过获取完整的url及问号后面的参数 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(request.path)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">    <span class="built_in">print</span>(request.path_info)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">    <span class="built_in">print</span>(request.get_full_path())  <span class="comment"># /app01/ab_file/?username=jason</span></span><br></pre></td></tr></table></figure><h3 id="FBV与CBV"><a href="#FBV与CBV" class="headerlink" title="FBV与CBV"></a>FBV与CBV</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视图函数既可以是函数也可以是类</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CBV</span></span><br><span class="line">    <span class="comment"># CBV路由</span></span><br><span class="line">    url(<span class="string">r&#x27;^login/&#x27;</span>,views.MyLogin.as_view())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLogin</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;form.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post方法&#x27;</span>)</span><br><span class="line">      </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">FBV和CBV各有千秋</span></span><br><span class="line"><span class="string">CBV特点</span></span><br><span class="line"><span class="string">能够直接根据请求方式的不同直接匹配到对应的方法执行</span></span><br><span class="line"><span class="string">内部到底是怎么实现的？</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="CBV源码剖析"><a href="#CBV源码剖析" class="headerlink" title="CBV源码剖析"></a>CBV源码剖析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 突破口在urls.py</span></span><br><span class="line">url(<span class="string">r&#x27;^login/&#x27;</span>,views.MyLogin.as_view())</span><br><span class="line"><span class="comment"># url(r&#x27;^login/&#x27;,views.view)  FBV一模一样</span></span><br><span class="line"><span class="comment"># CBV与FBV在路由匹配上本质是一样的 都是路由 对应 函数内存地址</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">函数名/方法名 加括号执行优先级最高</span></span><br><span class="line"><span class="string">猜测as_view()要么是被@staicmethod修饰的静态方法；要么是被@classmethod修饰的类方法  正确</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    @classonlymethod</span></span><br><span class="line"><span class="string">    def as_view(cls, **initkwargs):</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classonlymethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">as_view</span>(<span class="params">cls, **initkwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        cls就是我们自己写的类 类方法会自动将类传入，</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">            self = cls(**initkwargs)  <span class="comment"># cls是我们自己写的类</span></span><br><span class="line">            <span class="comment"># self = MyLogin(**initkwargs)  产生一个我们自己写的类的对象</span></span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            经常需要看源码 在看python源码的时候 一定要时刻提醒自己面向对象属性方法查找顺序</span></span><br><span class="line"><span class="string">                先从对象自己找--》再去产生对象的类里面找--》之后再去父类找--》</span></span><br><span class="line"><span class="string">            总结:看源码只要看到了self 一定要问你自己当前这个self到底是谁</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 返回的还是内层view方法</span></span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">      </span><br><span class="line">    <span class="comment"># CBV的精髓</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取当前请求的小写格式 然后比对当前请求方式是否合法</span></span><br><span class="line">        <span class="comment"># get请求为例</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = <span class="built_in">getattr</span>(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        反射:通过字符串来操作对象的属性或者方法</span></span><br><span class="line"><span class="string">         handler = getattr(自己写的类产生的对象,&#x27;get&#x27;,当找不到get属性或者方法的时候就会用第三个参数)</span></span><br><span class="line"><span class="string">         handler = 我们自己写的类里面的get方法</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="keyword">return</span> handler(request, *args, **kwargs)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        自动调用get方法</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="CBV如何添加装饰器"><a href="#CBV如何添加装饰器" class="headerlink" title="CBV如何添加装饰器"></a>CBV如何添加装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name=&#x27;get&#x27;)  # 方式2(可以添加多个针对不同的方法加不同的装饰器)</span></span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name=&#x27;post&#x27;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLogin</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line"><span class="meta">    @method_decorator(<span class="params">login_auth</span>)  </span><span class="comment"># 方式3:它会直接作用于当前类里面的所有的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().dispatch(request,*args,**kwargs)</span><br><span class="line">    <span class="comment"># @method_decorator(login_auth)  # 方式1:指名道姓</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;get请求&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post请求&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django路由层</title>
      <link href="/2022/06/17/Django%E8%B7%AF%E7%94%B1%E5%B1%82/"/>
      <url>/2022/06/17/Django%E8%B7%AF%E7%94%B1%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h3 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由匹配</span></span><br><span class="line">url(<span class="string">r&#x27;test&#x27;</span>,views.test),</span><br><span class="line">url(<span class="string">r&#x27;testadd&#x27;</span>,views.testadd)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">url方法第一个参数是正则表达式(1.x)</span></span><br><span class="line"><span class="string">只要第一个参数正则表达式能够匹配到内容 那么就会立刻停止往下匹配直接执行对应的视图函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你在输入url的时候会默认加斜杠</span></span><br><span class="line"><span class="string">django内部帮你做到重定向,一次匹配不行,url后面加斜杠再来一次</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 取消自动加斜杠</span></span><br><span class="line">APPEND_SLASH = <span class="literal">False</span>/<span class="literal">True</span><span class="comment"># 默认是自动加斜杠的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 首页</span></span><br><span class="line">    url(<span class="string">r&#x27;^$&#x27;</span>,views.home),</span><br><span class="line">    <span class="comment"># 路由匹配</span></span><br><span class="line">    url(<span class="string">r&#x27;^test/$&#x27;</span>,views.test),</span><br><span class="line">    url(<span class="string">r&#x27;^testadd/$&#x27;</span>,views.testadd),</span><br><span class="line">    <span class="comment"># 尾页(了解)</span></span><br><span class="line">    url(<span class="string">r&#x27;&#x27;</span>,views.error),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="无名分组"><a href="#无名分组" class="headerlink" title="无名分组"></a>无名分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分组:就是给某一段正则表达式用小括号扩起来</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">url(<span class="string">r&#x27;^test/(\d+)/&#x27;</span>,views.test)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">request,xx</span>):</span><br><span class="line">    <span class="built_in">print</span>(xx)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 无名分组就是将括号内正则表达式匹配到的内容当作位置参数传递给后面的视图函数</span></span><br></pre></td></tr></table></figure><h3 id="有名分组"><a href="#有名分组" class="headerlink" title="有名分组"></a>有名分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可以给正则表达式起一个别名</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">url(<span class="string">r&#x27;^testadd/(?P&lt;year&gt;\d+)&#x27;</span>,views.testadd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testadd</span>(<span class="params">request,year</span>):</span><br><span class="line">    <span class="built_in">print</span>(year)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;testadd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有名分组就是将括号内正则表达式匹配到的内容当作关键字参数传递给后面的视图函数</span></span><br></pre></td></tr></table></figure><h3 id="无名有名是否可以混合使用"><a href="#无名有名是否可以混合使用" class="headerlink" title="无名有名是否可以混合使用"></a>无名有名是否可以混合使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不能混用,但是同一个分组可以使用N多次</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个的分组可以使用多次</span></span><br><span class="line">url(<span class="string">r&#x27;^index/(\d+)/(\d+)/(\d+)/&#x27;</span>,views.index),</span><br><span class="line">url(<span class="string">r&#x27;^index/(?P&lt;year&gt;\d+)/(?P&lt;age&gt;\d+)/(?P&lt;month&gt;\d+)/&#x27;</span>,views.index),</span><br></pre></td></tr></table></figure><h3 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过一些方法得到一个结果 该结果可以直接访问对应的url触发视图函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先给路由与视图函数起一个别名</span></span><br><span class="line">url(<span class="string">r&#x27;^func_kkk/&#x27;</span>,views.func,name=<span class="string">&#x27;ooo&#x27;</span>)</span><br><span class="line"><span class="comment"># 反向解析</span></span><br><span class="line"><span class="comment"># 后端反向解析</span></span><br><span class="line">  <span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse,redirect,reverse</span><br><span class="line">  reverse(<span class="string">&#x27;ooo&#x27;</span>)</span><br><span class="line">  <span class="comment"># 前端反向解析</span></span><br><span class="line">  &lt;a href=<span class="string">&quot;&#123;% url &#x27;ooo&#x27; %&#125;&quot;</span>&gt;这是一个超链接&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="无名有名分组反向解析"><a href="#无名有名分组反向解析" class="headerlink" title="无名有名分组反向解析"></a>无名有名分组反向解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无名分组反向解析</span></span><br><span class="line"><span class="comment"># 路由</span></span><br><span class="line">url(<span class="string">r&#x27;^index/(\d+)/&#x27;</span>,views.index,name=<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&#123;% url <span class="string">&#x27;xxx&#x27;</span> <span class="number">123</span> %&#125;</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">reverse(<span class="string">&#x27;xxx&#x27;</span>, args=(<span class="number">1</span>,))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这个数字写视图代码的时候应该放什么</span></span><br><span class="line"><span class="string">数字一般情况下放的是数据的主键值  数据的编辑和删除</span></span><br><span class="line"><span class="string">url(r&#x27;^edit/(\d+)/&#x27;,views.edit,name=&#x27;xxx&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def edit(request,edit_id):</span></span><br><span class="line"><span class="string">reverse(&#x27;xxx&#x27;,args=(edit_id,))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;%for user_obj in user_queryset%&#125;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;&#123;% url &#x27;xxx&#x27; user_obj.id %&#125;&quot;&gt;编辑&lt;/a&gt;</span></span><br><span class="line"><span class="string">&#123;%endfor%&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 有名分组反向解析</span></span><br><span class="line">   url(<span class="string">r&#x27;^func/(?P&lt;year&gt;\d+)/&#x27;</span>,views.func,name=<span class="string">&#x27;ooo&#x27;</span>)</span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;% url &#x27;ooo&#x27; year=123 %&#125;&quot;</span>&gt;<span class="number">111</span>&lt;/a&gt;  了解</span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;% url &#x27;ooo&#x27; 123 %&#125;&quot;</span>&gt;<span class="number">222</span>&lt;/a&gt;  记忆</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="comment"># 有名分组反向解析 写法1  了解</span></span><br><span class="line">   <span class="built_in">print</span>(reverse(<span class="string">&#x27;ooo&#x27;</span>,kwargs=&#123;<span class="string">&#x27;year&#x27;</span>:<span class="number">123</span>&#125;))</span><br><span class="line">   <span class="comment"># 简便的写法  减少你的脑容量消耗 记跟无名一样的操作即可</span></span><br><span class="line">   <span class="built_in">print</span>(reverse(<span class="string">&#x27;ooo&#x27;</span>,args=(<span class="number">111</span>,)))</span><br><span class="line">    名称空间反向解析需要加上名称空间的名字</span><br></pre></td></tr></table></figure><h3 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">当一个django项目中的url特别多的时候 总路由urls.py代码非常冗余不好维护，这个时候也可以利用路由分发来减轻总路由的压力。利用路由分发之后 总路由不再干路由与视图函数的直接对应关系,而是做一个分发处理识别当前url是属于哪个应用下的 直接分发给对应的应用去处理.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> urls <span class="keyword">as</span> app01_urls</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> urls <span class="keyword">as</span> app02_urls</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 1.路由分发</span></span><br><span class="line">    url(<span class="string">r&#x27;^app01/&#x27;</span>,include(app01_urls)),  <span class="comment"># 只要url前缀是app01开头 全部交给app01处理</span></span><br><span class="line">    url(<span class="string">r&#x27;^app02/&#x27;</span>,include(app02_urls))   <span class="comment"># 只要url前缀是app02开头 全部交给app02处理</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 2.项目写法  推荐使用</span></span><br><span class="line">    url(<span class="string">r&#x27;^app01/&#x27;</span>,include(<span class="string">&#x27;app01.urls&#x27;</span>)),</span><br><span class="line">    url(<span class="string">r&#x27;^app02/&#x27;</span>,include(<span class="string">&#x27;app02.urls&#x27;</span>))</span><br><span class="line">    <span class="comment"># 注意事项:总路由里面的url千万不能加$结尾</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子路由</span></span><br><span class="line"><span class="comment"># app01 urls.py</span></span><br><span class="line">  <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">  <span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">  urlpatterns = [</span><br><span class="line">      url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg)</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment"># app02 urls.py</span></span><br><span class="line">  <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">  <span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">  urlpatterns = [</span><br><span class="line">      url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h3 id="名称空间-了解"><a href="#名称空间-了解" class="headerlink" title="名称空间(了解)"></a>名称空间(了解)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当多个应用出现了相同的别名 我们研究反向解析会不会自动识别应用前缀</span></span><br><span class="line"><span class="comment"># 正常情况下的反向解析是没有办法自动识别前缀的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 名称空间</span></span><br><span class="line"><span class="comment"># 总路由</span></span><br><span class="line">    url(<span class="string">r&#x27;^app01/&#x27;</span>,include(<span class="string">&#x27;app01.urls&#x27;</span>,namespace=<span class="string">&#x27;app01&#x27;</span>)),</span><br><span class="line">    url(<span class="string">r&#x27;^app02/&#x27;</span>,include(<span class="string">&#x27;app02.urls&#x27;</span>,namespace=<span class="string">&#x27;app02&#x27;</span>))</span><br><span class="line">  <span class="comment"># 解析的时候</span></span><br><span class="line">  <span class="comment"># app01</span></span><br><span class="line">  urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg,name=<span class="string">&#x27;reg&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">    <span class="comment"># app02</span></span><br><span class="line">    urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg,name=<span class="string">&#x27;reg&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">    </span><br><span class="line">  reverse(<span class="string">&#x27;app01:reg&#x27;</span>)</span><br><span class="line">    reverse(<span class="string">&#x27;app02:reg&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    &#123;% url <span class="string">&#x27;app01:reg&#x27;</span> %&#125;</span><br><span class="line">    &#123;% url <span class="string">&#x27;app02:reg&#x27;</span> %&#125;</span><br><span class="line"><span class="comment"># 其实只要保证名字不冲突 就没有必要使用名称空间</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一般情况下 有多个app的时候我们在起别名的时候会加上app的前缀</span></span><br><span class="line"><span class="string">这样的话就能够确保多个app之间名字不冲突的问题</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg,name=<span class="string">&#x27;app01_reg&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg,name=<span class="string">&#x27;app02_reg&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="伪静态-了解"><a href="#伪静态-了解" class="headerlink" title="伪静态(了解)"></a>伪静态(了解)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">伪静态</span></span><br><span class="line"><span class="string">将一个动态网页伪装成静态网页</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">为什么要伪装呢？</span></span><br><span class="line"><span class="string">https://www.cnblogs.com/xxxx.html</span></span><br><span class="line"><span class="string">伪装的目的在于增大本网站的seo查询力度并且增加搜索引擎收藏本网上的概率</span></span><br><span class="line"><span class="string">搜索引擎本质上就是一个巨大的爬虫程序</span></span><br><span class="line"><span class="string">总结:</span></span><br><span class="line"><span class="string">无论你怎么优化 怎么处理,始终还是干不过RMB玩家</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg.html&#x27;</span>,views.reg,name=<span class="string">&#x27;app02_reg&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="虚拟环境-了解"><a href="#虚拟环境-了解" class="headerlink" title="虚拟环境(了解)"></a>虚拟环境(了解)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="django版本区别"><a href="#django版本区别" class="headerlink" title="django版本区别"></a>django版本区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在正常开发中 我们会给每一个项目配备一个该项目独有的解释器环境</span></span><br><span class="line"><span class="string">该环境内只有该项目用到的模块 用不到一概不装</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.django1.X路由层使用的是url方法</span></span><br><span class="line"><span class="string">而在django2.Xhe3.X版本中路由层使用的是path方法</span></span><br><span class="line"><span class="string">url()第一个参数支持正则</span></span><br><span class="line"><span class="string">path()第一个参数是不支持正则的 写什么就匹配什么</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果你习惯使用path那么也给你提供了另外一个方法</span></span><br><span class="line"><span class="string">from django.urls import path, re_path</span></span><br><span class="line"><span class="string">from django.conf.urls import url</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">re_path(r&#x27;^index/&#x27;,index),</span></span><br><span class="line"><span class="string">    url(r&#x27;^login/&#x27;,login)</span></span><br><span class="line"><span class="string">  2.X和3.X里面的re_path就等价于1.X里面的url</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">2.虽然path不支持正则 但是它的内部支持五种转换器</span></span><br><span class="line"><span class="string">path(&#x27;index/&lt;int:id&gt;/&#x27;,index)</span></span><br><span class="line"><span class="string"># 将第二个路由里面的内容先转成整型然后以关键字的形式传递给后面的视图函数</span></span><br><span class="line"><span class="string">def index(request,id):</span></span><br><span class="line"><span class="string">        print(id,type(id))</span></span><br><span class="line"><span class="string">        return HttpResponse(&#x27;index&#x27;)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    str,匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式</span></span><br><span class="line"><span class="string">int,匹配正整数，包含0。</span></span><br><span class="line"><span class="string">slug,匹配字母、数字以及横杠、下划线组成的字符串。</span></span><br><span class="line"><span class="string">uuid,匹配格式化的uuid，如 075194d3-6885-417e-a8a8-6c931e272f00。</span></span><br><span class="line"><span class="string">path,匹配任何非空字符串，包含了路径分隔符（/）（不能用？）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.除了有默认的五个转换器之外 还支持自定义转换器(了解)</span></span><br><span class="line"><span class="string">class MonthConverter:</span></span><br><span class="line"><span class="string">    regex=&#x27;\d&#123;2&#125;&#x27; # 属性名必须为regex</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def to_python(self, value):</span></span><br><span class="line"><span class="string">        return int(value)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def to_url(self, value):</span></span><br><span class="line"><span class="string">        return value # 匹配的regex是两个数字，返回的结果也必须是两个数字</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from django.urls import path,register_converter</span></span><br><span class="line"><span class="string">from app01.path_converts import MonthConverter</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 先注册转换器</span></span><br><span class="line"><span class="string">register_converter(MonthConverter,&#x27;mon&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from app01 import views</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">urlpatterns = [</span></span><br><span class="line"><span class="string">    path(&#x27;articles/&lt;int:year&gt;/&lt;mon:month&gt;/&lt;slug:other&gt;/&#x27;, views.article_detail, name=&#x27;aaa&#x27;),</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4.模型层里面1.X外键默认都是级联更新删除的</span></span><br><span class="line"><span class="string">但是到了2.X和3.X中需要你自己手动配置参数</span></span><br><span class="line"><span class="string">models.ForeignKey(to=&#x27;Publish&#x27;)</span></span><br><span class="line"><span class="string">models.ForeignKey(to=&#x27;Publish&#x27;,on_delete=models.CASCADE...)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django初使用</title>
      <link href="/2022/06/12/Django%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/06/12/Django%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我们将html文件默认都放在templates文件夹下</span></span><br><span class="line"><span class="string">我们将网站所使用的静态文件默认都放在static文件夹下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">静态文件:前端已经写好了的 能够直接调用使用的文件</span></span><br><span class="line"><span class="string">网站写好的js文件</span></span><br><span class="line"><span class="string">网站写好的css文件</span></span><br><span class="line"><span class="string">网站用到的图片文件</span></span><br><span class="line"><span class="string">第三方前端框架</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># django默认是不会自动帮你创建static文件夹 需要你自己手动创建</span></span><br><span class="line">一般情况下我们在static文件夹内还会做进一步的划分处理</span><br><span class="line">-static</span><br><span class="line">  --js</span><br><span class="line">    --css</span><br><span class="line">    --img</span><br><span class="line">    其他第三方文件</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在浏览器中输入url能够看到对应的资源是因为后端提前开设了该资源的接口</span></span><br><span class="line"><span class="string">STATIC_URL = &#x27;/static/&#x27;</span></span><br><span class="line"><span class="string">STATICFILES_DIRS = os.path.join(BASE_DIR, &#x27;static&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://127.0.0.1:8000/static/bootstrap-3.4.1-dist/css/bootstrap.min.css</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 静态文件配置</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">****************************************************************</span></span><br><span class="line"><span class="string">当你在写django项目的时候 可能会出现后端代码修改了但是前端页面没有变化的情况</span></span><br><span class="line"><span class="string">1.你在同一个端口开了好几个django项目 </span></span><br><span class="line"><span class="string">一直在跑的其实是第一个django项目</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.浏览器缓存的问题</span></span><br><span class="line"><span class="string">settings</span></span><br><span class="line"><span class="string">network</span></span><br><span class="line"><span class="string">disable cache 勾选上</span></span><br><span class="line"><span class="string">*****************************************************************</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/ooo/&#x27;</span>  <span class="comment"># 类似于访问静态文件的令牌</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;如果你想要访问静态文件 你就必须以static开头&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">/static/bootstrap-3.4.1-dist/js/bootstrap.min.js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/static/令牌</span></span><br><span class="line"><span class="string">取列表里面从上往下依次查找</span></span><br><span class="line"><span class="string">    bootstrap-3.4.1-dist/js/bootstrap.min.js</span></span><br><span class="line"><span class="string">    都没有才会报错</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 多个静态文件配置</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static&#x27;</span>),</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static1&#x27;</span>),</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static2&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态文件动态解析</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;&#123;% static &#x27;bootstrap-3.4.1-dist/css/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;&#123;% static &#x27;bootstrap-3.4.1-dist/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># form表单默认是get请求数据</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/login/?username=jason&amp;password=<span class="number">123</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">form表单action参数</span></span><br><span class="line"><span class="string">1.不写 默认朝当前所在的url提交数据</span></span><br><span class="line"><span class="string">2.全写 指名道姓</span></span><br><span class="line"><span class="string">3.只写后缀 /login/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在前期我们使用django提交post请求的时候 需要取配置文件中注释掉一行代码</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="request对象方法初识"><a href="#request对象方法初识" class="headerlink" title="request对象方法初识"></a>request对象方法初识</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">request.method <span class="comment"># 返回请求方式 并且是全大写的字符串形式  &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">request.POST  <span class="comment"># 获取用户post请求提交的普通数据不包含文件</span></span><br><span class="line">request.POST.get()  <span class="comment"># 只获取列表最后一个元素</span></span><br><span class="line">request.POST.getlist()  <span class="comment"># 直接将列表取出</span></span><br><span class="line">request.GET  <span class="comment"># 获取用户提交的get请求数据</span></span><br><span class="line">request.GET.get()  <span class="comment"># 只获取列表最后一个元素</span></span><br><span class="line">request.GET.getlist()  <span class="comment"># 直接将列表取出</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">get请求携带的数据是有大小限制的 大概好像只有4KB左右,而post请求则没有限制</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 返回一个登陆界面</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    get请求和post请求应该有不同的处理机制</span></span><br><span class="line"><span class="string">    :param request: 请求相关的数据对象 里面有很多简易的方法</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print(type(request.method))  # 返回请求方式 并且是全大写的字符串形式  &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">    <span class="comment"># if request.method == &#x27;GET&#x27;:</span></span><br><span class="line">    <span class="comment">#     print(&#x27;hello&#x27;)</span></span><br><span class="line">    <span class="comment">#     return render(request,&#x27;login.html&#x27;)</span></span><br><span class="line">    <span class="comment"># elif request.method == &#x27;POST&#x27;:</span></span><br><span class="line">    <span class="comment">#     return HttpResponse(&quot;收到了&quot;)</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;收到了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="django链接数据库-MySQL"><a href="#django链接数据库-MySQL" class="headerlink" title="django链接数据库(MySQL)"></a>django链接数据库(MySQL)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认用的是sqkite3</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># django链接MySQL</span></span><br><span class="line"><span class="number">1.</span>第一步配置文件中配置</span><br><span class="line">  DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;数据库名&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>:<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">        <span class="string">&#x27;CHARSET&#x27;</span>:<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="number">2.</span>代码声明</span><br><span class="line">  django默认用的是mysqldb模块链接MySQL</span><br><span class="line">    但是该模块的兼容性不好 需要手动改为用pymysql链接你需要告诉django不要用默认的mysqldb还是用pymysql</span><br><span class="line">    <span class="comment"># 在项目名下的init或者任意的应用名下的init文件中书写以下代码都可以</span></span><br><span class="line">    <span class="keyword">import</span> pymysql</span><br><span class="line">    pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h3 id="Django-ORM初次体验"><a href="#Django-ORM初次体验" class="headerlink" title="Django ORM初次体验"></a>Django ORM初次体验</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ORM. 对象关系映射</span></span><br><span class="line"><span class="string">作用:能够让一个不用sql语句的小白也能够通过python 面向对象的代码简单快捷的操作数据库</span></span><br><span class="line"><span class="string">不足之处:封装程度太高 有时候sql语句的效率偏低 需要你自己写SQL语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">类表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象   记录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象属性  记录某个字段对应的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">应用下面的models.py文件</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 先去models.py中书写一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="comment"># id int primary_key auto_increment</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField()</span><br><span class="line"></span><br><span class="line">*************************<span class="comment"># 2 数据库迁移命令*************************</span></span><br><span class="line">python3 manage.py makemigrations(操作记录记录在migrations文件夹)</span><br><span class="line"></span><br><span class="line">python3 manage.py migrate  将操作真正的同步到数据库中</span><br><span class="line"><span class="comment"># 只要你修改了models.py中跟数据库相关的代码 就必须重新执行上述的两条命令</span></span><br><span class="line">******************************************************************</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>,verbose_name=<span class="string">&#x27;主键&#x27;</span>)</span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    CharField必须要指定max_length参数 不指定会直接报错</span></span><br><span class="line"><span class="string">    verbose_name该参数是所有字段都有的 就是用来对字段的解释</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    password = models.IntegerField(verbose_name=<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    <span class="comment"># 由于一张表中必须要有一个主键字段 并且一般情况下都叫id字段所以orm当你不定义主键字段的时候 orm会自动帮你创建一个名为id主键字段</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.IntegerField()</span><br></pre></td></tr></table></figure><h3 id="字段的增删改查"><a href="#字段的增删改查" class="headerlink" title="字段的增删改查"></a>字段的增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字段的增加</span></span><br><span class="line">  <span class="number">1.</span>可以在终端内直接给出默认值</span><br><span class="line">  <span class="number">2.</span>该字段可以为空</span><br><span class="line">    info = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">&#x27;个人简介&#x27;</span>,null=<span class="literal">True</span>)</span><br><span class="line">  <span class="number">3.</span>直接给字段设置默认值</span><br><span class="line">    hobby = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">&#x27;兴趣爱好&#x27;</span>,default=<span class="string">&#x27;study&#x27;</span>)</span><br><span class="line"><span class="comment"># 字段的修改</span></span><br><span class="line">直接修改代码然后执行数据库迁移的两条命令即可！</span><br><span class="line"><span class="comment"># 字段的删</span></span><br><span class="line"> 直接注释对应的字段然后执行数据库迁移的两条命令即可！</span><br><span class="line"> 执行完毕之后字段对应的数据也都没有了</span><br><span class="line">  </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在操作models.py的时候一定要细心，千万不要注释一些字段，执行迁移命令之前最好先检查一下自己写的代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="数据的增删改查"><a href="#数据的增删改查" class="headerlink" title="数据的增删改查"></a>数据的增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">res = models.User.objects.<span class="built_in">filter</span>(username=username)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">返回值你先看成是列表套数据对象的格式它也支持索引取值（不推荐） 切片操作 </span></span><br><span class="line"><span class="string">user_obj = models.User.objects.filter(username=username).first()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">filter</span>括号内可以携带多个参数 参数与参数之间默认是<span class="keyword">and</span>关系，可以把<span class="built_in">filter</span>联想成where记忆</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">res = models.User.objects.create(username=username,password=password)</span><br><span class="line"><span class="comment"># 返回值就是当前被创建的对象本身</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种增加</span></span><br><span class="line">user_obj = models.User(username=username,password=password)</span><br><span class="line">user_obj.save()  <span class="comment"># 保存数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先将数据库中的数据全部展示到前端 然后给每一个数据两个按钮 一个编辑一个删除</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">userlist</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 查询出用户表里面所有的数据</span></span><br><span class="line">    <span class="comment"># 方式1</span></span><br><span class="line">    <span class="comment"># data = models.User.objects.filter()</span></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="comment"># 方式2</span></span><br><span class="line">    user_queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># return render(request,&#x27;userlist.html&#x27;,&#123;&#x27;user_queryset&#x27;:user_queryset&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;userlist.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑功能（改）</span></span><br><span class="line"><span class="comment"># 点击编辑按钮朝后端发送编辑数据的请求</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  如何告诉后端用户想要编辑哪条数据?</span></span><br><span class="line"><span class="string">  将编辑按钮所在的那一行数据的主键值发送给后端，利用url问号后面携带参数的方式</span></span><br><span class="line"><span class="string">  &#123;% for user_obj in user_queryset %&#125;</span></span><br><span class="line"><span class="string">           &lt;tr&gt;</span></span><br><span class="line"><span class="string">              &lt;td&gt;&#123;&#123; user_obj.id &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;&lt;a href=&quot;/edit_user/?user_id=&#123;&#123; user_obj.id &#125;&#125;&quot;class=&quot;btn btn-primary btn-xs&quot;&gt;编辑&lt;/a&gt;</span></span><br><span class="line"><span class="string">             &lt;a href=&quot;&quot; class=&quot;btn btn-danger btn-xs&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 后端查询出用户想要编辑的数据对象 展示到前端页面供用户查看和编辑</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">edit_user</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 获取url问号后面的参数</span></span><br><span class="line">    edit_id = request.GET.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 查询当前用户想要编辑的数据对象</span></span><br><span class="line">    edit_obj = models.User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=edit_id).first()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="comment"># 去数据库中修改对应的数据内容</span></span><br><span class="line">        <span class="comment"># 修改数据方式1</span></span><br><span class="line">       models.User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=edit_id).update(username=username,password=password)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            将filter查询出来的列表中所有的对象全部更新            批量更新操作</span></span><br><span class="line"><span class="string">            只修改被修改的字段</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改数据方式2</span></span><br><span class="line">        edit_obj.username = username</span><br><span class="line">        edit_obj.password= password</span><br><span class="line">        edit_obj.save()</span><br><span class="line">     <span class="comment">#上述方法当字段特别多的时候效率会非常低 从头到尾将数据的所有字段全部更新一边 无论该字段是否被修改</span></span><br><span class="line">        <span class="comment"># 跳转到数据的展示页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/userlist/&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将数据对象展示到页面上</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;edit_user.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"><span class="comment"># 删除功能</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">def delete_user(request):</span></span><br><span class="line"><span class="string">    # 获取用户想要删除的数据id值</span></span><br><span class="line"><span class="string">    delete_id = request.GET.get(&#x27;user_id&#x27;)</span></span><br><span class="line"><span class="string">    # 直接去数据库中找到对应的数据删除即可</span></span><br><span class="line"><span class="string">    models.User.objects.filter(id=delete_id).delete()</span></span><br><span class="line"><span class="string">    # 跳转到展示页面</span></span><br><span class="line"><span class="string">    return redirect(&#x27;/userlist/&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 真正的删除功能应该需要二次确认 </span></span><br><span class="line"><span class="comment"># 删除数据内部其实并不是真正的删除 我们会给数据添加一个标识字段用来表示当前数据是否被删除了，如果数据被删了仅仅只是讲字段修改一个状态</span></span><br><span class="line">  username    password    is_delete</span><br><span class="line">  jason<span class="number">123</span><span class="number">0</span></span><br><span class="line">  egon<span class="number">123</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="django-orm中如何创建表关系"><a href="#django-orm中如何创建表关系" class="headerlink" title="django orm中如何创建表关系"></a>django orm中如何创建表关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">表与表之间的关系：一对多，多对多，一对一，没有关系；判断表关系的方法:换位思考</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 例如有以下表:图书表, 出版社表, 作者表, 作者详情表</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">图书和出版社是一对多的关系 外键字段建在多的那一方 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">图书和作者是多对多的关系 需要创建第三张表来专门存储</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">作者与作者详情表是一对一</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表关系  先将基表创建出来 然后再添加外键字段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">8</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 总共八位 小数点后面占两位</span></span><br><span class="line">    <span class="comment"># 图书和出版社是一对多 并且书是多的一方 所以外键字段放在书表里面</span></span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">&#x27;Publish&#x27;</span>)  <span class="comment"># 默认就是与出版社表的主键字段做外键关联</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图书和作者是多对多的关系 外键字段建在任意一方均可 但是推荐你建在查询频率较高的一方</span></span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    authors是一个虚拟字段 主要是用来告诉orm 书籍表和作者表是多对多关系</span></span><br><span class="line"><span class="string">    让orm自动帮你创建第三张关系表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Publish</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作者与作者详情是一对一的关系 外键字段建在任意一方都可以 但是推荐你建在查询频率较高的表中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">&#x27;AuthorDetail&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorDetail</span>(models.Model):</span><br><span class="line">    phone = models.BigIntegerField()  <span class="comment"># 或者直接字符类型</span></span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">orm中如何定义三种关系</span></span><br><span class="line"><span class="string">publish = models.ForeignKey(to=&#x27;Publish&#x27;)  # 默认就是与出版社表的主键字段做外键关联</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">authors = models.ManyToManyField(to=&#x27;Author&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">author_detail = models.OneToOneField(to=&#x27;AuthorDetail&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ForeignKey</span></span><br><span class="line"><span class="string">OneToOneField</span></span><br><span class="line"><span class="string">会自动在字段后面加_id后缀</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在django1.X版本中外键默认都是级联更新删除的,2.x,3.x需要指定on_delete参数</span></span><br><span class="line"><span class="comment"># 多对多的表关系可以有好几种创建方式 这里先介绍一种自动创建</span></span><br><span class="line"><span class="comment"># 针对外键字段里面的其他参数 后续遇到百度一下</span></span><br></pre></td></tr></table></figure><h3 id="django请求生命周期流程图-必会"><a href="#django请求生命周期流程图-必会" class="headerlink" title="django请求生命周期流程图(必会)"></a>django请求生命周期流程图(必会)</h3><p><img src="/2022/06/12/Django%E4%BD%BF%E7%94%A8/1686663111551.png" alt="1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">缓存数据库:提前已经将你想要的数据准备好了 你来直接拿就可以,提高效率和响应时间.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django框架前置知识</title>
      <link href="/2022/06/09/Django%E6%A1%86%E6%9E%B6%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/06/09/Django%E6%A1%86%E6%9E%B6%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Django前置知识"><a href="#Django前置知识" class="headerlink" title="Django前置知识"></a>Django前置知识</h2><h3 id="软件开发架构"><a href="#软件开发架构" class="headerlink" title="软件开发架构"></a>软件开发架构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cs架构</span><br><span class="line">bs架构(本质bs也是cs)</span><br></pre></td></tr></table></figure><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">网络协议</span></span><br><span class="line"><span class="string">    HTTP协议数据传输是明文</span></span><br><span class="line"><span class="string">    HTTPS协议数据传输是密文</span></span><br><span class="line"><span class="string">    websocket协议      数据传输是密文</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">四大特性</span></span><br><span class="line"><span class="string">1.基于请求响应</span></span><br><span class="line"><span class="string">2.基于TCP、IP作用于应用层之上的协议</span></span><br><span class="line"><span class="string">3.无状态</span></span><br><span class="line"><span class="string">4.短/无链接</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">数据格式</span></span><br><span class="line"><span class="string">请求首行</span></span><br><span class="line"><span class="string">请求头</span></span><br><span class="line"><span class="string">此处为/r/n</span></span><br><span class="line"><span class="string">请求体</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">响应状态码</span></span><br><span class="line"><span class="string">1XX</span></span><br><span class="line"><span class="string">2XX200</span></span><br><span class="line"><span class="string">3XX</span></span><br><span class="line"><span class="string">4XX403 404</span></span><br><span class="line"><span class="string">5XX500</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 简单服务端撰写</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, addr = server.accept()</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    data = data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    conn.send(<span class="string">b&#x27;HTTP/1.1 200 ok \r\n\r\n&#x27;</span>)</span><br><span class="line">    current_path = data.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> current_path == <span class="string">&#x27;/index&#x27;</span>:</span><br><span class="line">        conn.send(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> current_path == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        conn.send(<span class="string">b&#x27;login&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        conn.send(<span class="string">b&#x27;hello web&#x27;</span>)</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不足之处</span></span><br><span class="line"><span class="number">1.</span>代码重复(服务端代码所有人都要重复写)</span><br><span class="line"><span class="number">2.</span>手动处理http格式的数据 并且只能拿到url后缀 其他数据获取繁琐(数据格式一样处理的代码其实也大致一样 重复写)</span><br><span class="line"><span class="number">3.</span>并发的问题</span><br></pre></td></tr></table></figure><h3 id="借助于wsgiref模块"><a href="#借助于wsgiref模块" class="headerlink" title="借助于wsgiref模块"></a>借助于wsgiref模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照功能的不同拆分之后 后续添加功能只需要在urls.py书写对应关系然后取views.py书写业务逻辑即可</span></span><br><span class="line">urls.py路由与视图函数对应关系</span><br><span class="line">views.py视图函数(后端业务逻辑)</span><br><span class="line">templates文件夹  专门用来存储html文件</span><br></pre></td></tr></table></figure><h3 id="动静态网页"><a href="#动静态网页" class="headerlink" title="动静态网页"></a>动静态网页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">静态网页</span></span><br><span class="line"><span class="string">页面上的数据是直接写死的 亘古不变</span></span><br><span class="line"><span class="string">动态网页</span></span><br><span class="line"><span class="string">数据是实时获取的</span></span><br><span class="line"><span class="string">eg:</span></span><br><span class="line"><span class="string">1.后端获取当前时间展示到html页面上</span></span><br><span class="line"><span class="string">2.数据是从数据库中获取的展示到html页面上</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态网页制作</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_time</span>(<span class="params">env</span>):</span><br><span class="line">    current_time = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)</span><br><span class="line">    <span class="comment"># 如何将后端获取到的数据&quot;传递&quot;给html文件？</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;templates/get_time.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="comment"># data就是一堆字符串</span></span><br><span class="line">    data = data.replace(<span class="string">&#x27;dwadasdsadsadasdas&#x27;</span>,current_time)   <span class="comment"># 在后端将html页面处理好之后再返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个字典传递给html文件 并且可以在文件上方便快捷的操作字典数据</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dict</span>(<span class="params">env</span>):</span><br><span class="line">    user_dic = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;hobby&#x27;</span>:<span class="string">&#x27;read&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;templates/get_dict.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    tmp = Template(data)</span><br><span class="line">    res = tmp.render(user=user_dic)</span><br><span class="line">    <span class="comment"># 给get_dict.html传递了一个值 页面上通过变量名user就能够拿到user_dict</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端获取数据库中数据展示到前端页面</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模版语法之Jinja2模块"><a href="#模版语法之Jinja2模块" class="headerlink" title="模版语法之Jinja2模块"></a>模版语法之Jinja2模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">安装：pip3 install jinja2</span><br><span class="line"><span class="string">&quot;&quot;&quot;模版语法是在后端起作用的&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模版语法(非常贴近python语法)</span></span><br><span class="line">&#123;&#123; user &#125;&#125;</span><br><span class="line">&#123;&#123; user.get(<span class="string">&#x27;username&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123; user.age &#125;&#125;</span><br><span class="line">&#123;&#123; user[<span class="string">&#x27;hobby&#x27;</span>] &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>循环</span><br><span class="line">&#123;% <span class="keyword">for</span> user_dict <span class="keyword">in</span> user_list %&#125;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.<span class="built_in">id</span>&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.username&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.password&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.hobby&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">&#123;% endfor%&#125;</span><br></pre></td></tr></table></figure><h3 id="基于wsgiref的简易版本web框架请求流程"><a href="#基于wsgiref的简易版本web框架请求流程" class="headerlink" title="基于wsgiref的简易版本web框架请求流程"></a>基于wsgiref的简易版本web框架请求流程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.请求来的时候解析http格式的数据 封装成大字典 env</span></span><br><span class="line"><span class="string">2.响应走的时候给数据打包成符合http格式 再返回给浏览器 response</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="python三大主流web框架"><a href="#python三大主流web框架" class="headerlink" title="python三大主流web框架"></a>python三大主流web框架</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">django</span></span><br><span class="line"><span class="string">特点:大而全 自带的功能特别特别特别的多 类似于航空母舰</span></span><br><span class="line"><span class="string">不足之处:</span></span><br><span class="line"><span class="string">有时候过于笨重</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">flask</span></span><br><span class="line"><span class="string">特点:小而精  自带的功能特别特别特别的少 类似于游骑兵</span></span><br><span class="line"><span class="string">第三方的模块特别特别特别的多，如果将flask第三方的模块加起来完全可以盖过django</span></span><br><span class="line"><span class="string">并且也越来越像django</span></span><br><span class="line"><span class="string">不足之处:</span></span><br><span class="line"><span class="string">比较依赖于第三方的开发者</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tornado</span></span><br><span class="line"><span class="string">特点:异步非阻塞 支持高并发</span></span><br><span class="line"><span class="string">牛逼到甚至可以开发游戏服务器</span></span><br><span class="line"><span class="string">不足之处:</span></span><br><span class="line"><span class="string">暂时你不会</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">A:socket部分</span><br><span class="line">B:路由与视图函数对应关系(路由匹配)</span><br><span class="line">C:模版语法</span><br><span class="line"></span><br><span class="line">django</span><br><span class="line">  A用的是别人的wsgiref模块</span><br><span class="line">  B用的是自己的</span><br><span class="line">  C用的是自己的(dtl没有jinja2好用 但是也很方便)</span><br><span class="line"></span><br><span class="line">flask</span><br><span class="line">  A用的是别人的werkzeug(内部还是wsgiref模块)</span><br><span class="line">  B自己写的</span><br><span class="line">  C用的别人的(jinja2)</span><br><span class="line"></span><br><span class="line">tornado</span><br><span class="line">A，B，C都是自己写的(性能无敌)</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何让你的计算机能够正常的启动django项目</span></span><br><span class="line">  <span class="number">1.</span>计算机的名称不能有中文</span><br><span class="line">  <span class="number">2.</span>一个pycharm窗口只开一个项目</span><br><span class="line">  <span class="number">3.</span>项目里面所有的文件也尽量不要出现中文</span><br><span class="line">  <span class="number">4.</span>python解释器尽量使用<span class="number">3.4</span>~<span class="number">3.6</span>之间的版本</span><br><span class="line">  (如果你的项目报错 你点击最后一个报错信息</span><br><span class="line">    去源码中把逗号删掉)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># django版本问题</span></span><br><span class="line"><span class="number">1.</span>X <span class="number">2.</span>X <span class="number">3.</span>X</span><br><span class="line">    pip3 install django==<span class="number">1.11</span><span class="number">.29</span>(版本视个人而定习惯了url写法，虽然re_path也一样)</span><br><span class="line">    pip3 install django==<span class="number">2.2</span><span class="number">.2</span>  (请一直<span class="number">2</span>下去url变成re_path,支持内置转换器嘎嘎好用)</span><br><span class="line">    pip3 install django==<span class="number">3.2</span><span class="number">.5</span>   (支持异步，性能提升)</span><br><span class="line">  终端输入django-admin look look</span><br></pre></td></tr></table></figure><h3 id="django基本操作"><a href="#django基本操作" class="headerlink" title="django基本操作"></a>django基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行操作</span></span><br><span class="line"><span class="comment"># 1.创建django项目</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  你可以先切换到对应的D盘 然后再创建</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  django-admin startproject mysite</span><br><span class="line">    </span><br><span class="line">    mysite文件夹</span><br><span class="line">      manage.py</span><br><span class="line">      mysite文件夹</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">          urls.py</span><br><span class="line">          wsgi.py</span><br><span class="line"> <span class="comment"># 2.启动django项目</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一定要先切换到项目目录下</span></span><br><span class="line"><span class="string">cd /mysite</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">  python3 manage.py runserver </span><br><span class="line">  后面可加端口号</span><br><span class="line">  例如：python3 manage.py runserver <span class="number">8001</span> </span><br><span class="line">  <span class="comment"># http://127.0.0.1:8000/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.创建应用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Next, start your first app by running python manage.py startapp [app_label].</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">python manage.py startapp firstapp</span><br><span class="line">    应用名应该做到见名知意</span><br><span class="line">      user</span><br><span class="line">      order</span><br><span class="line">      web</span><br><span class="line">      ...</span><br><span class="line">django启动：</span><br><span class="line">    <span class="number">1.</span>pycharm提供的终端直接输入完整命令</span><br><span class="line">    <span class="number">2.</span>pycharm </span><br><span class="line">    tools </span><br><span class="line">    run manage.py task提示(前期别多用 背一下完整命令) </span><br><span class="line">    </span><br><span class="line">django必吃三碗饭    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">HttpResponse</span></span><br><span class="line"><span class="string">返回字符串类型的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">render</span></span><br><span class="line"><span class="string">返回html文件的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">redirect</span></span><br><span class="line"><span class="string">重定向</span></span><br><span class="line"><span class="string">  return redirect(&#x27;https://www.mzitu.com/&#x27;)</span></span><br><span class="line"><span class="string">    return redirect(&#x27;/home/&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>   </span><br></pre></td></tr></table></figure><h3 id="主要文件介绍"><a href="#主要文件介绍" class="headerlink" title="主要文件介绍"></a>主要文件介绍</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-mysite项目文件夹</span><br><span class="line">--mysite文件夹</span><br><span class="line">  ---settings.py配置文件</span><br><span class="line">    ---urls.py路由与视图函数对应关系(路由层)</span><br><span class="line">    ---wsgi.pywsgiref模块(不考虑)</span><br><span class="line">  --manage.pydjango的入口文件</span><br><span class="line">  --db.sqlite3django自带的sqlite3数据库(小型数据库 功能不是很多还有bug)</span><br><span class="line">  --firstapp文件夹</span><br><span class="line">  ---admin.pydjango后台管理</span><br><span class="line">    ---apps.py注册使用</span><br><span class="line">    ---migrations文件夹数据库迁移记录</span><br><span class="line">    ---models.py数据库相关的 模型类(orm)</span><br><span class="line">  ---tests.py测试文件</span><br><span class="line">    ---views.py视图函数(视图层)</span><br></pre></td></tr></table></figure><h3 id="应用-app"><a href="#应用-app" class="headerlink" title="应用(app)"></a>应用(app)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">django是一款专门用来开发app的web框架</span></span><br><span class="line"><span class="string">比如开发淘宝</span></span><br><span class="line"><span class="string">订单相关</span></span><br><span class="line"><span class="string">用户相关</span></span><br><span class="line"><span class="string">投诉相关</span></span><br><span class="line"><span class="string">创建不同的app对应不同的功能</span></span><br><span class="line"><span class="string">一个app就是一个独立的功能模块</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">***********************创建的应用一定要去配置文件中注册**********************</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;firstapp.apps.firstappConfig&#x27;</span>,  <span class="comment"># 全写</span></span><br><span class="line">  <span class="string">&#x27;firstapp&#x27;</span>, <span class="comment"># 简写</span></span><br><span class="line">]</span><br><span class="line">ps:你在用pycharm创建项目的时候 pycharm可以帮你创建一个app并且自动注册</span><br><span class="line">***********************************************************************</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python发送邮件</title>
      <link href="/2022/05/15/Python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2022/05/15/Python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="使用SMTP模块发送邮件"><a href="#使用SMTP模块发送邮件" class="headerlink" title="使用SMTP模块发送邮件"></a>使用SMTP模块发送邮件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.header import Header</span><br><span class="line">msg_from = &#x27;***@qq.com&#x27;  # 发送方邮箱</span><br><span class="line">passwd = &#x27;****&#x27;  # 填入发送方邮箱的授权码(填入自己的授权码，相当于邮箱密码)</span><br><span class="line">msg_to = [&#x27;****@qq.com&#x27;,&#x27;**@163.com&#x27;,&#x27;*****@163.com&#x27;]  # 收件人邮箱</span><br><span class="line"># msg_to = &#x27;616564099@qq.com&#x27;  # 收件人邮箱</span><br><span class="line"></span><br><span class="line">subject = &quot;邮件标题&quot;  # 主题</span><br><span class="line">content = &quot;邮件内容，我是邮件内容，哈哈哈&quot;</span><br><span class="line"># 生成一个MIMEText对象（还有一些其它参数）</span><br><span class="line">msg = MIMEText(content)</span><br><span class="line"># 放入邮件主题</span><br><span class="line">msg[&#x27;Subject&#x27;] = subject</span><br><span class="line"># 也可以这样传参</span><br><span class="line"># msg[&#x27;Subject&#x27;] = Header(subject, &#x27;utf-8&#x27;)</span><br><span class="line"># 放入发件人</span><br><span class="line">msg[&#x27;From&#x27;] = msg_from</span><br><span class="line"># 放入收件人</span><br><span class="line"># msg[&#x27;To&#x27;] = &#x27;616564099@qq.com&#x27;</span><br><span class="line"># msg[&#x27;To&#x27;] = &#x27;发给你的邮件啊&#x27;</span><br><span class="line">try:</span><br><span class="line">    # 通过ssl方式发送，服务器地址，端口</span><br><span class="line">    s = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)</span><br><span class="line">    # 登录到邮箱</span><br><span class="line">    s.login(msg_from, passwd)</span><br><span class="line">    # 发送邮件：发送方，收件方，要发送的消息</span><br><span class="line">    s.sendmail(msg_from, msg_to, msg.as_string())</span><br><span class="line">    print(&#x27;成功&#x27;)</span><br><span class="line">except s.SMTPException as e:</span><br><span class="line">    print(e)</span><br><span class="line">finally:</span><br><span class="line">    s.quit()</span><br></pre></td></tr></table></figure><h2 id="发送html格式邮件"><a href="#发送html格式邮件" class="headerlink" title="发送html格式邮件"></a>发送html格式邮件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.header import Header</span><br><span class="line"></span><br><span class="line">msg_from = &#x27;306334678@qq.com&#x27;  # 发送方邮箱</span><br><span class="line">passwd = &#x27;ldoetnwqdjqqbjjj&#x27;  # 填入发送方邮箱的授权码(填入自己的授权码，相当于邮箱密码)</span><br><span class="line">msg_to = [&#x27;616564099@qq.com&#x27;]  # 收件人邮箱</span><br><span class="line"># msg_to = &#x27;616564099@qq.com&#x27;  # 收件人邮箱</span><br><span class="line"></span><br><span class="line">subject = &quot;邮件标题&quot;  # 主题</span><br><span class="line"># *************发送html的邮件**********</span><br><span class="line">content = &#x27;&#x27;&#x27;</span><br><span class="line">&lt;p&gt;Python 邮件发送测试...&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;这是一个链接&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"># 生成一个MIMEText对象</span><br><span class="line">msg = MIMEText(content)</span><br><span class="line"># 放入邮件主题</span><br><span class="line">msg[&#x27;Subject&#x27;] = subject</span><br><span class="line"># 也可以这样传参</span><br><span class="line"># msg[&#x27;Subject&#x27;] = Header(subject, &#x27;utf-8&#x27;)</span><br><span class="line"># 放入发件人</span><br><span class="line">msg[&#x27;From&#x27;] = msg_from</span><br><span class="line"># 放入收件人</span><br><span class="line"># msg[&#x27;To&#x27;] = &#x27;616564099@qq.com&#x27;</span><br><span class="line"># msg[&#x27;To&#x27;] = &#x27;发给你的邮件啊&#x27;</span><br><span class="line">try:</span><br><span class="line">    # 通过ssl方式发送</span><br><span class="line">    s = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)</span><br><span class="line">    # 登录到邮箱</span><br><span class="line">    s.login(msg_from, passwd)</span><br><span class="line">    # 发送邮件：发送方，收件方，要发送的消息</span><br><span class="line">    s.sendmail(msg_from, msg_to, msg.as_string())</span><br><span class="line">    print(&#x27;成功&#x27;)</span><br><span class="line">except s.SMTPException as e:</span><br><span class="line">    print(e)</span><br><span class="line">finally:</span><br><span class="line">    s.quit()</span><br></pre></td></tr></table></figure><h2 id="发送带附件的邮件"><a href="#发送带附件的邮件" class="headerlink" title="发送带附件的邮件"></a>发送带附件的邮件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.header import Header</span><br><span class="line">from email.mime.multipart import MIMEMultipart</span><br><span class="line">from email.mime.base import MIMEBase</span><br><span class="line">from email.mime.image import MIMEImage</span><br><span class="line">from email import  encoders</span><br><span class="line">msg_from = &#x27;306334678@qq.com&#x27;  # 发送方邮箱</span><br><span class="line">passwd = &#x27;***&#x27;  # 填入发送方邮箱的授权码(填入自己的授权码，相当于邮箱密码)</span><br><span class="line">msg_to = [&#x27;616564099@qq.com&#x27;]  # 收件人邮箱</span><br><span class="line"></span><br><span class="line">subject = &quot;邮件标题&quot;  # 主题</span><br><span class="line"># 创建一个带附件的实例</span><br><span class="line">msg = MIMEMultipart()</span><br><span class="line"># 放入邮件主题</span><br><span class="line">msg[&#x27;Subject&#x27;] = subject</span><br><span class="line"># 也可以这样传参</span><br><span class="line"># msg[&#x27;Subject&#x27;] = Header(subject, &#x27;utf-8&#x27;)</span><br><span class="line"># 放入发件人</span><br><span class="line">msg[&#x27;From&#x27;] = msg_from</span><br><span class="line"></span><br><span class="line"># 邮件正文内容</span><br><span class="line">msg.attach(MIMEText(&#x27;Python 邮件发送测试……&#x27;, &#x27;plain&#x27;, &#x27;utf-8&#x27;))</span><br><span class="line"></span><br><span class="line"># 构造附件1，传送当前目录下的 test.txt 文件</span><br><span class="line">att1 = MIMEText(open(&#x27;test.txt&#x27;, &#x27;rb&#x27;).read(), &#x27;base64&#x27;, &#x27;utf-8&#x27;)</span><br><span class="line">att1[&quot;Content-Type&quot;] = &#x27;application/octet-stream&#x27;</span><br><span class="line"># 这里的filename可以任意写，写什么名字，邮件中显示什么名字</span><br><span class="line">att1[&quot;Content-Disposition&quot;] = &#x27;attachment; filename=&quot;test.txt&quot;&#x27;</span><br><span class="line">msg.attach(att1)</span><br><span class="line"></span><br><span class="line"># 构造附件2，</span><br><span class="line">with open(&#x27;test.png&#x27;, &#x27;rb&#x27;) as f:</span><br><span class="line">    # 设置附件的MIME和文件名，这里是png类型:</span><br><span class="line">    mime = MIMEBase(&#x27;image&#x27;, &#x27;png&#x27;, filename=&#x27;test.png&#x27;)</span><br><span class="line">    # 加上必要的头信息:</span><br><span class="line">    mime.add_header(&#x27;Content-Disposition&#x27;, &#x27;attachment&#x27;, filename=&#x27;test.png&#x27;)</span><br><span class="line">    mime.add_header(&#x27;Content-ID&#x27;, &#x27;&lt;0&gt;&#x27;)</span><br><span class="line">    mime.add_header(&#x27;X-Attachment-Id&#x27;, &#x27;0&#x27;)</span><br><span class="line">    # 把附件的内容读进来:</span><br><span class="line">    mime.set_payload(f.read())</span><br><span class="line">    # 用Base64编码:</span><br><span class="line">    encoders.encode_base64(mime)</span><br><span class="line">    # 添加到MIMEMultipart:</span><br><span class="line">    msg.attach(mime)</span><br><span class="line"># 构造附件3，图片格式</span><br><span class="line">fp = open(&#x27;test.png&#x27;, &#x27;rb&#x27;)</span><br><span class="line">msgImage = MIMEImage(fp.read())</span><br><span class="line">fp.close()</span><br><span class="line"># 定义图片 ID，在 HTML 文本中引用</span><br><span class="line">msgImage.add_header(&#x27;Content-ID&#x27;, &#x27;&lt;image1&gt;&#x27;)</span><br><span class="line">msg.attach(msgImage)</span><br><span class="line">try:</span><br><span class="line">    # 通过ssl方式发送</span><br><span class="line">    s = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)</span><br><span class="line">    # 登录到邮箱</span><br><span class="line">    s.login(msg_from, passwd)</span><br><span class="line">    # 发送邮件：发送方，收件方，要发送的消息</span><br><span class="line">    s.sendmail(msg_from, msg_to, msg.as_string())</span><br><span class="line">    print(&#x27;成功&#x27;)</span><br><span class="line">except s.SMTPException as e:</span><br><span class="line">    print(e)</span><br><span class="line">finally:</span><br><span class="line">    s.quit()</span><br></pre></td></tr></table></figure><h2 id="Django发送邮件"><a href="#Django发送邮件" class="headerlink" title="Django发送邮件"></a>Django发送邮件</h2><h4 id="在setting中配置"><a href="#在setting中配置" class="headerlink" title="在setting中配置"></a>在setting中配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># EMAIL_BACKEND = &#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</span><br><span class="line">EMAIL_HOST = &#x27;smtp.qq.com&#x27;  # 如果是 163 改成 smtp.163.com</span><br><span class="line">EMAIL_PORT = 465</span><br><span class="line">EMAIL_HOST_USER = &#x27;306334678@qq.com&#x27;  # 帐号</span><br><span class="line">EMAIL_HOST_PASSWORD = &#x27;***&#x27;  # 密码</span><br><span class="line">DEFAULT_FROM_EMAIL = EMAIL_HOST_USER</span><br><span class="line">#这样收到的邮件，收件人处就会这样显示</span><br><span class="line">#DEFAULT_FROM_EMAIL = &#x27;lqz&lt;&#x27;306334678@qq.com&gt;&#x27;</span><br><span class="line">EMAIL_USE_SSL = True   #使用ssl</span><br><span class="line">#EMAIL_USE_TLS = False # 使用tls</span><br><span class="line"></span><br><span class="line">#EMAIL_USE_SSL 和 EMAIL_USE_TLS 是互斥的，即只能有一个为 True</span><br></pre></td></tr></table></figure><h4 id="view视图函数"><a href="#view视图函数" class="headerlink" title="view视图函数"></a>view视图函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.core.mail import send_mail</span><br><span class="line">import threading</span><br><span class="line">from mybbs import settings</span><br><span class="line"></span><br><span class="line">t = threading.Thread(target=send_mail, args=(&quot;您的文章%s新增了一条评论内容&quot; ,</span><br><span class="line">                                             &#x27;ddd&#x27;,</span><br><span class="line">                                             settings.EMAIL_HOST_USER,</span><br><span class="line">                                             [&quot;616564099@qq.com&quot;])</span><br><span class="line">                     )</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><h4 id="一次性发多封邮件"><a href="#一次性发多封邮件" class="headerlink" title="一次性发多封邮件"></a>一次性发多封邮件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from django.core.mail import send_mass_mail</span><br><span class="line"></span><br><span class="line">message1 = (&#x27;第一封邮件标题&#x27;, &#x27;这是邮件内容&#x27;, &#x27;from@example.com&#x27;, [&#x27;first@example.com&#x27;, &#x27;other@example.com&#x27;])</span><br><span class="line">message2 = (&#x27;第二封邮件标题&#x27;, &#x27;这是邮件内容&#x27;, &#x27;from@example.com&#x27;, [&#x27;second@test.com&#x27;])</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">fail_silently: （可选）布尔值。为 False 时， send_mail 会抛出 smtplib.SMTPException 异常。smtplib 文档列出了所有可能的异常。 这些异常都是 SMTPException 的子类</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">send_mass_mail((message1, message2), fail_silently=False)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">send_mail 每次发邮件都会建立一个连接，发多封邮件时建立多个连接。而 send_mass_mail 是建立单个连接发送多封邮件，所以一次性发送多封邮件时 send_mass_mail 要优于 send_mail。</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h4 id="携带附件或发送html（需要接收方支持）"><a href="#携带附件或发送html（需要接收方支持）" class="headerlink" title="携带附件或发送html（需要接收方支持）"></a>携带附件或发送html（需要接收方支持）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.core.mail import EmailMultiAlternatives</span><br><span class="line"># subject 主题 content 内容 to_addr 是一个列表，发送给哪些人</span><br><span class="line">msg = EmailMultiAlternatives(&#x27;邮件标题&#x27;, &#x27;邮件内容&#x27;, &#x27;发送方&#x27;, [&#x27;接收方&#x27;])</span><br><span class="line">msg.content_subtype = &quot;html&quot;</span><br><span class="line"># 添加附件（可选）</span><br><span class="line">msg.attach_file(&#x27;test.txt&#x27;)</span><br><span class="line"># 发送</span><br><span class="line">msg.send()</span><br></pre></td></tr></table></figure><p>备注：send_mail 每次发邮件都会建立一个连接，发多封邮件时建立多个连接。而 send_mass_mail 是建立单个连接发送多封邮件，所以一次性发送多封邮件时 send_mass_mail 要优于 send_mail。</p><h2 id="各大邮箱smtp服务器及端口"><a href="#各大邮箱smtp服务器及端口" class="headerlink" title="各大邮箱smtp服务器及端口"></a>各大邮箱smtp服务器及端口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">新浪邮箱smtp服务器</span><br><span class="line">外发服务器:smtp.vip.sina.com</span><br><span class="line">收件服务器:pop3.vip.sina.com</span><br><span class="line">新浪免费邮件</span><br><span class="line">外发服务器:smtp.sina.com.cn</span><br><span class="line">收件服务器:pop3.sina.com.cn</span><br><span class="line">163邮箱smtp服务器</span><br><span class="line">pop： pop.163.com</span><br><span class="line">smtp： smtp.163.com</span><br><span class="line">QQ邮箱smtp服务器及端口</span><br><span class="line">接收邮件服务器：imap.exmail.qq.com，使用SSL，端口号993</span><br><span class="line">发送邮件服务器：smtp.exmail.qq.com，使用SSL，端口号465或587</span><br><span class="line">yahoo邮箱smtp服务器</span><br><span class="line">接：pop.mail.yahoo.com.cn</span><br><span class="line">发：smtp.mail.yahoo.com</span><br><span class="line">126邮箱smtp服务器</span><br><span class="line">pop： pop.126.com</span><br><span class="line">smtp： smtp.126.com</span><br><span class="line">新浪免费邮箱</span><br><span class="line">POP3：pop.sina.com</span><br><span class="line">SMTP：smtp.sina.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">新浪VIP邮箱</span><br><span class="line">POP3：pop3.vip.sina.com</span><br><span class="line">SMTP：smtp.vip.sina.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">新浪企业邮箱</span><br><span class="line">POP3：pop.sina.com</span><br><span class="line">SMTP：smtp.sina.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">雅虎邮箱</span><br><span class="line">POP3：pop.mail.yahoo.cn</span><br><span class="line">SMTP：smtp.mail.yahoo.cn</span><br><span class="line">SMTP端口号：25</span><br><span class="line">搜狐邮箱</span><br><span class="line">POP3：pop3.sohu.com</span><br><span class="line">SMTP：smtp.sohu.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">TOM邮箱</span><br><span class="line">POP3：pop.tom.com</span><br><span class="line">SMTP：smtp.tom.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">Gmail邮箱</span><br><span class="line">POP3：pop.gmail.com</span><br><span class="line">SMTP：smtp.gmail.com</span><br><span class="line">SMTP端口号：587 或 25</span><br><span class="line">QQ邮箱</span><br><span class="line">POP3：pop.exmail.qq.com</span><br><span class="line">SMTP：smtp.exmail.qq.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">263邮箱</span><br><span class="line">域名：263.net</span><br><span class="line">POP3：263.net</span><br><span class="line">SMTP：smtp.263.net</span><br><span class="line">SMTP端口号：25</span><br><span class="line">域名：x263.net</span><br><span class="line">POP3：pop.x263.net</span><br><span class="line">SMTP：smtp.x263.net</span><br><span class="line">SMTP端口号：25</span><br><span class="line">域名：263.net.cn</span><br><span class="line">POP3：263.net.cn</span><br><span class="line">SMTP：263.net.cn</span><br><span class="line">SMTP端口号：25</span><br><span class="line">域名：炫我型</span><br><span class="line">POP3：pop.263xmail.com</span><br><span class="line">SMTP：smtp.263xmail.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">21CN 免费邮箱</span><br><span class="line">POP3：pop.21cn.com</span><br><span class="line">SMTP：smtp.21cn.com</span><br><span class="line">IMAP：imap.21cn.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">21CN 经济邮邮箱</span><br><span class="line">POP3：pop.21cn.com</span><br><span class="line">SMTP：smtp.21cn.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">21CN 商务邮邮箱</span><br><span class="line">POP3：pop.21cn.net</span><br><span class="line">SMTP：smtp.21cn.net</span><br><span class="line">SMTP端口号：25</span><br><span class="line">21CN 快感邮箱</span><br><span class="line">POP3：vip.21cn.com</span><br><span class="line">SMTP：vip.21cn.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">21CN Y邮箱</span><br><span class="line">POP3：pop.y.vip.21cn.com</span><br><span class="line">SMTP：smtp.y.vip.21cn.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">中华网任我邮邮箱</span><br><span class="line">POP3：rwpop.china.com</span><br><span class="line">SMTP：rwsmtp.china.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">中华网时尚、商务邮箱</span><br><span class="line">POP3：pop.china.com</span><br><span class="line">SMTP：smtp.china.com</span><br><span class="line">SMTP端口号：25</span><br></pre></td></tr></table></figure><h2 id="qq邮箱配置smtp"><a href="#qq邮箱配置smtp" class="headerlink" title="qq邮箱配置smtp"></a>qq邮箱配置smtp</h2><p>点击账户,开启IMAP&#x2F;SMTP服务即可.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再论元类</title>
      <link href="/2022/05/08/%E5%86%8D%E8%AE%BA%E5%85%83%E7%B1%BB/"/>
      <url>/2022/05/08/%E5%86%8D%E8%AE%BA%E5%85%83%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="元类介绍"><a href="#元类介绍" class="headerlink" title="元类介绍"></a>元类介绍</h1><p>什么是元类呢？一切源自于一句话：python中一切皆为对象。让我们先定义一个类，然后逐步分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure><p>所有的对象都是实例化或者说调用类而得到的（调用类的过程称为类的实例化），比如对象t1是调用类StanfordTeacher得到的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1)) <span class="comment">#查看对象t1的类是&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>如果一切皆为对象，那么类StanfordTeacher本质也是一个对象，既然所有的对象都是调用类得到的，那么StanfordTeacher必然也是调用了一个类得到的，这个类称为元类</p><p><strong>于是我们可以推导出&#x3D;&#x3D;&#x3D;&gt;产生StanfordTeacher的过程一定发生了：StanfordTeacher&#x3D;元类(…)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(StanfordTeacher)) <span class="comment"># 结果为&lt;class &#x27;type&#x27;&gt;，证明是调用了type这个元类而产生的StanfordTeacher，即默认的元类为type</span></span><br></pre></td></tr></table></figure><p><img src="/2022/05/08/%E5%86%8D%E8%AE%BA%E5%85%83%E7%B1%BB/1.jpg" alt="1"></p><h1 id="class关键字创建类的流程分析"><a href="#class关键字创建类的流程分析" class="headerlink" title="class关键字创建类的流程分析"></a>class关键字创建类的流程分析</h1><p>上文我们基于python中一切皆为对象的概念分析出：我们用class关键字定义的类本身也是一个对象，负责产生该对象的类称之为元类（元类可以简称为类的类），内置的元类为type</p><p>class关键字在帮我们创建类时，必然帮我们调用了元类StanfordTeacher&#x3D;type(…)，那调用type时传入的参数是什么呢？必然是类的关键组成部分，一个类有三大组成部分，分别是</p><p>1、类名class_name&#x3D;’StanfordTeacher’</p><p>2、基类们class_bases&#x3D;(object,)</p><p>3、类的名称空间class_dic，类的名称空间是执行类体代码而得到的</p><p>调用type时会依次传入以上三个参数</p><p>综上，class关键字帮我们创建一个类应该细分为以下四个过程</p><p><img src="/2022/05/08/%E5%86%8D%E8%AE%BA%E5%85%83%E7%B1%BB/2.jpg" alt="2"></p><p>补充：exec的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#exec：三个参数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#参数一：包含一系列python代码的字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#参数二：全局作用域（字典形式），如果不指定，默认为globals()</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#参数三：局部作用域（字典形式），如果不指定，默认为locals()</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#可以把exec命令的执行当成是一个函数的执行，会将执行期间产生的名字存放于局部名称空间中</span></span><br><span class="line">g=&#123;</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">l=&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">global x,z</span></span><br><span class="line"><span class="string">x=100</span></span><br><span class="line"><span class="string">z=200</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">m=300</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>,g,l)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(g) <span class="comment">#&#123;&#x27;x&#x27;: 100, &#x27;y&#x27;: 2,&#x27;z&#x27;:200,......&#125;</span></span><br><span class="line"><span class="built_in">print</span>(l) <span class="comment">#&#123;&#x27;m&#x27;: 300&#125;</span></span><br></pre></td></tr></table></figure><h1 id="自定义元类控制类StanfordTeacher的创建"><a href="#自定义元类控制类StanfordTeacher的创建" class="headerlink" title="自定义元类控制类StanfordTeacher的创建"></a>自定义元类控制类StanfordTeacher的创建</h1><p>一个类没有声明自己的元类，默认他的元类就是type，除了使用内置元类type，我们也可以通过继承type来自定义元类，然后使用metaclass关键字参数为一个类指定元类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># StanfordTeacher=Mymeta(&#x27;StanfordTeacher&#x27;,(object),&#123;...&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta): </span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure><p>自定义元类可以控制类的产生过程，类的产生过程其实就是元类的调用过程,即StanfordTeacher&#x3D;Mymeta(‘StanfordTeacher’,(object),{…})，调用Mymeta会先产生一个空对象StanfordTeacher,然后连同调用Mymeta括号内的参数一同传给Mymeta下的__init__方法,完成初始化，于是我们可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,class_name,class_bases,class_dic</span>):</span><br><span class="line">        <span class="comment"># print(self) #&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="comment"># print(class_bases) #(&lt;class &#x27;object&#x27;&gt;,)</span></span><br><span class="line">        <span class="comment"># print(class_dic) #&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__qualname__&#x27;: &#x27;StanfordTeacher&#x27;, &#x27;school&#x27;: &#x27;Stanford&#x27;, &#x27;__init__&#x27;: &lt;function StanfordTeacher.__init__ at 0x102b95ae8&gt;, &#x27;say&#x27;: &lt;function StanfordTeacher.say at 0x10621c6a8&gt;&#125;</span></span><br><span class="line">        <span class="built_in">super</span>(Mymeta, self).__init__(class_name, class_bases, class_dic)  <span class="comment"># 重用父类的功能</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> class_name.islower():</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;类名%s请修改为驼峰体&#x27;</span> %class_name)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;__doc__&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> class_dic <span class="keyword">or</span> <span class="built_in">len</span>(class_dic[<span class="string">&#x27;__doc__&#x27;</span>].strip(<span class="string">&#x27; \n&#x27;</span>)) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;类中必须有文档注释，并且文档注释不能为空&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># StanfordTeacher=Mymeta(&#x27;StanfordTeacher&#x27;,(object),&#123;...&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    类StanfordTeacher的文档注释</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure><h1 id="自定义元类控制类StanfordTeacher的调用"><a href="#自定义元类控制类StanfordTeacher的调用" class="headerlink" title="自定义元类控制类StanfordTeacher的调用"></a>自定义元类控制类StanfordTeacher的调用</h1><p>储备知识：<strong>call</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        <span class="built_in">print</span>(args)</span><br><span class="line">        <span class="built_in">print</span>(kwargs)</span><br><span class="line"> </span><br><span class="line">obj=Foo()</span><br><span class="line"><span class="comment">#1、要想让obj这个对象变成一个可调用的对象，需要在该对象的类中定义一个方法__call__方法，该方法会在调用对象时自动触发</span></span><br><span class="line"><span class="comment">#2、调用obj的返回值就是__call__方法的返回值</span></span><br><span class="line">res=obj(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,x=<span class="number">1</span>,y=<span class="number">2</span>) </span><br></pre></td></tr></table></figure><p>由上例得知，调用一个对象，就是触发对象所在类中的__call__方法的执行，如果把StanfordTeacher也当做一个对象，那么在StanfordTeacher这个对象的类中也必然存在一个__call__方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(self) <span class="comment">#&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(args) <span class="comment">#(&#x27;lili&#x27;, 18)</span></span><br><span class="line">        <span class="built_in">print</span>(kwargs) <span class="comment">#&#123;&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta):</span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用StanfordTeacher就是在调用StanfordTeacher类中的__call__方法</span></span><br><span class="line"><span class="comment"># 然后将StanfordTeacher传给self,溢出的位置参数传给*，溢出的关键字参数传给**</span></span><br><span class="line"><span class="comment"># 调用StanfordTeacher的返回值就是调用__call__的返回值</span></span><br><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(t1) <span class="comment">#123</span></span><br></pre></td></tr></table></figure><p>默认地，调用t1&#x3D;StanfordTeacher(‘lili’,18)会做三件事</p><p>1、产生一个空对象obj</p><p>2、调用__init__方法初始化对象obj</p><p>3、返回初始化好的obj</p><p>对应着，StanfordTeacher类中的__call__方法也应该做这三件事</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="comment">#1、调用__new__产生一个空对象obj</span></span><br><span class="line">        obj=self.__new__(self) <span class="comment"># 此处的self是类OldoyTeacher，必须传参，代表创建一个StanfordTeacher的对象obj</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">#2、调用__init__初始化空对象obj</span></span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#3、返回初始化好的对象obj</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta):</span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(t1.__dict__) <span class="comment">#&#123;&#x27;name&#x27;: &#x27;lili&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上例的__call__相当于一个模板，我们可以在该基础上改写__call__的逻辑从而控制调用StanfordTeacher的过程，比如将StanfordTeacher的对象的所有属性都变成私有的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="comment">#1、调用__new__产生一个空对象obj</span></span><br><span class="line">        obj=self.__new__(self) <span class="comment"># 此处的self是类StanfordTeacher，必须传参，代表创建一个StanfordTeacher的对象obj</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">#2、调用__init__初始化空对象obj</span></span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 在初始化之后，obj.__dict__里就有值了</span></span><br><span class="line">        obj.__dict__=&#123;<span class="string">&#x27;_%s__%s&#x27;</span> %(self.__name__,k):v <span class="keyword">for</span> k,v <span class="keyword">in</span> obj.__dict__.items()&#125;</span><br><span class="line">        <span class="comment">#3、返回初始化好的对象obj</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta):</span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(t1.__dict__) <span class="comment">#&#123;&#x27;_StanfordTeacher__name&#x27;: &#x27;lili&#x27;, &#x27;_StanfordTeacher__age&#x27;: 18&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上例中涉及到查找属性的问题，比如self.__new__，请看下一小节</p><h1 id="再看属性查找"><a href="#再看属性查找" class="headerlink" title="再看属性查找"></a>再看属性查找</h1><p>结合python继承的实现原理+元类重新看属性的查找应该是什么样子呢？？？</p><p>在学习完元类后，其实我们用class自定义的类也全都是对象（包括object类本身也是元类type的 一个实例，可以用type(object)查看），我们学习过继承的实现原理，如果把类当成对象去看，将下述继承应该说成是：对象StanfordTeacher继承对象Foo，对象Foo继承对象Bar，对象Bar继承对象object</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    n=<span class="number">444</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        obj=self.__new__(self)</span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    n=<span class="number">333</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">Bar</span>):</span><br><span class="line">    n=<span class="number">222</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(Foo,metaclass=Mymeta):</span><br><span class="line">    n=<span class="number">111</span></span><br><span class="line"> </span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(StanfordTeacher.n) <span class="comment">#自下而上依次注释各个类中的n=xxx，然后重新运行程序，发现n的查找顺序为StanfordTeacher-&gt;Foo-&gt;Bar-&gt;object-&gt;Mymeta-&gt;type</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>于是属性查找应该分成两层，一层是对象层（基于c3算法的MRO）的查找，另外一个层则是类层（即元类层）的查找</p><p><img src="/2022/05/08/%E5%86%8D%E8%AE%BA%E5%85%83%E7%B1%BB/3.jpg" alt="3"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找顺序：</span></span><br><span class="line"><span class="comment">#1、先对象层：StanfordTeacher-&gt;Foo-&gt;Bar-&gt;object</span></span><br><span class="line"><span class="comment">#2、然后元类层：Mymeta-&gt;type</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>依据上述总结，我们来分析下元类Mymeta中__call__里的self.__new__的查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): </span><br><span class="line">    n=<span class="number">444</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        obj=self.__new__(self)</span><br><span class="line">        <span class="built_in">print</span>(self.__new__ <span class="keyword">is</span> <span class="built_in">object</span>.__new__) <span class="comment">#True</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    n=<span class="number">333</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Bar.__new__&#x27;)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">Bar</span>):</span><br><span class="line">    n=<span class="number">222</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Foo.__new__&#x27;)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(Foo,metaclass=Mymeta):</span><br><span class="line">    n=<span class="number">111</span></span><br><span class="line"> </span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;StanfordTeacher.__new__&#x27;)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>) <span class="comment">#触发StanfordTeacher的类中的__call__方法的执行，进而执行self.__new__开始查找 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结，Mymeta下的__call__里的self.<strong>new__在StanfordTeacher、Foo、Bar里都没有找到__new__的情况下，会去找object里的__new__，而object下默认就有一个__new__，所以即便是之前的类均未实现__new</strong>,也一定会在object中找到一个，根本不会、也根本没必要再去找元类Mymeta-&gt;type中查找__new__</p><p>我们在元类的__call__中也可以用object.<strong>new</strong>(self)去造对象</p><p><img src="/2022/05/08/%E5%86%8D%E8%AE%BA%E5%85%83%E7%B1%BB/4.jpg" alt="4"></p><p><strong>但我们还是推荐在__call__中使用self.<strong>new</strong>(self)去创造空对象，因为这种方式会检索三个类StanfordTeacher-&gt;Foo-&gt;Bar,而object.__new__则是直接跨过了他们三个</strong></p><p>最后说明一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    n=<span class="number">444</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        obj=<span class="built_in">type</span>.__new__(cls,*args,**kwargs) <span class="comment"># 必须按照这种传值方式</span></span><br><span class="line">        <span class="built_in">print</span>(obj.__dict__)</span><br><span class="line">        <span class="comment"># return obj # 只有在返回值是type的对象时，才会触发下面的__init__</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,class_name,class_bases,class_dic</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run。。。&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta): <span class="comment">#StanfordTeacher=Mymeta(&#x27;StanfordTeacher&#x27;,(object),&#123;...&#125;)</span></span><br><span class="line">    n=<span class="number">111</span></span><br><span class="line"> </span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Mymeta)) <span class="comment">#&lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 产生类StanfordTeacher的过程就是在调用Mymeta，而Mymeta也是type类的一个对象，那么Mymeta之所以可以调用，一定是在元类type中有一个__call__方法</span></span><br><span class="line"><span class="comment"># 该方法中同样需要做至少三件事：</span></span><br><span class="line"><span class="comment"># class type:</span></span><br><span class="line"><span class="comment">#     def __call__(self, *args, **kwargs): #self=&lt;class &#x27;__main__.Mymeta&#x27;&gt;</span></span><br><span class="line"><span class="comment">#         obj=self.__new__(self,*args,**kwargs) # 产生Mymeta的一个对象</span></span><br><span class="line"><span class="comment">#         self.__init__(obj,*args,**kwargs) </span></span><br><span class="line"><span class="comment">#         return obj</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p><strong>1、在元类中控制把自定义类的数据属性都变成大写</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls,name,bases,attrs</span>):</span><br><span class="line">        update_attrs=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">callable</span>(v) <span class="keyword">and</span> <span class="keyword">not</span> k.startswith(<span class="string">&#x27;__&#x27;</span>):</span><br><span class="line">                update_attrs[k.upper()]=v</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                update_attrs[k]=v</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls,name,bases,update_attrs)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>(metaclass=Mymetaclass):</span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    tag=<span class="string">&#x27;Legend of the Dragon&#x27;</span> <span class="comment">#龙的传人</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is walking&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(Chinese.__dict__)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;COUNTRY&#x27;: &#x27;China&#x27;, </span></span><br><span class="line"><span class="string"> &#x27;TAG&#x27;: &#x27;Legend of the Dragon&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;walk&#x27;: &lt;function Chinese.walk at 0x0000000001E7B950&gt;,</span></span><br><span class="line"><span class="string"> &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;Chinese&#x27; objects&gt;,                                         </span></span><br><span class="line"><span class="string"> &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;Chinese&#x27; objects&gt;,</span></span><br><span class="line"><span class="string"> &#x27;__doc__&#x27;: None&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2、在元类中控制自定义的类无需__init__方法</strong></p><p> 1.元类帮其完成创建对象，以及初始化操作；</p><p>　　2.要求实例化时传参必须为关键字形式，否则抛出异常TypeError: must use keyword argument</p><p>　　3.key作为用户自定义类产生对象的属性，且所有属性变成大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="comment"># def __new__(cls,name,bases,attrs):</span></span><br><span class="line">    <span class="comment">#     update_attrs=&#123;&#125;</span></span><br><span class="line">    <span class="comment">#     for k,v in attrs.items():</span></span><br><span class="line">    <span class="comment">#         if not callable(v) and not k.startswith(&#x27;__&#x27;):</span></span><br><span class="line">    <span class="comment">#             update_attrs[k.upper()]=v</span></span><br><span class="line">    <span class="comment">#         else:</span></span><br><span class="line">    <span class="comment">#             update_attrs[k]=v</span></span><br><span class="line">    <span class="comment">#     return type.__new__(cls,name,bases,update_attrs)</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> args:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;must use keyword argument for key function&#x27;</span>)</span><br><span class="line">        obj = <span class="built_in">object</span>.__new__(self) <span class="comment">#创建对象，self为类Foo</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            obj.__dict__[k.upper()]=v</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>(metaclass=Mymetaclass):</span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    tag=<span class="string">&#x27;Legend of the Dragon&#x27;</span> <span class="comment">#龙的传人</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is walking&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">p=Chinese(name=<span class="string">&#x27;lili&#x27;</span>,age=<span class="number">18</span>,sex=<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.__dict__)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3、在元类中控制自定义的类产生的对象相关的属性全部为隐藏属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,class_name,class_bases,class_dic</span>):</span><br><span class="line">        <span class="comment">#控制类Foo的创建</span></span><br><span class="line">        <span class="built_in">super</span>(Mymeta,self).__init__(class_name,class_bases,class_dic)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment">#控制Foo的调用过程，即Foo对象的产生过程</span></span><br><span class="line">        obj = self.__new__(self)</span><br><span class="line">        self.__init__(obj, *args, **kwargs)</span><br><span class="line">        obj.__dict__=&#123;<span class="string">&#x27;_%s__%s&#x27;</span> %(self.__name__,k):v <span class="keyword">for</span> k,v <span class="keyword">in</span> obj.__dict__.items()&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="built_in">object</span>,metaclass=Mymeta):  <span class="comment"># Foo=Mymeta(...)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age,sex</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">obj=Foo(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obj.__dict__)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4、基于元类实现单例模式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#步骤五：基于元类实现单例模式</span></span><br><span class="line"><span class="comment"># 单例：即单个实例，指的是同一个类实例化多次的结果指向同一个对象，用于节省内存空间</span></span><br><span class="line"><span class="comment"># 如果我们从配置文件中读取配置来进行实例化，在配置相同的情况下，就没必要重复产生对象浪费内存了</span></span><br><span class="line"><span class="comment">#settings.py文件内容如下</span></span><br><span class="line">HOST=<span class="string">&#x27;1.1.1.1&#x27;</span></span><br><span class="line">PORT=<span class="number">3306</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#方式一:定义一个类方法实现单例模式</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mysql</span>:</span><br><span class="line">    __instance=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port</span>):</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.__instance:</span><br><span class="line">            cls.__instance=cls(settings.HOST,settings.PORT)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"> </span><br><span class="line">obj1=Mysql(<span class="string">&#x27;1.1.1.2&#x27;</span>,<span class="number">3306</span>)</span><br><span class="line">obj2=Mysql(<span class="string">&#x27;1.1.1.3&#x27;</span>,<span class="number">3307</span>)</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2) <span class="comment">#False</span></span><br><span class="line"> </span><br><span class="line">obj3=Mysql.singleton()</span><br><span class="line">obj4=Mysql.singleton()</span><br><span class="line"><span class="built_in">print</span>(obj3 <span class="keyword">is</span> obj4) <span class="comment">#True</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#方式二：定制元类实现单例模式</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,bases,dic</span>): <span class="comment">#定义类Mysql时就触发</span></span><br><span class="line">        <span class="comment"># 事先先从配置文件中取配置来造一个Mysql的实例出来</span></span><br><span class="line">        self.__instance = <span class="built_in">object</span>.__new__(self)  <span class="comment"># 产生对象</span></span><br><span class="line">        self.__init__(self.__instance, settings.HOST, settings.PORT)  <span class="comment"># 初始化对象</span></span><br><span class="line">        <span class="comment"># 上述两步可以合成下面一步</span></span><br><span class="line">        <span class="comment"># self.__instance=super().__call__(*args,**kwargs)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name,bases,dic)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#Mysql(...)时触发</span></span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">or</span> kwargs: <span class="comment"># args或kwargs内有值</span></span><br><span class="line">            obj=<span class="built_in">object</span>.__new__(self)</span><br><span class="line">            self.__init__(obj,*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">        <span class="keyword">return</span> self.__instance</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mysql</span>(metaclass=Mymeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port</span>):</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"> </span><br><span class="line">obj1=Mysql() <span class="comment"># 没有传值则默认从配置文件中读配置来实例化，所有的实例应该指向一个内存地址</span></span><br><span class="line">obj2=Mysql()</span><br><span class="line">obj3=Mysql()</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2 <span class="keyword">is</span> obj3)</span><br><span class="line">obj4=Mysql(<span class="string">&#x27;1.1.1.4&#x27;</span>,<span class="number">3307</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#方式三:定义一个装饰器实现单例模式</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>): <span class="comment">#cls=Mysql</span></span><br><span class="line">    _instance=cls(settings.HOST,settings.PORT)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">or</span> kwargs:</span><br><span class="line">            obj=cls(*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">        <span class="keyword">return</span> _instance</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@singleton </span><span class="comment"># Mysql=singleton(Mysql)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mysql</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port</span>):</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"> </span><br><span class="line">obj1=Mysql()</span><br><span class="line">obj2=Mysql()</span><br><span class="line">obj3=Mysql()</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2 <span class="keyword">is</span> obj3) <span class="comment">#True</span></span><br><span class="line"> </span><br><span class="line">obj4=Mysql(<span class="string">&#x27;1.1.1.3&#x27;</span>,<span class="number">3307</span>)</span><br><span class="line">obj5=Mysql(<span class="string">&#x27;1.1.1.4&#x27;</span>,<span class="number">3308</span>)</span><br><span class="line"><span class="built_in">print</span>(obj3 <span class="keyword">is</span> obj4) <span class="comment">#False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多进程多线程携程区别</title>
      <link href="/2022/03/30/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%90%BA%E7%A8%8B%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/03/30/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%90%BA%E7%A8%8B%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="CPU密集型计算"><a href="#CPU密集型计算" class="headerlink" title="CPU密集型计算"></a>CPU密集型计算</h3><p>CPU密集型也叫计算机密集型， 是指 I&#x2F;O 在很短的时间就可以完成，CPU需要大量的计算和处理，特点是 CPU 占用率相当高。比较理想方案是： 线程数&#x3D; CPU核数;</p><p>例如: 压缩解压缩、加密解密、正则表达式搜索、计算圆周率，判断素数、视频解码等</p><h3 id="IO密集型计算"><a href="#IO密集型计算" class="headerlink" title="IO密集型计算"></a>IO密集型计算</h3><p>IO密集型指的是系统运作大部分的状况是CPU在等IO(硬盘&#x2F;内存）的读&#x2F;写操作，CPU占用率任然较低。<br>对于IO密集型应用：线程数&#x3D; CPU核心数&#x2F;(1-阻塞系数);</p><p>例如:文件处理程序、网络爬虫程序、读写数据库程序、数据库、web应用等</p><h3 id="Python对并发编程的支持"><a href="#Python对并发编程的支持" class="headerlink" title="Python对并发编程的支持"></a>Python对并发编程的支持</h3><p><strong>多进程：</strong>multiprocessing, 利用多核CPU的能力，真正的并行执行任务 。</p><p><strong>多线程</strong>：threading, 利用 CPU 和 IO 可以同时执行的原理，让 CPU 不会干巴巴等待 IO 完成。</p><p><strong>异步IO：</strong>asyncio, 在单线程利用 CPU 和 IO 同时执行的原理，实现函数异步执行。</p><h3 id="多进程多线程多协程对比"><a href="#多进程多线程多协程对比" class="headerlink" title="多进程多线程多协程对比"></a>多进程多线程多协程对比</h3><h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><p>-优点:可以利用多核CPU并行运算<br>-缺点:占用资源最多、可启动数目比线程少<br>-适用于:CPU密集型计算</p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p>-优点:相比进程，更轻量级、占用资源少-<br>-缺点:<br>    -相比进程:多线程只能并发执行，不能利用多CPU(GIL)<br>    -相比协程:启动数目有限制,占用内存资源，有线程切换开销</p><p>-适用于:IO密集型计算、同时运行的任务数目要求不多</p><h4 id="多协程"><a href="#多协程" class="headerlink" title="多协程"></a>多协程</h4><p>-优点:内存开销最少、启动协程数量最多<br>-缺点:支持的库有限制(aiohttp vs requests)、代码实现复杂<br>-适用于:IO密集型计算、需要超多任务运行、但有现成库的场景</p><h3 id="根据任务选择对应技术"><a href="#根据任务选择对应技术" class="headerlink" title="根据任务选择对应技术"></a>根据任务选择对应技术</h3><p><strong>对任务特点进行判断：</strong></p><p>​CPU密集型：——多进程</p><p>​IO密集型：</p><p>​(1)需要超多任务量</p><p>​(2)有现成协程库支持</p><p>​(3)实现复杂程度可接受</p><p>​——多协程</p><p>​——多线程</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/03/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/03/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="手写一个单例"><a href="#手写一个单例" class="headerlink" title="手写一个单例"></a>手写一个单例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#这里使用方法__new__来实现单例模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">object</span>):<span class="comment">#抽象单例</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kw</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">            orig = <span class="built_in">super</span>(Singleton, cls)</span><br><span class="line">            cls._instance = orig.__new__(cls, *args, **kw)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="comment">#总线</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span>(<span class="title class_ inherited__">Singleton</span>):</span><br><span class="line">    lock = threading.RLock()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendData</span>(<span class="params">self,data</span>):</span><br><span class="line">        self.lock.acquire()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sending Signal Data...&quot;</span>,data)</span><br><span class="line">        self.lock.release()</span><br><span class="line">        </span><br><span class="line"><span class="comment">#线程对象，为更加说明单例的含义，这里将Bus对象实例化写在了run里</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VisitEntity</span>(threading.Thread):</span><br><span class="line">    my_bus=<span class="string">&quot;&quot;</span></span><br><span class="line">    name=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setName</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.my_bus=Bus()</span><br><span class="line">        self.my_bus.sendData(self.name)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>  __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Entity %d begin to run...&quot;</span>%i)</span><br><span class="line">        my_entity=VisitEntity()</span><br><span class="line">        my_entity.setName(<span class="string">&quot;Entity_&quot;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">        my_entity.start()</span><br></pre></td></tr></table></figure><h4 id="单例模式的优点与应用"><a href="#单例模式的优点与应用" class="headerlink" title="单例模式的优点与应用"></a>单例模式的优点与应用</h4><p><strong>单例模式的优点：</strong><br>1、由于单例模式要求在全局内只有一个实例，因而可以节省比较多的内存空间；<br>2、全局只有一个接入点，可以更好地进行数据同步控制，避免多重占用；<br>3、单例可长驻内存，减少系统开销。<br><strong>单例模式的应用举例：</strong><br>1、生成全局惟一的序列号；<br>2、访问全局复用的惟一资源，如磁盘、总线等；<br>3、单个对象占用的资源过多，如数据库等；<br>4、系统全局统一管理，如Windows下的Task Manager；<br>5、网站计数器。<br>6、数据库配置，数据库连接池<br>7、应用程序的日志应用</p><h4 id="单例模式的缺点"><a href="#单例模式的缺点" class="headerlink" title="单例模式的缺点"></a>单例模式的缺点</h4><p>1、单例模式的扩展是比较困难的；<br>2、赋于了单例以太多的职责，某种程度上违反单一职责原则（六大原则后面会讲到）;<br>3、单例模式是并发协作软件模块中需要最先完成的，因而其不利于测试；<br>4、单例模式在某种情况下会导致“资源瓶颈”。</p><h3 id="工厂模式、抽象工厂模式"><a href="#工厂模式、抽象工厂模式" class="headerlink" title="工厂模式、抽象工厂模式"></a>工厂模式、抽象工厂模式</h3><p><strong>工厂模式定义</strong>：定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。其通用类图如下。其产品类定义产品的公共属性和接口，工厂类定义产品实例化的“方式”。</p><p><strong>抽象工厂模式定义</strong>：提供一个创建一系列相关或相互依赖对象的接口。而无需指定他们的类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PetShop</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,animal_factory=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment">#  pet 宠物  factory 工厂</span></span><br><span class="line">        self.pet_factory = animal_factory</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_pet</span>(<span class="params">self</span>):</span><br><span class="line">        pet = self.pet_factory.get_pet()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is a lovely&quot;</span>, pet)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;it says&quot;</span>,pet.speak())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;it eats&quot;</span>,self.pet_factory.get_food())</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this is Dog&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Cat&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this is Cat&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CatFactory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_pet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Cat()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_food</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;cat food&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogFactory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_pet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Dog()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_food</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;dog food&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_factory</span>():</span><br><span class="line">    <span class="keyword">return</span> random.choice([DogFactory,CatFactory])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    shop = PetShop() <span class="comment"># pet_factory 默认为None，后面延迟加载,先给一个空对象后赋值属性</span></span><br><span class="line">    shop.pet_factory = get_factory()()  <span class="comment">#  延迟加载，随机选择一个工厂然后实例出来一个对象给商店</span></span><br><span class="line">    shop.show_pet()</span><br></pre></td></tr></table></figure><h4 id="工厂模式的优点与应用"><a href="#工厂模式的优点与应用" class="headerlink" title="工厂模式的优点与应用"></a>工厂模式的优点与应用</h4><p>工厂模式、抽象工厂模式的优点：<br>1、工厂模式巨有非常好的封装性，代码结构清晰；在抽象工厂模式中，其结构还可以随着需要进行更深或者更浅的抽象层级调整，非常灵活；<br>2、屏蔽产品类，使产品的被使用业务场景和产品的功能细节可以分而开发进行，是比较典型的解耦框架。<br>工厂模式、抽象工厂模式的使用场景：<br>1、当系统实例要求比较灵活和可扩展时，可以考虑工厂模式或者抽象工厂模式实现。比如，<br>在通信系统中，高层通信协议会很多样化，同时，上层协议依赖于下层协议，那么就可以对应建立对应层级的抽象工厂，根据不同的“产品需求”去生产定制的实例。</p><h4 id="工厂模式的不足"><a href="#工厂模式的不足" class="headerlink" title="工厂模式的不足"></a>工厂模式的不足</h4><p>1、工厂模式相对于直接生成实例过程要复杂一些，所以，在小项目中，可以不使用工厂模式；<br>2、抽象工厂模式中，产品类的扩展比较麻烦。毕竟，每一个工厂对应每一类产品，产品扩展，就意味着相应的抽象工厂也要扩展。</p><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>建造者模式的定义如下：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。<br>建造者模式的作用，就是将“构建”和“表示”分离，以达到解耦的作用。在下面订单的构建过程中，如果将order直接通过参数定义好（其构建与表示没有分离），同时在多处进行订单生成，此时需要修改订单内容，则需要一处处去修改，业务风险也就提高了不少。<br>在建造者模式中，还可以加一个Director类，用以安排已有模块的构造步骤。对于在建造者中有比较严格的顺序要求时，该类会有比较大的用处。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">orderDirector</span>():</span><br><span class="line">    order_builder=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,order_builder</span>):</span><br><span class="line">        self.order_builder=order_builder</span><br><span class="line">    <span class="comment"># 汉堡 快餐 饮料</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createOrder</span>(<span class="params">self,burger,snack,beverage</span>):</span><br><span class="line">        self.order_builder.addBurger(burger)</span><br><span class="line">        self.order_builder.addSnack(snack)</span><br><span class="line">        self.order_builder.addBeverage(beverage)</span><br><span class="line">        <span class="keyword">return</span> self.order_builder.build()</span><br></pre></td></tr></table></figure><h4 id="建造者模式的优点和使用场景"><a href="#建造者模式的优点和使用场景" class="headerlink" title="建造者模式的优点和使用场景"></a>建造者模式的优点和使用场景</h4><p><strong>优点：</strong><br>1、封装性好，用户可以不知道对象的内部构造和细节，就可以直接建造对象；<br>2、系统扩展容易；<br>3、建造者模式易于使用，非常灵活。在构造性的场景中很容易实现“流水线”；<br>4、便于控制细节。<br><strong>使用场景：</strong><br>1、目标对象由组件构成的场景中，很适合建造者模式。例如，在一款赛车游戏中，车辆生成时，需要根据级别、环境等，选择轮胎、悬挂、骨架等部件，构造一辆“赛车”；<br>2、在具体的场景中，对象内部接口需要根据不同的参数而调用顺序有所不同时，可以使用建造者模式。例如：一个植物养殖器系统，对于某些不同的植物，浇水、施加肥料的顺序要求可能会不同，因而可以在Director中维护一个类似于队列的结构，在实例化时作为参数代入到具体建造者中。</p><h4 id="建造者模式的缺点"><a href="#建造者模式的缺点" class="headerlink" title="建造者模式的缺点"></a>建造者模式的缺点</h4><p>1、“加工工艺”对用户不透明。（封装的两面性）</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>原型模式定义如下：用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。<br>需要注意一点的是,进行clone操作后，新对象的构造函数没有被二次执行，新对象的内容是从内存里直接拷贝的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> copy, deepcopy</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">simpleLayer</span>:</span><br><span class="line">    background=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    content=<span class="string">&quot;blank&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getContent</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.content</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getBackgroud</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.background</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paint</span>(<span class="params">self,painting</span>):</span><br><span class="line">        self.content=painting</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setParent</span>(<span class="params">self,p</span>):</span><br><span class="line">        self.background[<span class="number">3</span>]=p</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fillBackground</span>(<span class="params">self,back</span>):</span><br><span class="line">        self.background=back</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clone</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> copy(self)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deep_clone</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> deepcopy(self)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>  __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    dog_layer=simpleLayer()</span><br><span class="line">    dog_layer.paint(<span class="string">&quot;Dog&quot;</span>)</span><br><span class="line">    dog_layer.fillBackground([<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Background:&quot;</span>,dog_layer.getBackgroud())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Painting:&quot;</span>,dog_layer.getContent())</span><br><span class="line">    another_dog_layer=dog_layer.clone()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Background:&quot;</span>, another_dog_layer.getBackgroud())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Painting:&quot;</span>, another_dog_layer.getContent())</span><br></pre></td></tr></table></figure><h4 id="原型模式的优点和使用场景"><a href="#原型模式的优点和使用场景" class="headerlink" title="原型模式的优点和使用场景"></a>原型模式的优点和使用场景</h4><p><strong>优点：</strong><br>1、性能极佳，直接拷贝比在内存里直接新建实例节省不少的资源；<br>2、简化对象创建，同时避免了构造函数的约束，不受构造函数的限制直接复制对象，是优点，也有隐患，这一点还是需要多留意一些。<br><strong>使用场景：</strong><br>1、对象在修改过后，需要复制多份的场景。如本例和其它一些涉及到复制、粘贴的场景；<br>2、需要优化资源的情况。如，需要在内存中创建非常多的实例，可以通过原型模式来减少资源消耗。此时，原型模式与工厂模式配合起来，不管在逻辑上还是结构上，都会达到不错的效果；<br>3、某些重复性的复杂工作不需要多次进行。如对于一个设备的访问权限，多个对象不用各申请一遍权限，由一个设备申请后，通过原型模式将权限交给可信赖的对象，既可以提升效率，又可以节约资源。</p><h4 id="原型模式的缺点"><a href="#原型模式的缺点" class="headerlink" title="原型模式的缺点"></a>原型模式的缺点</h4><p>1、深拷贝和浅拷贝的使用需要事先考虑周到；<br>2、某些编程语言中，拷贝会影响到静态变量和静态函数的使用。</p><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>适配器模式定义：将一个类的接口变换成客户端期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。适配器模式和装饰模式有一定的相似性，都起包装的作用，但二者本质上又是不同的，装饰模式的结果，是给一个对象增加了一些额外的职责，而适配器模式，则是将另一个对象进行了“伪装”。适配器可以认为是对现在业务的补偿式应用，所以，尽量不要在设计阶段使用适配器模式，在两个系统需要兼容时可以考虑使用适配器模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name =<span class="string">&quot;Dog&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>): <span class="comment"># bark ：叫声</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;woof!&quot;</span>  <span class="comment"># woof 低吠声</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;Cat&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">meow</span>(<span class="params">self</span>):  <span class="comment"># meow 猫叫声</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;meow&quot;</span>   <span class="comment"># meow 猫叫声</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;Human&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello, python&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;Car&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_noise</span>(<span class="params">self, noise_level</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;noise level is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(noise_level)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adapter</span>: <span class="comment"># adapter 适配器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,obj,adapted_methods</span>):   <span class="comment"># adpted 适应</span></span><br><span class="line">        self.obj = obj</span><br><span class="line">        self.__dict__.update(adapted_methods)   <span class="comment"># self.__dict__是打印对象所有的属性，结果是一个字典 &#123;&quot;kye&quot;:value&#125;</span></span><br><span class="line">        <span class="comment"># key对应对象的属性，value对应属性的属性值。这里就相当于把不同类的方法都绑定到Adapter这个类实例化出来的</span></span><br><span class="line">        <span class="comment"># 对象的make_noise 属性上面去，该属性的值对应其他类里面的方法。</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, attr</span>):  <span class="comment"># 当调用类不存的属性或者方法时，就会触发该魔法方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(self.obj, attr)  <span class="comment"># getattr(object,attr [,default])</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    objects = []</span><br><span class="line">    dog = Dog()</span><br><span class="line">    objects.append(Adapter(dog,<span class="built_in">dict</span>(make_noise=dog.bark)))</span><br><span class="line">    cat = Cat()</span><br><span class="line">    objects.append(Adapter(cat,<span class="built_in">dict</span>(make_noise=cat.meow)))</span><br><span class="line">    human = Human()</span><br><span class="line">    objects.append(Adapter(human,<span class="built_in">dict</span>(make_noise=human.speak)))</span><br><span class="line">    car = Car()</span><br><span class="line">    car_noise = <span class="keyword">lambda</span> : car.make_noise(<span class="number">3</span>)</span><br><span class="line">    objects.append(Adapter(car,<span class="built_in">dict</span>(make_noise=car_noise)))</span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> objects:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>,obj.name,<span class="string">&quot;goes&quot;</span>,obj.make_noise())  <span class="comment"># 这里 obj.make_noise 就相当于 dog.bark 这些方法，后面加括号代表执行</span></span><br><span class="line">        <span class="built_in">print</span>(obj.obj) <span class="comment"># 原来的对象被存储到obj属性里面.</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 适配器模式在不改变原有类的基础上,统一了所有的方法,还能够保存原有对象的引用obj属性</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="适配器模式的优点和使用场景"><a href="#适配器模式的优点和使用场景" class="headerlink" title="适配器模式的优点和使用场景"></a>适配器模式的优点和使用场景</h4><p><strong>优点：</strong><br>1、适配器模式可以让两个接口不同，甚至关系不大的两个类一起运行；<br>2、提高了类的复用度，经过“伪装”的类，可以充当新的角色；<br>3、适配器可以灵活“拆卸”。<br><strong>应用场景：</strong><br>1、不修改现有接口，同时也要使该接口适用或兼容新场景业务中，适合使用适配器模式。例如，在一个嵌入式系统中，原本要将数据从Flash读入，现在需要将数据从磁盘读入，这种情况可以使用适配器模式，将从磁盘读入数据的接口进行“伪装”，以从Flash中读数据的接口形式，从磁盘读入数据。</p><h4 id="适配器模式的缺点"><a href="#适配器模式的缺点" class="headerlink" title="适配器模式的缺点"></a>适配器模式的缺点</h4><p>适配器模式与原配接口相比，毕竟增加了一层调用关系，所以，在设计系统时，不要使用适配器模式。</p><h3 id="桥梁模式"><a href="#桥梁模式" class="headerlink" title="桥梁模式"></a>桥梁模式</h3><p>桥梁模式又叫桥接模式，定义如下：将抽象与实现解耦（注意此处的抽象和实现，并非抽象类和实现类的那种关系，而是一种角色的关系，这里需要好好区分一下），可以使其独立变化。在形如上例中，Pen只负责画，但没有形状，它终究是不知道要画什么的，所以我们把它叫做抽象化角色；而Shape是具体的形状，我们把它叫做实现化角色。抽象化角色和实现化角色是解耦的，这也就意味着，所谓的桥，就是抽象化角色的抽象类和实现化角色的抽象类之间的引用关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DrawingAPI1</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">self, x, y, radius</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;API1.circle at &#123;&#125; : &#123;&#125;  ,radius:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x, y, radius))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DrawingAPI2</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">self,x,y,radius</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;API2.cirle at &#123;&#125; : &#123;&#125;  ,radius:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x, y, radius))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircleShape</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x,y,radius,drawing_api</span>):</span><br><span class="line">        self._x = x</span><br><span class="line">        self._y = y</span><br><span class="line">        self._radius = radius</span><br><span class="line">        self._drawing_api = drawing_api</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        self._drawing_api.draw_circle(self._x,self._y,self._radius)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">scale</span>(<span class="params">self,pct</span>):   <span class="comment"># scale 规模</span></span><br><span class="line">        self._radius *= pct   <span class="comment"># pct 百分比</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    shapes = (</span><br><span class="line">        CircleShape(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,DrawingAPI1()),</span><br><span class="line">        CircleShape(<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,DrawingAPI2()),</span><br><span class="line">    )  <span class="comment"># 提供2个</span></span><br><span class="line">    <span class="keyword">for</span> shape <span class="keyword">in</span> shapes:</span><br><span class="line">        shape.scale(<span class="number">2.5</span>)</span><br><span class="line">        shape.draw()</span><br></pre></td></tr></table></figure><h4 id="桥梁模式的优点和应用场景"><a href="#桥梁模式的优点和应用场景" class="headerlink" title="桥梁模式的优点和应用场景"></a>桥梁模式的优点和应用场景</h4><p><strong>优点：</strong><br>1、抽象角色与实现角色相分离，二者可以独立设计，不受约束；<br>2、扩展性强：抽象角色和实现角色可以非常灵活地扩展。<br><strong>应用场景：</strong><br>1、不适用继承或者原继承关系中抽象类可能频繁变动的情况,可以将原类进行拆分，拆成实现化角色和抽象化角色。例如本例中,若将形状、粗细、绘画样式等属于汇集在一个类中,一旦抽象类中有所变动，将造成巨大的风险；<br>2、重用性比较大的场景。比如开关控制逻辑的程序，开关就是抽象化角色，开关的形式有很多种，操作的实现化角色也有很多种，采用桥梁模式，（如当前例子）开关即可进行复用，整体会将设计的粒度减小。</p><h4 id="桥梁模式的缺点"><a href="#桥梁模式的缺点" class="headerlink" title="桥梁模式的缺点"></a>桥梁模式的缺点</h4><p>1、增加对系统理解的难度。</p><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>装饰器本质上是一个 Python 函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外<br>功能，装饰器的返回值也是一个函数对象。写出一个计时器记录方法执行性能的装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timeit</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;used:&#x27;</span>, end - start)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timeit</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><h4 id="装饰器模式的优点和应用场景"><a href="#装饰器模式的优点和应用场景" class="headerlink" title="装饰器模式的优点和应用场景"></a>装饰器模式的优点和应用场景</h4><p><strong>优点：</strong><br>1、装饰器模式是继承方式的一个替代方案，可以轻量级的扩展被装饰对象的功能；<br>2、Python的装饰器模式是实现AOP的一种方式，便于相同操作位于不同调用位置的统一管理。<br><strong>应用场景：</strong><br>1、需要扩展、增强或者减弱一个类的功能，如本例。</p><h4 id="装饰器模式的缺点"><a href="#装饰器模式的缺点" class="headerlink" title="装饰器模式的缺点"></a>装饰器模式的缺点</h4><p>1、多层装饰器的调试和维护有比较大的困难。</p><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>组合模式也叫作部分-整体模式，其定义如下：将对象组合成树形结构以表示“部分”和“整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p><h4 id="组合模式的优点和使用场景"><a href="#组合模式的优点和使用场景" class="headerlink" title="组合模式的优点和使用场景"></a>组合模式的优点和使用场景</h4><p><strong>优点：</strong><br>1、节点增加和减少是非常自由和方便的，这也是树形结构的一大特点；<br>2、所有节点，不管是分支节点还是叶子结点，不管是调用一个结点，还是调用一个结点群，都是非常方便的。<br><strong>使用场景：</strong><br>1、维护部分与整体的逻辑关系，或者动态调用整体或部分的功能接口，可以考虑使用组合模式。例如，非常多的操作系统（如Linux）都把文件系统设计成树形结构，再比如说分布式应用中借助Zookeeper，也可以组织和调用分布式集群中的结点功能。</p><h4 id="组合模式的缺点"><a href="#组合模式的缺点" class="headerlink" title="组合模式的缺点"></a>组合模式的缺点</h4><p>1、由于叶子结点和分支结点直接使用了实现类，而不方便使用抽象类，这大大限制了接口的影响范围；若结点接口发生变更，对系统造成的风险会比较大。</p><h3 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h3><p>门面模式也叫外观模式，定义如下：要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。门面模式注重“统一的对象”，也就是提供一个访问子系统的接口。门面模式与之前说过的模板模式有类似的地方，都是对一些需要重复方法的封装。但从本质上来说，是不同的。模板模式是对类本身的方法的封装，其被封装的方法也可以单独使用；而门面模式，是对子系统的封装，其被封装的接口理论上是不会被单独提出来用的。</p><h4 id="门面模式的优点和使用场景"><a href="#门面模式的优点和使用场景" class="headerlink" title="门面模式的优点和使用场景"></a>门面模式的优点和使用场景</h4><p><strong>优点：</strong><br>1、减少了系统之间的相互依赖，提高了系统的灵活；<br>2、提高了整体系统的安全性：封装起的系统对外的接口才可以用，隐藏了很多内部接口细节，若方法不允许使用，则在门面中可以进行灵活控制。<br><strong>使用场景：</strong><br>1、为一个复杂的子系统提供一个外界访问的接口。这类例子是生活还是蛮常见的，例如电视遥控器的抽象模型，电信运营商的用户交互设备等；<br>2、需要简化操作界面时。例如常见的扁平化系统操作界面等，在生活中和工业中都很常见。</p><h4 id="门面模式的缺点"><a href="#门面模式的缺点" class="headerlink" title="门面模式的缺点"></a>门面模式的缺点</h4><p>1、门面模式的缺点在于，不符合开闭原则，一旦系统成形后需要修改，几乎只能重写门面代码，这比继承或者覆写等方式，或者其它一些符合开闭原则的模式风险都会大一些。</p><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>享元模式定义如下：使用共享对象支持大量细粒度对象。大量细粒度的对象的支持共享，可能会涉及这些对象的两类信息：内部状态信息和外部状态信息。内部状态信息就是可共享出来的信息，它们存储在享元对象内部，不会随着特定环境的改变而改变；外部状态信息就不可共享的信息了。享元模式中只包含内部状态信息，而不应该包含外部状态信息。这点在设计业务架构时，应该有所考虑。</p><h4 id="享元模式的优点和使用场景"><a href="#享元模式的优点和使用场景" class="headerlink" title="享元模式的优点和使用场景"></a>享元模式的优点和使用场景</h4><p><strong>优点：</strong><br>1、减少重复对象，大大节约了系统资源。<br><strong>使用场景：</strong><br>1、系统中存在大量的相似对象时，可以选择享元模式提高资源利用率。咖啡订购平台比较小，若假设一个电商平台，每个买家和卖家建立起买卖关系后，买家对象和卖家对象都是占用资源的。如果一个卖家同时与多个买家建立起买卖关系呢？此时享元模式的优势就体现出来了；<br>2、需要缓冲池的场景中，可以使用享元模式。如进程池，线程池等技术，就可以使用享元模式（事实上，很多的池技术中已经使得了享元模式）。</p><h4 id="享元模式的缺点"><a href="#享元模式的缺点" class="headerlink" title="享元模式的缺点"></a>享元模式的缺点</h4><p>1、享元模式虽然节约了系统资源，但同时也提高了系统的复杂性，尤其当遇到外部状态和内部状态混在一起时，需要先将其进行分离，才可以使用享元模式。否则，会引起逻辑混乱或业务风险；<br>2、享元模式中需要额外注意线程安全问题。</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理模式定义：为某对象提供一个代理，以控制对此对象的访问和控制。代理模式在使用过程中，应尽量对抽象主题类进行代理，而尽量不要对加过修饰和方法的子类代理。如上例中，如果有一个xServer继承了Server，并新加了方法xMethod，xServer的代理应以Server为主题进行设计，而尽量不要以xServer为主题，以xServer为主题的代理可以从ServerProxy继承并添加对应的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">serverProxy</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">infoServerProxy</span>(<span class="title class_ inherited__">serverProxy</span>):</span><br><span class="line">    server=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,server</span>):</span><br><span class="line">        self.server=server</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self,info</span>):</span><br><span class="line">        <span class="keyword">return</span> self.server.recv(info)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        self.server.show()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">whiteInfoServerProxy</span>(<span class="title class_ inherited__">infoServerProxy</span>):</span><br><span class="line">    white_list=[]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self,info</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">type</span>(info)==<span class="built_in">dict</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;info structure is not correct&quot;</span></span><br><span class="line">        addr=info.get(<span class="string">&quot;addr&quot;</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> addr <span class="keyword">in</span> self.white_list:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Your address is not in the white list.&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            content=info.get(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> self.server.recv(content)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addWhite</span>(<span class="params">self,addr</span>):</span><br><span class="line">        self.white_list.append(addr)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rmvWhite</span>(<span class="params">self,addr</span>):</span><br><span class="line">        self.white_list.remove(addr)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clearWhite</span>(<span class="params">self</span>):</span><br><span class="line">        self.white_list=[]</span><br></pre></td></tr></table></figure><h4 id="代理模式的优点和使用场景"><a href="#代理模式的优点和使用场景" class="headerlink" title="代理模式的优点和使用场景"></a>代理模式的优点和使用场景</h4><p><strong>优点:</strong><br>1、职责清晰：非常符合单一职责原则，主题对象实现真实业务逻辑，而非本职责的事务，交由代理完成；<br>2、扩展性强：面对主题对象可能会有的改变，代理模式在不改变对外接口的情况下，可以实现最大程度的扩展；<br>3、保证主题对象的处理逻辑：代理可以通过检查参数的方式，保证主题对象的处理逻辑输入在理想范围内。<br><strong>应用场景：</strong><br>1、针对某特定对象进行功能和增强性扩展。如IP防火墙、远程访问代理等技术的应用；<br>2、对主题对象进行保护。如大流量代理，安全代理等；<br>3、减轻主题对象负载。如权限代理等。</p><h4 id="代理模式的缺点"><a href="#代理模式的缺点" class="headerlink" title="代理模式的缺点"></a>代理模式的缺点</h4><p>1、可能会降低整体业务的处理效率和速度。</p><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式定义如下：定义一组算法，将每个算法都封装起来，并使他们之间可互换。以上述例子为例，customer类扮演的角色（Context）直接依赖抽象策略的接口，在具体策略实现类中即可定义个性化的策略方式，且可以方便替换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">customer</span>:</span><br><span class="line">    customer_name=<span class="string">&quot;&quot;</span></span><br><span class="line">    snd_way=<span class="string">&quot;&quot;</span></span><br><span class="line">    info=<span class="string">&quot;&quot;</span></span><br><span class="line">    phone=<span class="string">&quot;&quot;</span></span><br><span class="line">    email=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setPhone</span>(<span class="params">self,phone</span>):</span><br><span class="line">        self.phone=phone</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setEmail</span>(<span class="params">self,mail</span>):</span><br><span class="line">        self.email=mail</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPhone</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.phone</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getEmail</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.email</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setInfo</span>(<span class="params">self,info</span>):</span><br><span class="line">        self.info=info</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setName</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.customer_name=name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setBrdWay</span>(<span class="params">self,snd_way</span>):</span><br><span class="line">        self.snd_way=snd_way</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sndMsg</span>(<span class="params">self</span>):</span><br><span class="line">        self.snd_way.send(self.info)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">msgSender</span>:</span><br><span class="line">    dst_code=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setCode</span>(<span class="params">self,code</span>):</span><br><span class="line">        self.dst_code=code</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self,info</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">emailSender</span>(<span class="title class_ inherited__">msgSender</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self,info</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EMAIL_ADDRESS:%s EMAIL:%s&quot;</span>%(self.dst_code,info))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">textSender</span>(<span class="title class_ inherited__">msgSender</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self,info</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;TEXT_CODE:%s EMAIL:%s&quot;</span>%(self.dst_code,info))</span><br></pre></td></tr></table></figure><h4 id="策略模式的优点和应用场景"><a href="#策略模式的优点和应用场景" class="headerlink" title="策略模式的优点和应用场景"></a>策略模式的优点和应用场景</h4><p><strong>优点：</strong><br>1、各个策略可以自由切换：这也是依赖抽象类设计接口的好处之一；<br>2、减少代码冗余；<br>3、扩展性优秀，移植方便，使用灵活。<br><strong>应用场景：</strong><br>1、算法策略比较经常地需要被替换时，可以使用策略模式。如现在超市前台，会常遇到刷卡、某宝支付、某信支付等方式，就可以参考策略模式。</p><h4 id="策略模式的缺点"><a href="#策略模式的缺点" class="headerlink" title="策略模式的缺点"></a>策略模式的缺点</h4><p>1、项目比较庞大时，策略可能比较多，不便于维护；<br>2、策略的使用方必须知道有哪些策略，才能决定使用哪一个策略，这与迪米特法则是相违背的。</p><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><p>责任链模式的定义如下：使多个对象都有机会处理请求，从而避免了请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    successor = <span class="literal">None</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_successor</span>(<span class="params">self, successor</span>):</span><br><span class="line">        self.successor = successor</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LineManager</span>(<span class="title class_ inherited__">Manager</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">if</span> request.requestType == <span class="string">&#x27;DaysOff&#x27;</span> <span class="keyword">and</span> request.number &lt;= <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s:%s Num:%d Accepted OVER&#x27;</span> % (self.name, request.requestContent, request.number))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s:%s Num:%d Accepted CONTINUE&#x27;</span> % (self.name, request.requestContent, request.number))</span><br><span class="line">            <span class="keyword">if</span> self.successor <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                self.successor.handleRequest(request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DepartmentManager</span>(<span class="title class_ inherited__">Manager</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">if</span> request.requestType == <span class="string">&#x27;DaysOff&#x27;</span> <span class="keyword">and</span> request.number &lt;= <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s:%s Num:%d Accepted OVER&#x27;</span> % (self.name, request.requestContent, request.number))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s:%s Num:%d Accepted CONTINUE&#x27;</span> % (self.name, request.requestContent, request.number))</span><br><span class="line">            <span class="keyword">if</span> self.successor <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                self.successor.handleRequest(request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GeneralManager</span>(<span class="title class_ inherited__">Manager</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">if</span> request.requestType == <span class="string">&#x27;DaysOff&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s:%s Num:%d Accepted OVER&#x27;</span> % (self.name, request.requestContent, request.number))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Request</span>:</span><br><span class="line">    requestType = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    requestContent = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    number = <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="责任链模式的优点和应用场景"><a href="#责任链模式的优点和应用场景" class="headerlink" title="责任链模式的优点和应用场景"></a>责任链模式的优点和应用场景</h4><p><strong>优点：</strong><br>1、将请求者与处理者分离，请求者并不知道请求是被哪个处理者所处理，易于扩展。<br><strong>应用场景：</strong><br>1、若一个请求可能由一个对请求有链式优先级的处理群所处理时，可以考虑责任链模式。除本例外，银行的客户请求处理系统也可以用责任链模式实现（VIP客户和普通用户处理方式当然会有不同）。</p><h4 id="责任链模式的缺点"><a href="#责任链模式的缺点" class="headerlink" title="责任链模式的缺点"></a>责任链模式的缺点</h4><p>1、如果责任链比较长，会有比较大的性能问题；<br>2、如果责任链比较长，若业务出现问题，比较难定位是哪个处理者的问题。</p><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>命令模式的定义为：将一个请求封装成一个对象,从而可以使用不同的请求将客户端参数化,对请求排队或者记录请求日志,可以提供命令的撤销和恢复功能。命令模式中通常涉及三类对象的抽象：Receiver，Command，Invoker</p><p><img src="/2022/03/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.png" alt="1"></p><p>​只有一个Invoker的命令模式也可以抽象成一个类似的“星形网络”，但与之前介绍的中介者模式不同，单纯的命令模式更像是一个辐射状的结构，由Invoker直接对Receiver传递命令，而一般不反向传递，中介者模式“星形网络”的中心，是个协调者，抽象结节间的信息流全部或者部分是双向的。另外，命令模式的定义中提到了“撤销和恢复功能”，也给了各位开发人员一个命令模式使用过程中的建议：各个Receiver中可以设计一个回滚接口，支持命令的“撤销”。</p><h4 id="命令模式的优点和应用场景"><a href="#命令模式的优点和应用场景" class="headerlink" title="命令模式的优点和应用场景"></a>命令模式的优点和应用场景</h4><p><strong>优点：</strong><br>1、低耦合：调用者和接收者之间没有什么直接关系，二者通过命令中的execute接口联系；<br>2、扩展性好：新命令很容易加入，也很容易拼出“组合命令”。<br><strong>应用场景：</strong><br>1、触发-反馈机制的系统，都可以使用命令模式思想。如基于管道结构的命令系统（如SHELL），可以直接套用命令模式；此外，GUI系统中的操作反馈（如点击、键入等），也可以使用命令模式思想。</p><h4 id="命令模式的缺点"><a href="#命令模式的缺点" class="headerlink" title="命令模式的缺点"></a>命令模式的缺点</h4><p>1、如果业务场景中命令比较多，那么对应命令类和命令对象的数量也会增加，这样系统会膨胀得很大。</p><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p>中介者模式的定义为：用一个中介对象封装一系列的对象交互。中介者使各对象不需要显式地互相作用，从而使其耦合松散，并可以独立地改变它们之间的交互。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractMediator</span>():</span><br><span class="line">    purchase=<span class="string">&quot;&quot;</span></span><br><span class="line">    sales=<span class="string">&quot;&quot;</span></span><br><span class="line">    warehouse=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setPurchase</span>(<span class="params">self,purchase</span>):</span><br><span class="line">        self.purchase=purchase</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setWarehouse</span>(<span class="params">self,warehouse</span>):</span><br><span class="line">        self.warehouse=warehouse</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setSales</span>(<span class="params">self,sales</span>):</span><br><span class="line">        self.sales=sales</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self,content,num</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StockMediator</span>(<span class="title class_ inherited__">abstractMediator</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self,content,num</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;MEDIATOR:Get Info--%s&quot;</span>%content</span><br><span class="line">        <span class="keyword">if</span>  content==<span class="string">&quot;buy&quot;</span>:</span><br><span class="line">            self.warehouse.inc(num)</span><br><span class="line">            self.sales.getNotice(<span class="string">&quot;Bought %s&quot;</span>%num)</span><br><span class="line">        <span class="keyword">elif</span> content==<span class="string">&quot;increase&quot;</span>:</span><br><span class="line">            self.sales.getNotice(<span class="string">&quot;Inc %s&quot;</span>%num)</span><br><span class="line">            self.purchase.getNotice(<span class="string">&quot;Inc %s&quot;</span>%num)</span><br><span class="line">        <span class="keyword">elif</span> content==<span class="string">&quot;decrease&quot;</span>:</span><br><span class="line">            self.sales.getNotice(<span class="string">&quot;Dec %s&quot;</span>%num)</span><br><span class="line">            self.purchase.getNotice(<span class="string">&quot;Dec %s&quot;</span>%num)</span><br><span class="line">        <span class="keyword">elif</span> content==<span class="string">&quot;warning&quot;</span>:</span><br><span class="line">            self.sales.getNotice(<span class="string">&quot;Stock is low.%s Left.&quot;</span>%num)</span><br><span class="line">            self.purchase.getNotice(<span class="string">&quot;Stock is low. Please Buy More!!! %s Left&quot;</span>%num)</span><br><span class="line">        <span class="keyword">elif</span> content==<span class="string">&quot;sell&quot;</span>:</span><br><span class="line">            self.warehouse.dec(num)</span><br><span class="line">            self.purchase.getNotice(<span class="string">&quot;Sold %s&quot;</span>%num)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="中介者模式的优点和应用场景"><a href="#中介者模式的优点和应用场景" class="headerlink" title="中介者模式的优点和应用场景"></a>中介者模式的优点和应用场景</h4><p><strong>优点：</strong><br>1、减少类与类的依赖，降低了类和类之间的耦合；<br>2、容易扩展规模。<br><strong>应用场景：</strong><br>1、设计类图时，出现了网状结构时，可以考虑将类图设计成星型结构，这样就可以使用中介者模式了。如机场调度系统（多个跑道、飞机、指挥塔之间的调度）、路由系统；著名的MVC框架中，其中的C（Controller）就是M（Model）和V（View）的中介者。</p><h4 id="中介者模式的缺点"><a href="#中介者模式的缺点" class="headerlink" title="中介者模式的缺点"></a>中介者模式的缺点</h4><p>1、中介者本身的复杂性可能会很大，例如，同事类的方法如果很多的话，本例中的execute逻辑会很复杂。</p><h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><p>模板模式定义如下：定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重新定义该算法的某些特定的步骤。子类实现的具体方法叫作基本方法，实现对基本方法高度的框架方法，叫作模板方法。</p><h4 id="模板模式的优点和应用"><a href="#模板模式的优点和应用" class="headerlink" title="模板模式的优点和应用"></a>模板模式的优点和应用</h4><p><strong>优点：</strong><br>1、可变的部分可以充分扩展，不变的步骤可以充分封装；<br>2、提取公共代码，减少冗余代码，便于维护；<br>3、具体过程可以定制，总体流程方便掌控。<br><strong>使用场景：</strong><br>1、某超类的子类中有公有的方法，并且逻辑基本相同，可以使用模板模式。必要时可以使用钩子方法约束其行为。具体如本节例子；<br>2、比较复杂的算法，可以把核心算法提取出来，周边功能在子类中实现。例如，机器学习中的监督学习算法有很多，如决策树、KNN、SVM等，但机器学习的流程大致相同，都包含输入样本、拟合（fit）、预测等过程，这样就可以把这些过程提取出来，构造模板方法，并通过钩子方法控制流程。</p><h4 id="模板模式的缺点"><a href="#模板模式的缺点" class="headerlink" title="模板模式的缺点"></a>模板模式的缺点</h4><p>1、模板模式在抽象类中定义了子类的方法，即子类对父类产生了影响，部分影响了代码的可读性。</p><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>迭代器模式的定义如下：它提供一种方法，访问一个容器对象中各个元素，而又不需要暴露对象的内部细节</p><p>在python中，迭代器并不用举太多的例子，因为python中的迭代器应用实在太多了（不管是python还是其它很多的编程语言中，实际上迭代器都已经纳入到了常用的库或者包中）。而且在当前，也几乎没有人专门去开发一个迭代器，而是直接去使用list、string、set、dict等python可迭代对象，或者直接使用__iter__和next函数来实现迭代器。</p><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><p>访问者模式的定义如下：封装一些作用于某种数据结构中的各元素的操作，它可以在不改变数据结构的前提下定义于作用于这些元素的新操作。</p><h4 id="访问者模式的优点和应用"><a href="#访问者模式的优点和应用" class="headerlink" title="访问者模式的优点和应用"></a>访问者模式的优点和应用</h4><p><strong>优点：</strong><br>1、将不同的职责非常明确地分离开来，符合单一职责原则；<br>2、职责的分开也直接导致扩展非常优良，灵活性非常高，加减元素和访问者都非常容易。<br><strong>应用场景：</strong><br>1、要遍历不同的对象，根据对象进行不同的操作的场景；或者一个对象被多个不同对象顺次处理的情况，可以考虑使用访问者模式。除本例外，报表生成器也可以使用访问者模式实现，报表的数据源由多个不同的对象提供，每个对象都是Visitor，报表这个Element顺次Accept各访问者完善并生成对象。</p><h4 id="访问者的缺点"><a href="#访问者的缺点" class="headerlink" title="访问者的缺点"></a>访问者的缺点</h4><p>1、访问者得知了元素细节，与最小隔离原则相悖；<br>2、元素变更依旧可能引起Visitor的修改。</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式也叫发布-订阅模式，其定义如下：定义对象间一种一对多的依赖关系，使得当该对象状态改变时，所有依赖于它的对象都会得到通知，并被自动更新。<br>观察者模式的通知方式可以通过直接调用等同步方式实现（如函数调用，HTTP接口调用等），也可以通过消息队列异步调用（同步调用指被观察者发布消息后，必须等所有观察者响应结束后才可以进行接下来的操作；异步调用指被观察者发布消息后，即可进行接下来的操作。）。事实上，许多开源的消息队列就直接支持发布-订阅模式，如Zero MQ等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 观察者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlarmSensor</span>(<span class="title class_ inherited__">Observer</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, action</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Alarm Got: %s&quot;</span> % action)</span><br><span class="line">        self.runAlarm()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">runAlarm</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Alarm Ring...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WaterSprinker</span>(<span class="title class_ inherited__">Observer</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, action</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sprinker Got: %s&quot;</span> % action)</span><br><span class="line">        self.runSprinker()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">runSprinker</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Spray Water...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmergencyDialer</span>(<span class="title class_ inherited__">Observer</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, action</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dialer Got: %s&quot;</span> % action)</span><br><span class="line">        self.runDialer()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">runDialer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dial 119...&quot;</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment">#被观察者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observed</span>:</span><br><span class="line">    observers = []</span><br><span class="line">    action = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addObserver</span>(<span class="params">self, observer</span>):</span><br><span class="line">        self.observers.append(observer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notifyAll</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> obs <span class="keyword">in</span> self.observers:</span><br><span class="line">            obs.update(self.action)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">smokeSensor</span>(<span class="title class_ inherited__">Observed</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setAction</span>(<span class="params">self, action</span>):</span><br><span class="line">        self.action = action</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isFire</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="观察者模式的优点和应用"><a href="#观察者模式的优点和应用" class="headerlink" title="观察者模式的优点和应用"></a>观察者模式的优点和应用</h4><p><strong>优点：</strong><br>1、观察者与被观察者之间是抽象耦合的；<br>2、可以将许多符合单一职责原则的模块进行触发，也可以很方便地实现广播。<br><strong>应用场景：</strong><br>1、消息交换场景。如上述说到的消息队列等；<br>2、多级触发场景。比如支持中断模式的场景中，一个中断即会引发一连串反应，就可以使用观察者模式。</p><h4 id="观察者模式的缺点"><a href="#观察者模式的缺点" class="headerlink" title="观察者模式的缺点"></a>观察者模式的缺点</h4><p>1、观察者模式可能会带来整体系统效率的浪费；<br>2、如果被观察者之间有依赖关系，其逻辑关系的梳理需要费些心思。</p><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><p>解释器模式定义如下：给定一种语言，定义它的文法表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。典型的解释器模式中会有终结符和非终结符之说，语法也根据两种终结符，决定语句最终含义。上例中，非终结符就是空格，终结符就是整个句尾。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PlayContext</span>():</span><br><span class="line">    play_text = <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Expression</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">interpret</span>(<span class="params">self, context</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(context.play_text) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            play_segs=context.play_text.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> play_seg <span class="keyword">in</span> play_segs:</span><br><span class="line">                pos=<span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> ele <span class="keyword">in</span> play_seg:</span><br><span class="line">                    <span class="keyword">if</span> ele.isalpha():</span><br><span class="line">                        pos+=<span class="number">1</span></span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                play_chord = play_seg[<span class="number">0</span>:pos]</span><br><span class="line">                play_value = play_seg[pos:]</span><br><span class="line">                self.execute(play_chord,play_value)</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self,play_key,play_value</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NormGuitar</span>(<span class="title class_ inherited__">Expression</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Normal Guitar Playing--Chord:%s Play Tune:%s&quot;</span>%(key,value))</span><br></pre></td></tr></table></figure><h4 id="解释器模式的优点和应用"><a href="#解释器模式的优点和应用" class="headerlink" title="解释器模式的优点和应用"></a>解释器模式的优点和应用</h4><p><strong>优点：</strong><br>1、在语法分析的场景中，具有比较好的扩展性。规则修改和制订比较灵活。<br><strong>应用场景：</strong><br>1、若一个问题重复发生，可以考虑使用解释器模式。这点在数据处理和日志处理过程中使用较多，当数据的需求方需要将数据纳为己用时，必须将数据“翻译”成本系统的数据规格；同样的道理，日志分析平台也需要根据不同的日志格式翻译成统一的“语言”。<br>2、特定语法解释器。如各种解释型语言的解释器，再比如自然语言中基于语法的文本分析等。</p><h4 id="解释器模式的缺点"><a href="#解释器模式的缺点" class="headerlink" title="解释器模式的缺点"></a>解释器模式的缺点</h4><p>1、解释规则多样化会导致解释器的爆炸；<br>2、解释器目标比较单一，行为模式比较固定，因而重要的模块中尽量不要使用解释器模式。</p><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><p>备忘录模式定义如下：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原来保存的状态。在备忘录模式中，如果要保存的状态多，可以创造一个备忘录管理者角色来管理备忘录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GameCharacter</span>():</span><br><span class="line">    vitality = <span class="number">0</span></span><br><span class="line">    attack = <span class="number">0</span></span><br><span class="line">    defense = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayState</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Current Values:&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Life:%d&#x27;</span> % self.vitality)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Attack:%d&#x27;</span> % self.attack)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Defence:%d&#x27;</span> % self.defense)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initState</span>(<span class="params">self,vitality,attack,defense</span>):</span><br><span class="line">        self.vitality = vitality</span><br><span class="line">        self.attack = attack</span><br><span class="line">        self.defense = defense</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">saveState</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Memento(self.vitality, self.attack, self.defense)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recoverState</span>(<span class="params">self, memento</span>):</span><br><span class="line">        self.vitality = memento.vitality</span><br><span class="line">        self.attack = memento.attack</span><br><span class="line">        self.defense = memento.defense</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FightCharactor</span>(<span class="title class_ inherited__">GameCharacter</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        self.vitality -= random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memento</span>:</span><br><span class="line">    vitality = <span class="number">0</span></span><br><span class="line">    attack = <span class="number">0</span></span><br><span class="line">    defense = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, vitality, attack, defense</span>):</span><br><span class="line">        self.vitality = vitality</span><br><span class="line">        self.attack = attack</span><br><span class="line">        self.defense = defense</span><br></pre></td></tr></table></figure><h4 id="备忘录模式的应用场景"><a href="#备忘录模式的应用场景" class="headerlink" title="备忘录模式的应用场景"></a>备忘录模式的应用场景</h4><p>1、需要保存和恢复数据的相关状态场景。如保存游戏状态的场景；撤销场景，如Ctrl-Z操作；事务回滚的应用。一般情况下事务回滚有两种方式：一是把从恢复点开始的操作都反向执行一遍；二是直接恢复到恢复点的各种状态。两种方式各有优缺点，要结合业务场景，决定使用哪种模式；<br>2、副本监控场景。备忘录可以当作一个临时的副本监控，实现非实时和准实时的监控。</p><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>状态模式的定义如下：当一个对象内在状态改变时允许其改变行为，这个对象看起来像改变了其类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;抽象状态类&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LiftState</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;具体状态类&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenState</span>(<span class="title class_ inherited__">LiftState</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OPEN:The door is opened...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OPEN:The door start to close...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OPEN:The door is closed&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> StopState()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OPEN:Run Forbidden.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OPEN:Stop Forbidden.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunState</span>(<span class="title class_ inherited__">LiftState</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;RUN:Open Forbidden.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;RUN:Close Forbidden.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span><span class="string">&quot;RUN:The lift is running...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;RUN:The lift start to stop...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;RUN:The lift stopped...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> StopState()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StopState</span>(<span class="title class_ inherited__">LiftState</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;STOP:The door is opening...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;STOP:The door is opened...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> OpenState()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;STOP:Close Forbidden&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;STOP:The lift start to run...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> RunState()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;STOP:The lift is stopped.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">     </span><br><span class="line"><span class="string">&quot;&quot;&quot;上下文类&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span>:</span><br><span class="line">    lift_state=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getState</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.lift_state</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setState</span>(<span class="params">self,lift_state</span>):</span><br><span class="line">        self.lift_state=lift_state</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open</span>(<span class="params">self</span>):</span><br><span class="line">        self.setState(self.lift_state.<span class="built_in">open</span>())</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        self.setState(self.lift_state.close())</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.setState(self.lift_state.run())</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        self.setState(self.lift_state.stop())</span><br></pre></td></tr></table></figure><h4 id="状态模式的优点和应用"><a href="#状态模式的优点和应用" class="headerlink" title="状态模式的优点和应用"></a>状态模式的优点和应用</h4><p><strong>优点：</strong><br>1、状态模式的优点是结构清晰，相比于if…else…简约了不少；<br>2、封装性好，外部调用不必知道内部实现细节。<br><strong>应用场景：</strong><br>1、行为状态改变的场景。这点在各种控制器中非常常见，同时，逻辑结构为状态转移图的场景中都非常适用。</p><h4 id="状态模式的缺点"><a href="#状态模式的缺点" class="headerlink" title="状态模式的缺点"></a>状态模式的缺点</h4><p>1、在状态比较多时，子类也会非常多，不便于管理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建单例的方式</title>
      <link href="/2022/03/17/%E5%88%9B%E5%BB%BA%E5%8D%95%E4%BE%8B%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/03/17/%E5%88%9B%E5%BB%BA%E5%8D%95%E4%BE%8B%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><p>其实，<strong>Python 的模块就是天然的单例模式</strong>，因为模块在第一次导入时，会生成 <code>.pyc</code> 文件，当第二次导入时，就会直接加载 <code>.pyc</code> 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p><p>example.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">singleton = Singleton()</span><br></pre></td></tr></table></figure><p>将上面的代码保存在文件 <code>example.py</code> 中，要使用时，直接在其他文件中导入此文件中的对象，这个对象即是单例模式的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> example <span class="keyword">import</span> singleton</span><br></pre></td></tr></table></figure><h3 id="使用装饰器"><a href="#使用装饰器" class="headerlink" title="使用装饰器"></a>使用装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Singleton</span>(<span class="params">cls</span>):</span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_singleton</span>(<span class="params">*args, **kargs</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> instance</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            instance = cls(*args, **kargs)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">    <span class="keyword">return</span> _singleton</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x=<span class="number">0</span></span>):</span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = A(<span class="number">2</span>)  </span><br><span class="line">a2 = A(<span class="number">3</span>)  </span><br><span class="line"><span class="built_in">print</span>(a1.x)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(a2.x)  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a1 <span class="keyword">is</span> a2)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="使用类方法"><a href="#使用类方法" class="headerlink" title="使用类方法"></a>使用类方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    _instance=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">instance</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">            cls._instance=cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line">a1=Singleton.instance()</span><br><span class="line">a2=Singleton().instance()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a1 <span class="keyword">is</span> a2)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="基于-new-方法实现"><a href="#基于-new-方法实现" class="headerlink" title="基于__new__方法实现"></a>基于<code>__new__</code>方法实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>:</span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">            cls._instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Singleton()</span><br><span class="line">obj2 = Singleton()</span><br><span class="line"><span class="built_in">print</span>(obj <span class="keyword">is</span> obj2)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="基于metaclass方式实现"><a href="#基于metaclass方式实现" class="headerlink" title="基于metaclass方式实现"></a>基于metaclass方式实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">            <span class="comment"># 直接调用父类type的__call__方法完成对象的实例化</span></span><br><span class="line">            <span class="comment"># cls._instance = type.__call__(cls, *args, **kwargs)</span></span><br><span class="line">            cls._instance = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">            cls._instance.__init__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(metaclass=Singleton):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1 = Foo(<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line">obj2 = Foo(<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obj1.name)  <span class="comment"># jason</span></span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象相关的三个魔法方法</title>
      <link href="/2022/03/15/%E5%AF%B9%E8%B1%A1%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%89%E4%B8%AA%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/"/>
      <url>/2022/03/15/%E5%AF%B9%E8%B1%A1%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%89%E4%B8%AA%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h3><ul><li><code>__new__</code>(类方法):负责类中对象的创建</li><li><code>__init__</code>(对象方法):负责对创建的对象实例化</li><li><code>__call__</code>(对象方法):用于声明这个类的对象是可调用的(callable)</li></ul><p>代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Class A.__new__&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Class A.__init__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Class A.__call__&#x27;</span>, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">a(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class A.__new__</span><br><span class="line">Class A.__init__</span><br><span class="line">Class A.__call__ (3, 4)</span><br></pre></td></tr></table></figure><p>从结果可以看出，创建一个对象时会先调用<code>__new__</code>方法，再调用<code>__init__</code>方法。<code>__new__</code>方法需要返回一个该类的实例化对象，<code>__init__</code>方法用来为实例对象属性赋值，不能有返回值。<code>__call__</code>方法使得这个类的对象本身可以进行调用</p><h3 id="new-方法"><a href="#new-方法" class="headerlink" title="__new__方法"></a><code>__new__</code>方法</h3><p><code>__new__</code>方法是构造函数，其参数接收一个类名,默认使用表示本类的cls。它负责对象的创建,需要返回一个实例。</p><p>如果<code>__new__</code>方法不返回实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B.__new__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B.__init__&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">B.__new__</span><br><span class="line">None</span><br></pre></td></tr></table></figure><p>可知，当<code>__new__</code>构造函数没有返回对象时，b对象为None。</p><p>如果我们在<code>__new__</code>中返回一个其他类的对象可行吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassB</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls: <span class="built_in">type</span></span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B.__new__&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B.__init__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">type</span>(b)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">B.__new__</span><br><span class="line">1.0</span><br><span class="line">float</span><br></pre></td></tr></table></figure><p>这意味着。我们完全可以通过重写<code>__new__</code>方法来控制类对象的实例化过程，甚至可以在B的<code>__new__</code>方法中创建A的对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B.__new__&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(A)</span><br><span class="line">        <span class="comment"># return A()  # 也可用这种写法</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B.__init__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">B.__new__</span><br><span class="line">&lt;__main__.A object at 0x000002348DF95580&gt;</span><br><span class="line">&lt;class &#x27;__main__.A&#x27;&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>在正常使用时，一定要杜绝此类写法，否则在出现问题时将很难跟踪。</p><h3 id="init-方法"><a href="#init-方法" class="headerlink" title="__init__方法"></a><code>__init__</code>方法</h3><p><code>__init__</code>方法是一个初始化函数，负责对<code>__new__</code>实例化的对象进行初始化，即负责对象状态的更新和属性的设置。它不允许有返回值。如果在<code>__init__</code>中添加返回值，则会直接报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;C.__init__&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>报错：TypeError: <code>__init__()</code> should return None, not ‘float’;</p><p><code>__init__</code>方法除了self定义的参数，其他参数都必须和<code>__new__</code>方法中除了cls参数为的参数保持一致或者等效：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;init: &#x27;</span>, args, kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;new: &#x27;</span>, args, kwargs)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls)</span><br><span class="line"></span><br><span class="line">c = C(<span class="string">&#x27;args1&#x27;</span>, <span class="string">&#x27;args2&#x27;</span>, a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new:  (<span class="string">&#x27;args1&#x27;</span>, <span class="string">&#x27;args2&#x27;</span>) &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">init:  (<span class="string">&#x27;args1&#x27;</span>, <span class="string">&#x27;args2&#x27;</span>) &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的创建过程"><a href="#对象的创建过程" class="headerlink" title="对象的创建过程"></a>对象的创建过程</h3><p>为了清楚地了解一个对象的创建过程，我们先看一个示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;D.__new__&#x27;</span>)</span><br><span class="line">        self = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;D.__init__&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line"></span><br><span class="line">d = D()</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D.__new__</span><br><span class="line">&lt;__main__.D <span class="built_in">object</span> at <span class="number">0x000001AF4D6F5460</span>&gt;</span><br><span class="line">D.__init__</span><br><span class="line">&lt;__main__.D <span class="built_in">object</span> at <span class="number">0x000001AF4D6F5460</span>&gt;</span><br></pre></td></tr></table></figure><p>从结果可以看出<code>__new__</code>中返回的self对象和<code>__init__</code>中调用的self是同一个对象。</p><p>一个对象从创建到被调用的大致流程：</p><ol><li><code>__new__</code>是我们通过类名进行实例化对象时自动调用的；</li><li><code>__init__</code>是在每一次实例化对象之后调用的；</li><li><code>__new__</code>方法创建一个实例之后返回这个实例对象，并将其传递给<code>__init__</code>方法的self参数。</li></ol><h3 id="call-方法"><a href="#call-方法" class="headerlink" title="__call__方法"></a><code>__call__</code>方法</h3><p>在介绍<code>__call__</code>之前，我们先来了解一下callable内建函数：如果callable的对象参数显示为可调用，则返回True，否则返回False。如果返回True，则调用仍可能失败，但如果返回False，则调用必不可能成功。</p><p>我们平时定义的函数、内置函数和类都属于可调用对象，但凡是可以使用’()’放在对象之后使用的，都可以称之为可调用对象。callable返回True的对象，我们就可以像使用函数一样使用它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_test</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a test function, name: &#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(<span class="built_in">filter</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(<span class="built_in">max</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(<span class="built_in">object</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(func_test))</span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;Test&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(name))</span><br><span class="line">func_test(<span class="string">&#x27;python&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">This is a test function, name:  python</span><br></pre></td></tr></table></figure><p><code>__call__</code>的作用就是声明一个对象是可调用的。即实现<code>__call__</code>方法之后，用callable调用这个类的对象时，结果为true。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = E()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(e))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;This is __call__ function, args: &#x27;</span>, args)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">f = F()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(f))</span><br><span class="line">f(<span class="string">&#x27;args1&#x27;</span>, <span class="string">&#x27;args2&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">False</span><br><span class="line">------------------------------</span><br><span class="line">True</span><br><span class="line">This is __call__ function, args:  (&#x27;args1&#x27;, &#x27;args2&#x27;)</span><br></pre></td></tr></table></figure><p>f是类F的实例对象，同时也是一个可调用对象，因此可以像调用函数一样调用它。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元类</title>
      <link href="/2022/02/27/%E5%85%83%E7%B1%BB/"/>
      <url>/2022/02/27/%E5%85%83%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><p>基于python的宗旨:一切皆对象。而对象都是由类实例化得到的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JasonBroTeacher</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    school = <span class="string">&#x27;JasonBro&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span>%self.name)</span><br><span class="line">t1 = JasonBroTeacher(<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line"><span class="comment"># 对象t1是由类JasonBroTeacher实例化得到</span></span><br></pre></td></tr></table></figure><p>那么类也是对象，它又是谁实例化得到的呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分别查看对象t1和JasonBroTeacher的类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(JasonBroTeacher))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果为:</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.JasonBroTeacher&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;type&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>结论1：元类就是产生类的类，默认情况下type就是所有类的元类</p><h2 id="不依赖于class关键字创建类"><a href="#不依赖于class关键字创建类" class="headerlink" title="不依赖于class关键字创建类"></a>不依赖于class关键字创建类</h2><p>根据第一个结论我们能理出两条对应关系</p><p>　　1.调用元类得到自定义的类</p><p>　　2.调用自定义的类得到自定义的类的对象</p><p>现在我们来看第一对关系，调用元类来得到自定义的类，都需要哪些参数(JasonBroTeacher&#x3D;type(…),括号内传什么？)</p><p>我们自定义一个类的时候都有哪些关键的组成部分：</p><p>　　1.类名</p><p>　　2.类的父类</p><p>　　3.类的名称空间</p><p>就以第一阶段的JasonBroTeacher类为例，calss关键字创建自定义类的步骤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.获取类名(JasonBroTeacher)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.获取类的父类(object,)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.执行类体代码获取产生的名称空间(如何获取???)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4.调用元类得到自定义类JasonBroTeacher = type(class_name,class_bases,&#123;...&#125;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h3><p>如何执行一段字符串内部的代码并将产生的名称空间交给对应的参数？　　&gt;&gt;&gt;　　 <strong>exec()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class_body = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">school = &#x27;JasonBro&#x27;</span></span><br><span class="line"><span class="string">def __init__(self,name):</span></span><br><span class="line"><span class="string">      self.name = name</span></span><br><span class="line"><span class="string">def run(self):</span></span><br><span class="line"><span class="string">      print(&#x27;%s is running&#x27;%self.name)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">class_dic = &#123;&#125;</span><br><span class="line">class_global = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(class_body,class_global,class_dic)</span><br><span class="line"><span class="comment"># class_global一般情况下都为空，除非在字符串代码内部用global关键字声明，才会将产生的名字丢到class_global全局名称空间中</span></span><br><span class="line"><span class="built_in">print</span>(class_dic)</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;school&#x27;</span>: <span class="string">&#x27;JasonBro&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>: &lt;function __init__ at <span class="number">0x000000B5D2771EA0</span>&gt;, <span class="string">&#x27;run&#x27;</span>: &lt;function run at <span class="number">0x000000B5DB5B7400</span>&gt;&#125;</span><br></pre></td></tr></table></figure><p>有了这个exec方法后，我们就可以不依赖于calss关键字创建自定义类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类名</span></span><br><span class="line">class_name = <span class="string">&#x27;OldgirlTeacher&#x27;</span></span><br><span class="line"><span class="comment"># 类的父类</span></span><br><span class="line">class_bases = (<span class="built_in">object</span>,)  <span class="comment"># 注意必须是元祖，逗号不能忘</span></span><br><span class="line"><span class="comment"># 名称空间</span></span><br><span class="line">class_body = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">school = &#x27;oldgirl&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def __init__(self,name):</span></span><br><span class="line"><span class="string">    self.name = name</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def run(self):</span></span><br><span class="line"><span class="string">    print(self.name)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">class_dic = &#123;&#125;</span><br><span class="line"><span class="built_in">exec</span>(class_body,&#123;&#125;,class_dic)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用元类创建自定义类</span></span><br><span class="line">OldgirlTeacher = <span class="built_in">type</span>(class_name,class_bases,class_dic)</span><br><span class="line"><span class="built_in">print</span>(OldgirlTeacher)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果为:&lt;class &#x27;__main__.OldgirlTeacher&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并且它可以访问自身的属性和方法，并实例化产生对象</span></span><br><span class="line"><span class="built_in">print</span>(OldgirlTeacher.school)</span><br><span class="line"><span class="built_in">print</span>(OldgirlTeacher.run)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果为:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">oldgirl</span></span><br><span class="line"><span class="string">&lt;function run at 0x000000229B157378&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">obj = OldgirlTeacher(<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obj.school)</span><br><span class="line">obj.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">oldgirl</span></span><br><span class="line"><span class="string">jason</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="自定义元类控制类的创建过程"><a href="#自定义元类控制类的创建过程" class="headerlink" title="自定义元类控制类的创建过程"></a>自定义元类控制类的创建过程</h2><p><strong>1.如何自定义元类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):  <span class="comment"># 必须是继承了type的类才是自定义元类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JasonBroTeacher</span>(metaclass=Mymeta):  <span class="comment"># 通过metaclass可以指定类的元类</span></span><br><span class="line">    school = <span class="string">&#x27;JasonBro&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span>%self.name)</span><br></pre></td></tr></table></figure><p><strong>2.<strong>call</strong></strong></p><p>思考:一个类的对象加括号调用会执行该对象父类中的__call__方法，那么类也是对象，它在加括号实例化对象的时候，是不是也应该走它父类的__call_方法？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        <span class="built_in">print</span>(args)</span><br><span class="line">        <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JasonBroTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta):</span><br><span class="line">    school = <span class="string">&#x27;JasonBro&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span>%self.name)</span><br><span class="line">obj = JasonBroTeacher(<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">打印结果:</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.JasonBroTeacher&#x27;&gt;</span></span><br><span class="line"><span class="string">(&#x27;jason&#x27;,)</span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>思考:类加括号实例化对象的时候，有哪几个步骤？</p><p>　　1.创建一个该类的空对象</p><p>　　2.实例化该空对象</p><p>　　3.将实例化完成的空对象返回给调用者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也就是说__call__里面需要做三件事</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 1.产生空对象</span></span><br><span class="line">        <span class="comment"># 2.初始化对象</span></span><br><span class="line">        <span class="comment"># 3.返回该对象</span></span><br><span class="line">        <span class="comment"># 那我先做最后一件事，返回一个123，发现</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">obj = JasonBroTeacher(<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obj)  </span><br><span class="line"><span class="comment"># 结果就是123    </span></span><br></pre></td></tr></table></figure><p>那接下来就需要我手动去干这三件事了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):　　</span><br><span class="line">　　<span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 1.产生一个空对象</span></span><br><span class="line">        obj = self.__new__(self)</span><br><span class="line">        <span class="comment"># 2.实例化该对象</span></span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line">        <span class="comment"># 3.返回该对象</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"><span class="comment"># 关于这个__new__,我们是不是不知道是个啥，我这里直接告诉你，它就是用来创建空对象的</span></span><br></pre></td></tr></table></figure><p>思考:这是类加括号产生对象的过程，那么我元类加括号产生类的过程是不是也应该是这个三步</p><p>　　1.产生一个空对象(指类)</p><p>　　2.实例化该空对象(实例化类)</p><p>　　3.将实例化完成的类对象返回</p><p>那依据上面的推导，self.__new__就是关键了，我可以在我的自定义元类里面定义一个__new__方法，看看它到底是个啥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br><span class="line">        <span class="built_in">print</span>(args)</span><br><span class="line">        <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JasonBroTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta):</span><br><span class="line">    school = <span class="string">&#x27;JasonBro&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.Mymeta&#x27;&gt;</span></span><br><span class="line"><span class="string">(&#x27;JasonBroTeacher&#x27;, (object,), &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__qualname__&#x27;: &#x27;JasonBroTeacher&#x27;, &#x27;school&#x27;: &#x27;JasonBro&#x27;, &#x27;__init__&#x27;: &lt;function JasonBroTeacher.__init__ at 0x000000323CEB9510&gt;, &#x27;run&#x27;: &lt;function JasonBroTeacher.run at 0x000000323CEE7158&gt;&#125;)</span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>我们发现__new__里面的*args参数接收到了三个位置参数，并且很容易辨认它们对应的就是类名，类的父类，类体代码执行后的名称空间</p><p>那么我们可不可以将__new__()的形参换一种写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, class_name,class_bases,class_dic</span>):</span><br><span class="line">        <span class="built_in">print</span>(class_name)</span><br><span class="line">        <span class="built_in">print</span>(class_bases)</span><br><span class="line">        <span class="built_in">print</span>(class_dic)</span><br><span class="line">　　　　 <span class="comment"># 这里需要记住的是，必须在最后调用元类type中的__new__方法来产生该空对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls,class_name,class_bases,class_dic)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JasonBroTeacher</span>(metaclass=Mymeta):</span><br><span class="line">    school = <span class="string">&#x27;JasonBro&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span>%self.name)</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, class_name,class_bases,class_dic</span>):</span><br><span class="line">        <span class="built_in">print</span>(class_name)</span><br><span class="line">        <span class="built_in">print</span>(class_bases)</span><br><span class="line">        <span class="built_in">print</span>(class_dic)</span><br><span class="line">        class_dic[<span class="string">&#x27;xxx&#x27;</span>] = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;school&#x27;</span> <span class="keyword">in</span> class_dic:</span><br><span class="line">            class_dic[<span class="string">&#x27;school&#x27;</span>] = <span class="string">&#x27;DSB&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls,class_name,class_bases,class_dic)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JasonBroTeacher</span>(metaclass=Mymeta):</span><br><span class="line">    school = <span class="string">&#x27;JasonBro&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span>%self.name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(JasonBroTeacher.xxx)  <span class="comment"># 发现可以打印出来    123</span></span><br><span class="line"><span class="built_in">print</span>(JasonBroTeacher.school) <span class="comment"># DSB</span></span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>由此我们可以通过自定义元类，并重写__new__方法来拦截类的创建过程，在类被创建出来之前进行一系列其他操作</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/16/hello-world/"/>
      <url>/2022/02/16/hello-world/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line">$ hexo server</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
