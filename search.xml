<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DRF</title>
      <link href="/2023/08/31/DRF/"/>
      <url>/2023/08/31/DRF/</url>
      
        <content type="html"><![CDATA[<h2 id="一、开发模式和RESTful"><a href="#一、开发模式和RESTful" class="headerlink" title="一、开发模式和RESTful"></a>一、开发模式和RESTful</h2><h3 id="1、web应用开发模式"><a href="#1、web应用开发模式" class="headerlink" title="1、web应用开发模式"></a>1、web应用开发模式</h3><h4 id="1-1、前后端不分离"><a href="#1-1、前后端不分离" class="headerlink" title="1.1、前后端不分离"></a>1.1、前后端不分离</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前后端混合开发（前后端不分离）：返回的是html的内容，需要写模板</span></span><br><span class="line"><span class="comment"># java---》jsp</span></span><br><span class="line">https://www.pearvideo.com/category_loading.jsp</span><br><span class="line"><span class="comment">#php写的</span></span><br><span class="line">http://www.aa7a.cn/user.php</span><br><span class="line"><span class="comment"># python写的</span></span><br><span class="line">http://www.aa7a.cn/user.html</span><br></pre></td></tr></table></figure><h4 id="1-2、前后端分离"><a href="#1-2、前后端分离" class="headerlink" title="1.2、前后端分离"></a>1.2、前后端分离</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前后端分离：只专注于写后端接口，返回json，xml格式数据</span></span><br><span class="line"><span class="comment"># xml格式</span></span><br><span class="line">&lt;xml&gt;</span><br><span class="line">&lt;name&gt;Tom&lt;/name&gt;</span><br><span class="line">&lt;/xml&gt;</span><br><span class="line"><span class="comment"># json</span></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Tom&quot;</span>&#125;</span><br><span class="line"><span class="comment">#什么是动态页面（查数据库的），什么是静态页面（静止的html）</span></span><br></pre></td></tr></table></figure><h3 id="2、RESTful介绍"><a href="#2、RESTful介绍" class="headerlink" title="2、RESTful介绍"></a>2、RESTful介绍</h3><p> RESTful是目前最流行的API设计风格 ， REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。 </p><h4 id="2-1、RESTFUL特点："><a href="#2-1、RESTFUL特点：" class="headerlink" title="2.1、RESTFUL特点："></a>2.1、RESTFUL特点：</h4><ul><li><h6 id="1、每一个URI代表1种资源；"><a href="#1、每一个URI代表1种资源；" class="headerlink" title="1、每一个URI代表1种资源；"></a>1、每一个URI代表1种资源；</h6></li><li><h6 id="2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作："><a href="#2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：" class="headerlink" title="2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作："></a>2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：</h6><ul><li><h6 id="GET-用来获取资源"><a href="#GET-用来获取资源" class="headerlink" title="GET 用来获取资源"></a>GET 用来获取资源</h6></li><li><h6 id="POST-用来新建资源"><a href="#POST-用来新建资源" class="headerlink" title="POST 用来新建资源"></a>POST 用来新建资源</h6></li><li><h6 id="PUT-用来更新资源"><a href="#PUT-用来更新资源" class="headerlink" title="PUT 用来更新资源"></a>PUT 用来更新资源</h6></li><li><h6 id="DELETE-用来删除资源"><a href="#DELETE-用来删除资源" class="headerlink" title="DELETE 用来删除资源"></a>DELETE 用来删除资源</h6></li></ul></li><li><h6 id="3、通过操作资源的表现形式来操作资源；"><a href="#3、通过操作资源的表现形式来操作资源；" class="headerlink" title="3、通过操作资源的表现形式来操作资源；"></a>3、通过操作资源的表现形式来操作资源；</h6></li><li><h6 id="4、资源的形式是XML或者json；"><a href="#4、资源的形式是XML或者json；" class="headerlink" title="4、资源的形式是XML或者json；"></a>4、资源的形式是XML或者json；</h6></li><li><h6 id="5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。"><a href="#5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。" class="headerlink" title="5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。"></a>5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。</h6></li></ul><h3 id="3、RESTful-API设计风格"><a href="#3、RESTful-API设计风格" class="headerlink" title="3、RESTful API设计风格"></a>3、RESTful API设计风格</h3><h4 id="1、HTTP动词"><a href="#1、HTTP动词" class="headerlink" title="1、HTTP动词"></a>1、HTTP动词</h4><p>对于资源的具体操作类型，由HTTP动词表示。常用的HTTP动词有下面四个（括号里是对应的SQL命令）。</p><ul><li><h6 id="GET（SELECT）：从服务器取出资源（一项或多项）。"><a href="#GET（SELECT）：从服务器取出资源（一项或多项）。" class="headerlink" title="GET（SELECT）：从服务器取出资源（一项或多项）。"></a>GET（SELECT）：从服务器取出资源（一项或多项）。</h6></li><li><h6 id="POST（CREATE）：在服务器新建一个资源。"><a href="#POST（CREATE）：在服务器新建一个资源。" class="headerlink" title="POST（CREATE）：在服务器新建一个资源。"></a>POST（CREATE）：在服务器新建一个资源。</h6></li><li><h6 id="PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。"><a href="#PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。" class="headerlink" title="PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。"></a>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</h6></li><li><h6 id="DELETE（DELETE）：从服务器删除资源。"><a href="#DELETE（DELETE）：从服务器删除资源。" class="headerlink" title="DELETE（DELETE）：从服务器删除资源。"></a>DELETE（DELETE）：从服务器删除资源。</h6></li></ul><h4 id="2、url路径"><a href="#2、url路径" class="headerlink" title="2、url路径"></a>2、url路径</h4><ul><li><h5 id="url路径尽量用名词表示-而不用动词"><a href="#url路径尽量用名词表示-而不用动词" class="headerlink" title="url路径尽量用名词表示,而不用动词"></a>url路径尽量用名词表示,而不用动词</h5><ul><li><h6 id="不推荐："><a href="#不推荐：" class="headerlink" title="不推荐："></a>不推荐：</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://api.lemonban.com/getProjects</span><br><span class="line">http://api.lemonban.com/deleteEnvs</span><br></pre></td></tr></table></figure></li><li><h6 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:/api.lemonban.com/Projects</span><br><span class="line">http:/api.lemonban.com/Envs</span><br></pre></td></tr></table></figure><p>路径中的project表示操作的资源</p></li></ul></li><li><h5 id="不管是单一资源，还是所有资源，路径中名词尽量用复数"><a href="#不管是单一资源，还是所有资源，路径中名词尽量用复数" class="headerlink" title="不管是单一资源，还是所有资源，路径中名词尽量用复数"></a>不管是单一资源，还是所有资源，路径中名词尽量用复数</h5><ul><li><h6 id="推荐-1"><a href="#推荐-1" class="headerlink" title="推荐"></a>推荐</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取单个数据：</span><br><span class="line">GET方法： http://api.lemonban.comapi.lemonban.com/Env/1</span><br><span class="line"># 获取所有数据:</span><br><span class="line">GET方法： http://api.lemonban.com/rest/allEnvs</span><br></pre></td></tr></table></figure></li><li><h6 id="不推荐"><a href="#不推荐" class="headerlink" title="不推荐"></a>不推荐</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取单个数据：</span><br><span class="line">GET方法： http://api.lemonban.comapi.lemonban.com/Envs/1</span><br><span class="line"># 获取所有数据:</span><br><span class="line">GET方法： http://api.lemonban.com/rest/Envs</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3、过滤参数"><a href="#3、过滤参数" class="headerlink" title="3、过滤参数"></a>3、过滤参数</h4><p> 如果接口需要通过条件过滤返回结果 ，那么过滤的条件参数，应作为查询字符串参数传递。</p><ul><li><h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?limit=<span class="number">10</span>：指定返回记录的数量</span><br><span class="line">?offset=<span class="number">10</span>：指定返回记录的开始位置。</span><br><span class="line">?page=<span class="number">2</span>&amp;per_page=<span class="number">100</span>：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br></pre></td></tr></table></figure></li></ul><h4 id="4、返回状态码"><a href="#4、返回状态码" class="headerlink" title="4、返回状态码"></a>4、返回状态码</h4><p>客户端的每一次请求，服务器都必须给出回应。回应包括 HTTP 状态码和数据两部分。</p><p>HTTP 状态码就是一个三位数，分成五个类别。</p><blockquote><ul><li><code>1xx</code>：相关信息</li><li><code>2xx</code>：操作成功</li><li><code>3xx</code>：重定向</li><li><code>4xx</code>：客户端错误</li><li><code>5xx</code>：服务器错误</li></ul></blockquote><p>这五大类总共包含<a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">100多种</a>状态码，覆盖了绝大部分可能遇到的情况。每一种状态码都有标准的（或者约定的）解释，客户端只需查看状态码，就可以判断出发生了什么情况，所以服务器应该返回尽可能精确的状态码。</p><p>API 不需要<code>1xx</code>状态码，下面介绍其他四类状态码的精确含义。</p><h5 id="1-、2XX状态码"><a href="#1-、2XX状态码" class="headerlink" title="1)、2XX状态码"></a>1)、2XX状态码</h5><p><code>200</code>状态码表示操作成功，restful Api设计风格中，不同的方法可以返回更精确的状态码。</p><blockquote><ul><li>GET: 200 OK</li><li>POST: 201 Created</li><li>PUT: 200 OK</li><li>PATCH: 200 OK</li><li>DELETE: 204 No Content</li></ul></blockquote><p>上面代码中，<code>POST</code>返回<code>201</code>状态码，表示生成了新的资源；<code>DELETE</code>返回<code>204</code>状态码，表示资源已经不存在</p><ul><li><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><ul><li><code>202 Accepted</code>状态码表示服务器已经收到请求，但还未进行处理，会在未来再处理，通常用于<strong>异步操作</strong>。</li><li>发生错误时，不应该使用200状态码，</li></ul></li></ul><h5 id="2-、4XX状态码"><a href="#2-、4XX状态码" class="headerlink" title="2)、4XX状态码"></a>2)、4XX状态码</h5><p><code>4xx</code>状态码表示客户端错误，主要有下面几种。</p><blockquote><p><code>400 Bad Request</code>：服务器不理解客户端的请求，未做任何处理。</p><p><code>401 Unauthorized</code>：用户未提供身份验证凭据，或者没有通过身份验证。</p><p><code>403 Forbidden</code>：用户通过了身份验证，但是不具有访问资源所需的权限。</p><p><code>404 Not Found</code>：所请求的资源不存在，或不可用。</p><p><code>405 Method Not Allowed</code>：用户已经通过身份验证，但是所用的 HTTP 方法不在他的权限之内。</p><p><code>410 Gone</code>：所请求的资源已从这个地址转移，不再可用。</p><p><code>415 Unsupported Media Type</code>：客户端要求的返回格式不支持。比如，API 只能返回 JSON 格式，但是客户端要求返回 XML 格式。</p><p><code>422 Unprocessable Entity</code> ：客户端上传的附件无法处理，导致请求失败。</p><p><code>429 Too Many Requests</code>：客户端的请求次数超过限额。</p></blockquote><h5 id="3-、5XX-状态码"><a href="#3-、5XX-状态码" class="headerlink" title="3)、5XX 状态码"></a>3)、5XX 状态码</h5><p><code>5xx</code>状态码表示服务端错误。一般来说，API 不会向用户透露服务器的详细信息，所以只要两个状态码就够了</p><blockquote><p><code>500 Internal Server Error</code>：客户端请求有效，服务器处理时发生了意外。</p><p><code>503 Service Unavailable</code>：服务器无法处理请求，一般用于网站维护状态</p></blockquote><h4 id="5、返回内容"><a href="#5、返回内容" class="headerlink" title="5、返回内容"></a>5、返回内容</h4><p>服务器返回的数据格式，应该尽量使用JSON</p><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><ul><li>GET &#x2F;collection：返回资源对象的列表（数组）</li><li>GET &#x2F;collection&#x2F;1：返回单个资源对象</li><li>POST &#x2F;collection：返回新生成的资源对象</li><li>PUT &#x2F;collection&#x2F;resource：返回完整的资源对象</li><li>DELETE &#x2F;collection&#x2F;resource：返回一个空文档</li></ul><h2 id="二、DRF框架介绍"><a href="#二、DRF框架介绍" class="headerlink" title="二、DRF框架介绍"></a>二、DRF框架介绍</h2><p> Django REST framework 框架是一个用于构建Web API 的强大而又灵活的工具。</p><p>通常简称为DRF框架 或 REST framework。</p><p>DRF框架是建立在Django框架基础之上，由Tom Christie大牛二次开发的开源项目。</p><ul><li><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4></li></ul><blockquote><ul><li>提供了定义序列化器Serializer的方法，可以快速根据 Django ORM 或者其它库自动序列化&#x2F;反序列化；</li><li>提供了丰富的类视图、Mixin扩展类，简化视图的编写；</li><li>丰富的定制层级：函数视图、类视图、视图集合到自动生成 API，满足各种需要；</li><li>多种身份认证和权限认证方式的支持；</li><li>内置了限流系统；</li><li>直观的 API web 界面；</li><li>可扩展性，插件丰富</li></ul></blockquote><p>DRF（Django REST framework ）框架是建立在Django框架基础之上，是一个用于构建Web API 的强大而又灵活的工具，通常简称为DRF框架 或 REST framework。</p><h3 id="1、安装和使用"><a href="#1、安装和使用" class="headerlink" title="1、安装和使用"></a>1、安装和使用</h3><ul><li><h4 id="安装DRF"><a href="#安装DRF" class="headerlink" title="安装DRF"></a>安装DRF</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure><ul><li><h4 id="注册rest-framework应用"><a href="#注册rest-framework应用" class="headerlink" title="注册rest_framework应用"></a>注册rest_framework应用</h4></li></ul><p>我们利用在Django框架学习中创建的demo工程，在<strong>settings.py</strong>的<strong>INSTALLED_APPS</strong>中添加’rest_framework’。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2、Django开发RESTful接口"><a href="#2、Django开发RESTful接口" class="headerlink" title="2、Django开发RESTful接口"></a>2、Django开发RESTful接口</h3><ul><li><h5 id="1、定义模型类"><a href="#1、定义模型类" class="headerlink" title="1、定义模型类"></a>1、定义模型类</h5></li><li><h5 id="2、定义路由"><a href="#2、定义路由" class="headerlink" title="2、定义路由"></a>2、定义路由</h5></li><li><h5 id="3、定义视图"><a href="#3、定义视图" class="headerlink" title="3、定义视图"></a>3、定义视图</h5></li></ul><h3 id="3、DRF开发RESTful接口"><a href="#3、DRF开发RESTful接口" class="headerlink" title="3、DRF开发RESTful接口"></a>3、DRF开发RESTful接口</h3><ul><li><h5 id="1、定义模型类-1"><a href="#1、定义模型类-1" class="headerlink" title="1、定义模型类"></a>1、定义模型类</h5></li><li><h5 id="2、定义序列化器"><a href="#2、定义序列化器" class="headerlink" title="2、定义序列化器"></a>2、定义序列化器</h5></li><li><h5 id="3、定义路由"><a href="#3、定义路由" class="headerlink" title="3、定义路由"></a>3、定义路由</h5></li><li><h5 id="4、定义视图"><a href="#4、定义视图" class="headerlink" title="4、定义视图"></a>4、定义视图</h5></li></ul><h2 id="三、序列化器"><a href="#三、序列化器" class="headerlink" title="三、序列化器"></a>三、序列化器</h2><ul><li><h5 id="序列化器的作用："><a href="#序列化器的作用：" class="headerlink" title="序列化器的作用："></a>序列化器的作用：</h5><ul><li><h6 id="进行数据的校验"><a href="#进行数据的校验" class="headerlink" title="进行数据的校验"></a>进行数据的校验</h6></li><li><h6 id="对数据对象进行转换"><a href="#对数据对象进行转换" class="headerlink" title="对数据对象进行转换"></a>对数据对象进行转换</h6></li></ul></li></ul><h3 id="1、序列化器的定义"><a href="#1、序列化器的定义" class="headerlink" title="1、序列化器的定义"></a>1、序列化器的定义</h3><p>​ Django REST framework中的序列化器通过类来定义，必须继承自rest_framework.serializers.Serializer ，序列化器中的字段和模型类中的字段类型保持一致</p><ul><li><h5 id="模型类如下："><a href="#模型类如下：" class="headerlink" title="模型类如下："></a>模型类如下：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipCourseData</span>(models.Model):</span><br><span class="line">    stu_number = models.CharField(max_length=<span class="number">20</span>, default=<span class="literal">None</span>, verbose_name=<span class="string">&#x27;学习人数&#x27;</span>)</span><br><span class="line">    sum_number = models.CharField(max_length=<span class="number">20</span>, default=<span class="literal">None</span>, verbose_name=<span class="string">&#x27;累计人数&#x27;</span>)</span><br><span class="line">    course_score = models.CharField(max_length=<span class="number">20</span>, default=<span class="literal">None</span>, verbose_name=<span class="string">&#x27;课程评分&#x27;</span>)</span><br><span class="line">    price = models.CharField(max_length=<span class="number">40</span>, default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;课程价格&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h5 id="序列化器的定义"><a href="#序列化器的定义" class="headerlink" title="序列化器的定义"></a>序列化器的定义</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipCourseDataSerializer</span>(serializers.Serializer):</span><br><span class="line">    stu_number = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    sum_number = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    course_score = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    price = serializers.CharField(max_length=<span class="number">40</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、字段类型与选项"><a href="#2、字段类型与选项" class="headerlink" title="2、字段类型与选项"></a>2、字段类型与选项</h3><p><strong>常用字段类型</strong>：</p><table><thead><tr><th>字段</th><th>字段构造方式</th></tr></thead><tbody><tr><td><strong>BooleanField</strong></td><td>BooleanField()</td></tr><tr><td><strong>NullBooleanField</strong></td><td>NullBooleanField()</td></tr><tr><td><strong>CharField</strong></td><td>CharField(max_length&#x3D;None, min_length&#x3D;None, allow_blank&#x3D;False, trim_whitespace&#x3D;True)</td></tr><tr><td><strong>EmailField</strong></td><td>EmailField(max_length&#x3D;None, min_length&#x3D;None, allow_blank&#x3D;False)</td></tr><tr><td><strong>RegexField</strong></td><td>RegexField(regex, max_length&#x3D;None, min_length&#x3D;None, allow_blank&#x3D;False)</td></tr><tr><td><strong>SlugField</strong></td><td>SlugField(max<em>length&#x3D;50, min_length&#x3D;None, allow_blank&#x3D;False) 正则字段，验证正则模式 [a-zA-Z0-9</em>-]+</td></tr><tr><td><strong>URLField</strong></td><td>URLField(max_length&#x3D;200, min_length&#x3D;None, allow_blank&#x3D;False)</td></tr><tr><td><strong>IPAddressField</strong></td><td>IPAddressField(protocol&#x3D;’both’, unpack_ipv4&#x3D;False, **options)</td></tr><tr><td><strong>IntegerField</strong></td><td>IntegerField(max_value&#x3D;None, min_value&#x3D;None)</td></tr><tr><td><strong>FloatField</strong></td><td>FloatField(max_value&#x3D;None, min_value&#x3D;None)</td></tr><tr><td><strong>DecimalField</strong></td><td>DecimalField(max_digits, decimal_places, coerce_to_string&#x3D;None, max_value&#x3D;None, min_value&#x3D;None) max_digits: 最多位数 decimal_palces: 小数点位置</td></tr><tr><td><strong>DateTimeField</strong></td><td>DateTimeField(format&#x3D;api_settings.DATETIME_FORMAT, input_formats&#x3D;None)</td></tr><tr><td><strong>DateField</strong></td><td>DateField(format&#x3D;api_settings.DATE_FORMAT, input_formats&#x3D;None)</td></tr><tr><td><strong>TimeField</strong></td><td>TimeField(format&#x3D;api_settings.TIME_FORMAT, input_formats&#x3D;None)</td></tr><tr><td><strong>DurationField</strong></td><td>DurationField()</td></tr><tr><td><strong>ChoiceField</strong></td><td>ChoiceField(choices) choices与Django的用法相同</td></tr><tr><td><strong>MultipleChoiceField</strong></td><td>MultipleChoiceField(choices)</td></tr><tr><td><strong>FileField</strong></td><td>FileField(max_length&#x3D;None, allow_empty_file&#x3D;False, use_url&#x3D;UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ImageField</strong></td><td>ImageField(max_length&#x3D;None, allow_empty_file&#x3D;False, use_url&#x3D;UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ListField</strong></td><td>ListField(child&#x3D;, min_length&#x3D;None, max_length&#x3D;None)</td></tr><tr><td><strong>DictField</strong></td><td>DictField(child&#x3D;)</td></tr></tbody></table><p><strong>选项参数：</strong></p><table><thead><tr><th>参数名称</th><th>作用</th></tr></thead><tbody><tr><td><strong>max_length</strong></td><td>最大长度</td></tr><tr><td><strong>min_lenght</strong></td><td>最小长度</td></tr><tr><td><strong>allow_blank</strong></td><td>是否允许为空</td></tr><tr><td><strong>trim_whitespace</strong></td><td>是否截断空白字符</td></tr><tr><td><strong>max_value</strong></td><td>最小值</td></tr><tr><td><strong>min_value</strong></td><td>最大值</td></tr></tbody></table><h4 id="通用参数："><a href="#通用参数：" class="headerlink" title="通用参数："></a>通用参数：</h4><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>read_only</strong></td><td>表明该字段仅用于序列化输出，默认False</td></tr><tr><td><strong>write_only</strong></td><td>表明该字段仅用于反序列化输入，默认False</td></tr><tr><td><strong>required</strong></td><td>表明该字段在反序列化时必须输入，默认True</td></tr><tr><td><strong>default</strong></td><td>反序列化时使用的默认值</td></tr><tr><td><strong>allow_null</strong></td><td>表明该字段是否允许传入None，默认False</td></tr><tr><td><strong>validators</strong></td><td>该字段使用的验证器</td></tr><tr><td><strong>error_messages</strong></td><td>包含错误编号与错误信息的字典</td></tr><tr><td><strong>label</strong></td><td>用于HTML展示API页面时，显示的字段名称</td></tr><tr><td><strong>help_text</strong></td><td>用于HTML展示API页面时，显示的字段帮助提示信息</td></tr></tbody></table><h3 id="3、序列化操作"><a href="#3、序列化操作" class="headerlink" title="3、序列化操作"></a>3、序列化操作</h3><ul><li><h4 id="序列化-—-gt-将python对象-转换为json格式数据"><a href="#序列化-—-gt-将python对象-转换为json格式数据" class="headerlink" title="序列化  —&gt; 将python对象  转换为json格式数据"></a>序列化  —&gt; 将python对象  转换为json格式数据</h4></li></ul><p>定义好Serializer类后，如果要通过序列化器类类进行序列化，需要先创建Serializer对象了。</p><p>Serializer的参数为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Serializer(instance=<span class="literal">None</span>, data=empty, **kwarg)</span><br></pre></td></tr></table></figure><p>说明：</p><p>1）用于序列化时，将模型类对象传入<strong>instance</strong>参数</p><p>2）用于反序列化时，将要被反序列化的数据传入<strong>data</strong>参数</p><p>3）除了instance和data参数外，在构造Serializer对象时，还可通过<strong>context</strong>参数额外添加数据，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serializer = AccountSerializer(account, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br></pre></td></tr></table></figure><p><strong>通过context参数附加的数据，可以通过Serializer对象的context属性获取。</strong></p><h4 id="1、视图中的序列化操作"><a href="#1、视图中的序列化操作" class="headerlink" title="1、视图中的序列化操作"></a>1、视图中的序列化操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;查询所有数据&quot;&quot;&quot;</span></span><br><span class="line">    cs = VipCourseData.objects.<span class="built_in">all</span>()</span><br><span class="line">    ser =VipCourseDataSerializer(instance=cs, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(ser.data, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h6 id="对多个数据进行序列化加参数：many-x3D-True"><a href="#对多个数据进行序列化加参数：many-x3D-True" class="headerlink" title="对多个数据进行序列化加参数：many&#x3D;True"></a>对多个数据进行序列化加参数：many&#x3D;True</h6></li></ul><h4 id="2、关联对象嵌套序列化"><a href="#2、关联对象嵌套序列化" class="headerlink" title="2、关联对象嵌套序列化"></a>2、关联对象嵌套序列化</h4><p>​对多个数据进行序列化加参数：many&#x3D;True</p><ul><li><h5 id="1、PrimaryKeyRelatedField"><a href="#1、PrimaryKeyRelatedField" class="headerlink" title="1、PrimaryKeyRelatedField"></a>1、PrimaryKeyRelatedField</h5><ul><li>返回关联字段的id</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">course = serializers.PrimaryKeyRelatedField()</span><br></pre></td></tr></table></figure></li><li><h5 id="2、StringRelatedField"><a href="#2、StringRelatedField" class="headerlink" title="2、StringRelatedField"></a>2、StringRelatedField</h5><ul><li>返回关联字段模型类<code>__str__</code>方法返回的内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">course = serializers.StringRelatedField()</span><br></pre></td></tr></table></figure></li><li><h5 id="3、使用关联对象的序列化器"><a href="#3、使用关联对象的序列化器" class="headerlink" title="3、使用关联对象的序列化器"></a>3、使用关联对象的序列化器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关联模型类的序列化器</span></span><br><span class="line">cuorse = CourseSerializer()</span><br></pre></td></tr></table></figure></li></ul><h3 id="4、反序列化操作"><a href="#4、反序列化操作" class="headerlink" title="4、反序列化操作"></a>4、反序列化操作</h3><ul><li><h4 id="反序列化-—-gt-将json格式数据-转换为python对象"><a href="#反序列化-—-gt-将json格式数据-转换为python对象" class="headerlink" title="反序列化  —&gt; 将json格式数据  转换为python对象"></a>反序列化  —&gt; 将json格式数据  转换为python对象</h4></li></ul><p>在进行反序列化操作是，会先对象数据进行验证，验证通过的情况下再进行保存</p><p>反序列化时，初始化序列化器对象，将要被反序列化的数据传入<strong>data</strong>参数</p><h4 id="1、数据验证"><a href="#1、数据验证" class="headerlink" title="1、数据验证"></a>1、数据验证</h4><ul><li><h5 id="1、校验数据"><a href="#1、校验数据" class="headerlink" title="1、校验数据"></a>1、校验数据</h5><ul><li><h6 id="调用-is-valid-方法进行验证，验证成功返回True，否则返回False"><a href="#调用-is-valid-方法进行验证，验证成功返回True，否则返回False" class="headerlink" title="调用**is_valid()**方法进行验证，验证成功返回True，否则返回False"></a>调用**is_valid()**方法进行验证，验证成功返回True，否则返回False</h6></li><li><h6 id="验证证成功，可以通过序列化器对象的validated-data属性获取数据"><a href="#验证证成功，可以通过序列化器对象的validated-data属性获取数据" class="headerlink" title="验证证成功，可以通过序列化器对象的validated_data属性获取数据"></a>验证证成功，可以通过序列化器对象的<strong>validated_data</strong>属性获取数据</h6></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ser = BookSerializer(data=data)  </span><br><span class="line">ser.is_valid()  </span><br></pre></td></tr></table></figure><ul><li><h6 id="注意：is-valid-会根据序列化器中字段对应的约束来进行校验"><a href="#注意：is-valid-会根据序列化器中字段对应的约束来进行校验" class="headerlink" title="注意：is_valid()会根据序列化器中字段对应的约束来进行校验"></a>注意：is_valid()会根据序列化器中字段对应的约束来进行校验</h6></li></ul></li></ul><h4 id="2、常用字段说明"><a href="#2、常用字段说明" class="headerlink" title="2、常用字段说明"></a>2、常用字段说明</h4><ul><li><h5 id="1、字段长度和是否校验的参数"><a href="#1、字段长度和是否校验的参数" class="headerlink" title="1、字段长度和是否校验的参数"></a>1、字段长度和是否校验的参数</h5><p>字段选项参数前面都列出来了，常用的几个字段</p><blockquote><ul><li><h6 id="max-length-字段的长度校验"><a href="#max-length-字段的长度校验" class="headerlink" title="max_length:字段的长度校验"></a>max_length:字段的长度校验</h6></li><li><h6 id="min-length-字段的长度校验"><a href="#min-length-字段的长度校验" class="headerlink" title="min_length:字段的长度校验"></a>min_length:字段的长度校验</h6></li><li><h6 id="required-x3D-False：不需要校验字段是否为空"><a href="#required-x3D-False：不需要校验字段是否为空" class="headerlink" title="required&#x3D;False：不需要校验字段是否为空"></a>required&#x3D;False：不需要校验字段是否为空</h6></li></ul></blockquote></li><li><h5 id="2、控制序列化和反序列化的字段"><a href="#2、控制序列化和反序列化的字段" class="headerlink" title="2、控制序列化和反序列化的字段"></a>2、控制序列化和反序列化的字段</h5><blockquote><ul><li><h6 id="read-only-x3D-Ture：只参与序列号返回，不参与反序列化校验"><a href="#read-only-x3D-Ture：只参与序列号返回，不参与反序列化校验" class="headerlink" title="read_only &#x3D; Ture：只参与序列号返回，不参与反序列化校验"></a>read_only &#x3D; Ture：只参与序列号返回，不参与反序列化校验</h6></li></ul></blockquote></li></ul><blockquote><ul><li><h6 id="write-only-x3D-True-：只参与反序列化校验，不参与序列号返回"><a href="#write-only-x3D-True-：只参与反序列化校验，不参与序列号返回" class="headerlink" title="write_only &#x3D; True ：只参与反序列化校验，不参与序列号返回"></a>write_only &#x3D; True ：只参与反序列化校验，不参与序列号返回</h6></li></ul></blockquote><p>​         </p><h4 id="3、自定义验证方法"><a href="#3、自定义验证方法" class="headerlink" title="3、自定义验证方法"></a>3、自定义验证方法</h4><ul><li><h5 id="对单一字段进行验证"><a href="#对单一字段进行验证" class="headerlink" title="对单一字段进行验证"></a>对单一字段进行验证</h5><ul><li><h6 id="验证方法名的规范：validate-字段名"><a href="#验证方法名的规范：validate-字段名" class="headerlink" title="验证方法名的规范：validate_字段名"></a>验证方法名的规范：validate_字段名</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">validate_title</span>(<span class="params">self,value</span>):               </span><br><span class="line">:params value : 字段值                </span><br><span class="line">验证处理逻辑  </span><br></pre></td></tr></table></figure></li><li><h5 id="对多个字段进行验证"><a href="#对多个字段进行验证" class="headerlink" title="对多个字段进行验证"></a>对多个字段进行验证</h5><ul><li><h6 id="验证方法名-validate"><a href="#验证方法名-validate" class="headerlink" title="验证方法名:validate"></a>验证方法名:validate</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self,attrs</span>):                </span><br><span class="line">    :params attrs : 包含所有字段的值的（类似字典）                   </span><br><span class="line">    验证处理逻辑</span><br></pre></td></tr></table></figure></li><li><h4 id="通过validators字段指定验证方法"><a href="#通过validators字段指定验证方法" class="headerlink" title="通过validators字段指定验证方法"></a>通过validators字段指定验证方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">length_validate</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span>(<span class="number">10</span>&lt;<span class="built_in">len</span>(value)&lt;<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;字段的长度不在10-20之间&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.Serializer):</span><br><span class="line">    stu_number = serializers.CharField(max_length=<span class="number">20</span>,validators=[])</span><br><span class="line">    sum_number = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    course_score = serializers.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    price = serializers.CharField(max_length=<span class="number">40</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="4、保存数据：save方法"><a href="#4、保存数据：save方法" class="headerlink" title="4、保存数据：save方法"></a>4、保存数据：save方法</h4><p>验证通过后，如需保存数据，直接调用序列化器对象的save方法即可，save方法会自动触发序列化器中对应的方法来保存数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line">ser = BookSerializer(data=data)   </span><br><span class="line"><span class="comment"># 校验数据</span></span><br><span class="line">ser.is_valid()   </span><br><span class="line"><span class="comment"># 保存数据</span></span><br><span class="line">ser.save() </span><br></pre></td></tr></table></figure><ul><li><h5 id="注意点：-1"><a href="#注意点：-1" class="headerlink" title="注意点："></a>注意点：</h5><ul><li><h6 id="保存：sava会调用序列化器中定义create方法"><a href="#保存：sava会调用序列化器中定义create方法" class="headerlink" title="保存：sava会调用序列化器中定义create方法"></a>保存：sava会调用序列化器中定义create方法</h6></li><li><h6 id="更新：sava会调用序列化器中定义update方"><a href="#更新：sava会调用序列化器中定义update方" class="headerlink" title="更新：sava会调用序列化器中定义update方"></a>更新：sava会调用序列化器中定义update方</h6></li></ul></li></ul><h3 id="5、模型序列化器"><a href="#5、模型序列化器" class="headerlink" title="5、模型序列化器"></a>5、模型序列化器</h3><p>为了方便我们定义序列化器，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。</p><p>ModelSerializer与常规的Serializer相同，但提供了：</p><ul><li>基于模型类自动生成一系列字段</li><li>基于模型类自动为Serializer生成validators，比如unique_together</li><li>包含默认的create()和update()的实现</li></ul><h4 id="1、模型序列化器的使用"><a href="#1、模型序列化器的使用" class="headerlink" title="1、模型序列化器的使用"></a>1、模型序列化器的使用</h4><ul><li><h6 id="定义模型序列化器类，直接继承于serializers-ModelSerializer即可"><a href="#定义模型序列化器类，直接继承于serializers-ModelSerializer即可" class="headerlink" title="定义模型序列化器类，直接继承于serializers.ModelSerializer即可"></a>定义模型序列化器类，直接继承于serializers.ModelSerializer即可</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><h5 id="指定模型类和需要序列化得字段"><a href="#指定模型类和需要序列化得字段" class="headerlink" title="指定模型类和需要序列化得字段"></a>指定模型类和需要序列化得字段</h5><ul><li><h6 id="model-指明参照哪个模型类"><a href="#model-指明参照哪个模型类" class="headerlink" title="model 指明参照哪个模型类"></a>model 指明参照哪个模型类</h6></li><li><h6 id="fields-指明为模型类的哪些字段生成"><a href="#fields-指明为模型类的哪些字段生成" class="headerlink" title="fields 指明为模型类的哪些字段生成"></a>fields 指明为模型类的哪些字段生成</h6></li></ul></li></ul><h4 id="2、指定字段"><a href="#2、指定字段" class="headerlink" title="2、指定字段"></a>2、指定字段</h4><h5 id="1、fields"><a href="#1、fields" class="headerlink" title="1、fields"></a>1、fields</h5><ul><li><h6 id="fields-x3D-all-代表模型类中得所有字段都进行序列化"><a href="#fields-x3D-all-代表模型类中得所有字段都进行序列化" class="headerlink" title="fields &#x3D; __all__代表模型类中得所有字段都进行序列化"></a>fields &#x3D; <code>__all__</code>代表模型类中得所有字段都进行序列化</h6></li><li><h6 id="也可以通过fields指定具体字段"><a href="#也可以通过fields指定具体字段" class="headerlink" title="也可以通过fields指定具体字段"></a>也可以通过fields指定具体字段</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line"> <span class="comment"># fields = &#x27;__all__&#x27;   # 所有字段</span></span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;tu_number&#x27;</span>,<span class="string">&#x27;sum_number&#x27;</span>)  <span class="comment"># 指定序列化得字段</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="2、exclude"><a href="#2、exclude" class="headerlink" title="2、exclude"></a>2、exclude</h5><ul><li><h6 id="使用exclude可以明确排除掉哪些字段"><a href="#使用exclude可以明确排除掉哪些字段" class="headerlink" title="使用exclude可以明确排除掉哪些字段"></a>使用exclude可以明确排除掉哪些字段</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line">        exclude = (<span class="string">&#x27;id&#x27;</span>,)  <span class="comment"># id字段不参与序列化</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="3、-read-only-fields"><a href="#3、-read-only-fields" class="headerlink" title="3、 read_only_fields"></a>3、 read_only_fields</h5><ul><li><h6 id="通过read-only-fields可以指明只读的字段"><a href="#通过read-only-fields可以指明只读的字段" class="headerlink" title="通过read_only_fields可以指明只读的字段"></a>通过read_only_fields可以指明只读的字段</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span>  </span><br><span class="line">        read_only_fields = (<span class="string">&#x27;id&#x27;</span>,) </span><br></pre></td></tr></table></figure></li></ul><h4 id="3、修改字段的参数选项"><a href="#3、修改字段的参数选项" class="headerlink" title="3、修改字段的参数选项"></a>3、修改字段的参数选项</h4><ul><li><h6 id="使用extra-kwargs参数为ModelSerializer添加或修改原有的选项参数"><a href="#使用extra-kwargs参数为ModelSerializer添加或修改原有的选项参数" class="headerlink" title="使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数"></a>使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数</h6><ul><li>通过字段名指定字段对应的参数和值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VipDataSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line"> <span class="comment"># fields = &#x27;__all__&#x27;   </span></span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;tu_number&#x27;</span>,<span class="string">&#x27;sum_number&#x27;</span>)  </span><br><span class="line">extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;tu_numbe&#x27;</span>: &#123;<span class="string">&#x27;min_value&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;sum_number&#x27;</span>: &#123;<span class="string">&#x27;min_value&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、视图"><a href="#四、视图" class="headerlink" title="四、视图"></a>四、视图</h2><h3 id="1、Request对象"><a href="#1、Request对象" class="headerlink" title="1、Request对象"></a>1、Request对象</h3><p>​REST framework 传入视图的request对象不再是Django默认的HttpRequest对象，而是REST framework提供的扩展了HttpRequest类的Request类的对象。无论前端发送的哪种格式的数据，我们都可以以统一的方式读取数据。</p><h4 id="1、data属性"><a href="#1、data属性" class="headerlink" title="1、data属性"></a>1、data属性</h4><p>request.data 获取请求体数据。</p><ul><li>不仅支持表单类型数据，也支持JSON数据，还支持文件数据的获取</li></ul><h4 id="2、query-params"><a href="#2、query-params" class="headerlink" title="2、query_params"></a>2、query_params</h4><p>request.query_params获取查询字符串参数的，Django的<code>request.GET</code>的作用一样</p><h3 id="2、Response对象"><a href="#2、Response对象" class="headerlink" title="2、Response对象"></a>2、Response对象</h3><p>rest_framework.response.Response</p><p>REST framework提供了一个响应类<code>Response</code>，使用该类构造响应对象时，响应的具体数据内容会被转换（render渲染）成符合前端需求的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response(data, status=<span class="literal">None</span>, template_name=<span class="literal">None</span>, headers=<span class="literal">None</span>, content_type=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><code>data</code>不能是复杂结构的数据，如Django的模型类对象，对于这样的数据我们可以使用<code>Serializer</code>序列化器序列化处理后（转为了Python字典类型）再传递给<code>data</code>参数。</p><h4 id="1、Response参数说明"><a href="#1、Response参数说明" class="headerlink" title="1、Response参数说明:"></a>1、Response参数说明:</h4><ul><li><code>data</code>: 为响应准备的序列化处理后的数据；</li><li><code>status</code>: 状态码，默认200；</li><li><code>template_name</code>: 模板名称，如果使用<code>HTMLRenderer</code> 时需指明；</li><li><code>headers</code>: 用于存放响应头信息的字典；</li><li><code>content_type</code>: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数</li></ul><h3 id="3、APIView"><a href="#3、APIView" class="headerlink" title="3、APIView"></a>3、APIView</h3><p> rest_framework.views.APIView 继承django的View ，在View的基础上做了更多的功能扩展。</p><h4 id="1、APIView与View的区别："><a href="#1、APIView与View的区别：" class="headerlink" title="1、APIView与View的区别："></a>1、<code>APIView</code>与<code>View</code>的区别：</h4><ul><li><h6 id="传入到视图方法中的是REST-framework的Request对象"><a href="#传入到视图方法中的是REST-framework的Request对象" class="headerlink" title="传入到视图方法中的是REST framework的Request对象"></a>传入到视图方法中的是REST framework的<code>Request</code>对象</h6></li><li><h6 id="视图方法可以返回REST-framework的Response对象"><a href="#视图方法可以返回REST-framework的Response对象" class="headerlink" title="视图方法可以返回REST framework的Response对象"></a>视图方法可以返回REST framework的<code>Response</code>对象</h6></li><li><h6 id="任何APIException异常都会被捕获到，并且处理成合适的响应信息；"><a href="#任何APIException异常都会被捕获到，并且处理成合适的响应信息；" class="headerlink" title="任何APIException异常都会被捕获到，并且处理成合适的响应信息；"></a>任何<code>APIException</code>异常都会被捕获到，并且处理成合适的响应信息；</h6></li><li><h6 id="扩展了身份认证、权限检查、流量控制这三个功能"><a href="#扩展了身份认证、权限检查、流量控制这三个功能" class="headerlink" title="扩展了身份认证、权限检查、流量控制这三个功能"></a>扩展了身份认证、权限检查、流量控制这三个功能</h6></li></ul><h4 id="2、扩展的功能（后面讲）："><a href="#2、扩展的功能（后面讲）：" class="headerlink" title="2、扩展的功能（后面讲）："></a>2、扩展的功能（后面讲）：</h4><ul><li><h6 id="authentication-classes-：身份认证"><a href="#authentication-classes-：身份认证" class="headerlink" title="authentication_classes  ：身份认证"></a><strong>authentication_classes</strong>  ：身份认证</h6></li><li><h6 id="permissoin-classes-：权限检查"><a href="#permissoin-classes-：权限检查" class="headerlink" title="permissoin_classes ：权限检查"></a><strong>permissoin_classes</strong> ：权限检查</h6></li><li><h6 id="throttle-classes-：-限流"><a href="#throttle-classes-：-限流" class="headerlink" title="throttle_classes ： 限流"></a><strong>throttle_classes</strong> ： 限流</h6></li></ul><h3 id="4、GenericAPIView"><a href="#4、GenericAPIView" class="headerlink" title="4、GenericAPIView"></a>4、GenericAPIView</h3><p>rest_framework.generics.GenericAPIView 继承自<code>APIVIew</code>，增加了对于列表视图和详情视图可能用到的通用支持方法。</p><h4 id="1、扩展的类属性："><a href="#1、扩展的类属性：" class="headerlink" title="1、扩展的类属性："></a>1、扩展的类属性：</h4><ul><li><h6 id="queryset：-指定当前类视图使用的查询集"><a href="#queryset：-指定当前类视图使用的查询集" class="headerlink" title="queryset： 指定当前类视图使用的查询集"></a>queryset： 指定当前类视图使用的查询集</h6></li><li><h6 id="serializer-class-：类视图使用的序列化器"><a href="#serializer-class-：类视图使用的序列化器" class="headerlink" title="serializer_class  ：类视图使用的序列化器"></a>serializer_class  ：类视图使用的序列化器</h6></li></ul><h4 id="2、扩展的方法："><a href="#2、扩展的方法：" class="headerlink" title="2、扩展的方法："></a>2、扩展的方法：</h4><ul><li><h6 id="self-queryset-获取查询集"><a href="#self-queryset-获取查询集" class="headerlink" title="self.queryset():获取查询集"></a>self.queryset():获取查询集</h6></li><li><h6 id="self-serializer-获取序列化器"><a href="#self-serializer-获取序列化器" class="headerlink" title="self.serializer():获取序列化器"></a>self.serializer():获取序列化器</h6></li><li><h6 id="self-get-object-获取指定的单一对象"><a href="#self-get-object-获取指定的单一对象" class="headerlink" title="self.get_object():获取指定的单一对象"></a>self.get_object():获取指定的单一对象</h6></li></ul><h4 id="3、扩展功能（后面讲）："><a href="#3、扩展功能（后面讲）：" class="headerlink" title="3、扩展功能（后面讲）："></a>3、扩展功能（后面讲）：</h4><ul><li><h6 id="pagination-class-：数据分页"><a href="#pagination-class-：数据分页" class="headerlink" title="pagination_class ：数据分页"></a>pagination_class ：数据分页</h6></li><li><h6 id="filter-backends：数据过滤-amp-排序"><a href="#filter-backends：数据过滤-amp-排序" class="headerlink" title="filter_backends：数据过滤&amp;排序"></a>filter_backends：数据过滤&amp;排序</h6></li><li><p>指定单一数据获取的参数字段：</p><ul><li><strong>lookup_field</strong> 查询单一数据库对象时使用的条件字段，默认为’<code>pk</code>‘</li><li><strong>lookup_url_kwarg</strong> 查询单一数据时URL中的参数关键字名称，默认与<strong>look_field</strong>相同</li></ul></li></ul><h3 id="5、视图扩展类"><a href="#5、视图扩展类" class="headerlink" title="5、视图扩展类"></a>5、视图扩展类</h3><h4 id="1、基本扩展类"><a href="#1、基本扩展类" class="headerlink" title="1、基本扩展类"></a>1、基本扩展类</h4><ul><li><h5 id="ListModelMixin："><a href="#ListModelMixin：" class="headerlink" title="ListModelMixin："></a>ListModelMixin：</h5><ul><li><h6 id="列表视图扩展类，提供-96-list方法快速实现列表视图"><a href="#列表视图扩展类，提供-96-list方法快速实现列表视图" class="headerlink" title="列表视图扩展类，提供&#96;list方法快速实现列表视图"></a>列表视图扩展类，提供&#96;list方法快速实现列表视图</h6></li><li><h6 id="返回200状态码"><a href="#返回200状态码" class="headerlink" title="返回200状态码"></a>返回200状态码</h6></li></ul></li><li><h5 id="CreateModelMixin-："><a href="#CreateModelMixin-：" class="headerlink" title="CreateModelMixin ："></a>CreateModelMixin ：</h5><ul><li><h6 id="创建视图扩展类，提供create方法快速实现创建资源的视图"><a href="#创建视图扩展类，提供create方法快速实现创建资源的视图" class="headerlink" title="创建视图扩展类，提供create方法快速实现创建资源的视图"></a>创建视图扩展类，提供create方法快速实现创建资源的视图</h6></li><li><h6 id="成功返回201状态码，如果序列化器对前端发送的数据验证失败，返回400错误"><a href="#成功返回201状态码，如果序列化器对前端发送的数据验证失败，返回400错误" class="headerlink" title="成功返回201状态码，如果序列化器对前端发送的数据验证失败，返回400错误"></a>成功返回201状态码，如果序列化器对前端发送的数据验证失败，返回400错误</h6></li></ul></li><li><h5 id="RetrieveModelMixin：获取单一数据"><a href="#RetrieveModelMixin：获取单一数据" class="headerlink" title="RetrieveModelMixin：获取单一数据"></a>RetrieveModelMixin：获取单一数据</h5><ul><li><h6 id="详情视图扩展类，提供retrieve方法，可以快速实现返回一个存在的数据对象。"><a href="#详情视图扩展类，提供retrieve方法，可以快速实现返回一个存在的数据对象。" class="headerlink" title="详情视图扩展类，提供retrieve方法，可以快速实现返回一个存在的数据对象。"></a>详情视图扩展类，提供retrieve方法，可以快速实现返回一个存在的数据对象。</h6></li><li><h6 id="如果成功，返回200，-否则返回404。"><a href="#如果成功，返回200，-否则返回404。" class="headerlink" title="如果成功，返回200， 否则返回404。"></a>如果成功，返回200， 否则返回404。</h6></li></ul></li><li><h5 id="UpdateModelMixin：更新数据"><a href="#UpdateModelMixin：更新数据" class="headerlink" title="UpdateModelMixin：更新数据"></a>UpdateModelMixin：更新数据</h5><ul><li><h6 id="更新视图扩展类，提供update方法和partial-update方法，可以快速实现更新一个存在的数据对象。"><a href="#更新视图扩展类，提供update方法和partial-update方法，可以快速实现更新一个存在的数据对象。" class="headerlink" title="更新视图扩展类，提供update方法和partial_update方法，可以快速实现更新一个存在的数据对象。"></a>更新视图扩展类，提供update方法和partial_update方法，可以快速实现更新一个存在的数据对象。</h6></li><li><h6 id="成功返回200，序列化器校验数据失败时，返回400错误。"><a href="#成功返回200，序列化器校验数据失败时，返回400错误。" class="headerlink" title="成功返回200，序列化器校验数据失败时，返回400错误。"></a>成功返回200，序列化器校验数据失败时，返回400错误。</h6></li></ul></li><li><h5 id="DestroyModelMixin："><a href="#DestroyModelMixin：" class="headerlink" title="DestroyModelMixin："></a>DestroyModelMixin：</h5><ul><li><h6 id="删除视图扩展类，提供destroy方法，可以快速实现删除一个存在的数据对象。"><a href="#删除视图扩展类，提供destroy方法，可以快速实现删除一个存在的数据对象。" class="headerlink" title="删除视图扩展类，提供destroy方法，可以快速实现删除一个存在的数据对象。"></a>删除视图扩展类，提供destroy方法，可以快速实现删除一个存在的数据对象。</h6></li><li><h6 id="成功返回204，不存在返回404。"><a href="#成功返回204，不存在返回404。" class="headerlink" title="成功返回204，不存在返回404。"></a>成功返回204，不存在返回404。</h6></li></ul></li></ul><h4 id="2、视图扩展类"><a href="#2、视图扩展类" class="headerlink" title="2、视图扩展类"></a>2、视图扩展类</h4><ul><li><h5 id="1、CreateAPIView"><a href="#1、CreateAPIView" class="headerlink" title="1、CreateAPIView"></a>1、CreateAPIView</h5><ul><li><h6 id="继承自：-GenericAPIView、CreateModelMixin"><a href="#继承自：-GenericAPIView、CreateModelMixin" class="headerlink" title="继承自： GenericAPIView、CreateModelMixin"></a>继承自： GenericAPIView、CreateModelMixin</h6></li><li><h6 id="提供-post-方法"><a href="#提供-post-方法" class="headerlink" title="提供 post 方法"></a>提供 post 方法</h6></li></ul></li><li><h5 id="2、ListAPIView"><a href="#2、ListAPIView" class="headerlink" title="2、ListAPIView"></a>2、ListAPIView</h5><ul><li><h6 id="继承自：GenericAPIView、ListModelMixin"><a href="#继承自：GenericAPIView、ListModelMixin" class="headerlink" title="继承自：GenericAPIView、ListModelMixin"></a>继承自：GenericAPIView、ListModelMixin</h6></li><li><h6 id="提供-get-方法"><a href="#提供-get-方法" class="headerlink" title="提供 get 方法"></a>提供 get 方法</h6></li></ul></li><li><h5 id="3、RetireveAPIView"><a href="#3、RetireveAPIView" class="headerlink" title="3、RetireveAPIView"></a>3、RetireveAPIView</h5><ul><li><h6 id="继承自-GenericAPIView、RetrieveModelMixin"><a href="#继承自-GenericAPIView、RetrieveModelMixin" class="headerlink" title="继承自: GenericAPIView、RetrieveModelMixin"></a>继承自: GenericAPIView、RetrieveModelMixin</h6></li><li><h6 id="提供-get-方法-1"><a href="#提供-get-方法-1" class="headerlink" title="提供 get 方法"></a>提供 get 方法</h6></li></ul></li><li><h5 id="4、DestoryAPIView"><a href="#4、DestoryAPIView" class="headerlink" title="4、DestoryAPIView"></a>4、DestoryAPIView</h5><ul><li><h6 id="继承自：GenericAPIView、DestoryModelMixin"><a href="#继承自：GenericAPIView、DestoryModelMixin" class="headerlink" title="继承自：GenericAPIView、DestoryModelMixin"></a>继承自：GenericAPIView、DestoryModelMixin</h6></li><li><h6 id="提供-delete-方法"><a href="#提供-delete-方法" class="headerlink" title="提供 delete 方法"></a>提供 delete 方法</h6></li></ul></li><li><h5 id="5、UpdateAPIView"><a href="#5、UpdateAPIView" class="headerlink" title="5、UpdateAPIView"></a>5、UpdateAPIView</h5><ul><li><h6 id="继承自：GenericAPIView、UpdateModelMixin"><a href="#继承自：GenericAPIView、UpdateModelMixin" class="headerlink" title="继承自：GenericAPIView、UpdateModelMixin"></a>继承自：GenericAPIView、UpdateModelMixin</h6></li><li><h6 id="提供-put-和-patch-方法"><a href="#提供-put-和-patch-方法" class="headerlink" title="提供 put 和 patch 方法"></a>提供 put 和 patch 方法</h6></li></ul></li><li><h5 id="6、RetrieveUpdateAPIView"><a href="#6、RetrieveUpdateAPIView" class="headerlink" title="6、RetrieveUpdateAPIView"></a>6、RetrieveUpdateAPIView</h5><ul><li><h6 id="继承自：-GenericAPIView、RetrieveModelMixin、UpdateModelMixin"><a href="#继承自：-GenericAPIView、RetrieveModelMixin、UpdateModelMixin" class="headerlink" title="继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin"></a>继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin</h6></li><li><h6 id="提供-get、put、patch方法"><a href="#提供-get、put、patch方法" class="headerlink" title="提供 get、put、patch方法"></a>提供 get、put、patch方法</h6></li></ul></li><li><h5 id="7、RetrieveUpdateDestoryAPIView"><a href="#7、RetrieveUpdateDestoryAPIView" class="headerlink" title="7、RetrieveUpdateDestoryAPIView"></a>7、RetrieveUpdateDestoryAPIView</h5><ul><li><h6 id="继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin"><a href="#继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin" class="headerlink" title="继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin"></a>继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin</h6></li><li><h6 id="提供-get、put、patch、delete方法"><a href="#提供-get、put、patch、delete方法" class="headerlink" title="提供 get、put、patch、delete方法"></a>提供 get、put、patch、delete方法</h6></li></ul></li></ul><h3 id="6、视图集"><a href="#6、视图集" class="headerlink" title="6、视图集"></a>6、视图集</h3><h4 id="1、视图集的使用"><a href="#1、视图集的使用" class="headerlink" title="1、视图集的使用"></a>1、视图集的使用</h4><p>ViewSet视图集类不再实现get()、post()等方法，而是实现动作 <strong>action</strong> 如 list() 、create() 等。将一系列逻辑相关的动作放到一个类中：</p><ul><li><h6 id="list-提供一组数据"><a href="#list-提供一组数据" class="headerlink" title="list() 提供一组数据"></a>list() 提供一组数据</h6></li><li><h6 id="retrieve-提供单个数据"><a href="#retrieve-提供单个数据" class="headerlink" title="retrieve() 提供单个数据"></a>retrieve() 提供单个数据</h6></li><li><h6 id="create-创建数据"><a href="#create-创建数据" class="headerlink" title="create() 创建数据"></a>create() 创建数据</h6></li><li><h6 id="update-保存数据"><a href="#update-保存数据" class="headerlink" title="update() 保存数据"></a>update() 保存数据</h6></li><li><h6 id="destory-删除数据"><a href="#destory-删除数据" class="headerlink" title="destory() 删除数据"></a>destory() 删除数据</h6></li></ul><h5 id="注意点：-2"><a href="#注意点：-2" class="headerlink" title="注意点："></a>注意点：</h5><p>在使用视图集的时候，在配置路由的时候，用自行指定请求方法和处理的视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^books/$&#x27;</span>, XXViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;list&#x27;</span>&#125;),</span><br><span class="line">    url(<span class="string">r&#x27;^books/(?P&lt;pk&gt;\d+)/$&#x27;</span>, XXXnfoViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span>&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="2、action属性"><a href="#2、action属性" class="headerlink" title="2、action属性"></a>2、action属性</h4><p>视图集只在使用as_view()方法的时候，才会将<strong>action</strong>动作与具体请求方式对应上。</p><h4 id="3、常用视图集类"><a href="#3、常用视图集类" class="headerlink" title="3、常用视图集类"></a>3、常用视图集类</h4><h5 id="1）-ViewSet"><a href="#1）-ViewSet" class="headerlink" title="1） ViewSet"></a>1） ViewSet</h5><p>继承自<code>APIView</code>，作用也与APIView基本类似，提供了身份认证、权限校验、流量管理等。</p><p>在ViewSet中，没有提供任何动作action方法，需要我们自己实现action方法。</p><h5 id="2）GenericViewSet"><a href="#2）GenericViewSet" class="headerlink" title="2）GenericViewSet"></a>2）GenericViewSet</h5><p>继承自<code>GenericAPIView</code>，作用也与GenericAPIVIew类似，提供了get_object、get_queryset等方法便于列表视图与详情信息视图的开发。</p><h5 id="3）ModelViewSet"><a href="#3）ModelViewSet" class="headerlink" title="3）ModelViewSet"></a>3）ModelViewSet</h5><p>继承自<code>GenericAPIVIew</code>，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。</p><h5 id="4）ReadOnlyModelViewSet"><a href="#4）ReadOnlyModelViewSet" class="headerlink" title="4）ReadOnlyModelViewSet"></a>4）ReadOnlyModelViewSet</h5><p>继承自<code>GenericAPIVIew</code>，同时包括了ListModelMixin、RetrieveModelMixin。</p><h3 id="7、路由"><a href="#7、路由" class="headerlink" title="7、路由"></a>7、路由</h3><p>对于视图集ViewSet，我们除了可以自己手动指明请求方式与动作action之间的对应关系外，还可以使用Routers来帮助我们快速实现路由信息。</p><p>REST framework提供了两个router</p><ul><li><h6 id="SimpleRouter（推荐）"><a href="#SimpleRouter（推荐）" class="headerlink" title="SimpleRouter（推荐）"></a>SimpleRouter（推荐）</h6></li><li><h6 id="DefaultRouter（不推荐）"><a href="#DefaultRouter（不推荐）" class="headerlink" title="DefaultRouter（不推荐）"></a>DefaultRouter（不推荐）</h6></li><li><h6 id="DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图"><a href="#DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图" class="headerlink" title="DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图"></a>DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图</h6></li></ul><h4 id="1、-创建router对象并注册"><a href="#1、-创建router对象并注册" class="headerlink" title="1、 创建router对象并注册"></a>1、 创建router对象并注册</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import routers</span><br><span class="line"></span><br><span class="line">router = routers.SimpleRouter()</span><br><span class="line">router.register(r&#x27;vips&#x27;, BookInfoViewSet)</span><br></pre></td></tr></table></figure><ul><li><h5 id="register-prefix-viewset-base-name"><a href="#register-prefix-viewset-base-name" class="headerlink" title="register(prefix, viewset, base_name)"></a>register(prefix, viewset, base_name)</h5><ul><li><h6 id="prefix-该视图集的路由前缀"><a href="#prefix-该视图集的路由前缀" class="headerlink" title="prefix 该视图集的路由前缀"></a>prefix 该视图集的路由前缀</h6></li><li><h6 id="viewset-视图集"><a href="#viewset-视图集" class="headerlink" title="viewset 视图集"></a>viewset 视图集</h6></li><li><h6 id="base-name-路由名称的前缀"><a href="#base-name-路由名称的前缀" class="headerlink" title="base_name 路由名称的前缀"></a>base_name 路由名称的前缀</h6></li></ul></li></ul><p>如上述代码会形成的路由如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^vips/$    </span><br><span class="line">^vip/&#123;pk&#125;/$  </span><br></pre></td></tr></table></figure><h4 id="2、添加路由数据"><a href="#2、添加路由数据" class="headerlink" title="2、添加路由数据"></a>2、添加路由数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure><h2 id="五、其他功能"><a href="#五、其他功能" class="headerlink" title="五、其他功能"></a>五、其他功能</h2><h3 id="1、认证-amp-权限"><a href="#1、认证-amp-权限" class="headerlink" title="1、认证&amp;权限"></a>1、认证&amp;权限</h3><h4 id="1、认证"><a href="#1、认证" class="headerlink" title="1、认证"></a>1、认证</h4><h5 id="1）、全局配置"><a href="#1）、全局配置" class="headerlink" title="1）、全局配置"></a>1）、全局配置</h5><ul><li><p>在配置文件中配置全局默认的认证方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    &#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;: (</span><br><span class="line">        &#x27;rest_framework.authentication.BasicAuthentication&#x27;,   # Basic认证</span><br><span class="line">        &#x27;rest_framework.authentication.SessionAuthentication&#x27;,  # session认证</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2）、单个视图配置"><a href="#2）、单个视图配置" class="headerlink" title="2）、单个视图配置"></a>2）、单个视图配置</h5><p>在视图中通过设置authentication_classess属性来设置视图的认证方案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication, BasicAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIPView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 指定认证的方式</span></span><br><span class="line">    authentication_classes = (SessionAuthentication, BasicAuthentication)</span><br></pre></td></tr></table></figure><p>认证失败会有两种可能的返回值：</p><ul><li>401 Unauthorized 未认证</li><li>403 Permission Denied 权限被禁止</li></ul><h4 id="2、权限"><a href="#2、权限" class="headerlink" title="2、权限"></a>2、权限</h4><p>权限控制可以限制用户对于视图的访问和对于具体数据对象的访问。</p><ul><li>在执行视图的dispatch()方法前，会先进行视图访问权限的判断</li><li>在通过get_object()获取具体对象时，会进行对象访问权限的判断</li></ul><h5 id="1-、全局权限管理"><a href="#1-、全局权限管理" class="headerlink" title="1)、全局权限管理"></a>1)、全局权限管理</h5><p>在配置文件中设置默认的权限管理类，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.permissions.IsAuthenticated&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果未指明，默认采用如下默认配置（所有用户均可访问）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (</span><br><span class="line">   <span class="string">&#x27;rest_framework.permissions.AllowAny&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="2-、单个视图权限"><a href="#2-、单个视图权限" class="headerlink" title="2)、单个视图权限"></a>2)、单个视图权限</h5><p>在视图中通过permission_classes属性来设置权限，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIPView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    permission_classes = (IsAuthenticated,)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h5 id="3-、权限选项"><a href="#3-、权限选项" class="headerlink" title="3)、权限选项"></a>3)、权限选项</h5><ul><li><h6 id="AllowAny-允许所有用户"><a href="#AllowAny-允许所有用户" class="headerlink" title="AllowAny 允许所有用户"></a>AllowAny 允许所有用户</h6></li><li><h6 id="IsAuthenticated-仅通过认证的用户"><a href="#IsAuthenticated-仅通过认证的用户" class="headerlink" title="IsAuthenticated 仅通过认证的用户"></a>IsAuthenticated 仅通过认证的用户</h6></li><li><h6 id="IsAdminUser-仅管理员用户"><a href="#IsAdminUser-仅管理员用户" class="headerlink" title="IsAdminUser 仅管理员用户"></a>IsAdminUser 仅管理员用户</h6></li><li><h6 id="IsAuthenticatedOrReadOnly-认证的用户可以完全操作，否则只能get读取"><a href="#IsAuthenticatedOrReadOnly-认证的用户可以完全操作，否则只能get读取" class="headerlink" title="IsAuthenticatedOrReadOnly 认证的用户可以完全操作，否则只能get读取"></a>IsAuthenticatedOrReadOnly 认证的用户可以完全操作，否则只能get读取</h6></li></ul><h3 id="2、限流"><a href="#2、限流" class="headerlink" title="2、限流"></a>2、限流</h3><p>对接口访问的频次进行限制，以减轻服务器压力(反爬虫的一种手段)。</p><h4 id="1、限流类型"><a href="#1、限流类型" class="headerlink" title="1、限流类型"></a>1、限流类型</h4><ul><li><h5 id="AnonRateThrottle"><a href="#AnonRateThrottle" class="headerlink" title="AnonRateThrottle"></a>AnonRateThrottle</h5><ul><li><h6 id="限制所有匿名未认证用户，使用IP区分用户。"><a href="#限制所有匿名未认证用户，使用IP区分用户。" class="headerlink" title="限制所有匿名未认证用户，使用IP区分用户。"></a>限制所有匿名未认证用户，使用IP区分用户。</h6></li><li><h6 id="使用DEFAULT-THROTTLE-RATES-‘anon’-来设置频次"><a href="#使用DEFAULT-THROTTLE-RATES-‘anon’-来设置频次" class="headerlink" title="使用DEFAULT_THROTTLE_RATES[‘anon’] 来设置频次"></a>使用DEFAULT_THROTTLE_RATES[‘anon’] 来设置频次</h6></li></ul></li><li><h5 id="UserRateThrottle"><a href="#UserRateThrottle" class="headerlink" title="UserRateThrottle"></a>UserRateThrottle</h5><ul><li><h6 id="限制认证用户，使用User-id-来区分。"><a href="#限制认证用户，使用User-id-来区分。" class="headerlink" title="限制认证用户，使用User id 来区分。"></a>限制认证用户，使用User id 来区分。</h6></li><li><h6 id="使用DEFAULT-THROTTLE-RATES-‘user’-来设置频次"><a href="#使用DEFAULT-THROTTLE-RATES-‘user’-来设置频次" class="headerlink" title="使用DEFAULT_THROTTLE_RATES[‘user’]来设置频次"></a>使用DEFAULT_THROTTLE_RATES[‘user’]来设置频次</h6></li></ul></li><li><h5 id="ScopedRateThrottle"><a href="#ScopedRateThrottle" class="headerlink" title="ScopedRateThrottle"></a>ScopedRateThrottle</h5><ul><li><h6 id="限制用户对于具体视图的访问频次，通过ip或user-id。"><a href="#限制用户对于具体视图的访问频次，通过ip或user-id。" class="headerlink" title="限制用户对于具体视图的访问频次，通过ip或user id。"></a>限制用户对于具体视图的访问频次，通过ip或user id。</h6></li><li><h6 id="视图中使用throttle-scope-指定频次"><a href="#视图中使用throttle-scope-指定频次" class="headerlink" title="视图中使用throttle_scope 指定频次"></a>视图中使用throttle_scope 指定频次</h6></li></ul></li></ul><h4 id="2、全局配置"><a href="#2、全局配置" class="headerlink" title="2、全局配置"></a>2、全局配置</h4><ul><li><h6 id="DEFAULT-THROTTLE-CLASSES-设置限流类型"><a href="#DEFAULT-THROTTLE-CLASSES-设置限流类型" class="headerlink" title="DEFAULT_THROTTLE_CLASSES:设置限流类型"></a>DEFAULT_THROTTLE_CLASSES:设置限流类型</h6></li><li><h6 id="DEFAULT-THROTTLE-RATES：设置限制的频次"><a href="#DEFAULT-THROTTLE-RATES：设置限制的频次" class="headerlink" title="DEFAULT_THROTTLE_RATES：设置限制的频次"></a>DEFAULT_THROTTLE_RATES：设置限制的频次</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;100/day&#x27;</span>,  <span class="comment"># 未认证的用户，每天100次</span></span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;1000/day&#x27;</span>  <span class="comment"># 认证的用户，每天100次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="频率周期"><a href="#频率周期" class="headerlink" title="频率周期"></a>频率周期</h5><ul><li><h6 id="second：每秒"><a href="#second：每秒" class="headerlink" title="second：每秒"></a>second：每秒</h6></li><li><h6 id="minute：每分钟"><a href="#minute：每分钟" class="headerlink" title="minute：每分钟"></a>minute：每分钟</h6></li><li><h6 id="hour：每小时"><a href="#hour：每小时" class="headerlink" title="hour：每小时"></a>hour：每小时</h6></li><li><h6 id="day：每天"><a href="#day：每天" class="headerlink" title="day：每天"></a>day：每天</h6></li></ul></li></ul><h4 id="3、局部配置"><a href="#3、局部配置" class="headerlink" title="3、局部配置"></a>3、局部配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;10/day&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在具体视图中通过throttle_classess属性来指定限流的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 类视图中指定限流类型</span></span><br><span class="line">    throttle_classes = (UserRateThrottle,)</span><br></pre></td></tr></table></figure><h3 id="3、过滤"><a href="#3、过滤" class="headerlink" title="3、过滤"></a>3、过滤</h3><p>对于列表数据可能需要根据字段进行过滤，我们可以通过添加django-fitlter扩展来增强支持。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-filter</span><br></pre></td></tr></table></figure><p>在配置文件中增加过滤后端的设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 注册应用，</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;django_filters&#x27;</span>, </span><br><span class="line">]</span><br><span class="line"><span class="comment"># 指定过滤器</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: (<span class="string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>,)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在视图中添加filter_fields属性，指定可以过滤的字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentView</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    queryset = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line">    filter_fields = (<span class="string">&#x27;age&#x27;</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 127.0.0.1:8000/students/?age=18</span></span><br></pre></td></tr></table></figure><h3 id="4、排序"><a href="#4、排序" class="headerlink" title="4、排序"></a>4、排序</h3><p>对于列表数据，REST framework提供了OrderingFilter过滤器来帮助我们快速指明数据按照指定字段进行排序。</p><ul><li><h6 id="filter-backends-指定排序过滤器"><a href="#filter-backends-指定排序过滤器" class="headerlink" title="filter_backends:指定排序过滤器"></a>filter_backends:指定排序过滤器</h6></li><li><h6 id="ordering-fields：指定排序的可选字段"><a href="#ordering-fields：指定排序的可选字段" class="headerlink" title="ordering_fields：指定排序的可选字段"></a>ordering_fields：指定排序的可选字段</h6><p>REST framework会在请求的查询字符串参数中检查是否包含了ordering参数，如果包含了ordering参数，则按照ordering参数指明的排序字段对数据集进行排序。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> OrderingFilter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentView</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    queryset = Student.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = StudentSerializer</span><br><span class="line">    filter_backends = [OrderingFilter] <span class="comment"># 指定排序的过滤器</span></span><br><span class="line">    ordering_fields = (<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;id&#x27;</span> ) <span class="comment"># 指定排序的字段</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># url 指明通过age字段排序</span></span><br><span class="line"><span class="comment"># 127.0.0.1:8000/students/?ordering=age  </span></span><br><span class="line"><span class="comment"># url 指明通过id字段排序</span></span><br><span class="line"><span class="comment"># 127.0.0.1:8000/students/?ordering=id</span></span><br></pre></td></tr></table></figure><h3 id="5、分页"><a href="#5、分页" class="headerlink" title="5、分页"></a>5、分页</h3><p>REST framework提供了分页的支持。</p><h4 id="1、全局配置"><a href="#1、全局配置" class="headerlink" title="1、全局配置"></a>1、全局配置</h4><p>在配置文件中设置全局的分页方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>:  <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">10</span>  <span class="comment"># 每页数据量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、局部配置"><a href="#2、局部配置" class="headerlink" title="2、局部配置"></a>2、局部配置</h4><p>​在不同的视图中可以通过pagination_clas属性来指定不同的分页器</p><ul><li><h5 id="自定义分页器"><a href="#自定义分页器" class="headerlink" title="自定义分页器"></a>自定义分页器</h5><p>定义一个继承PageNumberPagination的类型，在子类中通过属性定义分页器的数据：</p><ul><li><h6 id="page-size-每页默认的数据条数"><a href="#page-size-每页默认的数据条数" class="headerlink" title="page_size 每页默认的数据条数"></a>page_size 每页默认的数据条数</h6></li><li><h6 id="page-query-param-前端发送的页数关键字名，默认为”page”"><a href="#page-query-param-前端发送的页数关键字名，默认为”page”" class="headerlink" title="page_query_param 前端发送的页数关键字名，默认为”page”"></a>page_query_param 前端发送的页数关键字名，默认为”page”</h6></li><li><h6 id="page-size-query-param-前端发送的每页数目关键字名，默认为None"><a href="#page-size-query-param-前端发送的每页数目关键字名，默认为None" class="headerlink" title="page_size_query_param 前端发送的每页数目关键字名，默认为None"></a>page_size_query_param 前端发送的每页数目关键字名，默认为None</h6></li><li><h6 id="max-page-size-每页最多的数据条数"><a href="#max-page-size-每页最多的数据条数" class="headerlink" title="max_page_size 每页最多的数据条数"></a>max_page_size 每页最多的数据条数</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StuPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    <span class="comment"># 默认每页数据量</span></span><br><span class="line">    page_size = <span class="number">20</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;page_size&#x27;</span></span><br><span class="line">    <span class="comment"># 每页的数据量的最大值</span></span><br><span class="line">    max_page_size = <span class="number">10000</span></span><br></pre></td></tr></table></figure></li><li><h5 id="使用分页器"><a href="#使用分页器" class="headerlink" title="使用分页器"></a>使用分页器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StuView</span>(<span class="title class_ inherited__">RetrieveAPIView</span>):</span><br><span class="line">    queryset = Students.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = StudentsSerializer</span><br><span class="line">    pagination_class = StuPagination</span><br></pre></td></tr></table></figure></li><li><h5 id="关闭分页功能"><a href="#关闭分页功能" class="headerlink" title="关闭分页功能"></a>关闭分页功能</h5><p>如果在视图内关闭分页功能，只需在视图内设置**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pagination_class = None</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、分页器类型"><a href="#3、分页器类型" class="headerlink" title="3、分页器类型"></a>3、分页器类型</h4><h5 id="1）-PageNumberPagination"><a href="#1）-PageNumberPagination" class="headerlink" title="1） PageNumberPagination"></a>1） PageNumberPagination</h5><ul><li><h5 id="前端访问网址形式："><a href="#前端访问网址形式：" class="headerlink" title="前端访问网址形式："></a>前端访问网址形式：</h5></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/students/?page=4</span><br></pre></td></tr></table></figure><ul><li><h5 id="子类中定义的属性："><a href="#子类中定义的属性：" class="headerlink" title="子类中定义的属性："></a>子类中定义的属性：</h5><ul><li><h6 id="page-size-每页数目"><a href="#page-size-每页数目" class="headerlink" title="page_size 每页数目"></a>page_size 每页数目</h6></li><li><h6 id="page-query-param-前端发送的页数关键字名，默认为”page”-1"><a href="#page-query-param-前端发送的页数关键字名，默认为”page”-1" class="headerlink" title="page_query_param 前端发送的页数关键字名，默认为”page”"></a>page_query_param 前端发送的页数关键字名，默认为”page”</h6></li><li><h6 id="page-size-query-param-前端发送的每页数目关键字名，默认为None-1"><a href="#page-size-query-param-前端发送的每页数目关键字名，默认为None-1" class="headerlink" title="page_size_query_param 前端发送的每页数目关键字名，默认为None"></a>page_size_query_param 前端发送的每页数目关键字名，默认为None</h6></li><li><h6 id="max-page-size-前端最多能设置的每页数量"><a href="#max-page-size-前端最多能设置的每页数量" class="headerlink" title="max_page_size 前端最多能设置的每页数量"></a>max_page_size 前端最多能设置的每页数量</h6></li></ul></li></ul><h5 id="2）LimitOffsetPagination"><a href="#2）LimitOffsetPagination" class="headerlink" title="2）LimitOffsetPagination"></a>2）LimitOffsetPagination</h5><ul><li><h5 id="前端访问网址形式：-1"><a href="#前端访问网址形式：-1" class="headerlink" title="前端访问网址形式："></a>前端访问网址形式：</h5></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/students/?limit=100&amp;offset=400</span><br></pre></td></tr></table></figure><ul><li><h5 id="可以在子类中定义的属性："><a href="#可以在子类中定义的属性：" class="headerlink" title="可以在子类中定义的属性："></a>可以在子类中定义的属性：</h5><ul><li><h6 id="default-limit-默认限制，默认值与PAGE-SIZE设置一直"><a href="#default-limit-默认限制，默认值与PAGE-SIZE设置一直" class="headerlink" title="default_limit 默认限制，默认值与PAGE_SIZE设置一直"></a>default_limit 默认限制，默认值与PAGE_SIZE设置一直</h6></li><li><h6 id="limit-query-param-limit参数名，默认’limit’"><a href="#limit-query-param-limit参数名，默认’limit’" class="headerlink" title="limit_query_param limit参数名，默认’limit’"></a>limit_query_param limit参数名，默认’limit’</h6></li><li><h6 id="offset-query-param-offset参数名，默认’offset’"><a href="#offset-query-param-offset参数名，默认’offset’" class="headerlink" title="offset_query_param offset参数名，默认’offset’"></a>offset_query_param offset参数名，默认’offset’</h6></li><li><h6 id="max-limit-最大limit限制，默认None"><a href="#max-limit-最大limit限制，默认None" class="headerlink" title="max_limit 最大limit限制，默认None"></a>max_limit 最大limit限制，默认None</h6></li></ul></li></ul><h3 id="6、异常处理"><a href="#6、异常处理" class="headerlink" title="6、异常处理"></a>6、异常处理</h3><p>REST framework提供了异常处理，如果没有自定义默认会采用默认的处理方法方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># REST framework中默认的异常处理方法</span></span><br><span class="line">    <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;rest_framework.views.exception_handler&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1、自定义异常处理的方法"><a href="#1、自定义异常处理的方法" class="headerlink" title="1、自定义异常处理的方法"></a>1、自定义异常处理的方法</h4><ul><li><h5 id="1、定义异常处理的方法"><a href="#1、定义异常处理的方法" class="headerlink" title="1、定义异常处理的方法"></a>1、定义异常处理的方法</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_exception_handler</span>(<span class="params">exc, context</span>):</span><br><span class="line">    <span class="comment"># Call REST framework&#x27;s default exception handler first,</span></span><br><span class="line">    <span class="comment"># to get the standard error response.</span></span><br><span class="line">    response = exception_handler(exc, context)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now add the HTTP status code to the response.</span></span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        response.data[<span class="string">&#x27;status_code&#x27;</span>] = response.status_code</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="2、在配置文件中指定自定义的异常处理"><a href="#2、在配置文件中指定自定义的异常处理" class="headerlink" title="2、在配置文件中指定自定义的异常处理"></a>2、在配置文件中指定自定义的异常处理</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;project.app.except_handle.exception_handle&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、REST-framework定义的异常"><a href="#2、REST-framework定义的异常" class="headerlink" title="2、REST framework定义的异常"></a>2、REST framework定义的异常</h4><ul><li>APIException 所有异常的父类</li><li>ParseError 解析错误</li><li>AuthenticationFailed 认证失败</li><li>NotAuthenticated 尚未认证</li><li>PermissionDenied 权限决绝</li><li>NotFound 未找到</li><li>MethodNotAllowed 请求方式不支持</li><li>NotAcceptable 要获取的数据格式不支持</li><li>Throttled 超过限流次数</li><li>ValidationError 校验失败</li></ul><h3 id="7、文件上传"><a href="#7、文件上传" class="headerlink" title="7、文件上传"></a>7、文件上传</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadFile</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;文件上传&quot;&quot;&quot;</span></span><br><span class="line">    file = models.FileField()</span><br><span class="line">    path = models.CharField(max_length=<span class="number">200</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;upload_file&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&quot;文件上传&quot;</span></span><br><span class="line"><span class="comment"># 序列化器        </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadFileSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;文件上传&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = UploadFile</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UpFileAPIView</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;文件上传&quot;&quot;&quot;</span></span><br><span class="line">    serializer_class = UploadFileSerializer</span><br><span class="line">    queryset = UploadFile.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        res = <span class="built_in">super</span>().create(request, *args, **kwargs)</span><br><span class="line">        obj = UploadFile.objects.get(<span class="built_in">id</span>=res.data[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">        obj.path = obj.file.name</span><br><span class="line">        obj.save()</span><br><span class="line">        res.data[<span class="string">&#x27;path&#x27;</span>] = obj.name</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">destroy</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;文件删除&quot;&quot;&quot;</span></span><br><span class="line">        res = <span class="built_in">super</span>().destroy(request, *args, **kwargs)</span><br><span class="line">        <span class="comment"># 删除保存的文件</span></span><br><span class="line">        os.remove(<span class="string">&#x27;files/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.get_object().name))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8、接口文档"><a href="#8、接口文档" class="headerlink" title="8、接口文档"></a>8、接口文档</h3><p>REST framework通过第三方库可以自动帮助我们生成网页版的接口文档，自动接口文档能生成的是继承自<code>APIView</code>及其子类的视图。</p><h4 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h4><p>REST framewrok生成接口文档需要<code>coreapi</code>库的支持。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install coreapi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、设置接口文档访问路径"><a href="#2、设置接口文档访问路径" class="headerlink" title="2、设置接口文档访问路径"></a>2、设置接口文档访问路径</h4><ul><li>在项目路由中添加接口文档的路由，配置如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^docs/&#x27;</span>, include_docs_urls(title=<span class="string">&#x27;接口文档&#x27;</span>))</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="浏览器访问-127-0-0-1-8000-x2F-docs-x2F-，即可看到自动生成的接口文档。"><a href="#浏览器访问-127-0-0-1-8000-x2F-docs-x2F-，即可看到自动生成的接口文档。" class="headerlink" title="浏览器访问 127.0.0.1:8000&#x2F;docs&#x2F;，即可看到自动生成的接口文档。"></a>浏览器访问 127.0.0.1:8000&#x2F;docs&#x2F;，即可看到自动生成的接口文档。</h5></li></ul><p>加上配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    # 接口文档配置</span><br><span class="line">    &#x27;DEFAULT_SCHEMA_CLASS&#x27;: &#x27;rest_framework.schemas.coreapi.AutoSchema&#x27;,</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、文档接口说明"><a href="#3、文档接口说明" class="headerlink" title="3、文档接口说明"></a>3、文档接口说明</h4><ul><li><h5 id="1）-单一方法的视图，可直接使用类视图的文档字符串"><a href="#1）-单一方法的视图，可直接使用类视图的文档字符串" class="headerlink" title="1） 单一方法的视图，可直接使用类视图的文档字符串"></a>1） 单一方法的视图，可直接使用类视图的文档字符串</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentsView</span>(generics.ListAPIView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回所有学生信息.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义"><a href="#2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义" class="headerlink" title="2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义"></a>2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentsListCreateView</span>(generics.ListCreateAPIView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    get:</span></span><br><span class="line"><span class="string">    返回所有学生信息.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    post:</span></span><br><span class="line"><span class="string">    添加学生</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="3）对于视图集ViewSet，仍在类视图的文档字符串中分开定义"><a href="#3）对于视图集ViewSet，仍在类视图的文档字符串中分开定义" class="headerlink" title="3）对于视图集ViewSet，仍在类视图的文档字符串中分开定义"></a>3）对于视图集ViewSet，仍在类视图的文档字符串中分开定义</h5><h6 id="注意点：-视图集ViewSet中的retrieve名称，在接口文档网站中叫做read"><a href="#注意点：-视图集ViewSet中的retrieve名称，在接口文档网站中叫做read" class="headerlink" title="注意点： 视图集ViewSet中的retrieve名称，在接口文档网站中叫做read"></a>注意点： 视图集ViewSet中的retrieve名称，在接口文档网站中叫做read</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoViewSet</span>(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">    获取所有学生数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    retrieve:</span></span><br><span class="line"><span class="string">    获取一个学生</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4、添加参数描述信息"><a href="#4、添加参数描述信息" class="headerlink" title="4、添加参数描述信息"></a>4、添加参数描述信息</h4><p>参数的描述需要在模型类或序列化器类的字段中以help_text选项定义，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">XXX</span>(models.Model):</span><br><span class="line">    age = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;年龄&#x27;</span>, help_text=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六、ajax跨域"><a href="#六、ajax跨域" class="headerlink" title="六、ajax跨域"></a>六、ajax跨域</h2><p>针对于前后端分离的项目，前端和后台是分开部署的，因此服务端要支持<code>CORS(跨域源资源共享)</code>策略，需要在响应头中加上Access-Control-Allow-Origin: *&#96;。</p><table><thead><tr><th>位置</th><th>域名</th></tr></thead><tbody><tr><td>前端服务</td><td>127.0.0.1:8080</td></tr><tr><td>后端服务</td><td>127.0.0.1:8000</td></tr></tbody></table><p>前端与后端分别是不同的端口，这就涉及到跨域访问数据的问题，因为浏览器的同源策略，默认是不支持两个不同域名间相互访问数据，而我们需要在两个域名间相互传递数据，这时我们就要为后端添加跨域访问的支持。**</p><h3 id="1、django-cors-headers"><a href="#1、django-cors-headers" class="headerlink" title="1、django-cors-headers"></a>1、django-cors-headers</h3><ul><li><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cors-headers</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h4 id="添加应用"><a href="#添加应用" class="headerlink" title="添加应用"></a>添加应用</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="中间键设置"><a href="#中间键设置" class="headerlink" title="中间键设置"></a>中间键设置</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="添加白名单"><a href="#添加白名单" class="headerlink" title="添加白名单"></a>添加白名单</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CORS</span></span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    <span class="string">&#x27;127.0.0.1:8080&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;localhost:8080&#x27;</span>,</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span>  <span class="comment"># 允许携带cookie</span></span><br><span class="line"><span class="comment"># 凡是出现在白名单中的域名，都可以访问后端接口</span></span><br><span class="line"><span class="comment"># CORS_ALLOW_CREDENTIALS 指明在跨域访问中，后端是否支持对cookie的操作。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="注意点：-3"><a href="#注意点：-3" class="headerlink" title="注意点："></a>注意点：</h5><ul><li><h6 id="1、浏览器会第一次先发送options请求询问后端是否允许跨域"><a href="#1、浏览器会第一次先发送options请求询问后端是否允许跨域" class="headerlink" title="1、浏览器会第一次先发送options请求询问后端是否允许跨域"></a>1、浏览器会第一次先发送options请求询问后端是否允许跨域</h6></li><li><h6 id="2、后端在响应结果中告知浏览器允许跨域，允许的情况下浏览器再发送跨域请求"><a href="#2、后端在响应结果中告知浏览器允许跨域，允许的情况下浏览器再发送跨域请求" class="headerlink" title="2、后端在响应结果中告知浏览器允许跨域，允许的情况下浏览器再发送跨域请求"></a>2、后端在响应结果中告知浏览器允许跨域，允许的情况下浏览器再发送跨域请求</h6></li></ul></li></ul><h2 id="七、DRF-JWT"><a href="#七、DRF-JWT" class="headerlink" title="七、DRF JWT"></a>七、DRF JWT</h2><h3 id="1、token鉴权和JWT介绍"><a href="#1、token鉴权和JWT介绍" class="headerlink" title="1、token鉴权和JWT介绍"></a>1、token鉴权和JWT介绍</h3><pre><code>   针对前后端分离的项目，ajax跨域请求时，不会自动携带cookie信息，我们不再使用Session认证机制，而使用JWT(Json Web Token)认证机制，JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。今天给大家介绍JWT的原理和用法</code></pre><h4 id="1、token鉴权机制"><a href="#1、token鉴权机制" class="headerlink" title="1、token鉴权机制"></a>1、token鉴权机制</h4><p><img src="/2023/08/31/DRF/课件\images\1559723672450.png" alt="1559723672450"> </p><h4 id="2、JWT的构成"><a href="#2、JWT的构成" class="headerlink" title="2、JWT的构成"></a>2、JWT的构成</h4><p>一个JWT是由三个部分来组成的，头部（header),载荷（payload)，签名（signature).</p><p>下面是一个JWT </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo2LCJ1c2VybmFtZSI6Im11c2VuMDAxIiwiZXhwIjoxNjEwMDg3OTM0LCJlbWFpbCI6Im11c2VuMDAyQHFxLmNvbSJ9.A0rsMrRgiY9_c1lm6_P15Hbx9F95XExmGQhhOzjLytQ</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-、header"><a href="#1-、header" class="headerlink" title="1)、header"></a>1)、header</h5><p>在头部中一般包含两部分信息：一部分是类型，一部分是加密算法 这里是jwt</p><ul><li><h5 id="头部数据"><a href="#头部数据" class="headerlink" title="头部数据"></a>头部数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;typ&#x27;</span>: <span class="string">&#x27;JWT&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;alg&#x27;</span>: <span class="string">&#x27;HS256</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure></li></ul><p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分</p><ul><li><h5 id="加密后的头部"><a href="#加密后的头部" class="headerlink" title="加密后的头部"></a>加密后的头部</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-、payload"><a href="#2-、payload" class="headerlink" title="2)、payload"></a>2)、payload</h5><p>​载荷是 JSON Web Token 的主体内容部分，里面存放一些有效信息，JSON Web Token 标准定义了几个标准字段：</p><ul><li><h6 id="iss-该JWT的签发者"><a href="#iss-该JWT的签发者" class="headerlink" title="iss: 该JWT的签发者"></a>iss: 该JWT的签发者</h6></li><li><h6 id="sub-该JWT所面向的用户"><a href="#sub-该JWT所面向的用户" class="headerlink" title="sub: 该JWT所面向的用户"></a>sub: 该JWT所面向的用户</h6></li><li><h6 id="aud-接收该JWT的一方"><a href="#aud-接收该JWT的一方" class="headerlink" title="aud: 接收该JWT的一方"></a>aud: 接收该JWT的一方</h6></li><li><h6 id="exp-什么时候过期，这里是一个Unix时间戳"><a href="#exp-什么时候过期，这里是一个Unix时间戳" class="headerlink" title="exp: 什么时候过期，这里是一个Unix时间戳"></a>exp: 什么时候过期，这里是一个Unix时间戳</h6></li><li><h6 id="at-在什么时候签发的"><a href="#at-在什么时候签发的" class="headerlink" title="at: 在什么时候签发的"></a>at: 在什么时候签发的</h6></li></ul><p> 除了标准定义中的字段外，我们还可以自定义字段，比如在 JWT 中，我们的载荷信息可能如下 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;lemonban01&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;musen&quot;</span>,</span><br><span class="line">  <span class="string">&quot;admin&quot;</span>: true,</span><br><span class="line">  <span class="string">&quot;exp:&quot;</span>:<span class="number">12132323423423</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后将其进行base64加密，得到JWT的第二部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-、signature"><a href="#3-、signature" class="headerlink" title="3)、signature"></a>3)、signature</h5><p>签名是 JSON Web Token 中比较重要的一部分，前面两部分都是使用 Base64 进行编码的，signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名，签名的作用是保证 JWT 没有被篡改过。 </p><p>JWT的第三部分签证信息由三部分组成：</p><ul><li><h6 id="header-base64后的"><a href="#header-base64后的" class="headerlink" title="header :(base64后的)"></a>header :(base64后的)</h6></li><li><h6 id="payload-base64后的"><a href="#payload-base64后的" class="headerlink" title="payload :(base64后的)"></a>payload :(base64后的)</h6></li><li><h6 id="secret-私钥"><a href="#secret-私钥" class="headerlink" title="secret: 私钥"></a>secret: 私钥</h6></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">加密后的header +加密后的payload   结合私钥secret，用加密算法加密，得到最后的签名</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、RESTframework-JWT"><a href="#2、RESTframework-JWT" class="headerlink" title="2、RESTframework JWT"></a>2、RESTframework JWT</h3><p>关于签发和核验JWT，我们可以使用Django REST framework JWT扩展来完成。</p><ul><li><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework-jwt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h4 id="settings配置"><a href="#settings配置" class="headerlink" title="settings配置"></a>settings配置</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="comment"># 指明token的有效期</span></span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、账号登录"><a href="#3、账号登录" class="headerlink" title="3、账号登录"></a>3、账号登录</h4><h5 id="1-业务说明"><a href="#1-业务说明" class="headerlink" title="1. 业务说明"></a>1. 业务说明</h5><p>验证用户名和密码，验证成功后，为用户签发JWT，前端将签发的JWT保存下来。</p><h5 id="2-后端接口设计"><a href="#2-后端接口设计" class="headerlink" title="2. 后端接口设计"></a>2. 后端接口设计</h5><p><strong>请求方式</strong>： POST &#x2F;login&#x2F;</p><p><strong>请求参数</strong>： JSON 或 表单</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>username</td><td>str</td><td>是</td><td>用户名</td></tr><tr><td>password</td><td>str</td><td>是</td><td>密码</td></tr></tbody></table><p><strong>返回数据</strong>： JSON</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo5LCJ1c2VybmFtZSI6InB5dGhvbjgiLCJleHAiOjE1MjgxODI2MzQsImVtYWlsIjoiIn0.ejjVvEWxrBvbp18QIjQbL1TFE0c0ejQgizui_AROlAU&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>返回值</th><th>类型</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>username</td><td>str</td><td>是</td><td>用户名</td></tr><tr><td>id</td><td>int</td><td>是</td><td>用户id</td></tr><tr><td>token</td><td>str</td><td>是</td><td>身份认证凭据</td></tr></tbody></table><h3 id="3-后端实现"><a href="#3-后端实现" class="headerlink" title="3. 后端实现"></a>3. 后端实现</h3><p>Django REST framework JWT提供了登录签发JWT的视图，可以直接使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^login/$&#x27;</span>, obtain_jwt_token),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是默认的返回值仅有token，我们还需在返回值中增加username和user_id。</p><p>通过修改该视图的返回值可以完成我们的需求。</p><p>在项目中自定义一个模块，创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">jwt_response_data</span>(<span class="params">token, user=<span class="literal">None</span>, request=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义jwt认证成功返回数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: user.<span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: user.username</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JWT配置</span></span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">    <span class="string">&#x27;JWT_RESPONSE_PAYLOAD_HANDLER&#x27;</span>: <span class="string">&#x27;自定义认证类模块路径.jwt_response_data&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-增加支持管理员用户登录账号"><a href="#4-增加支持管理员用户登录账号" class="headerlink" title="4. 增加支持管理员用户登录账号"></a>4. 增加支持管理员用户登录账号</h3><p>JWT扩展的登录视图，在收到用户名与密码时，也是调用Django的认证系统中提供的**authenticate()**来检查用户名与密码是否正确。</p><p>我们可以通过修改Django认证系统的认证后端（主要是authenticate方法）来支持登录账号既可以是用户名也可以是手机号。</p><p><strong>修改Django认证系统的认证后端需要继承<code>django.contrib.auth.backends.ModelBackend</code>，并重写authenticate方法。</strong></p><p><code>authenticate(self, request, username=None, password=None, **kwargs)</code>方法的参数说明：</p><ul><li>request 本次认证的请求对象</li><li>username 本次认证提供的用户账号</li><li>password 本次认证提供的密码</li></ul><p><strong>我们想要让管理员用户才能登录我们的admin后台,这时我们就要修改django原有的用户验证方法。</strong></p><p>重写authenticate方法的思路：</p><ol><li>根据username参数查找用户User对象，在查询条件中在加上is_staff&#x3D;True的条件</li><li>若查找到User对象，调用User对象的check_password方法检查密码是否正确</li></ol><p>在utils&#x2F;authenticate.py中编写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> users.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MusenModelBackend</span>(<span class="title class_ inherited__">ModelBackend</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request, username=<span class="literal">None</span>, password=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 判断是否通过vue组件发送请求</span></span><br><span class="line">        <span class="keyword">if</span> request <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                user = User.objects.get(username=username, is_staff=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 判断密码</span></span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                user = User.objects.get(username=username)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    user = User.objects.get(mobile=username)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断密码</span></span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在settings.py文件中告知Django使用我们自定义的认证后端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AUTHENTICATION_BACKENDS = [</span><br><span class="line">    <span class="string">&#x27;自定义认证类模块路径.MusenModelBackend&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="前端保存token"><a href="#前端保存token" class="headerlink" title="前端保存token"></a>前端保存token</h4><p>前端可以将JWT保存在浏览器的本地存储里，浏览器的本地存储提供了sessionStorage 和 localStorage 两种：</p><ul><li><strong>sessionStorage</strong> 浏览器关闭即失效</li><li><strong>localStorage</strong> 长期有效</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos部署DRF+NGINX+UWSGI</title>
      <link href="/2022/10/06/Centos%E9%83%A8%E7%BD%B2DRF-NGINX-UWSGI/"/>
      <url>/2022/10/06/Centos%E9%83%A8%E7%BD%B2DRF-NGINX-UWSGI/</url>
      
        <content type="html"><![CDATA[<h2 id="Centos部署DRF-NGINX-UWSGI"><a href="#Centos部署DRF-NGINX-UWSGI" class="headerlink" title="Centos部署DRF+NGINX+UWSGI"></a>Centos部署DRF+NGINX+UWSGI</h2><h3 id="上线前配置"><a href="#上线前配置" class="headerlink" title="上线前配置"></a>上线前配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.前端项目：npm run build打包成一个dist文件夹,并上传到服务器</span><br></pre></td></tr></table></figure><h3 id="更新系统软件包"><a href="#更新系统软件包" class="headerlink" title="更新系统软件包"></a>更新系统软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">采用centos7.6</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> ~</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: yum update -y</span>   </span><br></pre></td></tr></table></figure><h3 id="安装软件管理包和可能使用的依赖"><a href="#安装软件管理包和可能使用的依赖" class="headerlink" title="安装软件管理包和可能使用的依赖"></a>安装软件管理包和可能使用的依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel psmisc libffi-devel</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: yum -y groupinstall <span class="string">&quot;Development tools&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="检测是否成功：会将git作为依赖安装好"><a href="#检测是否成功：会将git作为依赖安装好" class="headerlink" title="检测是否成功：会将git作为依赖安装好"></a>检测是否成功：会将git作为依赖安装好</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: git显示命令则成功</span></span><br></pre></td></tr></table></figure><h3 id="安装MySQL5-7"><a href="#安装MySQL5-7" class="headerlink" title="安装MySQL5.7"></a>安装MySQL5.7</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1）前往用户根目录</span><br><span class="line">&gt;: <span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line">2）下载mysql57</span><br><span class="line">&gt;: wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line">3）安装mysql57</span><br><span class="line">&gt;: yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">&gt;: yum -y install mysql-community-server</span><br><span class="line">yum install mysql-community-server --nogpgcheck -y(这一步看机器是否需要)</span><br><span class="line"></span><br><span class="line">4）启动mysql57并查看启动状态</span><br><span class="line">&gt;: systemctl start mysqld.service</span><br><span class="line">&gt;: systemctl status mysqld.service  显示active则成功</span><br><span class="line"></span><br><span class="line">5）查看默认密码并登录</span><br><span class="line">&gt;: grep <span class="string">&quot;password&quot;</span> /var/log/mysqld.log</span><br><span class="line">&gt;: mysql -uroot -p</span><br><span class="line"></span><br><span class="line">6）修改密码</span><br><span class="line">&gt;: ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;new password&#x27;</span>;</span><br><span class="line">&gt;: ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Owen1234?&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装redis5-0-5"><a href="#安装redis5-0-5" class="headerlink" title="安装redis5.0.5"></a>安装redis5.0.5</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1）前往用户根目录</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> ~</span></span><br><span class="line"></span><br><span class="line">2）下载redis-5.0.5</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span></span><br><span class="line"></span><br><span class="line">3）解压安装包</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: tar -xf redis-5.0.5.tar.gz</span></span><br><span class="line">4）进入目标文件</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> redis-5.0.5</span></span><br><span class="line"></span><br><span class="line">5）编译环境</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: make</span></span><br><span class="line"></span><br><span class="line">6）复制环境到指定路径完成安装</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cp</span> -r ~/redis-5.0.5 /usr/local/redis</span></span><br><span class="line"></span><br><span class="line">7）建立软连接</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">ln</span> -s /usr/local/redis/src/redis-server /usr/bin/redis-server</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">ln</span> -s /usr/local/redis/src/redis-cli /usr/bin/redis-cli</span></span><br><span class="line">8)查看后台 &gt;:ps -aux|grep redis-server</span><br><span class="line"></span><br><span class="line">9）后台运行redis</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> /usr/local/redis</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: redis-server &amp;</span></span><br><span class="line"></span><br><span class="line">10）测试redis环境</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: redis-cli</span></span><br><span class="line">ctrl + c</span><br><span class="line"></span><br><span class="line">11）关闭redis服务</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: pkill -f redis -9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">源码安装python，依赖一些第三方zlib* libffi-devel</span></span><br><span class="line">yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel psmisc libffi-devel zlib* libffi-devel  -y</span><br><span class="line">1 前往用户根目录</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> ~</span></span><br><span class="line"></span><br><span class="line">2 下载 或 上传 Python3.8.1 </span><br><span class="line">wget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tar.xz</span><br><span class="line"></span><br><span class="line">3  解压安装包</span><br><span class="line">tar -xf Python-3.8.1.tar.xz</span><br><span class="line"></span><br><span class="line">4 进入目标文件</span><br><span class="line">cd Python-3.8.1</span><br><span class="line"></span><br><span class="line">5 配置安装路径：/usr/local/python3</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: ./configure --prefix=/usr/local/python3</span></span><br><span class="line"></span><br><span class="line">6）编译并安装</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: make &amp;&amp; sudo make install</span></span><br><span class="line"></span><br><span class="line">7）建立软连接：终端命令 python3，pip3</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">ln</span> -s /usr/local/python3/bin/python3.8 /usr/bin/python3</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">ln</span> -s /usr/local/python3/bin/pip3.8 /usr/bin/pip3</span></span><br><span class="line"></span><br><span class="line">8）删除安装包与文件(可忽略)：</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">rm</span> -rf Python-3.8.1</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">rm</span> -rf Python-3.8.1.tar.xz</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1）前往用户根目录</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> ~</span></span><br><span class="line"></span><br><span class="line">2）下载nginx1.13.7</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: wget http://nginx.org/download/nginx-1.13.7.tar.gz</span></span><br><span class="line"></span><br><span class="line">3）解压安装包</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: tar -xf nginx-1.13.7.tar.gz</span></span><br><span class="line"></span><br><span class="line">4）进入目标文件</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> nginx-1.13.7</span></span><br><span class="line"></span><br><span class="line">5）配置安装路径：/usr/local/nginx</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: ./configure --prefix=/usr/local/nginx</span></span><br><span class="line"></span><br><span class="line">6）编译并安装</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: make &amp;&amp; sudo make install</span></span><br><span class="line"></span><br><span class="line">7）建立软连接：终端命令 nginx</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">ln</span> -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</span></span><br><span class="line"></span><br><span class="line">8）删除安装包与文件(可忽略)：</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">cd</span> ~</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">rm</span> -rf nginx-1.13.7</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">rm</span> -rf nginx-1.13.7.tar.xz</span></span><br><span class="line"></span><br><span class="line">9）测试Nginx环境，服务器运行nginx，本地访问服务器ip</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: nginx</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: 服务器绑定的域名 或 ip:80</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Nginx命令</span></span><br><span class="line">1）启动</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: nginx</span></span><br><span class="line"></span><br><span class="line">2）关闭nginx</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: nginx -s stop</span></span><br><span class="line"></span><br><span class="line">3）重启nginx</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: nginx -s reload</span></span><br><span class="line"></span><br><span class="line">4）查看端口，强行关闭</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: ps -aux|grep nginx</span></span><br></pre></td></tr></table></figure><h3 id="Nginx转发静态文件"><a href="#Nginx转发静态文件" class="headerlink" title="Nginx转发静态文件"></a>Nginx转发静态文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1.先通过Xshell或Xftp上传打包好的前端文件</span><br><span class="line">cd ~</span><br><span class="line">1 mv ~/dist /home/html</span><br><span class="line">2 cd /usr/local/nginx/conf</span><br><span class="line">mv nginx.conf nginx.conf.bak</span><br><span class="line">3 vim nginx.conf</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name  127.0.0.1; # 改为自己的域名，没域名修改为127.0.0.1:80</span><br><span class="line">        charset utf-8;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /home/html; # html访问路径</span><br><span class="line">            index index.html; # html文件名称</span><br><span class="line">            try_files $uri $uri/ /index.html; # 解决单页面应用刷新404问题</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">esc</span><br><span class="line">:wq   # 保存并推出</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启nginx(访问服务器公网ip即可看到前端项目)</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="转发动态请求（uwsgi-django项目"><a href="#转发动态请求（uwsgi-django项目" class="headerlink" title="转发动态请求（uwsgi+django项目)"></a>转发动态请求（uwsgi+django项目)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1 <span class="built_in">mkdir</span> /home/project</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2 <span class="built_in">cd</span> /home/project</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3 git <span class="built_in">clone</span> xxxx（码云）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4 安装虚拟环境，创建虚拟环境，安装项目依赖</span></span><br><span class="line">pip3 install virtualenv</span><br><span class="line">pip3 install virtualenvwrapper</span><br><span class="line">2）建立虚拟环境软连接</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">ln</span> -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv</span></span><br><span class="line">3）配置虚拟环境：填入下方内容</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">~/ 表示用户家路径：root用户，就是在/root/.bash_profile</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: vim ~/.bash_profile</span>   </span><br><span class="line">填写内容    </span><br><span class="line">VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line">source /usr/local/python3/bin/virtualenvwrapper.sh  </span><br><span class="line">6）更新（执行）配置文件内容</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: <span class="built_in">source</span> ~/.bash_profile</span></span><br><span class="line">创建虚拟环境：mkvirtualenv happy    </span><br><span class="line">    </span><br><span class="line">pip install -r requirements.txt  （在指定的目录下）</span><br><span class="line">pip install uwsgi （虚拟和真实环境都需要安装）</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">:deactivate</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">:pip3 install uwsgi</span></span><br><span class="line"></span><br><span class="line">进行uwsgi服务配置，内容如下</span><br><span class="line">vim happy.xml</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">:i</span></span><br><span class="line">&lt;uwsgi&gt;    </span><br><span class="line">   &lt;socket&gt;127.0.0.1:8808&lt;/socket&gt; &lt;!-- 内部端口，自定义 --&gt; </span><br><span class="line">   &lt;chdir&gt;/home/project/happy/&lt;/chdir&gt; &lt;!-- 项目路径 --&gt;            </span><br><span class="line">   &lt;module&gt;happyapi.wsgi&lt;/module&gt;  &lt;!-- luffyapi为wsgi.py所在目录名--&gt; </span><br><span class="line">   &lt;processes&gt;4&lt;/processes&gt; &lt;!-- 进程数 --&gt;     </span><br><span class="line">   &lt;daemonize&gt;uwsgi.log&lt;/daemonize&gt; &lt;!-- 日志文件 --&gt;</span><br><span class="line">&lt;/uwsgi&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">:ESC</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: :wq</span></span><br><span class="line">1）启动uwsgi</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: uwsgi -x /home/project/happy/happy.xml</span></span><br><span class="line">关闭 uwsgi，重新启动 uwsgi</span><br><span class="line">pkill -f uwsgi -9</span><br><span class="line">2）重启nginx</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: nginx -s reload</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7 去向Nginx配置目录，备份配置，完全更新配置：填入下方内容</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name  127.0.0.1; # 改为自己的域名，没域名修改为127.0.0.1:80</span><br><span class="line">        charset utf-8;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /home/html; # html访问路径</span><br><span class="line">            index index.html; # html文件名称</span><br><span class="line">            try_files $uri $uri/ /index.html; # 解决单页面应用刷新404问题</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    # 新增的server</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8000;</span><br><span class="line">        server_name  127.0.0.1; # 改为自己的域名，没域名修改为127.0.0.1:80</span><br><span class="line">        charset utf-8;</span><br><span class="line">        location / &#123;</span><br><span class="line">           include uwsgi_params;</span><br><span class="line">           uwsgi_pass 127.0.0.1:8808;  # 端口要和uwsgi里配置的一样</span><br><span class="line">           uwsgi_param UWSGI_SCRIPT happyapi.wsgi;  #wsgi.py所在的目录名+.wsgi</span><br><span class="line">           uwsgi_param UWSGI_CHDIR /home/project/happy/; # 项目路径</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">9 mysql的root用户，登录，创建表luffyapi，创建用户，授权</span></span><br><span class="line">    1）管理员连接数据库</span><br><span class="line">    &gt;: mysql -uroot -p</span><br><span class="line"></span><br><span class="line">    2）创建数据库</span><br><span class="line">    &gt;: create database luffyapi default charset=utf8;</span><br><span class="line">        create database happyapi default charset=utf8;</span><br><span class="line"></span><br><span class="line">    3）设置权限账号密码：账号密码要与项目中配置的一致</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">:grant all privileges on happyapi.* to <span class="string">&#x27;happy&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;Happyapi123?&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">:grant all privileges on happyapi.* to <span class="string">&#x27;happy&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;Happyapi123?&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">: flush privileges;</span></span><br><span class="line">    4）退出mysql</span><br><span class="line">    &gt;: quit;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">10 数据迁移创建超级用户</span></span><br><span class="line">python manage_pro.py makemigraions</span><br><span class="line">python manage_pro.py migrate</span><br><span class="line">python manage_pro.py createsuperuser</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">11 启动uwsgi和nginx（后端项目就可以了）</span></span><br><span class="line">    1）启动uwsgi</span><br><span class="line">    &gt;: uwsgi -x /home/project/happy/happyapi.xml</span><br><span class="line">    2）重启nginx</span><br><span class="line">    &gt;: nginx -s reload</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">千万要注意数据库版本：哭死测试环境用的8.x生产环境用的5.7，导入数据的时候直接把表删除了，但是数据还没导进去，结果又得胡乱一通，支付宝回调界面不能使用扫码，只能输入用户名和密码进行回调。</span><br><span class="line">Django版本降级,mysqlclient死活安装不上，可惜开发环境使用的django2.x，只能降低到django2.0.7</span><br><span class="line">后续django3.x可以忽略这个问题了，Ubuntu随便装mysqlclient，centos哭唧唧，鼓鼓捣捣又是一天,哭的出鼻血.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx,UWSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF统筹-简略版</title>
      <link href="/2022/08/28/DRF%E7%BB%9F%E7%AD%B9/"/>
      <url>/2022/08/28/DRF%E7%BB%9F%E7%AD%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="DRF阶段"><a href="#DRF阶段" class="headerlink" title="DRF阶段"></a>DRF阶段</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0 web开发模型，混合开发和前后端分离</span></span><br><span class="line"><span class="comment"># 1 restful规范--10条</span></span><br><span class="line"><span class="comment"># 2 django上写符合restful规范的接口</span></span><br><span class="line"><span class="comment"># 3 drf写接口</span></span><br><span class="line"><span class="comment"># 4 APIView--》继承了原生View---》get，post方法</span></span><br><span class="line">-（为什么get请求来了，就会执行get方法：原生View的dispatch控制的）</span><br><span class="line">    -路由配置：视图类.as_view()----&gt;view（闭包函数）的内存地址</span><br><span class="line">    -请求来了，就会执行view(requst,分组分出的字段，默认传的字段)---》self.dispatch()--&gt;处理的</span><br><span class="line">    </span><br><span class="line">    -APIView重写了dispatch：包装了request对象，解析器，分页，三大认证，响应器，全局异常，去掉了csrf</span><br><span class="line"><span class="comment"># 5 Request对象：request._request,request.data，重写了__getattr__，request.method--&gt;去原生request中拿</span></span><br><span class="line">-前端传过来的数据从那取？</span><br><span class="line">    -地址栏里：request.GET/query_params</span><br><span class="line">       -请求体中的数据：request.data/POST(json格式解释不了)---》request.body中取</span><br><span class="line">        -请求头中数据：request.META.get(<span class="string">&quot;HTTP_变成大写&quot;</span>)</span><br><span class="line"><span class="comment">#6  Response对象---》封装了原生的HttpResponse，Response（data，headers=&#123;&#125;,status=1/2/3/4/5开头的）</span></span><br><span class="line"><span class="comment">#7  自己封装了Response对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8 序列化类：</span></span><br><span class="line">-Serializer</span><br><span class="line">    -写字段，字段名要跟表的字段对应，想不对应（source可以修改），有属性，read_only,max_len...</span><br><span class="line">        -SerializerMethodField必须配套一个get_字段名，返回什么，前台就看到什么</span><br><span class="line">    -ModelSerializer</span><br><span class="line">    -<span class="keyword">class</span> <span class="title class_">Meta</span>：</span><br><span class="line">        表对应</span><br><span class="line">            取出的字段（__all__,列表）</span><br><span class="line">            排除的字段（用的很少）</span><br><span class="line">            extra_kwargs会给字段的属性</span><br><span class="line">            </span><br><span class="line">        -重写某个字段</span><br><span class="line">        password=serializers.SerializerMethodField()</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">get_password</span>(<span class="params">self,instance</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;***&quot;</span></span><br><span class="line">        -校验：字段自己的校验，局部钩子，全局钩子</span><br><span class="line">        -只要序列化类的对象执行了is_valiad(),这些钩子都会走，可以再钩子里写逻辑</span><br><span class="line">        -在表模型（model）中写方法，可以在上面取出的字段中直接写，不参与反序列化</span><br><span class="line">   -序列化多条（many=<span class="literal">True</span>）:本质，ListSerializer内部套了一个个的serializer对象</span><br><span class="line">   -重写ListSerializer，让序列化对象和自己写的ListSerializer对应上（了解）</span><br><span class="line">-序列化类(instance,data,many,context=&#123;requtst:request&#125;)</span><br><span class="line">-视图函数中给序列化对象传递数据，使用context，传回来，放进去直接使用序列化对象.context.get()</span><br><span class="line"><span class="comment"># 9 视图</span></span><br><span class="line">-两个视图基类 APIView，GenericAPIView（继承APIView）：涉及到数据库和序列化类的操作，尽量用GenericAPIView</span><br><span class="line">    -<span class="number">5</span>个视图扩展类（父类都是<span class="built_in">object</span>）</span><br><span class="line">        CreateModelMixin：create</span><br><span class="line">        DestroyModelMixin：destory</span><br><span class="line">        ListModelMixin</span><br><span class="line">        RetrieveModelMixin</span><br><span class="line">        UpdateModelMixin</span><br><span class="line">    -<span class="number">9</span>个视图子类（GenericAPIView+上面<span class="number">5</span>个视图扩展类中的一个或多个）</span><br><span class="line">    RetrieveUpdateDestroyAPIView</span><br><span class="line">        CreateAPIView</span><br><span class="line">        RetrieveAPIView</span><br><span class="line">        DestroyAPIView</span><br><span class="line">        RetrieveUpdateAPIView</span><br><span class="line">        ListCreateAPIView</span><br><span class="line">        UpdateAPIView</span><br><span class="line">        ListAPIView</span><br><span class="line">        RetrieveDestroyAPIView</span><br><span class="line">    -视图集</span><br><span class="line">    -ModelViewSet:<span class="number">5</span>大接口都有了</span><br><span class="line">        -ReadOnlyModelViewSet：获取一条和获取多条的接口</span><br><span class="line">    -GenericViewSet：ViewSetMixin+GenericAPIView        </span><br><span class="line">        ViewSet:ViewSetMixin+APIView</span><br><span class="line">        ViewSetMixin:类重写了as_view,路由配置就变样了</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 10 路由</span></span><br><span class="line">-基本配置：跟之前一样</span><br><span class="line">    -有action的：必须继承ViewSetMixin</span><br><span class="line">    -自动生成：DefaultRouter和SimpleRouter</span><br><span class="line">    -导入，实例化得到对象，注册多个，对象.urls(自动生成的路由)</span><br><span class="line">        -路由相加urlpatterns+=router.urls/include:path(<span class="string">&#x27;&#x27;</span>, include(router.urls))</span><br><span class="line">    -视图类中自己定义的方法，如何自动生成路由</span><br><span class="line">    -在自己定义的方法上加装饰器（action）</span><br><span class="line">        -两个参数methods=[GET,POST],表示这两种请求都能接受</span><br><span class="line">        -两个参数detail=<span class="literal">True</span>,表示生成带pk的连接</span><br><span class="line"><span class="comment"># 11 三大认证</span></span><br><span class="line">-认证组件：校验用户是否登录</span><br><span class="line">    -写一个认证类，继承BaseAuthentication，重写authenticate，内部写认证逻辑，认证通过返回两个值，第一个是user，认证失败，抛去异常</span><br><span class="line">        -全局使用，局部使用，局部禁用</span><br><span class="line">    -权限：校验用户是否有权限进行后续操作</span><br><span class="line">    -写一个类，继承BasePermission，重写has_permission，<span class="literal">True</span>和<span class="literal">False</span></span><br><span class="line">        -全局使用，局部使用，局部禁用</span><br><span class="line">    -频率：限制用户访问频次</span><br><span class="line">    -写一个类，继承SimpleRateThrottle，重写get_cache_key，返回什么，就以谁做限制，scop=luffy字段，需要跟setting中的key对应   luffy:<span class="number">3</span>/h(一小时访问三次)</span><br><span class="line">        </span><br><span class="line">        -全局配置，局部配置，局部禁用</span><br><span class="line">        -需求：发送短信验证码的接口，一分钟只能发送一次，局部使用，配在视图类上</span><br><span class="line"><span class="comment"># 12 解析器：前端传的编码格式，能不能解析（默认三种全配了，基本不需要改），可能你写了个上传文件接口，局部配置一下，只能传form-data格式  局部使用：MultiPartParser</span></span><br><span class="line"><span class="comment"># 13 响应器：响应的数据，是json格式还是带浏览器的那种（不需要配）</span></span><br><span class="line"><span class="comment"># 14 过滤器：借助于第三方django-filter</span></span><br><span class="line">-注册应用</span><br><span class="line">    -setting中配置DjangoFilterBackend或者局部配置</span><br><span class="line">    -filter_fields = (<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>)</span><br><span class="line"><span class="comment"># 15 排序</span></span><br><span class="line">-全局或者局部配置rest_framework.filters.OrderingFilter</span><br><span class="line">    -视图类中配置： ordering_fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 16 分页</span></span><br><span class="line">-使用：</span><br><span class="line">        继承了APIView的视图类中使用</span><br><span class="line">         page=Mypage()</span><br><span class="line">            <span class="comment"># 在数据库中获取分页的数据</span></span><br><span class="line">            page_list=page.paginate_queryset(queryset对象,request,view=self)</span><br><span class="line">            <span class="comment"># 对分页进行序列化</span></span><br><span class="line">            ser=BookSerializer1(instance=page_list,many=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># return Response(ser.data)</span></span><br><span class="line">        继承了视图子类的视图中使用</span><br><span class="line">         pagination_class = PageNumberPagination（配置成自己重写的，可以修改字段）</span><br><span class="line">-CursorPagination</span><br><span class="line">        cursor_query_param:默认查询字段，不需要修改</span><br><span class="line">        page_size：每页数目</span><br><span class="line">        ordering：按什么排序，需要指定</span><br><span class="line">-LimitOffsetPagination</span><br><span class="line">    default_limit 默认限制，默认值与PAGE_SIZE设置一直</span><br><span class="line">        limit_query_param limit参数名，默认’limit’</span><br><span class="line">        offset_query_param offset参数名，默认’offset’</span><br><span class="line">        max_limit 最大limit限制，默认<span class="literal">None</span></span><br><span class="line">-PageNumberPagination：最常用的，需要在setting中配置page_size，四个参数</span><br><span class="line">        page_size 每页数目</span><br><span class="line">        page_query_param 前端发送的页数关键字名，默认为”page”</span><br><span class="line">        page_size_query_param 前端发送的每页数目关键字名，默认为<span class="literal">None</span></span><br><span class="line">        max_page_size 前端最多能设置的每页数量</span><br><span class="line"><span class="comment"># 17 全局异常</span></span><br><span class="line">-写一个方法</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exception_handler</span>(<span class="params">exc, context</span>):</span><br><span class="line">            <span class="comment"># 走drf原来的异常，原理异常有一些处理</span></span><br><span class="line">            response = drf_exception_handler(exc, context)</span><br><span class="line"><span class="comment"># 我们自己处理，drf没有处理，丢给django的异常</span></span><br><span class="line">            <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(exc, DatabaseError):<span class="comment">#处理了一下数据库错误</span></span><br><span class="line">                    response = Response(&#123;<span class="string">&#x27;detail&#x27;</span>: <span class="string">&#x27;数据库错误&#x27;</span>&#125;, status=status.HTTP_507_INSUFFICIENT_STORAGE)</span><br><span class="line">                <span class="keyword">else</span>:<span class="comment">#其他异常</span></span><br><span class="line">                    response = Response(&#123;<span class="string">&#x27;detail&#x27;</span>: <span class="string">&#x27;未知错误&#x27;</span>&#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">    -配置文件中配置（以后所有drf的异常，都会走到这里）</span><br><span class="line">    REST_FRAMEWORK = &#123;</span><br><span class="line">            <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;my_project.my_app.utils.custom_exception_handler&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"> -<span class="number">18</span> jwt</span><br><span class="line">-是什么json web token  新的认证方式</span><br><span class="line">    -三段：头，荷载（用户信息），签名</span><br><span class="line">    -使用：最简单方式（在路由中配置）</span><br><span class="line">    -path(<span class="string">&#x27;login/&#x27;</span>, obtain_jwt_token),</span><br><span class="line">    -自定制：</span><br><span class="line">    多方式登录，手动签发token（两个方法）</span><br><span class="line">    -自定制基于jwt的认证类</span><br><span class="line">    -取出token</span><br><span class="line">        -调用jwt提供的解析出payload的方法（校验是否过期，是否合法，如果合法，返回荷载信息）</span><br><span class="line">        -转成user对象</span><br><span class="line">        -返回</span><br><span class="line">        </span><br><span class="line">  -<span class="number">19</span> RBAC：基于角色的权限控制（django默认的auth就是给你做了这个事），公司内部权限管理</span><br><span class="line">对外的权限管理就是用三大认证</span><br><span class="line">-用户表</span><br><span class="line">    -用户组表</span><br><span class="line">    -权限表</span><br><span class="line">    -用户对用户组中间表</span><br><span class="line">    -用户组对权限中间表</span><br><span class="line">    -用户对权限中间表</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF-JWT-基于JWT认证</title>
      <link href="/2022/08/26/DRF-JWT-%E5%9F%BA%E4%BA%8EJWT%E8%AE%A4%E8%AF%81/"/>
      <url>/2022/08/26/DRF-JWT-%E5%9F%BA%E4%BA%8EJWT%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="自动生成接口文档"><a href="#自动生成接口文档" class="headerlink" title="自动生成接口文档"></a>自动生成接口文档</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 安装：pip install coreapi/swagger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 在路由中配置</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</span><br><span class="line">    urlpatterns = [</span><br><span class="line">        path(<span class="string">&#x27;docs/&#x27;</span>, include_docs_urls(title=<span class="string">&#x27;开发文档测试&#x27;</span>))</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line"><span class="comment">#3 视图类：自动接口文档能生成的是继承自APIView及其子类的视图。</span></span><br><span class="line">-<span class="number">1</span> ） 单一方法的视图，可直接使用类视图的文档字符串，如</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">BookListView</span>(generics.ListAPIView):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            返回所有图书信息.</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">    -<span class="number">2</span>)包含多个方法的视图，在类视图的文档字符串中，分开方法定义，如</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">BookListCreateView</span>(generics.ListCreateAPIView):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            get:</span></span><br><span class="line"><span class="string">            返回所有图书信息.</span></span><br><span class="line"><span class="string">            post:</span></span><br><span class="line"><span class="string">            新建图书.</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">    -<span class="number">3</span>)对于视图集ViewSet，仍在类视图的文档字符串中封开定义，但是应使用action名称区分，如</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">BookInfoViewSet</span>(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        list:</span></span><br><span class="line"><span class="string">        返回图书列表数据</span></span><br><span class="line"><span class="string">        retrieve:</span></span><br><span class="line"><span class="string">        返回图书详情数据</span></span><br><span class="line"><span class="string">        latest:</span></span><br><span class="line"><span class="string">        返回最新的图书数据</span></span><br><span class="line"><span class="string">        read:</span></span><br><span class="line"><span class="string">        修改图书的阅读量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#settings.py配置</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_SCHEMA_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.schemas.coreapi.AutoSchema&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">jwt=Json Web token</span><br><span class="line"><span class="comment">#原理</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1）jwt分三段式：头,体,签名 （head,payload,sgin）</span></span><br><span class="line"><span class="string">2）头和体是可逆加密，让服务器可以反解出user对象；签名是不可逆加密，保证整个token的安全性的</span></span><br><span class="line"><span class="string">3）头体签名三部分，都是采用json格式的字符串，进行加密，可逆加密一般采用base64算法，不可逆加密一般采用HMAC、SHA256算法</span></span><br><span class="line"><span class="string">4）头中的内容是基本信息：公司信息、项目组信息、token采用的加密方式信息</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;company&quot;: &quot;公司信息&quot;,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">5）体中的内容是关键信息：用户主键、用户名、签发时客户端信息(设备号、地址)、过期时间</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;user_id&quot;: 1,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">6）签名中的内容时安全信息：头的加密结果 + 体的加密结果 + 服务器不对外公开的安全码 进行加密</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;head&quot;: &quot;头的加密字符串&quot;,</span></span><br><span class="line"><span class="string">&quot;payload&quot;: &quot;体的加密字符串&quot;,</span></span><br><span class="line"><span class="string">&quot;secret_key&quot;: &quot;安全码&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="base64使用"><a href="#base64使用" class="headerlink" title="base64使用"></a>base64使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># base64编码和解码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编码（字符串，json格式字符串）</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">dic_str=json.dumps(dic, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">ret=base64.b64encode(dic_str.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line">ret2=base64.b64decode(ret)</span><br><span class="line"><span class="built_in">print</span>(ret2)</span><br></pre></td></tr></table></figure><h2 id="jwt认证流程"><a href="#jwt认证流程" class="headerlink" title="jwt认证流程"></a>jwt认证流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1）将token按 . 拆分为三段字符串，第一段 头加密字符串 一般不需要做任何处理</span><br><span class="line">2）第二段 体加密字符串，要反解出用户主键，通过主键从User表中就能得到登录用户，过期时间和设备信息都是安全信息，确保token没过期，且时同一设备来的</span><br><span class="line">3）再用 第一段 + 第二段 + 服务器安全码 不可逆加密，与第三段 签名字符串 进行碰撞校验，通过后才能代表第二段校验得到的user对象就是合法的登录用户</span><br><span class="line"></span><br><span class="line">DRF项目的jwt认证开发流程:</span><br><span class="line">1）用账号密码访问登录接口，登录接口逻辑中调用 签发token 算法，得到token，返回给客户端，客户端自己存到cookies中</span><br><span class="line"></span><br><span class="line">2）校验token的算法应该写在认证类中(在认证类中调用)，全局配置给认证组件，所有视图类请求，都会进行认证校验，所以请求带了token，就会反解出user对象，在视图类中用request.user就能访问登录的用户</span><br><span class="line"></span><br><span class="line">注：登录接口需要做 认证 + 权限 两个局部禁用</span><br></pre></td></tr></table></figure><h2 id="jwt简单使用"><a href="#jwt简单使用" class="headerlink" title="jwt简单使用"></a>jwt简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装pip install djangorestframework-jwt</span></span><br><span class="line"> <span class="comment">#urls.py</span></span><br><span class="line">    <span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> ObtainJSONWebToken,obtain_jwt_token</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, obtain_jwt_token),</span><br><span class="line">    </span><br><span class="line">obtain_jwt_token对象继承APIView,携带用户名和密码发送post请求即可看到产生的token    </span><br></pre></td></tr></table></figure><h2 id="视图集案例"><a href="#视图集案例" class="headerlink" title="视图集案例"></a>视图集案例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py </span></span><br><span class="line"><span class="comment"># 1.自定义User表,新增mobile唯一约束字段;新增icon图片字段;</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>)</span><br><span class="line">    icon = models.ImageField(upload_to=<span class="string">&#x27;icon&#x27;</span>, default=<span class="string">&#x27;icon/default.png&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ser.py</span></span><br><span class="line"><span class="comment"># 2.在自定义User表基础上，用 GenericViewSet + CreateModelMixin + serializer 完成User表新增接口（注册接口;重要提示：序列化类要重写create方法，不然密码就是明文了）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 表中没有的字段</span></span><br><span class="line">    confirm_password = serializers.CharField(max_length=<span class="number">16</span>, min_length=<span class="number">6</span>, write_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.User</span><br><span class="line">        fields = [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;confirm_password&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>, <span class="string">&#x27;icon&#x27;</span>]</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;max_length&#x27;</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="string">&#x27;min_length&#x27;</span>: <span class="number">4</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_mobile</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(data) == <span class="number">11</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;手机号不合法&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> attrs.get(<span class="string">&#x27;password&#x27;</span>) == attrs.get(<span class="string">&#x27;confirm_password&#x27;</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;两次密码不一致&#x27;</span>)</span><br><span class="line">        <span class="comment"># 需要将确认密码弹出</span></span><br><span class="line">        attrs.pop(<span class="string">&#x27;confirm_password&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        user = models.User.objects.create_user(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserReadOnlyModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.User</span><br><span class="line">        fields = [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;icon&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserImageModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.User</span><br><span class="line">        fields = [<span class="string">&#x27;icon&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>在自定义User表基础上，用 GenericViewSet + RetrieveModelMixin + serializer 完成User表单查(就是用户中心);</span><br><span class="line"><span class="number">4.</span>在自定义User表基础上，用 GenericViewSet + UpdateModelMixin + serializer 完成用户头像的修改</span><br><span class="line"><span class="comment"># 通过重写get_serializer_class方法配置不同方法对应不同的序列化类.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterView</span>(GenericViewSet, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin):</span><br><span class="line">    queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># serializer_class = UserModelSerializer</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_serializer_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">&#x27;create&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> UserModelSerializer</span><br><span class="line">        <span class="keyword">elif</span> self.action == <span class="string">&#x27;retrieve&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> UserReadOnlyModelSerializer</span><br><span class="line">        <span class="keyword">elif</span> self.action == <span class="string">&#x27;update&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> UserImageModelSerializer</span><br></pre></td></tr></table></figure><h2 id="权限控制登录后访问和不登录就能访问"><a href="#权限控制登录后访问和不登录就能访问" class="headerlink" title="权限控制登录后访问和不登录就能访问"></a>权限控制登录后访问和不登录就能访问</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAPIView</span>(<span class="title class_ inherited__">APIView</span>):<span class="comment"># 登录才能</span></span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication,]</span><br><span class="line">    <span class="comment"># 权限控制</span></span><br><span class="line">    permission_classes = [IsAuthenticated,]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;这是订单信息&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeAPIView</span>(<span class="title class_ inherited__">APIView</span>):<span class="comment"># 登录才能</span></span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication,]</span><br><span class="line">    <span class="comment"># 权限控制</span></span><br><span class="line">    <span class="comment"># permission_classes = [IsAuthenticated,]</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;这是首页信息&#x27;</span>)    </span><br></pre></td></tr></table></figure><h2 id="自定义认证返回的数据格式"><a href="#自定义认证返回的数据格式" class="headerlink" title="自定义认证返回的数据格式"></a>自定义认证返回的数据格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rest_framework_jwt.utils.jwt_response_payload_handler返数据只有token,有时候我们需要携带其他数据返回;自定义返回数据格式</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制登录接口返回的数据格式(使用内置)1.自定义 2.内置</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jwt_response_payload_handler</span>(<span class="params">token, user=<span class="literal">None</span>, request=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: user.username,</span><br><span class="line">        <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;登陆成功&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>: status.HTTP_200_OK,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;JWT_RESPONSE_PAYLOAD_HANDLER&#x27;</span>: <span class="string">&#x27;api.jwt_response_utils.jwt_response_payload_handler&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义基于jwt的认证"><a href="#自定义基于jwt的认证" class="headerlink" title="自定义基于jwt的认证"></a>自定义基于jwt的认证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> AuthenticationFailed</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> (</span><br><span class="line">    BaseJSONWebTokenAuthentication, jwt_decode_handler, get_authorization_header)</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于drf的Authentication认证</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JWTAuthentication</span>(<span class="title class_ inherited__">BaseAuthentication</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request</span>):</span><br><span class="line">        token = request.META.get(<span class="string">&#x27;HTTP_AUTHORIZATION&#x27;</span>)</span><br><span class="line">        <span class="comment"># 未携带token</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;Authorization字段是必须携带的.&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt_decode_handler(token)</span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignature:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;签名已经过期&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;非法用户&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="built_in">str</span>(e))</span><br><span class="line">        user_id = payload.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">        <span class="comment"># user = models.User.objects.filter(pk=user_id).first()</span></span><br><span class="line">        <span class="comment"># 这个对象并不完整,可适当减少数据库压力</span></span><br><span class="line">        user = models.User(<span class="built_in">id</span>=user_id, username=payload.get(<span class="string">&#x27;username&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> user, token</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 基于drf_jwt的Authentication认证</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JsonWebTokenAuthentication</span>(<span class="title class_ inherited__">BaseJSONWebTokenAuthentication</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request</span>):</span><br><span class="line">        jwt_value = get_authorization_header(request)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> jwt_value:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;Authorization字段是必须携带的.&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt_decode_handler(jwt_value)</span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignature:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;签名已经过期&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;非法用户&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="built_in">str</span>(e))</span><br><span class="line">        user = self.authenticate_credentials(payload)</span><br><span class="line">        <span class="keyword">return</span> user, jwt_value   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局使用</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;api.auth_token.JsonWebTokenAuthentication&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#局部使用</span></span><br><span class="line">authentication_classes = [JsonWebTokenAuthentication]    </span><br></pre></td></tr></table></figure><h2 id="手动签发token（多方式登录）"><a href="#手动签发token（多方式登录）" class="headerlink" title="手动签发token（多方式登录）"></a>手动签发token（多方式登录）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现用户名，手机号，邮箱，都可以登录</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.serializers <span class="keyword">import</span> jwt_encode_handler, jwt_payload_handler</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py 基于ViewSet的登录视图,多方式登录，逻辑写在序列化类中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">ViewSet</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 使用序列化对象的is_valid()进行校验后返回</span></span><br><span class="line">        login_serializer = LoginModelSerializer(data=request.data)</span><br><span class="line">        login_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 获取校验后生成的token</span></span><br><span class="line">        username = login_serializer.context.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        token = login_serializer.context.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;登陆成功&#x27;</span>, <span class="string">&#x27;token&#x27;</span>: token&#125;,status=status.HTTP_200_OK)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># ser.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 此处需要重写username字段因为数据库里有一个唯一的username字段,post方法以为你是新增自己的校验没有过.</span></span><br><span class="line">    username = serializers.CharField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.User</span><br><span class="line">        <span class="comment"># 此处也可使用name防止数据库冲突</span></span><br><span class="line">        fields = [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        username = attrs.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = attrs.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断手机号，邮箱，用户名,此处也可以使用Q查询写或语句</span></span><br><span class="line">        <span class="comment"># user = models.User.objects.filter(Q(username=username) | Q(mobile=username) | Q(email=username)).first()</span></span><br><span class="line">        <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">&#x27;^1[3-9][0-9]&#123;9&#125;$&#x27;</span>, username):</span><br><span class="line">            user = models.User.objects.<span class="built_in">filter</span>(mobile=username).first()</span><br><span class="line">        <span class="keyword">elif</span> re.<span class="keyword">match</span>(<span class="string">&#x27;.*@.*com$&#x27;</span>, username):</span><br><span class="line">            user = models.User.objects.<span class="built_in">filter</span>(email=username).first()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user = models.User.objects.<span class="built_in">filter</span>(username=username).first()</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="comment"># 在此处签发token</span></span><br><span class="line">                payload = jwt_payload_handler(user)</span><br><span class="line">                token = jwt_encode_handler(payload)</span><br><span class="line">                self.context[<span class="string">&#x27;username&#x27;</span>] = user.username</span><br><span class="line">                self.context[<span class="string">&#x27;token&#x27;</span>] = token</span><br><span class="line">                <span class="keyword">return</span> attrs</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;密码错误&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;用户名不存在&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="jwt的配置参数"><a href="#jwt的配置参数" class="headerlink" title="jwt的配置参数"></a>jwt的配置参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">配置过期时间、返回自定义数据格式</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">JWT_AUTH=&#123;</span><br><span class="line">    <span class="string">&#x27;JWT_RESPONSE_PAYLOAD_HANDLER&#x27;</span>:<span class="string">&#x27;api.jwt_response_utils.jwt_response_payload_handler&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">7</span>), <span class="comment"># 过期时间，手动配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis操作</title>
      <link href="/2022/08/24/redis%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/08/24/redis%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push&#x2F;pop、add&#x2F;remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">特点：可以持久化；单线程，单进程；后续版本出了多线程；</span><br><span class="line"></span><br><span class="line">1. 使用Redis有哪些好处？</span><br><span class="line"></span><br><span class="line">(1) 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)</span><br><span class="line"></span><br><span class="line">(2) 支持丰富数据类型，支持string，list，set，sorted set，hash</span><br><span class="line"></span><br><span class="line">(3) 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</span><br><span class="line"></span><br><span class="line">(4) 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. redis相比memcached有哪些优势？</span><br><span class="line"></span><br><span class="line">(1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</span><br><span class="line"></span><br><span class="line">(2) redis的速度比memcached快很多</span><br><span class="line"></span><br><span class="line">(3) redis可以持久化其数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. redis常见性能问题和解决方案：</span><br><span class="line"></span><br><span class="line">(1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件</span><br><span class="line"></span><br><span class="line">(2) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次</span><br><span class="line"></span><br><span class="line">(3) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内</span><br><span class="line"></span><br><span class="line">(4) 尽量避免在压力很大的主库上增加从库</span><br><span class="line"></span><br><span class="line">(5) 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3...</span><br><span class="line"></span><br><span class="line">这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</span><br><span class="line"></span><br><span class="line"> 相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6种数据淘汰策略：</span><br><span class="line"></span><br><span class="line">voltile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</span><br><span class="line"></span><br><span class="line">volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</span><br><span class="line"></span><br><span class="line">volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</span><br><span class="line"></span><br><span class="line">allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</span><br><span class="line"></span><br><span class="line">allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</span><br><span class="line"></span><br><span class="line">no-enviction（驱逐）：禁止驱逐数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5. Memcache与Redis的区别都有哪些？</span><br><span class="line"></span><br><span class="line">1)、存储方式</span><br><span class="line"></span><br><span class="line">Memecache把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。</span><br><span class="line"></span><br><span class="line">Redis有部份存在硬盘上，这样能保证数据的持久性。</span><br><span class="line"></span><br><span class="line">2)、数据支持类型</span><br><span class="line"></span><br><span class="line">Memcache对数据类型支持相对简单。</span><br><span class="line"></span><br><span class="line">Redis有复杂的数据类型。</span><br><span class="line"></span><br><span class="line">3），value大小</span><br><span class="line"></span><br><span class="line">redis最大可以达到1GB，而memcache只有1MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6. Redis 常见的性能问题都有哪些？如何解决？</span><br><span class="line"> </span><br><span class="line">1).Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。</span><br><span class="line"></span><br><span class="line">2).Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">3).Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。</span><br><span class="line"></span><br><span class="line">4). Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7, redis 最适合的场景</span><br><span class="line"></span><br><span class="line">Redis最适合所有数据in-momory的场景，虽然Redis也提供持久化功能，但实际更多的是一个disk-backed的功能，跟传统意义上的持久化有比较大的差别，那么可能大家就会有疑问，似乎Redis更像一个加强版的Memcached，那么何时使用Memcached,何时使用Redis呢?</span><br><span class="line"></span><br><span class="line">       如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：</span><br><span class="line"></span><br><span class="line">     1 、Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</span><br><span class="line">     2 、Redis支持数据的备份，即master-slave模式的数据备份。</span><br><span class="line">     3 、Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</span><br><span class="line"></span><br><span class="line">（1）、会话缓存（Session Cache）</span><br><span class="line"></span><br><span class="line">最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？</span><br><span class="line"></span><br><span class="line">幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。</span><br><span class="line"></span><br><span class="line">（2）、全页缓存（FPC）</span><br><span class="line"></span><br><span class="line">除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。</span><br><span class="line"></span><br><span class="line">再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。</span><br><span class="line"></span><br><span class="line">此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</span><br><span class="line"></span><br><span class="line">（3）、队列</span><br><span class="line"></span><br><span class="line">Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。</span><br><span class="line"></span><br><span class="line">如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。</span><br><span class="line"></span><br><span class="line">（4），排行榜/计数器</span><br><span class="line"></span><br><span class="line">Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：</span><br><span class="line"></span><br><span class="line">当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：</span><br><span class="line"></span><br><span class="line">ZRANGE user_scores 0 10 WITHSCORES</span><br><span class="line"></span><br><span class="line">Agora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。</span><br><span class="line"></span><br><span class="line">（5）发布/订阅</span><br><span class="line"></span><br><span class="line">最后（但肯定不是最不重要的）是Redis的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！（不，这是真的，你可以去核实）。</span><br><span class="line"></span><br><span class="line">Redis提供的所有特性中，我感觉这个是喜欢的人最少的一个，虽然它为用户提供如果此多功能。</span><br></pre></td></tr></table></figure><p><strong>支持的数据类型（5大数据类型）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String：缓存、限流、计时器、分布式锁、分布式Session</span><br><span class="line">Hash：存储用户信息、用户页面访问量、组合查询</span><br><span class="line"><span class="type">List</span>：微博关注人时间列表、简单队列</span><br><span class="line"><span class="type">Set</span>：赞、踩、标签、好友关系</span><br><span class="line">Zset：排行榜</span><br><span class="line">redis=&#123;</span><br><span class="line">        k1:<span class="string">&#x27;123&#x27;</span>,      字符串</span><br><span class="line">        k2:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],   列表/数组</span><br><span class="line">        k3:&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;     集合</span><br><span class="line">        k4:&#123;name:jason,age:<span class="number">18</span>&#125;  字典/哈希表</span><br><span class="line">        k5:&#123;(<span class="string">&#x27;jason&#x27;</span>,<span class="number">18</span>),(<span class="string">&#x27;egon&#x27;</span>,<span class="number">33</span>)&#125;  有序集合</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="redis的安装和使用"><a href="#redis的安装和使用" class="headerlink" title="redis的安装和使用"></a>redis的安装和使用</h2><p><strong>linux下安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.0.6.tar.gz</span><br><span class="line">tar xzf redis-3.0.6.tar.gz</span><br><span class="line">cd redis-3.0.6</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>启动服务端</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src/redis-server</span><br></pre></td></tr></table></figure><p><strong>启动客户端</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src/redis-cli</span><br><span class="line">redis&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br></pre></td></tr></table></figure><p><strong>Windows下安装</strong></p><p>傻瓜式安装记得添加环境变量</p><h2 id="Python操作Redis之安装"><a href="#Python操作Redis之安装" class="headerlink" title="Python操作Redis之安装"></a>Python操作Redis之安装</h2><p><strong>安装redis模块</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install redis</span><br></pre></td></tr></table></figure><h2 id="Python操作Redis之普通连接"><a href="#Python操作Redis之普通连接" class="headerlink" title="Python操作Redis之普通连接"></a>Python操作Redis之普通连接</h2><p>redis-py提供两个类Redis和StrictRedis用于实现Redis的命令，StrictRedis用于实现大部分官方的命令，并使用官方的语法和命令，Redis是StrictRedis的子类，用于向后兼容旧版本的redis-py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line"></span><br><span class="line">r = redis.Redis(host=&#x27;127.0.0.1&#x27;, port=6379)</span><br><span class="line">r.set(&#x27;foo&#x27;, &#x27;Bar&#x27;)</span><br><span class="line">print(r.get(&#x27;foo&#x27;))</span><br></pre></td></tr></table></figure><h2 id="Python操作Redis之连接池"><a href="#Python操作Redis之连接池" class="headerlink" title="Python操作Redis之连接池"></a>Python操作Redis之连接池</h2><p>redis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=&#x27;127.0.0.1&#x27;, port=6379)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.set(&#x27;foo&#x27;, &#x27;Bar&#x27;)</span><br><span class="line">print(r.get(&#x27;foo&#x27;))</span><br></pre></td></tr></table></figure><h2 id="操作之String操作"><a href="#操作之String操作" class="headerlink" title="操作之String操作"></a>操作之String操作</h2><p>String操作，redis中的String在在内存中按照一个name对应一个value来存储。如图：</p><p><img src="/2022/08/24/redis%E6%93%8D%E4%BD%9C/string.png" alt="string"></p><p><strong>set(name, value, ex&#x3D;None, px&#x3D;None, nx&#x3D;False, xx&#x3D;False)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在Redis中设置值，默认，不存在则创建，存在则修改</span><br><span class="line">参数：</span><br><span class="line">     ex，过期时间（秒）</span><br><span class="line">     px，过期时间（毫秒）</span><br><span class="line">     nx，如果设置为True，则只有name不存在时，当前set操作才执行,值存在，就修改不了，执行没效果</span><br><span class="line">     xx，如果设置为True，则只有name存在时，当前set操作才执行，值存在才能修改，值不存在，不会设置新值</span><br></pre></td></tr></table></figure><p><strong>setnx(name, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置值，只有name不存在时，执行设置操作（添加）,如果存在，不会修改</span><br></pre></td></tr></table></figure><p><strong>setex(name, value, time)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置值</span><br><span class="line"># 参数：</span><br><span class="line">    # time，过期时间（数字秒 或 timedelta对象）</span><br></pre></td></tr></table></figure><p><strong>psetex(name, time_ms, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置值</span><br><span class="line"># 参数：</span><br><span class="line">    # time_ms，过期时间（数字毫秒 或 timedelta对象</span><br></pre></td></tr></table></figure><p>*<em>mset(*args, *<em>kwargs)</em></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">批量设置值</span><br><span class="line">如：</span><br><span class="line">    mset(k1=&#x27;v1&#x27;, k2=&#x27;v2&#x27;)</span><br><span class="line">    或</span><br><span class="line">    mget(&#123;&#x27;k1&#x27;: &#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;&#125;)</span><br></pre></td></tr></table></figure><p><strong>get(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取值</span><br></pre></td></tr></table></figure><p><strong>mget(keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">批量获取</span><br><span class="line">如：</span><br><span class="line">    mget(&#x27;k1&#x27;, &#x27;k2&#x27;)</span><br><span class="line">    或</span><br><span class="line">    r.mget([&#x27;k3&#x27;, &#x27;k4&#x27;])</span><br></pre></td></tr></table></figure><p><strong>getset(name, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置新值并获取原来的值</span><br></pre></td></tr></table></figure><p><strong>getrange(key, start, end)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 获取子序列（根据字节获取，非字符）</span><br><span class="line"># 参数：</span><br><span class="line">    # name，Redis 的 name</span><br><span class="line">    # start，起始位置（字节）</span><br><span class="line">    # end，结束位置（字节）</span><br><span class="line"># 如： &quot;刘三刀&quot; ，0-3表示 &quot;刘&quot;</span><br></pre></td></tr></table></figure><p><strong>setrange(name, offset, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）</span><br><span class="line"># 参数：</span><br><span class="line">    # offset，字符串的索引，字节（一个汉字三个字节）</span><br><span class="line">    # value，要设置的值</span><br></pre></td></tr></table></figure><p><strong>setbit(name, offset, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 对name对应值的二进制表示的位进行操作</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # offset，位的索引（将值变换成二进制后再进行索引）</span><br><span class="line">    # value，值只能是 1 或 0</span><br><span class="line"> </span><br><span class="line"># 注：如果在Redis中有一个对应： n1 = &quot;foo&quot;，</span><br><span class="line">        那么字符串foo的二进制表示为：01100110 01101111 01101111</span><br><span class="line">    所以，如果执行 setbit(&#x27;n1&#x27;, 7, 1)，则就会将第7位设置为1，</span><br><span class="line">        那么最终二进制则变成 01100111 01101111 01101111，即：&quot;goo&quot;</span><br></pre></td></tr></table></figure><p><strong>getbit(name, offset)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的值的二进制表示中的某位的值 （0或1）</span><br></pre></td></tr></table></figure><p><strong>bitcount(key, start&#x3D;None, end&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的值的二进制表示中 1 的个数</span><br><span class="line"># 参数：</span><br><span class="line">    # key，Redis的name</span><br><span class="line">    # start，位起始位置</span><br><span class="line">    # end，位结束位置</span><br></pre></td></tr></table></figure><p><strong>bitop(operation, dest, *keys)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）</span><br><span class="line">    # dest, 新的Redis的name</span><br><span class="line">    # *keys,要查找的Redis的name</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    bitop(&quot;AND&quot;, &#x27;new_name&#x27;, &#x27;n1&#x27;, &#x27;n2&#x27;, &#x27;n3&#x27;)</span><br><span class="line">    # 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>strlen(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 返回name对应值的字节长度（一个汉字3个字节）</span><br></pre></td></tr></table></figure><p><strong>incr(self, name, amount&#x3D;1)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name,Redis的name</span><br><span class="line">    # amount,自增数（必须是整数）</span><br><span class="line"> </span><br><span class="line"># 注：同incrby</span><br></pre></td></tr></table></figure><p><strong>incrbyfloat(self, name, amount&#x3D;1.0)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name,Redis的name</span><br><span class="line">    # amount,自增数（浮点型）</span><br></pre></td></tr></table></figure><p><strong>decr(self, name, amount&#x3D;1)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name,Redis的name</span><br><span class="line">    # amount,自减数（整数）</span><br></pre></td></tr></table></figure><p><strong>append(key, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在redis name对应的值后面追加内容</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    key, redis的name</span><br><span class="line">    value, 要追加的字符串</span><br></pre></td></tr></table></figure><h2 id="操作之Hash操作"><a href="#操作之Hash操作" class="headerlink" title="操作之Hash操作"></a>操作之Hash操作</h2><p>Hash操作，redis中Hash在内存中的存储格式如下图：</p><p><img src="/2022/08/24/redis%E6%93%8D%E4%BD%9C/hash.png" alt="hash"></p><p><strong>hset(name, key, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># name对应的hash中设置一个键值对（不存在，则创建；否则，修改）</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # key，name对应的hash中的key</span><br><span class="line">    # value，name对应的hash中的value</span><br><span class="line"> </span><br><span class="line"># 注：</span><br><span class="line">    # hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）</span><br></pre></td></tr></table></figure><p><strong>hmset(name, mapping)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的hash中批量设置键值对</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # mapping，字典，如：&#123;&#x27;k1&#x27;:&#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;&#125;</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    # r.hmset(&#x27;xx&#x27;, &#123;&#x27;k1&#x27;:&#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;&#125;)</span><br></pre></td></tr></table></figure><p><strong>hget(name,key)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的hash中获取根据key获取value</span><br></pre></td></tr></table></figure><p><strong>hmget(name, keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的hash中获取多个key的值</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，reids对应的name</span><br><span class="line">    # keys，要获取key集合，如：[&#x27;k1&#x27;, &#x27;k2&#x27;, &#x27;k3&#x27;]</span><br><span class="line">    # *args，要获取的key，如：k1,k2,k3</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    # r.mget(&#x27;xx&#x27;, [&#x27;k1&#x27;, &#x27;k2&#x27;])</span><br><span class="line">    # 或</span><br><span class="line">    # print r.hmget(&#x27;xx&#x27;, &#x27;k1&#x27;, &#x27;k2&#x27;)</span><br></pre></td></tr></table></figure><p><strong>hgetall(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应hash的所有键值</span><br><span class="line">print(re.hgetall(&#x27;xxx&#x27;).get(b&#x27;name&#x27;))</span><br></pre></td></tr></table></figure><p><strong>hlen(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的hash中键值对的个数</span><br></pre></td></tr></table></figure><p><strong>hkeys(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的hash中所有的key的值</span><br></pre></td></tr></table></figure><p><strong>hvals(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的hash中所有的value的值</span><br></pre></td></tr></table></figure><p><strong>hexists(name, key)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 检查name对应的hash是否存在当前传入的key</span><br></pre></td></tr></table></figure><p><strong>hdel(name,*keys)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 将name对应的hash中指定key的键值对删除</span><br><span class="line">print(re.hdel(&#x27;xxx&#x27;,&#x27;sex&#x27;,&#x27;name&#x27;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>hincrby(name, key, amount&#x3D;1)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis中的name</span><br><span class="line">    # key， hash对应的key</span><br><span class="line">    # amount，自增数（整数）</span><br></pre></td></tr></table></figure><p><strong>hincrbyfloat(name, key, amount&#x3D;1.0)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis中的name</span><br><span class="line">    # key， hash对应的key</span><br><span class="line">    # amount，自增数（浮点数）</span><br><span class="line"> </span><br><span class="line"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span><br></pre></td></tr></table></figure><p><strong>hscan(name, cursor&#x3D;0, match&#x3D;None, count&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # cursor，游标（基于游标分批取获取数据）</span><br><span class="line">    # match，匹配指定key，默认None 表示所有的key</span><br><span class="line">    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    # 第一次：cursor1, data1 = r.hscan(&#x27;xx&#x27;, cursor=0, match=None, count=None)</span><br><span class="line">    # 第二次：cursor2, data1 = r.hscan(&#x27;xx&#x27;, cursor=cursor1, match=None, count=None)</span><br><span class="line">    # ...</span><br><span class="line">    # 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕</span><br></pre></td></tr></table></figure><p><strong>hscan_iter(name, match&#x3D;None, count&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 利用yield封装hscan创建生成器，实现分批去redis中获取数据</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # match，匹配指定key，默认None 表示所有的key</span><br><span class="line">    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    # for item in r.hscan_iter(&#x27;xx&#x27;):</span><br><span class="line">    #     print item</span><br></pre></td></tr></table></figure><h2 id="操作之List操作"><a href="#操作之List操作" class="headerlink" title="操作之List操作"></a>操作之List操作</h2><p>List操作，redis中的List在在内存中按照一个name对应一个List来存储。如图：</p><p><img src="/2022/08/24/redis%E6%93%8D%E4%BD%9C/list.png" alt="list"></p><p><strong>lpush(name,values)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的list中添加元素，每个新的元素都添加到列表的最左边</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    # r.lpush(&#x27;oo&#x27;, 11,22,33)</span><br><span class="line">    # 保存顺序为: 33,22,11</span><br><span class="line"> </span><br><span class="line"># 扩展：</span><br><span class="line">    # rpush(name, values) 表示从右向左操作</span><br></pre></td></tr></table></figure><p><strong>lpushx(name,value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # rpushx(name, value) 表示从右向左操作</span><br></pre></td></tr></table></figure><p><strong>llen(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># name对应的list元素的个数</span><br></pre></td></tr></table></figure><p><strong>linsert(name, where, refvalue, value))</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的列表的某一个值前或后插入一个新值</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # where，BEFORE或AFTER(小写也可以)</span><br><span class="line">    # refvalue，标杆值，即：在它前后插入数据（如果存在多个标杆值，以找到的第一个为准）</span><br><span class="line">    # value，要插入的数据</span><br></pre></td></tr></table></figure><p><strong>lset(name, index, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 对name对应的list中的某一个索引位置重新赋值</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # index，list的索引位置</span><br><span class="line">    # value，要设置的值</span><br></pre></td></tr></table></figure><p><strong>lrem(name, count, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的list中删除指定的值</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # value，要删除的值</span><br><span class="line">    # count，  count=0，删除列表中所有的指定值；</span><br><span class="line">           # count=2,从前到后，删除2个；</span><br><span class="line">           # count=-2,从后向前，删除2个</span><br></pre></td></tr></table></figure><p><strong>lpop(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # rpop(name) 表示从右向左操作</span><br></pre></td></tr></table></figure><p><strong>lindex(name, index)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在name对应的列表中根据索引获取列表元素</span><br></pre></td></tr></table></figure><p><strong>lrange(name, start, end)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的列表分片获取数据</span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # start，索引的起始位置</span><br><span class="line">    # end，索引结束位置  print(re.lrange(&#x27;aa&#x27;,0,re.llen(&#x27;aa&#x27;)))</span><br></pre></td></tr></table></figure><p><strong>ltrim(name, start, end)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的列表中移除没有在start-end索引之间的值</span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # start，索引的起始位置</span><br><span class="line">    # end，索引结束位置（大于列表长度，则代表不移除任何）</span><br></pre></td></tr></table></figure><p><strong>rpoplpush(src, dst)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边</span><br><span class="line"># 参数：</span><br><span class="line">    # src，要取数据的列表的name</span><br><span class="line">    # dst，要添加数据的列表的name</span><br></pre></td></tr></table></figure><p><strong>blpop(keys, timeout)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 将多个列表排列，按照从左到右去pop对应列表的元素</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # keys，redis的name的集合</span><br><span class="line">    # timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # r.brpop(keys, timeout)，从右向左获取数据</span><br><span class="line">爬虫实现简单分布式：多个url放到列表里，往里不停放URL，程序循环取值，但是只能一台机器运行取值，可以把url放到redis中，多台机器从redis中取值，爬取数据，实现简单分布式</span><br></pre></td></tr></table></figure><p><strong>brpoplpush(src, dst, timeout&#x3D;0)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # src，取出并要移除元素的列表对应的name</span><br><span class="line">    # dst，要插入元素的列表对应的name</span><br><span class="line">    # timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞</span><br></pre></td></tr></table></figure><p><strong>自定义增量迭代</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：</span><br><span class="line">    # 1、获取name对应的所有列表</span><br><span class="line">    # 2、循环列表</span><br><span class="line"># 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：</span><br><span class="line">import redis</span><br><span class="line">conn=redis.Redis(host=&#x27;127.0.0.1&#x27;,port=6379)</span><br><span class="line"># conn.lpush(&#x27;test&#x27;,*[1,2,3,4,45,5,6,7,7,8,43,5,6,768,89,9,65,4,23,54,6757,8,68])</span><br><span class="line"># conn.flushall()</span><br><span class="line">def scan_list(name,count=2):</span><br><span class="line">    index=0</span><br><span class="line">    while True:</span><br><span class="line">        data_list=conn.lrange(name,index,count+index-1)</span><br><span class="line">        if not data_list:</span><br><span class="line">            return</span><br><span class="line">        index+=count</span><br><span class="line">        for item in data_list:</span><br><span class="line">            yield item</span><br><span class="line">print(conn.lrange(&#x27;test&#x27;,0,100))</span><br><span class="line">for item in scan_list(&#x27;test&#x27;,5):</span><br><span class="line">    print(&#x27;---&#x27;)</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h2 id="操作之Set操作"><a href="#操作之Set操作" class="headerlink" title="操作之Set操作"></a>操作之Set操作</h2><p>Set操作，Set集合就是不允许重复的列表</p><p> <strong>sadd(name,values)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># name对应的集合中添加元素</span><br></pre></td></tr></table></figure><p><strong>scard(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取name对应的集合中元素个数</span><br></pre></td></tr></table></figure><p><strong>sdiff(keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在第一个name对应的集合中且不在其他name对应的集合的元素集合</span><br></pre></td></tr></table></figure><p><strong>sdiffstore(dest, keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中</span><br></pre></td></tr></table></figure><p><strong>sinter(keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取多一个name对应集合的并集</span><br></pre></td></tr></table></figure><p><strong>sinterstore(dest, keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取多一个name对应集合的并集，再讲其加入到dest对应的集合中</span><br></pre></td></tr></table></figure><p><strong>sismember(name, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 检查value是否是name对应的集合的成员</span><br></pre></td></tr></table></figure><p><strong>smembers(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的集合的所有成员</span><br></pre></td></tr></table></figure><p><strong>smove(src, dst, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 将某个成员从一个集合中移动到另外一个集合</span><br></pre></td></tr></table></figure><p><strong>spop(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 从集合的右侧（尾部）移除一个成员，并将其返回</span><br></pre></td></tr></table></figure><p><strong>srandmember(name, numbers)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 从name对应的集合中随机获取 numbers 个元素</span><br></pre></td></tr></table></figure><p><strong>srem(name, values)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的集合中删除某些值</span><br></pre></td></tr></table></figure><p><strong>srem(name, values)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的集合中删除某些值</span><br></pre></td></tr></table></figure><p><strong>sunion(keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取多一个name对应的集合的并集</span><br></pre></td></tr></table></figure><p><strong>sunionstore(dest,keys, *args)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中</span><br></pre></td></tr></table></figure><p><strong>sscan(name, cursor&#x3D;0, match&#x3D;None, count&#x3D;None)</strong><br><strong>sscan_iter(name, match&#x3D;None, count&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大</span><br></pre></td></tr></table></figure><p><strong>有序集合，在集合的基础上，为每元素排序；元素的排序需要根据另外一个值来进行比较，所以，对于有序集合，每一个元素有两个值，即：值和分数，分数专门用来做排序。</strong></p><p> *<em>zadd(name, *args, *<em>kwargs)</em></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在name对应的有序集合中添加元素</span><br><span class="line"># 如：</span><br><span class="line">     # zadd(&#x27;zz&#x27;, &#x27;n1&#x27;, 1, &#x27;n2&#x27;, 2)</span><br><span class="line">     # 或</span><br><span class="line">     # zadd(&#x27;zz&#x27;, n1=11, n2=22)</span><br></pre></td></tr></table></figure><p><strong>zcard(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的有序集合元素的数量</span><br></pre></td></tr></table></figure><p><strong>zcount(name, min, max)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应的有序集合中分数 在 [min,max] 之间的个数</span><br></pre></td></tr></table></figure><p><strong>zincrby(name, value, amount)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 自增name对应的有序集合的 name 对应的分数</span><br></pre></td></tr></table></figure><p><strong>r.zrange( name, start, end, desc&#x3D;False, withscores&#x3D;False, score_cast_func&#x3D;float)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 按照索引范围获取name对应的有序集合的元素</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # start，有序集合索引起始位置（非分数）</span><br><span class="line">    # end，有序集合索引结束位置（非分数）</span><br><span class="line">    # desc，排序规则，默认按照分数从小到大排序</span><br><span class="line">    # withscores，是否获取元素的分数，默认只获取元素的值</span><br><span class="line">    # score_cast_func，对分数进行数据转换的函数</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # 从大到小排序</span><br><span class="line">    # zrevrange(name, start, end, withscores=False, score_cast_func=float)</span><br><span class="line"> </span><br><span class="line">    # 按照分数范围获取name对应的有序集合的元素</span><br><span class="line">    # zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)</span><br><span class="line">    # 从大到小排序</span><br><span class="line">    # zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)</span><br></pre></td></tr></table></figure><p><strong>zrank(name, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取某个值在 name对应的有序集合中的排行（从 0 开始）</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # zrevrank(name, value)，从大到小排序</span><br></pre></td></tr></table></figure><p><strong>zrangebylex(name, min, max, start&#x3D;None, num&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的 值 （lexicographical ordering）来进行排序，而这个命令则可以返回给定的有序集合键 key 中， 元素的值介于 min 和 max 之间的成员</span><br><span class="line"># 对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。 如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大</span><br><span class="line"> </span><br><span class="line"># 参数：</span><br><span class="line">    # name，redis的name</span><br><span class="line">    # min，左区间（值）。 + 表示正无限； - 表示负无限； ( 表示开区间； [ 则表示闭区间</span><br><span class="line">    # min，右区间（值）</span><br><span class="line">    # start，对结果进行分片处理，索引位置</span><br><span class="line">    # num，对结果进行分片处理，索引后面的num个元素</span><br><span class="line"> </span><br><span class="line"># 如：</span><br><span class="line">    # ZADD myzset 0 aa 0 ba 0 ca 0 da 0 ea 0 fa 0 ga</span><br><span class="line">    # r.zrangebylex(&#x27;myzset&#x27;, &quot;-&quot;, &quot;[ca&quot;) 结果为：[&#x27;aa&#x27;, &#x27;ba&#x27;, &#x27;ca&#x27;]</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # 从大到小排序</span><br><span class="line">    # zrevrangebylex(name, max, min, start=None, num=None)</span><br></pre></td></tr></table></figure><p><strong>zrem(name, values)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除name对应的有序集合中值是values的成员</span><br><span class="line"> </span><br><span class="line"># 如：zrem(&#x27;zz&#x27;, [&#x27;s1&#x27;, &#x27;s2&#x27;])</span><br></pre></td></tr></table></figure><p><strong>zremrangebyrank(name, min, max)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 根据排行范围删除</span><br></pre></td></tr></table></figure><p><strong>zremrangebyscore(name, min, max)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 根据分数范围删除</span><br></pre></td></tr></table></figure><p><strong>zremrangebylex(name, min, max)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 根据值返回删除</span><br></pre></td></tr></table></figure><p><strong>zscore(name, value)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应有序集合中 value 对应的分数</span><br></pre></td></tr></table></figure><p><strong>zinterstore(dest, keys, aggregate&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作</span><br><span class="line"># aggregate的值为:  SUM  MIN  MAX</span><br></pre></td></tr></table></figure><p><strong>zunionstore(dest, keys, aggregate&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作</span><br><span class="line"># aggregate的值为:  SUM  MIN  MAX</span><br></pre></td></tr></table></figure><p><strong>zscan(name, cursor&#x3D;0, match&#x3D;None, count&#x3D;None, score_cast_func&#x3D;float)</strong><br><strong>zscan_iter(name, match&#x3D;None, count&#x3D;None,score_cast_func&#x3D;float)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作</span><br></pre></td></tr></table></figure><h2 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h2><p><strong>delete(*names)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 根据删除redis中的任意数据类型</span><br></pre></td></tr></table></figure><p><strong>exists(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 检测redis的name是否存在</span><br></pre></td></tr></table></figure><p><strong>keys(pattern&#x3D;’*‘)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 根据模型获取redis的name</span><br><span class="line"> </span><br><span class="line"># 更多：</span><br><span class="line">    # KEYS * 匹配数据库中所有 key 。</span><br><span class="line">    # KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。</span><br><span class="line">    # KEYS h*llo 匹配 hllo 和 heeeeello 等。</span><br><span class="line">    # KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo </span><br></pre></td></tr></table></figure><p><strong>expire(name ,time)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 为某个redis的某个name设置超时时间</span><br></pre></td></tr></table></figure><p><strong>rename(src, dst)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 对redis的name重命名为</span><br></pre></td></tr></table></figure><p><strong>move(name, db))</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 将redis的某个值移动到指定的db下</span><br></pre></td></tr></table></figure><p><strong>randomkey()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 随机获取一个redis的name（不删除）</span><br></pre></td></tr></table></figure><p><strong>type(name)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取name对应值的类型</span><br></pre></td></tr></table></figure><p><strong>scan(cursor&#x3D;0, match&#x3D;None, count&#x3D;None)</strong><br><strong>scan_iter(match&#x3D;None, count&#x3D;None)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 同字符串操作，用于增量迭代获取key</span><br></pre></td></tr></table></figure><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>redis-py默认在执行每次请求都会创建（连接池申请连接）和(断开归还连接池)一次连接操作，如果想要在一次请求中指定多个命令，则可以使用pipline实现一次请求指定多个命令，并且默认情况下一次pipline 是原子性操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line"> </span><br><span class="line">pool = redis.ConnectionPool(host=&#x27;10.211.55.4&#x27;, port=6379)</span><br><span class="line"> </span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line"> </span><br><span class="line"># pipe = r.pipeline(transaction=False)</span><br><span class="line">pipe = r.pipeline(transaction=True)</span><br><span class="line">pipe.multi()</span><br><span class="line">pipe.set(&#x27;name&#x27;, &#x27;jason&#x27;)</span><br><span class="line">pipe.set(&#x27;role&#x27;, &#x27;danger&#x27;)</span><br><span class="line"> </span><br><span class="line">pipe.execute()</span><br></pre></td></tr></table></figure><h2 id="Django中使用redis"><a href="#Django中使用redis" class="headerlink" title="Django中使用redis"></a>Django中使用redis</h2><p><strong>方式一：</strong></p><p>utils文件夹下，建立redis_pool.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line">POOL = redis.ConnectionPool(host=&#x27;127.0.0.1&#x27;, port=6379,password=&#x27;1234&#x27;,max_connections=1000)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>视图函数中使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line">from django.shortcuts import render,HttpResponse</span><br><span class="line">from utils.redis_pool import POOL</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    conn = redis.Redis(connection_pool=POOL)</span><br><span class="line">    conn.hset(&#x27;kkk&#x27;,&#x27;age&#x27;,18)</span><br><span class="line"></span><br><span class="line">    return HttpResponse(&#x27;设置成功&#x27;)</span><br><span class="line">def order(request):</span><br><span class="line">    conn = redis.Redis(connection_pool=POOL)</span><br><span class="line">    conn.hget(&#x27;kkk&#x27;,&#x27;age&#x27;)</span><br><span class="line"></span><br><span class="line">    return HttpResponse(&#x27;获取成功&#x27;)</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong></p><p>安装django-redis模块</p><p>pip3 install django-redis</p><p>setting里配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis配置</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CONNECTION_POOL_KWARGS&quot;</span>: &#123;<span class="string">&quot;max_connections&quot;</span>: <span class="number">100</span>&#125;</span><br><span class="line">            <span class="comment"># &quot;PASSWORD&quot;: &quot;123&quot;,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-使用两种方式</span><br><span class="line">    <span class="number">1</span> 使用cache</span><br><span class="line">        <span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line">        cache.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>,user,<span class="number">10</span>)设置过期时间为10s</span><br><span class="line">        cache.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>,user)不用考虑数据类型</span><br><span class="line">        <span class="number">2</span> 直接使用conn对象</span><br><span class="line">        <span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line">        conn = get_redis_connection(<span class="string">&#x27;default&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(conn.hgetall(<span class="string">&#x27;xxx&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF图书接口-分页器-自定义频率限制</title>
      <link href="/2022/08/21/DRF%E5%9B%BE%E4%B9%A6%E6%8E%A5%E5%8F%A3-%E5%88%86%E9%A1%B5%E5%99%A8-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A2%91%E7%8E%87%E9%99%90%E5%88%B6/"/>
      <url>/2022/08/21/DRF%E5%9B%BE%E4%B9%A6%E6%8E%A5%E5%8F%A3-%E5%88%86%E9%A1%B5%E5%99%A8-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A2%91%E7%8E%87%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="数据模型设计"><a href="#数据模型设计" class="headerlink" title="数据模型设计"></a>数据模型设计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseModel</span>(models.Model):</span><br><span class="line">    is_delete=models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># auto_now_add=True 只要记录创建，不需要手动插入时间，自动把当前时间插入</span></span><br><span class="line">    create_time=models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># auto_now=True,只要更新，就会把当前时间插入</span></span><br><span class="line">    last_update_time=models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 单个字段:有唯一(unique)，有索引(db_index)</span></span><br><span class="line">        <span class="comment"># 多个字段:联合索引(index_together),联合唯一(unique_together)</span></span><br><span class="line">        abstract=<span class="literal">True</span>  <span class="comment"># 抽象表，不在数据库建立出表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># verbose_name admin中显示中文</span></span><br><span class="line">    name=models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">&#x27;书名&#x27;</span>,help_text=<span class="string">&#x27;这里填书名&#x27;</span>)</span><br><span class="line">    price=models.DecimalField(max_digits=<span class="number">5</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#db_constraint=False  逻辑上的关联，实质上没有外键联系，增删不会受外键影响，而且orm查询不影响</span></span><br><span class="line">              publish=models.ForeignKey(to=<span class="string">&#x27;Publish&#x27;</span>,on_delete=models.DO_NOTHING,db_constraint=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 不能写on_delete</span></span><br><span class="line">    authors=models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>,db_constraint=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name_plural=<span class="string">&#x27;书表&#x27;</span>  <span class="comment"># admin中表名的显示</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">publish_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.publish.name</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">author_list</span>(<span class="params">self</span>):</span><br><span class="line">        author_list=self.authors.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># ll=[]</span></span><br><span class="line">        <span class="comment"># for author in author_list:</span></span><br><span class="line">        <span class="comment">#     ll.append(&#123;&#x27;name&#x27;:author.name,&#x27;sex&#x27;:author.get_sex_display()&#125;)</span></span><br><span class="line">        <span class="comment"># return ll</span></span><br><span class="line">        <span class="keyword">return</span> [ &#123;<span class="string">&#x27;name&#x27;</span>:author.name,<span class="string">&#x27;sex&#x27;</span>:author.get_sex_display()&#125;<span class="keyword">for</span> author <span class="keyword">in</span> author_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Publish</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    addr=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    sex=models.IntegerField(choices=((<span class="number">1</span>,<span class="string">&#x27;男&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;女&#x27;</span>)))</span><br><span class="line">    <span class="comment">#OneToOneField本质就是ForeignKey+unique</span></span><br><span class="line">    authordetail = models.OneToOneField(to=<span class="string">&#x27;AuthorDetail&#x27;</span>,db_constraint=<span class="literal">False</span>,</span><br><span class="line">on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorDetail</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    mobile=models.CharField(max_length=<span class="number">11</span>)</span><br></pre></td></tr></table></figure><h2 id="表断关联"><a href="#表断关联" class="headerlink" title="表断关联"></a>表断关联</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、表之间没有外键关联，但是有外键逻辑关联(有充当外键的字段)</span><br><span class="line"><span class="number">2</span>、级联关系</span><br><span class="line">      作者没了，详情也没：on_delete=models.CASCADE</span><br><span class="line">      出版社没了，书还是那个出版社出版：on_delete=models.DO_NOTHING</span><br><span class="line">      部门没了，员工没有部门(空不能)：null=<span class="literal">True</span>, on_delete=models.SET_NULL</span><br><span class="line">      部门没了，员工进入默认部门(默认值)：default=<span class="number">0</span>, on_delete=models.SET_DEFAULT</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于APIView的多增多改</span></span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.BookApiView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:pk&gt;/&#x27;</span>, views.BookApiView.as_view()),</span><br><span class="line"><span class="comment"># 基于GenericAPIView的多增多改</span></span><br><span class="line">    path(<span class="string">&#x27;books2/&#x27;</span>, views.BookGenericApiView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;books2/&lt;int:pk&gt;/&#x27;</span>, views.BookGenericApiView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="APIView视图"><a href="#APIView视图" class="headerlink" title="APIView视图"></a>APIView视图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookApiView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取单条数据</span></span><br><span class="line">        <span class="keyword">if</span> kwargs.get(<span class="string">&#x27;pk&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            book = models.Book.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=kwargs.get(<span class="string">&#x27;pk&#x27;</span>)).first()</span><br><span class="line">            books_serializer = BookModelSerializer(instance=book)</span><br><span class="line">            <span class="keyword">return</span> Response(books_serializer.data)</span><br><span class="line">        book_list = models.Book.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>)</span><br><span class="line">        book_serializer = BookModelSerializer(book_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(data=book_serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 增单条</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(request.data, <span class="built_in">dict</span>):</span><br><span class="line">            book_serializer = BookModelSerializer(data=request.data)</span><br><span class="line">            book_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(book_serializer.data)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(request.data, <span class="built_in">list</span>):</span><br><span class="line">            book_serializer = BookModelSerializer(data=request.data, many=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.save()</span><br><span class="line">            <span class="comment"># 此处没有传instance对象（Book模型对象）调用self.create()方法</span></span><br><span class="line">            <span class="comment"># 批量新增--&gt;ListSerializer--&gt;create return [self.child.create(attrs) for attrs in validated_data]</span></span><br><span class="line">            <span class="comment"># self.child为BookModelSerializer对象，最终调用的还是BookModelSerializer.create()</span></span><br><span class="line">            <span class="keyword">return</span> Response(book_serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> kwargs.get(<span class="string">&#x27;pk&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            book = models.Book.objects.<span class="built_in">filter</span>(pk=kwargs.get(<span class="string">&#x27;pk&#x27;</span>)).first()</span><br><span class="line">            book_serializer = BookModelSerializer(instance=book, data=request.data, partial=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(data=book_serializer.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 第一种方案:for循环实现,有个bug只显示修改后的最后一条数据</span></span><br><span class="line">            <span class="comment"># for item in request.data:</span></span><br><span class="line">            <span class="comment">#     print(item)</span></span><br><span class="line">            <span class="comment">#     book = models.Book.objects.filter(id=item.get(&#x27;id&#x27;)).first()</span></span><br><span class="line">            <span class="comment">#     book_serializer = BookModelSerializer(instance=book, data=item)</span></span><br><span class="line">            <span class="comment">#     book_serializer.is_valid(raise_exception=True)</span></span><br><span class="line">            <span class="comment">#     book_serializer.save()</span></span><br><span class="line">            <span class="comment"># return Response(data=book_serializer.data)</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 修改多个:前端传递数据格式[&#123;id:1,&#x27;name&#x27;:name···&#125;,&#123;id:2,&#x27;name&#x27;:name···&#125;]</span></span><br><span class="line">            <span class="comment"># 处理传入的数据对象列表[book1,book2]   数据列表[&#123;&#x27;name&#x27;:jaosn..&#125;,&#123;&#x27;name&#x27;:egon..&#125;]</span></span><br><span class="line">            book_list = []</span><br><span class="line">            modify_data = []</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> request.data:</span><br><span class="line">                pk = item.pop(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">                book = models.Book.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=pk).first()</span><br><span class="line">                book_list.append(book)</span><br><span class="line">                modify_data.append(item)</span><br><span class="line">            book_serializer = BookModelSerializer(instance=book_list, data=modify_data, many=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            book_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(book_serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 单个删除和多个删除做联合处理</span></span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        pk_list = []</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            pk_list.append(pk)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pk_list = request.data.get(<span class="string">&#x27;pk_list&#x27;</span>)</span><br><span class="line">        <span class="comment"># 受影响的行数</span></span><br><span class="line">        res = models.Book.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, pk__in=pk_list).update(is_delete=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> res:</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功&#x27;</span>, <span class="string">&#x27;info&#x27;</span>: <span class="string">f&#x27;删除了<span class="subst">&#123;res&#125;</span>条数据&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;没有要删除的数据&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多改需要重写ListSerializer的update,继承ListSerializer,重写update</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookListSerializer</span>(serializers.ListSerializer):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        <span class="comment"># 保存数据</span></span><br><span class="line">        <span class="comment"># ll=[]</span></span><br><span class="line">        <span class="comment"># for i,si_data in enumerate(validated_data):</span></span><br><span class="line">        <span class="comment">#     ret=self.child.update(instance[i],si_data)</span></span><br><span class="line">        <span class="comment">#     ll.append(ret)</span></span><br><span class="line">        <span class="comment"># return ll</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="comment"># self.child.update(对象，字典) for attrs in validated_data</span></span><br><span class="line">            self.child.update(instance[i],attrs) <span class="keyword">for</span> i,attrs <span class="keyword">in</span> <span class="built_in">enumerate</span>(validated_data)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 一种方案（只序列化可以，反序列化有问题）# 第二种方案，models中写方法</span></span><br><span class="line">    <span class="comment"># publish=serializers.CharField(source=&#x27;publish.name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        list_serializer_class=BookListSerializer</span><br><span class="line">        model=models.Book</span><br><span class="line">        <span class="comment"># fields=&#x27;__all__&#x27;</span></span><br><span class="line">        fields = (<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;authors&#x27;</span>,<span class="string">&#x27;publish&#x27;</span>,<span class="string">&#x27;publish_name&#x27;</span>,<span class="string">&#x27;author_list&#x27;</span>)</span><br><span class="line">        extra_kwargs=&#123;</span><br><span class="line">            <span class="string">&#x27;publish&#x27;</span>:&#123;<span class="string">&#x27;write_only&#x27;</span>:<span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;publish_name&#x27;</span>:&#123;<span class="string">&#x27;read_only&#x27;</span>:<span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;authors&#x27;</span>:&#123;<span class="string">&#x27;write_only&#x27;</span>:<span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;author_list&#x27;</span>:&#123;<span class="string">&#x27;read_only&#x27;</span>:<span class="literal">True</span>&#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="GenericAPIView视图"><a href="#GenericAPIView视图" class="headerlink" title="GenericAPIView视图"></a>GenericAPIView视图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookGenericApiView</span>(<span class="title class_ inherited__">GenericAPIView</span>):</span><br><span class="line">    queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            book = self.get_object()</span><br><span class="line">            books_serializer = self.get_serializer(instance=book)</span><br><span class="line">            <span class="keyword">return</span> Response(books_serializer.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            book_list = self.get_queryset()</span><br><span class="line">            books_serializer = self.get_serializer(book_list, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> Response(books_serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(request.data, <span class="built_in">dict</span>):</span><br><span class="line">            books_serializer = self.get_serializer(data=request.data)</span><br><span class="line">            books_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(data=books_serializer.data)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(request.data, <span class="built_in">list</span>):</span><br><span class="line">            books_serializer = self.get_serializer(data=request.data, many=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(data=books_serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            book = self.get_object()</span><br><span class="line">            books_serializer = self.get_serializer(instance=book, data=request.data, partial=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(data=books_serializer.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            book_list = []</span><br><span class="line">            modify_data = []</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> request.data:</span><br><span class="line">                pk = item.pop(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">                book = self.get_queryset().<span class="built_in">filter</span>(<span class="built_in">id</span>=pk).first()</span><br><span class="line">                book_list.append(book)</span><br><span class="line">                modify_data.append(item)</span><br><span class="line">            books_serializer = self.get_serializer(instance=book_list, data=modify_data, many=<span class="literal">True</span>, partial=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">            books_serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(data=books_serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        pk_list = []</span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            pk_list.append(pk)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pk_list = request.data.get(<span class="string">&#x27;pk_list&#x27;</span>)</span><br><span class="line">        res = self.get_queryset().<span class="built_in">filter</span>(id__in=pk_list, is_delete=<span class="literal">False</span>).update(is_delete=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> res:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;没有可删除的数据&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="分页器"><a href="#分页器" class="headerlink" title="分页器"></a>分页器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination, CursorPagination, LimitOffsetPagination</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserPageNumberPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    <span class="comment"># 每页的个数</span></span><br><span class="line">    page_size = <span class="number">3</span></span><br><span class="line">    <span class="comment"># 查询第几页的key值</span></span><br><span class="line">    page_query_param = <span class="string">&#x27;page&#x27;</span></span><br><span class="line">    <span class="comment"># 每一页显示的条数</span></span><br><span class="line">    max_page_size = <span class="number">4</span></span><br><span class="line">    <span class="comment"># 每一页显示的最大条数</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;size&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserLimitOffsetPagination</span>(<span class="title class_ inherited__">LimitOffsetPagination</span>):</span><br><span class="line">    <span class="comment"># 每页的个数</span></span><br><span class="line">    default_limit = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 限制个数的key</span></span><br><span class="line">    limit_query_param = <span class="string">&#x27;limit&#x27;</span></span><br><span class="line">    <span class="comment"># 从第几条开始偏移（标杆）</span></span><br><span class="line">    offset_query_param = <span class="string">&#x27;offset&#x27;</span></span><br><span class="line">    <span class="comment"># 最大偏移量</span></span><br><span class="line">    max_limit = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserCursorPagination</span>(<span class="title class_ inherited__">CursorPagination</span>):</span><br><span class="line">    <span class="comment"># 每页的个数</span></span><br><span class="line">    page_size = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 页码的key值</span></span><br><span class="line">    cursor_query_param = <span class="string">&#x27;cursor&#x27;</span></span><br><span class="line">    <span class="comment"># 排序字段</span></span><br><span class="line">    ordering = <span class="string">&#x27;-id&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页器的使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回所有图书的信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookModelSerializer</span><br><span class="line">    pagination_class = UserCursorPagination   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="IP频率限制"><a href="#IP频率限制" class="headerlink" title="IP频率限制"></a>IP频率限制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个类，继承SimpleRateThrottle，只需要重写get_cache_key; 按照返回值进行限定</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> ScopedRateThrottle,SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserThrottle</span>(<span class="title class_ inherited__">SimpleRateThrottle</span>):</span><br><span class="line">    scope=<span class="string">&#x27;user&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_cache_key</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="built_in">print</span>(request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部使用</span></span><br><span class="line">throttle_classes = [UserThrottling]    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局使用 </span></span><br><span class="line">REST_FRAMEWORK=&#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;utils.throttling.UserThrottle&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;3/m&#x27;</span>  <span class="comment"># key要跟类中的scop对应</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内置频率源码分析"><a href="#内置频率源码分析" class="headerlink" title="内置频率源码分析"></a>内置频率源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">通过APIView源码可知从allow_request()进行频率检验</span><br><span class="line"><span class="comment"># SimpleRateThrottle源码分析</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">getattr</span>(self, <span class="string">&#x27;rate&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            <span class="comment"># get_rate返回 settings中配置的scope别名对应的值</span></span><br><span class="line">            self.rate = self.get_rate()</span><br><span class="line">        <span class="comment"># parse_rate返回3, 60</span></span><br><span class="line">        self.num_requests, self.duration = self.parse_rate(self.rate)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_rate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 需要在类中定义scope类属性</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">getattr</span>(self, <span class="string">&#x27;scope&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            msg = (<span class="string">&quot;You must set either `.scope` or `.rate` for &#x27;%s&#x27; throttle&quot;</span> %</span><br><span class="line">                   self.__class__.__name__)</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.THROTTLE_RATES[self.scope]  <span class="comment"># scope：&#x27;user&#x27; =&gt; &#x27;3/min&#x27;</span></span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            msg = <span class="string">&quot;No default throttle rate set for &#x27;%s&#x27; scope&quot;</span> % self.scope</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_rate</span>(<span class="params">self, rate</span>):</span><br><span class="line">        <span class="keyword">if</span> rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        num, period = rate.split(<span class="string">&#x27;/&#x27;</span>)  <span class="comment"># rate：&#x27;3/min&#x27;</span></span><br><span class="line">        num_requests = <span class="built_in">int</span>(num)</span><br><span class="line">        <span class="comment"># 取斜杠后的第一个字母进行配对</span></span><br><span class="line">        duration = &#123;<span class="string">&#x27;s&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">3600</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">86400</span>&#125;[period[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">return</span> (num_requests, duration)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_request</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="keyword">if</span> self.rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment">#当前登录用户的ip地址; 后续项目采用拼接的key：&#x27;throttle_user_phone/ip&#x27;</span></span><br><span class="line">        self.key = self.get_cache_key(request, view)  </span><br><span class="line">        <span class="keyword">if</span> self.key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初次访问缓存为空，self.history为[]，是存放时间的列表</span></span><br><span class="line">        self.history = self.cache.get(self.key, [])</span><br><span class="line">        <span class="comment"># 获取一下当前时间，存放到 self.now</span></span><br><span class="line">        self.now = self.timer()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前访问与第一次访问时间间隔如果大于60s,第一次记录清除</span></span><br><span class="line">        <span class="keyword">while</span> self.history <span class="keyword">and</span>  self.now - self.history[-<span class="number">1</span>] &gt;= self.duration:</span><br><span class="line">            self.history.pop()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># history的长度与限制次数num_requests=3进行比较</span></span><br><span class="line">        <span class="comment"># history 长度第一次访问0，第二次访问1，第三次访问2，第四次访问3失败</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.history) &gt;= self.num_requests:</span><br><span class="line">            <span class="comment"># 直接返回False，代表频率限制了</span></span><br><span class="line">            <span class="keyword">return</span> self.throttle_failure()</span><br><span class="line">        <span class="comment"># history的长度未达到限制次数3，代表可以访问</span></span><br><span class="line">        <span class="comment"># 将当前时间插入到history列表的开头，将history列表作为数据存到缓存中，key是ip，过期时间60s</span></span><br><span class="line">        <span class="keyword">return</span> self.throttle_success()</span><br></pre></td></tr></table></figure><h2 id="自定制频率限制-仿源码"><a href="#自定制频率限制-仿源码" class="headerlink" title="自定制频率限制(仿源码)"></a>自定制频率限制(仿源码)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">-<span class="comment"># 判断是否限次：没有限次可以请求True，限次了不可以请求False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_request</span>(<span class="params">self, request, view</span>):</span><br><span class="line">-<span class="comment"># 限次后调用，显示还需等待多长时间才能再访问，返回等待的时间seconds</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IpThrottling</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    （1）取出访问者ip</span></span><br><span class="line"><span class="string">    （2）判断当前ip不在访问字典里，添加进去，并且直接返回True,表示第一次访问，在字典里，继续往下走</span></span><br><span class="line"><span class="string">    （3）循环判断当前ip的列表，有值，并且当前时间减去列表的最后一个时间大于60s，把这种数据pop掉，这样列表中只有60s以内的访问时间，</span></span><br><span class="line"><span class="string">    （4）判断，当列表小于3，说明一分钟以内访问不足三次，把当前时间插入到列表第一个位置，返回True，顺利通过</span></span><br><span class="line"><span class="string">    （5）当大于等于3，说明一分钟内访问超过三次，返回False验证失败</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    VISITOR_DIC = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.history_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_request</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        ip = request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>)</span><br><span class="line">        current_time = time.time()</span><br><span class="line">        <span class="keyword">if</span> ip <span class="keyword">not</span> <span class="keyword">in</span> self.VISITOR_DIC:</span><br><span class="line">            self.VISITOR_DIC[ip] = [current_time]</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 将当前访问者时间列表拿出来</span></span><br><span class="line">        self.history_list = self.VISITOR_DIC[ip]</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> current_time - self.history_list[-<span class="number">1</span>] &gt; <span class="number">60</span>:</span><br><span class="line">                self.history_list.pop()  <span class="comment"># 把最后一个移除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.history_list) &lt; <span class="number">3</span>:</span><br><span class="line">            self.history_list.insert(<span class="number">0</span>, current_time)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">self</span>):</span><br><span class="line">        current_time = time.time()</span><br><span class="line">        <span class="comment"># 当前时间，减去列表中最后一个时间</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span>-(current_time-self.history_list[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF-权限频率过滤排序异常处理</title>
      <link href="/2022/08/17/DRF-%E6%9D%83%E9%99%90%E9%A2%91%E7%8E%87%E8%BF%87%E6%BB%A4%E6%8E%92%E5%BA%8F%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2022/08/17/DRF-%E6%9D%83%E9%99%90%E9%A2%91%E7%8E%87%E8%BF%87%E6%BB%A4%E6%8E%92%E5%BA%8F%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="权限源码分析"><a href="#权限源码分析" class="headerlink" title="权限源码分析"></a>权限源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">权限源码:APIView--&gt;view--&gt;dispatch--&gt;self.initial()--&gt;self.check_permissions(request)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_permissions</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 遍历权限对象列表得到权限对象，进行权限验证</span></span><br><span class="line">        <span class="comment"># 返回值：有权限返回True，无权限返回False</span></span><br><span class="line">        <span class="keyword">for</span> permission <span class="keyword">in</span> self.get_permissions():</span><br><span class="line">            <span class="comment"># 权限类一定有一个has_permission权限方法，用来做权限认证的</span></span><br><span class="line">        <span class="comment"># 参数：权限对象self、请求对象request、视图类对象</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> permission.has_permission(request, self):</span><br><span class="line">                self.permission_denied(</span><br><span class="line">                    request,</span><br><span class="line">                    message=<span class="built_in">getattr</span>(permission, <span class="string">&#x27;message&#x27;</span>, <span class="literal">None</span>),</span><br><span class="line">                    code=<span class="built_in">getattr</span>(permission, <span class="string">&#x27;code&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">                )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_permissions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回权限类组成的权限对象列表</span></span><br><span class="line">        <span class="keyword">return</span> [permission() <span class="keyword">for</span> permission <span class="keyword">in</span> self.permission_classes]</span><br></pre></td></tr></table></figure><h2 id="权限的使用"><a href="#权限的使用" class="headerlink" title="权限的使用"></a>权限的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个类继承BasePermission，重写has_permission方法；权限通过，就返回True，不通过就返回False；</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserPermission</span>(<span class="title class_ inherited__">BasePermission</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_permission</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="comment"># 实现超级用户访问，普通用户限制,由于认证已经过了request已经有user对象了</span></span><br><span class="line">        user = request.user</span><br><span class="line">        <span class="comment"># 通过get_字段名_display()可以获取choices中的中文</span></span><br><span class="line">        <span class="built_in">print</span>(user.get_user_type_display())</span><br><span class="line">        <span class="keyword">if</span> user.user_type == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 局部使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    permission_classes = [app_auth.UserPermission]</span><br><span class="line"><span class="comment"># 全局使用</span></span><br><span class="line">REST_FRAMEWORK=&#123;</span><br><span class="line">    <span class="string">&quot;DEFAULT_AUTHENTICATION_CLASSES&quot;</span>:[<span class="string">&quot;app01.auth_utils.UserPermission&quot;</span>,],</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;app01.app_auth.UserPermission&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 局部禁用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    permission_classes = []</span><br></pre></td></tr></table></figure><h2 id="内置权限–了解"><a href="#内置权限–了解" class="headerlink" title="内置权限–了解"></a>内置权限–了解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 演示一下内置权限的使用：IsAdminUser，控制是否对网站后台有权限的人</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAdminUser</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    authentication_classes=[SessionAuthentication,]</span><br><span class="line">    permission_classes = [IsAdminUser]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;测试数据，超级管理员可以看&#x27;</span>)</span><br><span class="line"><span class="comment"># 正常的话，普通管理员，没有权限看（判断的是is_staff字段）</span></span><br></pre></td></tr></table></figure><h2 id="内置的频率限制-限制未登录用户"><a href="#内置的频率限制-限制未登录用户" class="headerlink" title="内置的频率限制(限制未登录用户)"></a>内置的频率限制(限制未登录用户)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局使用  限制未登录用户1分钟访问5次</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;3/m&#x27;</span>,  <span class="comment"># 从restframework中的默认设置项里找</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAdminUser</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    authentication_classes=[]</span><br><span class="line">    permission_classes = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;我是未登录用户&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    authentication_classes=[]</span><br><span class="line">    permission_classes = []</span><br><span class="line">    throttle_classes = [AnonRateThrottle]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;我是未登录用户&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="内置频率限制登录用户的访问频次"><a href="#内置频率限制登录用户的访问频次" class="headerlink" title="内置频率限制登录用户的访问频次"></a>内置频率限制登录用户的访问频次</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需求：未登录用户1分钟访问5次，登录用户一分钟访问10次</span></span><br><span class="line">全局：在setting中</span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">  <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;10/m&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;5/m&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">局部配置：在视图类中配一个就行;settings配置</span><br><span class="line">    REST_FRAMEWORK = &#123;</span><br><span class="line">        <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;10/m&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;5/m&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 安装：pip3 install django-filter</span></span><br><span class="line"><span class="comment">#2 注册，在app中注册 django-filters</span></span><br><span class="line"><span class="comment">#3 全局配，或者局部配</span></span><br><span class="line"> <span class="string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: (<span class="string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>,)</span><br><span class="line"><span class="comment">#4 视图类</span></span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    <span class="comment"># 局部配</span></span><br><span class="line">    filter_backends = [DjangoFilterBackend]</span><br><span class="line">    queryset = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    filter_fields = (<span class="string">&#x27;name&#x27;</span>,)  <span class="comment">#配置可以按照哪个字段来过滤</span></span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListAPIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> OrderingFilter</span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> Book</span><br><span class="line"><span class="keyword">from</span> app01.ser <span class="keyword">import</span> BookSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book2View</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    queryset = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    filter_backends = [OrderingFilter]</span><br><span class="line">    ordering_fields = (<span class="string">&#x27;price&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用：</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/books2/?ordering=-price</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/books2/?ordering=price</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义异常方法，替换掉全局</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">customize_exception_handler</span>(<span class="params">exc, context</span>):</span><br><span class="line">    response=exception_handler(exc, context)</span><br><span class="line">    <span class="comment"># 两种情况，一个是None，drf没有处理</span></span><br><span class="line">    <span class="comment">#response对象，django处理了，但是处理的不符合restful规范</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> response:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(exc, ZeroDivisionError):</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">777</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;除以0的错误&quot;</span> + <span class="built_in">str</span>(exc)&#125;, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">999</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="built_in">str</span>(exc)&#125;,status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">888</span>,<span class="string">&#x27;msg&#x27;</span>:response.data.get(<span class="string">&#x27;detail&#x27;</span>)&#125;,status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 全局配置setting.py</span></span><br><span class="line"><span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;app01.app_auth.customize_exception_handler&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="封装Response对象"><a href="#封装Response对象" class="headerlink" title="封装Response对象"></a>封装Response对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APIResponse</span>(<span class="title class_ inherited__">Response</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,code=<span class="number">100</span>,msg=<span class="string">&#x27;成功&#x27;</span>,data=<span class="literal">None</span>,status=<span class="literal">None</span>,headers=<span class="literal">None</span>,**kwargs</span>):</span><br><span class="line">        dic = &#123;<span class="string">&#x27;code&#x27;</span>: code, <span class="string">&#x27;msg&#x27;</span>: msg&#125;</span><br><span class="line">        <span class="keyword">if</span>  data:</span><br><span class="line">            dic = &#123;<span class="string">&#x27;code&#x27;</span>: code, <span class="string">&#x27;msg&#x27;</span>: msg,<span class="string">&#x27;data&#x27;</span>:data&#125;</span><br><span class="line">        dic.update(kwargs)</span><br><span class="line">        <span class="built_in">super</span>().__init__(data=dic, status=status,headers=headers)</span><br><span class="line">使用:<span class="keyword">return</span> APIResponse(code=<span class="string">&#x27;101&#x27;</span>,msg=<span class="string">&#x27;错误&#x27;</span>,data=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;jason&#x27;</span>&#125;,token=<span class="string">&#x27;xx&#x27;</span>,headers=&#123;&#125;) </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF-路由和认证</title>
      <link href="/2022/08/13/DRF-%E8%B7%AF%E7%94%B1%E5%92%8C%E8%AE%A4%E8%AF%81/"/>
      <url>/2022/08/13/DRF-%E8%B7%AF%E7%94%B1%E5%92%8C%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>几种路由的写法</span><br><span class="line">继承APIView和GenericAPIView</span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BookView.as_view()),</span><br><span class="line"><span class="comment"># 使用转换器</span></span><br><span class="line">path(<span class="string">&#x27;books/&lt;int:pk&gt;/&#x27;</span>, views.BookView.as_view()),</span><br><span class="line"><span class="comment"># 继承了ViewSetMixin</span></span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BookView.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;list&#x27;</span>,<span class="string">&#x27;post&#x27;</span>:<span class="string">&#x27;create&#x27;</span>&#125;))</span><br><span class="line"><span class="comment"># 继承自视图类ModelViewSet，自动生成路由</span></span><br><span class="line">    <span class="comment"># 第一步：导入routers模块</span></span><br><span class="line">    <span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line">    <span class="comment"># 第二步：有两个类,实例化得到对象</span></span><br><span class="line">    <span class="comment"># routers.DefaultRouter() 生成的路由更多</span></span><br><span class="line">    <span class="comment"># routers.SimpleRouter()</span></span><br><span class="line">    router=routers.SimpleRouter()</span><br><span class="line">    <span class="comment"># 第三步：注册</span></span><br><span class="line">    <span class="comment"># router.register(&#x27;前缀&#x27;,&#x27;继承自ModelViewSet视图类&#x27;,&#x27;别名&#x27;)</span></span><br><span class="line">    router.register(<span class="string">&#x27;books&#x27;</span>,views.BookViewSet) <span class="comment"># 不要加斜杠了</span></span><br><span class="line">    <span class="comment"># 第四步</span></span><br><span class="line">    <span class="comment"># router.urls # 自动生成的路由,加入到原路由中</span></span><br><span class="line">    <span class="comment"># urlpatterns+=router.urls</span></span><br><span class="line">-views.py</span><br><span class="line">    <span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line">    <span class="keyword">from</span> app01.models <span class="keyword">import</span> Book</span><br><span class="line">    <span class="keyword">from</span> app01.ser <span class="keyword">import</span> BookSerializer</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">BookViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset =Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookSerializer   </span><br></pre></td></tr></table></figure><h2 id="action的使用"><a href="#action的使用" class="headerlink" title="action的使用"></a>action的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">功能:给继承ViewSet的视图类中定义的函数也添加路由</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset =Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    <span class="comment"># methods第一个参数，传一个列表，列表中放请求方式，</span></span><br><span class="line">    <span class="comment"># detail：布尔类型 如果是True,路由后带有pk</span></span><br><span class="line">    <span class="comment">#^books/(?P&lt;pk&gt;[^/.]+)/get_1/$ [name=&#x27;book-get-1&#x27;]</span></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>],detail=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_1</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        book=self.get_queryset()[:<span class="number">2</span>]  <span class="comment"># 从0开始截取一条</span></span><br><span class="line">        ser=self.get_serializer(book,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 装饰器，放在被装饰的函数上方，method：请求方式，detail：是否带pk</span></span><br></pre></td></tr></table></figure><h2 id="认证的实现"><a href="#认证的实现" class="headerlink" title="认证的实现"></a>认证的实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义类，继承BaseAuthentication，重写authenticate，认证的逻辑写在里面，认证通过，返回两个值，一个值最终给了Requet对象的user，认证失败，抛异常：APIException或者AuthenticationFailed全局使用，局部使用。</span><br></pre></td></tr></table></figure><h2 id="认证的源码分析"><a href="#认证的源码分析" class="headerlink" title="认证的源码分析"></a>认证的源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">APIVIew----&gt;dispatch方法---&gt;self.initial(request, *args, **kwargs)----&gt;有认证，权限，频率--&gt;</span><br><span class="line">认证 self.perform_authentication(request)--&gt;request.user--&gt;Request类中寻找user属性或者方法--&gt;</span><br><span class="line">request = Request(request,authenticators = self.get_authenticators()···)括号内的request为django原生request --&gt;self._authenticate;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_authenticators</span>()  <span class="comment"># authentication_classes=[认证类1，认证类2]</span></span><br><span class="line"><span class="comment"># 生成认证对象的列表</span></span><br><span class="line"><span class="keyword">return</span> [auth() <span class="keyword">for</span> auth <span class="keyword">in</span> self.authentication_classes]</span><br><span class="line">核心:Request类的 _authenticate(self):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_authenticate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 遍历拿到认证对象,进行认证; self.authenticators为配置的认证类产生的认证类对象组成的 list</span></span><br><span class="line">        <span class="keyword">for</span> authenticator <span class="keyword">in</span> self.authenticators:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 认证器(对象)调用认证方法authenticate(认证类对象self, request请求对象)</span></span><br><span class="line">                <span class="comment"># 返回值：登陆的用户与认证的信息组成的 tuple</span></span><br><span class="line">                <span class="comment"># 该方法被try包裹，代表该方法会抛异常，抛异常就代表认证失败</span></span><br><span class="line">                user_auth_tuple = authenticator.authenticate(self) <span class="comment">#注意这self是request对象</span></span><br><span class="line">            <span class="keyword">except</span> exceptions.APIException:</span><br><span class="line">                self._not_authenticated()</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">if</span> user_auth_tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                self._authenticator = authenticator</span><br><span class="line">                <span class="comment"># 如何有返回值，就将 登陆用户与登陆认证分别保存到request.user、request.auth</span></span><br><span class="line">                self.user, self.auth = user_auth_tuple</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 如果返回值user_auth_tuple为空，代表认证通过，但是没有 登陆用户 与 登陆认证信息，代表游客</span></span><br><span class="line">        self._not_authenticated()</span><br></pre></td></tr></table></figure><h2 id="认证组件的使用"><a href="#认证组件的使用" class="headerlink" title="认证组件的使用"></a>认证组件的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    user_type = models.IntegerField(choices=(</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;超级用户&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;普通用户&#x27;</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;非活跃用户&#x27;</span>),</span><br><span class="line">    ))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserToken</span>(models.Model):</span><br><span class="line">    token = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    <span class="comment"># user = models.OneToOneField(to=&#x27;User&#x27;, on_delete=models.DO_NOTHING())</span></span><br><span class="line">    user = models.OneToOneField(to=<span class="string">&#x27;User&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 写一个认证类 auth_utils.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> AuthenticationFailed</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthBaseAuthentication</span>(<span class="title class_ inherited__">BaseAuthentication</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># print(request.META)</span></span><br><span class="line">        token=request.GET.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="comment"># token = request.META.get(&#x27;HTTP_TOKEN&#x27;)</span></span><br><span class="line">        <span class="keyword">if</span> token:</span><br><span class="line">            user_token = models.UserToken.objects.<span class="built_in">filter</span>(token=token).first()</span><br><span class="line">            <span class="comment"># 认证通过</span></span><br><span class="line">            <span class="keyword">if</span> user_token:</span><br><span class="line">                <span class="keyword">return</span> user_token.user, user_token.token</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;用户token校验失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;请求地址需要携带token&#x27;</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 可以有多个认证，从左到右依次执行;全局使用,在setting.py中配置</span></span><br><span class="line">REST_FRAMEWORK=&#123;</span><br><span class="line">    <span class="string">&quot;DEFAULT_AUTHENTICATION_CLASSES&quot;</span>:[<span class="string">&quot;app01.auth_utils.AuthBaseAuthentication&quot;</span>,]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 局部使用，在视图类上写</span></span><br><span class="line">authentication_classes=[AuthBaseAuthentication]</span><br><span class="line"><span class="comment"># 局部禁用</span></span><br><span class="line">authentication_classes=[]         </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF视图及扩展类</title>
      <link href="/2022/08/08/DRF%E8%A7%86%E5%9B%BE%E5%8F%8A%E6%89%A9%E5%B1%95%E7%B1%BB/"/>
      <url>/2022/08/08/DRF%E8%A7%86%E5%9B%BE%E5%8F%8A%E6%89%A9%E5%B1%95%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="视图-扩展类-视图子类"><a href="#视图-扩展类-视图子类" class="headerlink" title="视图|扩展类|视图子类"></a>视图|扩展类|视图子类</h1><h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求对象</span></span><br><span class="line"><span class="comment"># from rest_framework.request import Request</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, request, parsers=<span class="literal">None</span>, authenticators=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 negotiator=<span class="literal">None</span>, parser_context=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 二次封装request，将原生request作为drf request对象的 _request 属性</span></span><br><span class="line">        self._request = request</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>（self，item）：</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getattr</span>(self._request,item)</span><br><span class="line"><span class="comment"># 请求对象.data:前端以三种编码方式传入的数据，都可以取出来</span></span><br><span class="line"><span class="comment"># 请求对象.query_params 与Django标准的request.GET相同，只是更换了更正确的名称而已。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应对象</span></span><br><span class="line"><span class="comment">#from rest_framework.response import Response</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data=<span class="literal">None</span>, status=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 template_name=<span class="literal">None</span>, headers=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 exception=<span class="literal">False</span>, content_type=<span class="literal">None</span></span>):</span><br><span class="line"><span class="comment">#data：你要返回的数据，字典</span></span><br><span class="line"><span class="comment">#status：返回的状态码，默认是200，</span></span><br><span class="line">-<span class="keyword">from</span> rest_framework <span class="keyword">import</span> status在这个路径下，它把所有使用到的状态码都定义成了常量</span><br><span class="line"><span class="comment">#template_name 渲染的模板名字（自定制模板）</span></span><br><span class="line"><span class="comment">#headers:响应头，可以往响应头放东西，就是一个字典</span></span><br><span class="line"><span class="comment">#content_type：响应的编码格式，application/json和text/html;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器响应成浏览器的格式，postman响应成json格式</span></span><br><span class="line"><span class="comment"># drf有默认的配置文件---》先从项目的setting中找，找不到，采用默认的</span></span><br><span class="line"><span class="comment"># drf的配置信息，先从自己类中找--》项目的setting中找---》默认的找</span></span><br><span class="line">-局部使用:对某个视图类有效</span><br><span class="line">    -在视图类中写如下</span><br><span class="line">    <span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer</span><br><span class="line">    renderer_classes=[JSONRenderer,]</span><br><span class="line">    -全局使用：全局的视图类，所有请求，都有效</span><br><span class="line">    -在setting.py中加入如下</span><br><span class="line">    REST_FRAMEWORK = &#123;</span><br><span class="line">        <span class="string">&#x27;DEFAULT_RENDERER_CLASSES&#x27;</span>: (  <span class="comment"># 默认响应渲染类</span></span><br><span class="line">            <span class="string">&#x27;rest_framework.renderers.JSONRenderer&#x27;</span>,  <span class="comment"># json渲染器</span></span><br><span class="line">            <span class="string">&#x27;rest_framework.renderers.BrowsableAPIRenderer&#x27;</span>,  <span class="comment"># 浏览API渲染器</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="基于APIView的接口"><a href="#基于APIView的接口" class="headerlink" title="基于APIView的接口"></a>基于APIView的接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> Book</span><br><span class="line"><span class="keyword">from</span> app01.ser <span class="keyword">import</span> BookSerializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于APIView写的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        book_list=Book.objects.<span class="built_in">all</span>()</span><br><span class="line">        book_ser=BookSerializer(book_list,many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        book_ser = BookSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            book_ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">101</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;校验失败&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookDetailView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request,pk</span>):</span><br><span class="line">        book = Book.objects.<span class="built_in">all</span>().<span class="built_in">filter</span>(pk=pk).first()</span><br><span class="line">        book_ser = BookSerializer(book)</span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request,pk</span>):</span><br><span class="line">        book = Book.objects.<span class="built_in">all</span>().<span class="built_in">filter</span>(pk=pk).first()</span><br><span class="line">        book_ser = BookSerializer(instance=book,data=request.data)</span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            book_ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">101</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;校验失败&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        ret=Book.objects.<span class="built_in">filter</span>(pk=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功&#x27;</span>&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#models.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price=models.DecimalField(max_digits=<span class="number">5</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#ser.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model=Book</span><br><span class="line">        fields=<span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BookView.as_view()),</span><br><span class="line">re_path(<span class="string">&#x27;books/(?P&lt;pk&gt;\d+)&#x27;</span>, views.BookDetailView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="基于GenericAPIView的接口"><a href="#基于GenericAPIView的接口" class="headerlink" title="基于GenericAPIView的接口"></a>基于GenericAPIView的接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book2View</span>(<span class="title class_ inherited__">GenericAPIView</span>):</span><br><span class="line">    <span class="comment">#queryset要传queryset对象，查询了所有的图书</span></span><br><span class="line">    <span class="comment"># serializer_class使用哪个序列化类来序列化这堆数据</span></span><br><span class="line">    queryset=Book.objects</span><br><span class="line">    <span class="comment"># queryset=Book.objects.all()</span></span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        book_list=self.get_queryset()</span><br><span class="line">        book_ser=self.get_serializer(book_list,many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        book_ser = self.get_serializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            book_ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">101</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;校验失败&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book2DetailView</span>(<span class="title class_ inherited__">GenericAPIView</span>):</span><br><span class="line">    queryset = Book.objects</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request,pk</span>):</span><br><span class="line">        book = self.get_object()</span><br><span class="line">        book_ser = self.get_serializer(book)</span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request,pk</span>):</span><br><span class="line">        book = self.get_object()</span><br><span class="line">        book_ser = self.get_serializer(instance=book,data=request.data)</span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            book_ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">101</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;校验失败&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        ret=self.get_object().delete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功&#x27;</span>&#125;)</span><br><span class="line">    </span><br><span class="line"> <span class="comment">#url.py</span></span><br><span class="line">    <span class="comment"># 使用GenericAPIView重写的</span></span><br><span class="line">    path(<span class="string">&#x27;books2/&#x27;</span>, views.Book2View.as_view()),</span><br><span class="line">    re_path(<span class="string">&#x27;books2/(?P&lt;pk&gt;\d+)&#x27;</span>, views.Book2DetailView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="基于GenericAPIView和5个视图扩展类的接口"><a href="#基于GenericAPIView和5个视图扩展类的接口" class="headerlink" title="基于GenericAPIView和5个视图扩展类的接口"></a>基于GenericAPIView和5个视图扩展类的接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span>  ListModelMixin,CreateModelMixin,UpdateModelMixin,DestroyModelMixin,RetrieveModelMixin</span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book3View</span>(GenericAPIView,ListModelMixin,CreateModelMixin):</span><br><span class="line"></span><br><span class="line">    queryset=Book.objects</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.create(request)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book3DetailView</span>(GenericAPIView,RetrieveModelMixin,DestroyModelMixin,UpdateModelMixin):</span><br><span class="line">    queryset = Book.objects</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request,pk</span>):</span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request,pk)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request,pk</span>):</span><br><span class="line">        <span class="keyword">return</span> self.update(request,pk)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        <span class="keyword">return</span> self.destroy(request,pk)</span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">    <span class="comment"># 使用GenericAPIView+5 个视图扩展类  重写的</span></span><br><span class="line">    path(<span class="string">&#x27;books3/&#x27;</span>, views.Book3View.as_view()),</span><br><span class="line">    re_path(<span class="string">&#x27;books3/(?P&lt;pk&gt;\d+)&#x27;</span>, views.Book3DetailView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="使用ModelViewSet编写5个接口"><a href="#使用ModelViewSet编写5个接口" class="headerlink" title="使用ModelViewSet编写5个接口"></a>使用ModelViewSet编写5个接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py #5个接口都有，路由该怎么配呢？根据actions配置字典</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book5View</span>(<span class="title class_ inherited__">ModelViewSet</span>):  </span><br><span class="line">    queryset = Book.objects</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    </span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="comment"># 使用ModelViewSet编写5个接口</span></span><br><span class="line">    path(<span class="string">&#x27;books5/&#x27;</span>, views.Book5View.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;list&#x27;</span>,<span class="string">&#x27;post&#x27;</span>:<span class="string">&#x27;create&#x27;</span>&#125;)), <span class="comment">#当路径匹配，又是get请求，会执行Book5View的list方法</span></span><br><span class="line">    re_path(<span class="string">&#x27;books5/(?P&lt;pk&gt;\d+)&#x27;</span>, views.Book5View.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;retrieve&#x27;</span>,<span class="string">&#x27;put&#x27;</span>:<span class="string">&#x27;update&#x27;</span>,<span class="string">&#x27;delete&#x27;</span>:<span class="string">&#x27;destroy&#x27;</span>&#125;)),</span><br></pre></td></tr></table></figure><h2 id="源码分析ViewSetMixin"><a href="#源码分析ViewSetMixin" class="headerlink" title="源码分析ViewSetMixin"></a>源码分析ViewSetMixin</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重写了as_view</span></span><br><span class="line"><span class="comment"># 核心代码（所以路由中只要配置了对应关系，比如(actions=&#123;&#x27;get&#x27;:&#x27;list&#x27;&#125;）,当get请求来，就会执行list方法</span></span><br><span class="line"><span class="keyword">for</span> method, action <span class="keyword">in</span> actions.items():</span><br><span class="line">    <span class="comment">#method：get</span></span><br><span class="line">    <span class="comment"># action：list</span></span><br><span class="line">    handler = <span class="built_in">getattr</span>(self, action)</span><br><span class="line">    <span class="comment">#执行完上一句，handler就变成了list的内存地址</span></span><br><span class="line">    <span class="built_in">setattr</span>(self, method, handler)</span><br><span class="line">    <span class="comment">#执行完上一句  对象.get=list</span></span><br><span class="line">    <span class="comment">#for循环执行完毕 对象.get:对着list方法   对象.post：对着create</span></span><br></pre></td></tr></table></figure><h2 id="继承ViewSetMixin的视图类"><a href="#继承ViewSetMixin的视图类" class="headerlink" title="继承ViewSetMixin的视图类"></a>继承ViewSetMixin的视图类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ViewSetMixin</span><br><span class="line"><span class="comment">#一定要放在APIVIew前,因为APIView里面也有as_view()方法，先继承APIView后配置的actions会失效</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book6View</span>(ViewSetMixin,APIView): </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_all_book</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line">        book_list = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">        book_ser = BookSerializer(book_list, many=<span class="literal">True</span>) <span class="comment"># 查询多个记得加上many=True</span></span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">    <span class="comment">#继承ViewSetMixin的视图类，路由可以改写成这样</span></span><br><span class="line">    path(<span class="string">&#x27;books6/&#x27;</span>, views.Book6View.as_view(actions=&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;get_all_book&#x27;</span>&#125;)),</span><br></pre></td></tr></table></figure><h2 id="GenericAPIView源码分析"><a href="#GenericAPIView源码分析" class="headerlink" title="GenericAPIView源码分析"></a>GenericAPIView源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">常用类属性：queryset，serializer_class，filter_backends，pagination_class，lookup_field=<span class="string">&#x27;pk&#x27;</span></span><br><span class="line">常用方法:get_queryset();get_serializer();get_serializer_class()通过重写实现不同方法配置不同序列化类；</span><br><span class="line">get_object()获取一条数据；</span><br><span class="line">-源码分析</span><br><span class="line">    <span class="comment"># 获取所有的queryset对象</span></span><br><span class="line">    queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">    lookup_url_kwarg = self.lookup_url_kwarg <span class="keyword">or</span> self.lookup_field <span class="comment"># pk</span></span><br><span class="line">    obj = get_object_or_404(queryset, **filter_kwargs) <span class="comment"># 通过pk获取数据对象</span></span><br><span class="line">    <span class="keyword">return</span> obj  <span class="comment"># 返回数据对象    </span></span><br></pre></td></tr></table></figure><h2 id="视图合集"><a href="#视图合集" class="headerlink" title="视图合集"></a>视图合集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Django原生View  顶层视图</span><br><span class="line">  -APIView---》继承自View</span><br><span class="line">  -GenicAPIView---》APIView，做了一些扩展：</span><br><span class="line">  -<span class="number">5</span> 个视图扩展类（继承了<span class="built_in">object</span>），每个里面写了一个方法（ListModelMixin：<span class="built_in">list</span>方法）</span><br><span class="line">        ListModelMixin,</span><br><span class="line">        CreateModelMixin,</span><br><span class="line">        UpdateModelMixin,</span><br><span class="line">        DestroyModelMixin,</span><br><span class="line">        RetrieveModelMixin</span><br><span class="line"> -GenericAPIView的视图子类，<span class="number">9</span>个，继承了GenicAPIView+一个或者两个或者三个视图扩展类</span><br><span class="line">        CreateAPIView,</span><br><span class="line">        ListAPIView,</span><br><span class="line">        UpdateAPIView,</span><br><span class="line">        RetrieveAPIView,</span><br><span class="line">        DestroyAPIView,</span><br><span class="line">        ListCreateAPIView,</span><br><span class="line">        RetrieveUpdateDestroyAPIView,</span><br><span class="line">        RetrieveDestroyAPIView,</span><br><span class="line">        RetrieveUpdateAPIView</span><br><span class="line"> -视图集顶层：ViewSetMixin(重写了as_view方法),只要继承它的，路由得写成&#123;‘get’：‘自己定义的方法’&#125;</span><br><span class="line">-ViewSet = ViewSetMixin+ views.APIView ：ViewSetMixin要放在前面</span><br><span class="line">    -GenericViewSet = ViewSetMixin + GenicAPIView</span><br><span class="line">    -ModelViewSet = <span class="number">5</span>个视图扩展类 + GenericViewSet</span><br><span class="line">    <span class="comment"># 只读(获取所有和单个)</span></span><br><span class="line">    -ReadOnlyModelViewSet = ListModelMixin + RetrieveModelMixin + GenericViewSet</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF序列化器的使用</title>
      <link href="/2022/08/05/DRF%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/08/05/DRF%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="DRF序列化器之Serializer和ModelSerializer"><a href="#DRF序列化器之Serializer和ModelSerializer" class="headerlink" title="DRF序列化器之Serializer和ModelSerializer"></a>DRF序列化器之Serializer和ModelSerializer</h1><h2 id="序列化组件介绍"><a href="#序列化组件介绍" class="headerlink" title="序列化组件介绍"></a>序列化组件介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 序列化,序列化器会把模型对象转换成字典,经过response以后变成json字符串</span><br><span class="line"><span class="number">2.</span> 反序列化,把客户端发送过来的数据,经过request以后变成字典,序列化器可以把字典转成模型</span><br><span class="line"><span class="number">3.</span> 反序列化,完成数据校验功能</span><br></pre></td></tr></table></figure><h2 id="序列化器简单使用"><a href="#序列化器简单使用" class="headerlink" title="序列化器简单使用"></a>序列化器简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ser.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="comment"># id=serializers.CharField()</span></span><br><span class="line">    name=serializers.CharField()</span><br><span class="line">    <span class="comment"># price=serializers.DecimalField()</span></span><br><span class="line">    price=serializers.CharField()</span><br><span class="line">    author=serializers.CharField()  </span><br><span class="line">    publish=serializers.CharField()</span><br><span class="line">        </span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        book=Book.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=pk).first()</span><br><span class="line">        <span class="comment">#用一个类，毫无疑问，一定要实例化</span></span><br><span class="line">        <span class="comment">#要序列化谁，就把谁传过来</span></span><br><span class="line">        book_ser=BookSerializer(book)  <span class="comment"># 调用类的__init__</span></span><br><span class="line">        <span class="comment"># book_ser.data   序列化对象.data就是序列化后的字典</span></span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books/&lt;int:pk&gt;/&#x27;</span>, views.BookView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="序列化类的字段类型"><a href="#序列化类的字段类型" class="headerlink" title="序列化类的字段类型"></a>序列化类的字段类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需要记住：CharField，IntegerField，DateField,PrimaryKeyRelatedField，SerializerMethodField</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示course这个字段能与Course那张表做关联</span></span><br><span class="line">特殊： course = serializers.PrimaryKeyRelatedField(queryset=Course.objects.<span class="built_in">all</span>(), write_only=<span class="literal">True</span>, many=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="read-only和write-only"><a href="#read-only和write-only" class="headerlink" title="read_only和write_only"></a>read_only和write_only</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">read_only表明该字段仅用于序列化输出，默认<span class="literal">False</span>,如果设置成<span class="literal">True</span>，postman中可以看到该字段，修改时，不需要传该字段</span><br><span class="line">write_only表明该字段仅用于反序列化输入，默认<span class="literal">False</span>，如果设置成<span class="literal">True</span>，postman中看不到该字段，修改时，该字段需要传</span><br><span class="line">max_length:最大长度</span><br><span class="line">min_length：最小长度   </span><br><span class="line"><span class="comment"># 相关了解</span></span><br><span class="line">required表明该字段在反序列化时必须输入，默认<span class="literal">True</span></span><br><span class="line">default反序列化时使用的默认值</span><br><span class="line">allow_null表明该字段是否允许传入<span class="literal">None</span>，默认<span class="literal">False</span></span><br><span class="line">validators该字段使用的验证器</span><br><span class="line">error_messages包含错误编号与错误信息的字典</span><br></pre></td></tr></table></figure><h2 id="序列化组件修改数据"><a href="#序列化组件修改数据" class="headerlink" title="序列化组件修改数据"></a>序列化组件修改数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 写一个序列化的类，继承Serializer</span><br><span class="line"><span class="number">2</span> 在类中写要反序列化的字段，想反序列化哪个字段，就在类中写哪个字段，字段的属性（max_lenth......）</span><br><span class="line">max_length最大长度</span><br><span class="line">    min_lenght最小长度</span><br><span class="line">    allow_blank是否允许为空</span><br><span class="line">    trim_whitespace是否截断空白字符</span><br><span class="line">    max_value最小值</span><br><span class="line">    min_value最大值</span><br><span class="line"><span class="number">3</span> 在视图类中使用，导入--》实例化得到序列化类的对象，把要要修改的对象传入，修改的数据传入</span><br><span class="line">boo_ser=BookSerializer(book,request.data)</span><br><span class="line">    boo_ser=BookSerializer(instance=book,data=request.data)</span><br><span class="line"><span class="number">4</span> 数据校验 <span class="keyword">if</span> boo_ser.is_valid()</span><br><span class="line"><span class="number">5</span> 如果校验通过，就保存,此处为序列化类的对象</span><br><span class="line">boo_ser.save()  <span class="comment"># 注意不是book.save()</span></span><br><span class="line"><span class="number">6</span> 如果不通过，逻辑自己写</span><br><span class="line"></span><br><span class="line"><span class="number">7</span> 如果字段的校验规则不够，可以写钩子函数（局部和全局）</span><br><span class="line"></span><br><span class="line"><span class="number">8</span> 可以使用字段的author=serializers.CharField(validators=[check_author]) ，来校验</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span>=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price=models.DecimalField(max_digits=<span class="number">5</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">    author=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    publish=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ser.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="comment"># 需要继承 Serializer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_author</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">if</span> data.startswith(<span class="string">&#x27;sb&#x27;</span>):</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;作者名字不能以sb开头&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承Serializer需要重写create和update方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="comment"># id=serializers.CharField()</span></span><br><span class="line">    name=serializers.CharField(max_length=<span class="number">16</span>,min_length=<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># price=serializers.DecimalField()</span></span><br><span class="line">    price=serializers.CharField()</span><br><span class="line">    author=serializers.CharField(validators=[check_author])  <span class="comment"># validators=[] 列表中写函数内存地址</span></span><br><span class="line">    publish=serializers.CharField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_price</span>(<span class="params">self, data</span>):   <span class="comment"># 局部钩子,validate_字段名  接收一个参数</span></span><br><span class="line">        <span class="comment">#如果价格小于10，就校验不通过</span></span><br><span class="line">        <span class="comment"># print(type(data))</span></span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">float</span>(data)&gt;<span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#校验失败，抛异常</span></span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;价格太低&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, validate_data</span>):   <span class="comment"># 全局钩子</span></span><br><span class="line">        <span class="built_in">print</span>(validate_data)</span><br><span class="line">        author=validate_data.get(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">        publish=validate_data.get(<span class="string">&#x27;publish&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> author == publish:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;作者名字跟出版社一样&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> validate_data</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        <span class="comment">#instance是book这个对象</span></span><br><span class="line">        <span class="comment">#validated_data是校验后的数据,一定要返回.</span></span><br><span class="line">        instance.name=validated_data.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        instance.price=validated_data.get(<span class="string">&#x27;price&#x27;</span>)</span><br><span class="line">        instance.author=validated_data.get(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">        instance.publish=validated_data.get(<span class="string">&#x27;publish&#x27;</span>)</span><br><span class="line">        instance.save()  <span class="comment">#book.save()   django 的orm提供的</span></span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line"><span class="comment">#views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        book=Book.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=pk).first()</span><br><span class="line">        <span class="comment">#用一个类，毫无疑问，一定要实例化,要序列化谁，就把谁传过来</span></span><br><span class="line">        book_ser=BookSerializer(book)  <span class="comment"># 调用类的__init__</span></span><br><span class="line">        <span class="comment"># book_ser.data   序列化对象.data就是序列化后的字典</span></span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">        <span class="comment"># return JsonResponse(book_ser.data)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        response_msg=&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;成功&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># 找到这个对象</span></span><br><span class="line">        book = Book.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=pk).first()</span><br><span class="line">        <span class="comment"># 得到一个序列化类的对象</span></span><br><span class="line">        <span class="comment"># boo_ser=BookSerializer(book,request.data)</span></span><br><span class="line">        boo_ser=BookSerializer(instance=book,data=request.data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 要数据验证（回想form表单的验证）</span></span><br><span class="line">        <span class="keyword">if</span> boo_ser.is_valid():  <span class="comment"># 返回True表示验证通过</span></span><br><span class="line">            boo_ser.save()  </span><br><span class="line">            response_msg[<span class="string">&#x27;data&#x27;</span>]=boo_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response_msg[<span class="string">&#x27;status&#x27;</span>]=<span class="number">101</span></span><br><span class="line">            response_msg[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;数据校验失败&#x27;</span></span><br><span class="line">            response_msg[<span class="string">&#x27;data&#x27;</span>]=boo_ser.errors</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(response_msg)</span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books/&lt;int:pk&gt;/&#x27;</span>, views.BookView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BooksView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        response_msg = &#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;成功&#x27;</span>&#125;</span><br><span class="line">        books=Book.objects.<span class="built_in">all</span>()</span><br><span class="line">        book_ser=BookSerializer(books,many=<span class="literal">True</span>)  <span class="comment">#序列化多条,如果序列化一条，不需要写</span></span><br><span class="line">        response_msg[<span class="string">&#x27;data&#x27;</span>]=book_ser.data</span><br><span class="line">        <span class="keyword">return</span> Response(response_msg)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BooksView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BooksView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新增</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        response_msg = &#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;成功&#x27;</span>&#125;</span><br><span class="line">        <span class="comment">#修改才有instance，新增没有instance，只有data</span></span><br><span class="line">        book_ser = BookSerializer(data=request.data)</span><br><span class="line">        <span class="comment"># book_ser = BookSerializer(request.data)  # 这个按位置传request.data会给instance，就报错了</span></span><br><span class="line">        <span class="comment"># 校验字段</span></span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            book_ser.save()</span><br><span class="line">            response_msg[<span class="string">&#x27;data&#x27;</span>]=book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response_msg[<span class="string">&#x27;status&#x27;</span>]=<span class="number">102</span></span><br><span class="line">            response_msg[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;数据校验失败&#x27;</span></span><br><span class="line">            response_msg[<span class="string">&#x27;data&#x27;</span>]=book_ser.errors</span><br><span class="line">        <span class="keyword">return</span> Response(response_msg)</span><br><span class="line"><span class="comment">#ser.py 序列化类重写create方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        instance=Book.objects.create(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BooksView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="删除一个数据"><a href="#删除一个数据" class="headerlink" title="删除一个数据"></a>删除一个数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,request,pk</span>):</span><br><span class="line">        ret=Book.objects.<span class="built_in">filter</span>(pk=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;删除成功&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books/&lt;int:pk&gt;/&#x27;</span>, views.BookView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="模型类序列化器ModelSerializer"><a href="#模型类序列化器ModelSerializer" class="headerlink" title="模型类序列化器ModelSerializer"></a>模型类序列化器ModelSerializer</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model=Book  <span class="comment"># 对应上models.py中的模型</span></span><br><span class="line">        fields=<span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">        <span class="comment"># fields=(&#x27;name&#x27;,&#x27;price&#x27;,&#x27;id&#x27;,&#x27;author&#x27;) # 只序列化指定的字段</span></span><br><span class="line">        <span class="comment"># exclude=(&#x27;name&#x27;,) #跟fields不能都写，写谁，就表示排除谁</span></span><br><span class="line">        extra_kwargs = &#123; <span class="comment"># name=serializers.CharField(max_length=16,min_length=4)</span></span><br><span class="line">            <span class="string">&#x27;price&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># 其他使用一模一样；不需要重写create和updata方法了</span></span><br></pre></td></tr></table></figure><h2 id="源码分析many-x3D-True的用途"><a href="#源码分析many-x3D-True的用途" class="headerlink" title="源码分析many&#x3D;True的用途"></a>源码分析many&#x3D;True的用途</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类创建一个对象的方法：类的__new__()方法控制对象的生成；对象=类名(name=jason)，触发类的__init__()</span></span><br><span class="line"><span class="comment"># 序列化多条，需要传many=True，所产生的序列化对象是不一样的</span></span><br><span class="line">book_ser=BookModelSerializer(books,many=<span class="literal">True</span>)</span><br><span class="line">book_one_ser=BookModelSerializer(book)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(book_ser))</span><br><span class="line"><span class="comment">#&lt;class &#x27;rest_framework.serializers.ListSerializer&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(book_one_ser))</span><br><span class="line"><span class="comment">#&lt;class &#x27;app01.ser.BookModelSerializer&#x27;&gt;自定义的序列化类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">    <span class="keyword">if</span> kwargs.pop(<span class="string">&#x27;many&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">        <span class="keyword">return</span> cls.many_init(*args, **kwargs)</span><br><span class="line">    <span class="comment"># 没有传many=True,走下面，正常的对象实例化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, *args, **kwargs)</span><br><span class="line">后续如果是post方法，传了many=<span class="literal">True</span>后，判断是否传了instance对象进行判断采用create方法或者update方法</span><br></pre></td></tr></table></figure><h2 id="Serializer高级用法"><a href="#Serializer高级用法" class="headerlink" title="Serializer高级用法"></a>Serializer高级用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># source的使用:指向的是数据库对应的字段名</span></span><br><span class="line"><span class="number">1</span> 可以改字段名字  xxx=serializers.CharField(source=<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    <span class="number">2</span> 可以.跨表publish=serializers.CharField(source=<span class="string">&#x27;publish.email&#x27;</span>)</span><br><span class="line">    <span class="number">3</span> 可以执行方法 pub_date=serializers.CharField(source=<span class="string">&#x27;test&#x27;</span>) test是Book表模型中的方法</span><br><span class="line">    </span><br><span class="line"><span class="comment"># SerializerMethodField(）的使用</span></span><br><span class="line"><span class="number">1</span> 它需要有个配套方法，方法名叫get_字段名，返回值就是要显示的东西</span><br><span class="line">    authors=serializers.SerializerMethodField()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_authors</span>(<span class="params">self,instance</span>):</span><br><span class="line">        <span class="comment"># book对象 # 取出所有作者</span></span><br><span class="line">        authors=instance.authors.<span class="built_in">all</span>()  </span><br><span class="line">        ll=[]</span><br><span class="line">        <span class="keyword">for</span> author <span class="keyword">in</span> authors:</span><br><span class="line">            ll.append(&#123;<span class="string">&#x27;name&#x27;</span>:author.name,<span class="string">&#x27;age&#x27;</span>:author.age&#125;)</span><br><span class="line">        <span class="keyword">return</span> ll</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF前置及API源码分析</title>
      <link href="/2022/08/02/DRF%E5%89%8D%E7%BD%AE%E5%8F%8AAPI%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2022/08/02/DRF%E5%89%8D%E7%BD%AE%E5%8F%8AAPI%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="DRF介绍和APIView源码"><a href="#DRF介绍和APIView源码" class="headerlink" title="DRF介绍和APIView源码"></a>DRF介绍和APIView源码</h1><h2 id="web开发模式"><a href="#web开发模式" class="headerlink" title="web开发模式"></a>web开发模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前后端混合开发（前后端不分离）：返回的是html的内容，需要写模板</span></span><br><span class="line"><span class="comment">#前后端分离：只专注于写后端接口，返回json，xml格式数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># xml格式</span></span><br><span class="line">&lt;xml&gt;</span><br><span class="line">&lt;name&gt;jason&lt;/name&gt;</span><br><span class="line">&lt;/xml&gt;</span><br><span class="line"><span class="comment"># json</span></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;jason&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># java---》jsp</span></span><br><span class="line">https://www.pearvideo.com/category_loading.jsp</span><br><span class="line"><span class="comment">#php写的</span></span><br><span class="line">http://www.aa7a.cn/user.php</span><br><span class="line"><span class="comment"># python写的</span></span><br><span class="line">http://www.aa7a.cn/user.html</span><br><span class="line">    </span><br><span class="line"><span class="comment">#什么是动态页面（查数据库的），什么是静态页面（静止的html）</span></span><br></pre></td></tr></table></figure><h2 id="api接口"><a href="#api接口" class="headerlink" title="api接口"></a>api接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过网络，规定了前后台信息交互规则的url链接，也就是前后台信息交互的媒介</span></span><br><span class="line"><span class="comment">#百度地图的api接口 </span></span><br><span class="line">https://api.<span class="built_in">map</span>.baidu.com/place/v2/search?ak=6E823f587c95f0148c19993539b99295&amp;region=%E4%B8%8A%E6%B5%B7&amp;query=%E8%<span class="number">82</span>%AF%E5%BE%B7%E5%9F%BA&amp;output=xml</span><br></pre></td></tr></table></figure><h2 id="postman的使用"><a href="#postman的使用" class="headerlink" title="postman的使用"></a>postman的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># postman是目前最好用的，模拟发送http请求的工具</span></span><br><span class="line"><span class="comment"># 解析json的网站</span></span><br><span class="line">http://www.json.cn/</span><br><span class="line">    </span><br><span class="line"><span class="comment">#请求头中User-Agent：客户端的类型</span></span><br><span class="line"><span class="comment"># 请求头中加其他参数；</span></span><br><span class="line"><span class="comment"># 批量接口导出和测试</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/02/DRF%E5%89%8D%E7%BD%AE%E5%8F%8AAPI%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.png" alt="1"></p><h2 id="Restful规范"><a href="#Restful规范" class="headerlink" title="Restful规范"></a>Restful规范</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">REST全称是Representational State Transfer，中文意思是表述（编者注：通常译为表征性状态转移）。 </span><br><span class="line">RESTful是一种定义Web API接口的设计风格，尤其适用于前后端分离的应用模式中。</span><br><span class="line"></span><br><span class="line">这种风格的理念认为后端开发任务就是提供数据的，对外提供的是数据资源的访问接口，所以在定义接口时，客户端访问的URL路径就表示这种要操作的数据资源。</span><br><span class="line">事实上，我们可以使用任何一个框架都可以实现符合restful规范的API接口。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规范</span></span><br><span class="line"><span class="number">1</span>  数据的安全保障：url链接一般都采用https协议进行传输 注：采用https协议，可以提高数据交互过程中的安全性</span><br><span class="line"><span class="number">2</span> 接口特征表现，一看就知道是个api接口</span><br><span class="line">    - 用api关键字标识接口url：</span><br><span class="line">      - [https://api.baidu.com](https://api.baidu.com/)</span><br><span class="line">      - https://www.baidu.com/api</span><br><span class="line">      注：看到api字眼，就代表该请求url链接是完成前后台数据交互的</span><br><span class="line">      -例如：https://api.luffycity.com/api/v1/course/free/</span><br><span class="line"><span class="number">3</span> 多数据版本共存</span><br><span class="line">    - 在url链接中标识数据版本</span><br><span class="line">    - https://api.baidu.com/v1</span><br><span class="line">    - https://api.baidu.com/v2</span><br><span class="line">    注：url链接中的v1、v2就是不同数据版本的体现（只有在一种数据资源有多版本情况下）</span><br><span class="line"><span class="number">4</span> 数据即是资源，均使用名词（可复数）</span><br><span class="line">    - 接口一般都是完成前后台数据的交互，交互的数据我们称之为资源</span><br><span class="line">      - https://api.baidu.com/users</span><br><span class="line">      - https://api.baidu.com/books</span><br><span class="line">      - https://api.baidu.com/book</span><br><span class="line"></span><br><span class="line">      注：一般提倡用资源的复数形式，在url链接中奖励不要出现操作资源的动词，错误示范：https://api.baidu.com/delete-user</span><br><span class="line">    - 特殊的接口可以出现动词，因为这些接口一般没有一个明确的资源，或是动词就是接口的核心含义</span><br><span class="line"></span><br><span class="line">      - https://api.baidu.com/place/search</span><br><span class="line">      - https://api.baidu.com/login</span><br><span class="line"><span class="number">5</span> 资源操作由请求方式决定（method）</span><br><span class="line">    - 操作资源一般都会涉及到增删改查，我们提供请求方式来标识增删改查动作</span><br><span class="line">      - https://api.baidu.com/books - get请求：获取所有书</span><br><span class="line">      - https://api.baidu.com/books/<span class="number">1</span> - get请求：获取主键为<span class="number">1</span>的书</span><br><span class="line">      - https://api.baidu.com/books - post请求：新增一本书书</span><br><span class="line">      - https://api.baidu.com/books/<span class="number">1</span> - put请求：整体修改主键为<span class="number">1</span>的书</span><br><span class="line">      - https://api.baidu.com/books/<span class="number">1</span> - patch请求：局部修改主键为<span class="number">1</span>的书</span><br><span class="line">      - https://api.baidu.com/books/<span class="number">1</span> - delete请求：删除主键为<span class="number">1</span>的书</span><br><span class="line"><span class="number">6</span> 过滤，通过在url上传参的形式传递搜索条件</span><br><span class="line">    - https://api.example.com/v1/zoos?limit=<span class="number">10</span>：指定返回记录的数量</span><br><span class="line">    - https://api.example.com/v1/zoos?offset=<span class="number">10</span>：指定返回记录的开始位置</span><br><span class="line">    - https://api.example.com/v1/zoos?page=<span class="number">2</span>&amp;per_page=<span class="number">100</span>：指定第几页，以及每页的记录数</span><br><span class="line">    - https://api.example.com/v1/zoos?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序</span><br><span class="line">    - https://api.example.com/v1/zoos?animal_type_id=<span class="number">1</span>：指定筛选条件</span><br><span class="line">        </span><br><span class="line"><span class="number">7</span> 响应状态码</span><br><span class="line">   <span class="number">7.1</span> 正常响应</span><br><span class="line">    - 响应状态码2xx</span><br><span class="line">      - <span class="number">200</span>：常规请求</span><br><span class="line">      - <span class="number">201</span>：创建成功</span><br><span class="line">   <span class="number">7.2</span> 重定向响应</span><br><span class="line">    - 响应状态码3xx</span><br><span class="line">      - <span class="number">301</span>：永久重定向</span><br><span class="line">      - <span class="number">302</span>：暂时重定向</span><br><span class="line">   <span class="number">7.3</span> 客户端异常</span><br><span class="line">    - 响应状态码4xx</span><br><span class="line">      - <span class="number">403</span>：请求无权限</span><br><span class="line">      - <span class="number">404</span>：请求路径不存在</span><br><span class="line">      - <span class="number">405</span>：请求方法不存在</span><br><span class="line"><span class="number">7.4</span> 服务器异常</span><br><span class="line">    - 响应状态码5xx</span><br><span class="line">      - <span class="number">500</span>：服务器异常</span><br><span class="line"> <span class="number">8</span> 错误处理，应返回错误信息，error当做key</span><br><span class="line">    &#123;</span><br><span class="line">        error: <span class="string">&quot;无权限操作&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="number">9</span> 返回结果，针对不同操作，服务器向用户返回的结果应该符合以下规范</span><br><span class="line">    GET /collection：返回资源对象的列表（数组）</span><br><span class="line">    GET /collection/resource：返回单个资源对象</span><br><span class="line">    POST /collection：返回新生成的资源对象</span><br><span class="line">    PUT /collection/resource：返回完整的资源对象</span><br><span class="line">    PATCH /collection/resource：返回完整的资源对象</span><br><span class="line">    DELETE /collection/resource：返回一个空文档</span><br><span class="line">    </span><br><span class="line"> <span class="number">10</span> 需要url请求的资源需要访问资源的请求链接</span><br><span class="line">     <span class="comment"># Hypermedia API，RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">            <span class="string">&quot;results&quot;</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;肯德基(罗餐厅)&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;img&quot;</span>: <span class="string">&quot;https://image.baidu.com/kfc/001.png&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">                ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="drf的安装和简单使用"><a href="#drf的安装和简单使用" class="headerlink" title="drf的安装和简单使用"></a>drf的安装和简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装：pip install djangorestframework==3.12.4</span></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="number">1</span> 在setting.py 的app中注册</span><br><span class="line">        INSTALLED_APPS = [</span><br><span class="line">        <span class="string">&#x27;rest_framework&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    <span class="number">2</span> 在models.py中写表模型</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">            <span class="comment"># 也可不写该字段会自动创建</span></span><br><span class="line">            nid=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">            name=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">            price=models.DecimalField(max_digits=<span class="number">5</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">            author=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="number">3</span> 新建一个序列化类（先演示出效果）</span><br><span class="line">    <span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line">        <span class="keyword">from</span> app01.models <span class="keyword">import</span>  Book</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">BookModelSerializer</span>(<span class="title class_ inherited__">ModelSerializer</span>):</span><br><span class="line">            <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">                model = Book</span><br><span class="line">                fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line">    <span class="number">4</span> 在视图中写视图类(两行代码五个接口)</span><br><span class="line">        <span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line">        <span class="keyword">from</span> app01.models <span class="keyword">import</span> Book</span><br><span class="line">        <span class="keyword">from</span> app01.ser <span class="keyword">import</span> BookModelSerializer</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">BooksViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">            queryset = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">            serializer_class = BookModelSerializer</span><br><span class="line">    <span class="number">5</span> 写路由关系</span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">        <span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line">        router = DefaultRouter()  <span class="comment"># 可以处理视图的路由器</span></span><br><span class="line">        router.register(<span class="string">&#x27;book&#x27;</span>, views.BooksViewSet)  <span class="comment"># 向路由器中注册视图集</span></span><br><span class="line">          <span class="comment"># 将路由器中的所以路由信息追到到django的路由列表中</span></span><br><span class="line">        urlpatterns = [</span><br><span class="line">            path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">        ]</span><br><span class="line">        <span class="comment"># 两个列表相加</span></span><br><span class="line">        urlpatterns += router.urls</span><br><span class="line">    <span class="number">6</span> 启动，在postman中测试即可</span><br></pre></td></tr></table></figure><h2 id="cbv源码"><a href="#cbv源码" class="headerlink" title="cbv源码"></a>cbv源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ModelViewSet继承View（django原生View）</span></span><br><span class="line"><span class="comment"># APIView继承了View</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先读View的源码</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;books1/&#x27;</span>, views.Books.as_view()),  <span class="comment">#在这个地方应该写个函数内存地址,views.Books.as_view()执行完，是个函数内存地址,as_view是一个类方法，类直接来调用，会把类自动传入</span></span><br><span class="line">放了一个view的内存地址（View--》as_view--》内层函数）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求来了，如果路径匹配，会执行，  函数内存地址(request)</span></span><br><span class="line">http_method_names = [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;options&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">    <span class="comment">#request是当次请求的request</span></span><br><span class="line">    self = cls(**initkwargs)  <span class="comment">#实例化得到一个对象，Book对象</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;get&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;head&#x27;</span>):</span><br><span class="line">        self.head = self.get</span><br><span class="line">        self.request = request</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line"><span class="comment">#request是当次请求的request   self是book对象</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            <span class="comment">#handler现在是：</span></span><br><span class="line">            handler=<span class="built_in">getattr</span>(self,<span class="string">&#x27;get&#x27;</span>),你写的Book类的get方法的内存地址</span><br><span class="line">            handler = <span class="built_in">getattr</span>(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="keyword">return</span> handler(request, *args, **kwargs)  <span class="comment">#执行get(request)</span></span><br></pre></td></tr></table></figure><h2 id="APIView源码分析"><a href="#APIView源码分析" class="headerlink" title="APIView源码分析"></a>APIView源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#from rest_framework.views import APIView</span></span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;booksapiview/&#x27;</span>, views.BooksAPIView.as_view()),  <span class="comment">#在这个地方应该写个函数内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#APIView的as_view方法（类的绑定方法）</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">as_view</span>(<span class="params">cls, **initkwargs</span>):</span><br><span class="line">        view = <span class="built_in">super</span>().as_view(**initkwargs)  <span class="comment"># 调用父类（View）的as_view(**initkwargs)</span></span><br><span class="line">        view.cls = cls</span><br><span class="line">        view.initkwargs = initkwargs</span><br><span class="line">        <span class="comment"># 以后所有的请求，都没有csrf认证了，只要继承了APIView，就没有csrf的认证</span></span><br><span class="line">        <span class="keyword">return</span> csrf_exempt(view)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">#请求来了---》路由匹配上---》view（request）---》调用了self.dispatch(),会执行apiview的dispatch</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># APIView的dispatch方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line"></span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        <span class="comment"># 重新包装成一个request对象，以后再用的request对象，就是新的request对象了</span></span><br><span class="line">        request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line">        self.headers = self.default_response_headers  <span class="comment"># deprecate?反对</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 三大认证模块</span></span><br><span class="line">            self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">            <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">                handler = <span class="built_in">getattr</span>(self, request.method.lower(),</span><br><span class="line">                                  self.http_method_not_allowed)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 响应模块</span></span><br><span class="line">            response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="comment"># 异常模块</span></span><br><span class="line">            response = self.handle_exception(exc)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 渲染模块</span></span><br><span class="line">        self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.response</span><br><span class="line">   </span><br><span class="line"><span class="comment"># APIView的initial方法</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">initial</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 认证组件：校验用户 - 游客、合法用户、非法用户</span></span><br><span class="line">        <span class="comment"># 游客：代表校验通过，直接进入下一步校验（权限校验）</span></span><br><span class="line">        <span class="comment"># 合法用户：代表校验通过，将用户存储在request.user中，再进入下一步校验（权限校验）</span></span><br><span class="line">        <span class="comment"># 非法用户：代表校验失败，抛出异常，返回403权限异常结果</span></span><br><span class="line">        self.perform_authentication(request)</span><br><span class="line">        <span class="comment"># 权限组件：校验用户权限 - 必须登录、所有用户、登录读写游客只读、自定义用户角色</span></span><br><span class="line">        <span class="comment"># 认证通过：可以进入下一步校验（频率认证）</span></span><br><span class="line">        <span class="comment"># 认证失败：抛出异常，返回403权限异常结果</span></span><br><span class="line">        self.check_permissions(request)</span><br><span class="line">        <span class="comment"># 频率组件：限制视图接口被访问的频率次数 - 限制的条件(IP、id、唯一键)、频率周期时间(s、m、h)、频率的次数（3/s）</span></span><br><span class="line">        <span class="comment"># 没有达到限次：正常访问接口</span></span><br><span class="line">        <span class="comment"># 达到限次：限制时间内不能访问，限制时间达到后，可以重新访问</span></span><br><span class="line">        self.check_throttles(request)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="comment"># 只要继承了APIView，视图类中的request对象，都是新的，也就是上面那个request的对象了</span></span><br><span class="line"><span class="comment"># 老的request在新的request._request</span></span><br><span class="line"><span class="comment"># 以后使用reqeust对象，就像使用之前的request是一模一样（因为重写了__getattr__方法）</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, attr</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(self._request, attr) <span class="comment">#通过反射，取原生的request对象，取出属性或方法</span></span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">return</span> self.__getattribute__(attr)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># request.data 感觉是个数据属性，其实是个方法，@property，修饰了</span></span><br><span class="line">它是一个字典，post请求不管使用什么编码，传过来的数据，都在request.data</span><br><span class="line"> <span class="comment">#get请求传过来数据，从哪取？</span></span><br><span class="line">request.GET</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query_params</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        更为正确的语义地名字给了request.GET</span></span><br><span class="line"><span class="string">        More semantically correct name for request.GET.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._request.GET</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#视图类中</span></span><br><span class="line">     <span class="built_in">print</span>(request.query_params)  <span class="comment">#get请求，地址中的参数</span></span><br><span class="line">     <span class="comment"># 原来在</span></span><br><span class="line">     <span class="built_in">print</span>(request.GET)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django之BBS</title>
      <link href="/2022/07/31/Django%E4%B9%8BBBS/"/>
      <url>/2022/07/31/Django%E4%B9%8BBBS/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">表设计(8张)</span><br><span class="line">1、用户表: UserInfo表</span><br><span class="line">2、博客表: Blog表</span><br><span class="line">3、分类表: Category</span><br><span class="line">4、标签表: Tag</span><br><span class="line">5、文章: Article(文章和详情一个表)</span><br><span class="line">6、评论: Comment</span><br><span class="line">7、点赞点踩表: UpAndDown</span><br><span class="line">8、文章标签中间表:ArticleToTag</span><br><span class="line"></span><br><span class="line"><span class="code">1.用户表UserInfo</span></span><br><span class="line"><span class="code">继承AbstractUser</span></span><br><span class="line"><span class="code">扩展</span></span><br><span class="line"><span class="code">phone   电话号码</span></span><br><span class="line"><span class="code">avatar  用户头像</span></span><br><span class="line"><span class="code">create_time 创建时间</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">外键字段blog</span></span><br><span class="line"><span class="code">一对一个人站点表</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2.个人站点表Blog</span></span><br><span class="line"><span class="code">site_name 站点名称</span></span><br><span class="line"><span class="code">site_title  站点标题</span></span><br><span class="line"><span class="code">site_theme 站点样式</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3.文章标签表Tag</span></span><br><span class="line"><span class="code">name标签名</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">外键字段blog</span></span><br><span class="line"><span class="code">一对多个人站点 </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">4.文章分类表Category</span></span><br><span class="line"><span class="code">name分类名</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">外键字段blog</span></span><br><span class="line"><span class="code">一对多个人站点</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">5.文章表Article</span></span><br><span class="line"><span class="code">title文章标题</span></span><br><span class="line"><span class="code">desc文章简介</span></span><br><span class="line"><span class="code">content文章内容</span></span><br><span class="line"><span class="code">create_date 发布日期(后续做归档需要用到)</span></span><br><span class="line"><span class="code">create_time 发布时间</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">数据库字段设计优化(虽然下述的三个字段可以从其他表里面跨表查询计算得出，但是频繁查询影响跨表效率)</span></span><br><span class="line"><span class="code">up_num点赞数</span></span><br><span class="line"><span class="code">down_num点踩数</span></span><br><span class="line"><span class="code">comment_num 评论数</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">外键字段</span></span><br><span class="line"><span class="code">一对多个人站点blog</span></span><br><span class="line"><span class="code">多对多文章标签tag</span></span><br><span class="line"><span class="code">一对多文章分类category(实质是多对多,简化流程)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">6.点赞点踩表UpAndDown</span></span><br><span class="line"><span class="code">记录哪个用户给哪篇文章点了赞还是点了踩</span></span><br><span class="line"><span class="code">userForeignKey(to=&quot;User&quot;)</span></span><br><span class="line"><span class="code">articleForeignKey(to=&quot;Article&quot;)</span></span><br><span class="line"><span class="code">is_upBooleanField()</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">111</span></span><br><span class="line"><span class="code">121</span></span><br><span class="line"><span class="code">130</span></span><br><span class="line"><span class="code">211</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">7.文章评论表Comment</span></span><br><span class="line"><span class="code">记录哪个用户给哪篇文章写了哪些评论内容</span></span><br><span class="line"><span class="code">userForeignKey(to=&quot;User&quot;)</span></span><br><span class="line"><span class="code">articleForeignKey(to=&quot;Article&quot;)</span></span><br><span class="line"><span class="code">contentCharField()</span></span><br><span class="line"><span class="code">comment_timeDateField()</span></span><br><span class="line"><span class="code"># 自关联</span></span><br><span class="line"><span class="code">parent_commentForeignKey(to=&quot;Comment&quot;,null=True)</span></span><br><span class="line"><span class="code"># ORM专门提供的自关联写法</span></span><br><span class="line"><span class="code">parentForeignKey(to=&quot;self&quot;,null=True)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">iduser_idarticle_idparent_id</span></span><br><span class="line"><span class="code">1 11</span></span><br><span class="line"><span class="code">2 21 1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">根评论与子评论是一对多的关系</span></span><br></pre></td></tr></table></figure><h2 id="数据库表创建及同步"><a href="#数据库表创建及同步" class="headerlink" title="数据库表创建及同步"></a>数据库表创建及同步</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;app01.UserInfo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    phone = models.BigIntegerField(verbose_name=<span class="string">&#x27;手机号&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    avatar = models.FileField(verbose_name=<span class="string">&#x27;头像&#x27;</span>, upload_to=<span class="string">&#x27;avatar/&#x27;</span>, default=<span class="string">&#x27;avatar/default.png&#x27;</span>)</span><br><span class="line">    <span class="comment"># auto_now_add=True 创建数据记录的时候会把当前时间添加到数据库</span></span><br><span class="line">    <span class="comment"># auto_now=True，每次更新数据记录的时候会更新该字段</span></span><br><span class="line">    create_time = models.DateField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 外键字段</span></span><br><span class="line">    blog = models.ForeignKey(to=<span class="string">&#x27;Blog&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;用户信息表&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Blog</span>(models.Model):</span><br><span class="line">    site_name = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&#x27;站点名称&#x27;</span>)</span><br><span class="line">    site_title = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&#x27;站点标题&#x27;</span>)</span><br><span class="line">    site_theme = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&#x27;站点样式&#x27;</span>) <span class="comment"># 存css/js文件路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.site_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Category</span>(models.Model):</span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;文章分类&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    blog = models.ForeignKey(to=<span class="string">&#x27;Blog&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tag</span>(models.Model):</span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;文章标签&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    blog = models.ForeignKey(to=<span class="string">&#x27;Blog&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(models.Model):</span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&#x27;文章标题&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    desc = models.CharField(verbose_name=<span class="string">&#x27;文章描述&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    content = models.TextField(verbose_name=<span class="string">&#x27;文章内容&#x27;</span>)</span><br><span class="line">    create_date = models.DateField(verbose_name=<span class="string">&#x27;发布日期&#x27;</span>, auto_now_add=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    create_time = models.DateTimeField(verbose_name=<span class="string">&#x27;发布时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 数据库字段设计优化</span></span><br><span class="line">    up_num = models.IntegerField(verbose_name=<span class="string">&#x27;点赞数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    down_num = models.IntegerField(verbose_name=<span class="string">&#x27;点踩数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    comment_num = models.IntegerField(verbose_name=<span class="string">&#x27;评论数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 外键字段</span></span><br><span class="line">    blog = models.ForeignKey(to=<span class="string">&#x27;Blog&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    category = models.ForeignKey(to=<span class="string">&#x27;Category&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    tag = models.ManyToManyField(to=<span class="string">&#x27;Tag&#x27;</span>, through=<span class="string">&#x27;ArticleToTag&#x27;</span>, through_fields=(<span class="string">&#x27;article&#x27;</span>, <span class="string">&#x27;tag&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleToTag</span>(models.Model):</span><br><span class="line">    article = models.ForeignKey(to=<span class="string">&#x27;Article&#x27;</span>)</span><br><span class="line">    tag = models.ForeignKey(to=<span class="string">&#x27;Tag&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UpAndDown</span>(models.Model):</span><br><span class="line">    user = models.ForeignKey(to=<span class="string">&#x27;UserInfo&#x27;</span>)</span><br><span class="line">    article = models.ForeignKey(to=<span class="string">&#x27;Article&#x27;</span>)</span><br><span class="line">    is_up = models.BooleanField(verbose_name=<span class="string">&#x27;点赞/点踩&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comment</span>(models.Model):</span><br><span class="line">    user = models.ForeignKey(to=<span class="string">&#x27;UserInfo&#x27;</span>)</span><br><span class="line">    article = models.ForeignKey(to=<span class="string">&#x27;Article&#x27;</span>)</span><br><span class="line">    content = models.CharField(verbose_name=<span class="string">&#x27;评论内容&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    comment_time = models.DateTimeField(verbose_name=<span class="string">&#x27;评论时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    parent_comment = models.ForeignKey(verbose_name=<span class="string">&#x27;根评论&#x27;</span>, to=<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>)  <span class="comment"># 允许只有根评论</span></span><br></pre></td></tr></table></figure><h2 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h2><h3 id="forms组件校验数据"><a href="#forms组件校验数据" class="headerlink" title="forms组件校验数据"></a>forms组件校验数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  blog_forms.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterForm</span>(forms.Form):</span><br><span class="line">    username = forms.CharField(label=<span class="string">&#x27;用户名&#x27;</span>, min_length=<span class="number">3</span>, max_length=<span class="number">8</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;用户名不能为空&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;min_length&#x27;</span>: <span class="string">&#x27;长度最少3位&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;用户名最长8位&#x27;</span>,</span><br><span class="line">    &#125;, widget=forms.widgets.TextInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    password = forms.CharField(label=<span class="string">&#x27;密码&#x27;</span>, min_length=<span class="number">3</span>, max_length=<span class="number">8</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;密码不能为空&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;min_length&#x27;</span>: <span class="string">&#x27;密码长度最少3位&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;密码长度最多8位&#x27;</span>,</span><br><span class="line">    &#125;, widget=forms.widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    password = forms.CharField(label=<span class="string">&#x27;密码&#x27;</span>, min_length=<span class="number">3</span>, max_length=<span class="number">8</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;密码不能为空&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;min_length&#x27;</span>: <span class="string">&#x27;密码长度最少3位&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;密码长度最多8位&#x27;</span>,</span><br><span class="line">    &#125;, widget=forms.widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    confirm_password = forms.CharField(label=<span class="string">&#x27;确认密码&#x27;</span>, min_length=<span class="number">3</span>, max_length=<span class="number">8</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;确认密码不能为空&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;min_length&#x27;</span>: <span class="string">&#x27;确认密码长度最少3位&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;确认密码长度最多8位&#x27;</span>,</span><br><span class="line">    &#125;, widget=forms.widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    email = forms.EmailField(label=<span class="string">&#x27;邮箱&#x27;</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;邮箱不能为空&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;invalid&#x27;</span>: <span class="string">&#x27;邮箱格式不正确&#x27;</span></span><br><span class="line">    &#125;, widget=forms.widgets.EmailInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 局部钩子校验用户名是否存在</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_username</span>(<span class="params">self</span>):</span><br><span class="line">        username = self.cleaned_data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        is_exist = models.UserInfo.objects.<span class="built_in">filter</span>(username=username)</span><br><span class="line">        <span class="keyword">if</span> is_exist:</span><br><span class="line">            self.add_error(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;用户名已存在!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局钩子校验两次密码是否一致</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean</span>(<span class="params">self</span>):</span><br><span class="line">        password = self.cleaned_data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        confirm_password = self.cleaned_data.get(<span class="string">&#x27;confirm_password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> password == confirm_password:</span><br><span class="line">            self.add_error(<span class="string">&#x27;confirm_password&#x27;</span>, <span class="string">&#x27;两次密码不一致&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure><h3 id="注册HTML"><a href="#注册HTML" class="headerlink" title="注册HTML"></a>注册HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form_data&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 不用form表单提交--&gt;</span></span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                &#123;% for form in form_obj %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--form.auto_id可以自动获取form组件渲染的input框的id值 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&#123;&#123; form.auto_id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; form.label &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        &#123;&#123; form &#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: darkred&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;img_file&quot;</span>&gt;</span>头像</span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;img/default.png&#x27; %&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img_avatar&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 20px&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img_file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info pull-right&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_commit&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注册js"><a href="#注册js" class="headerlink" title="注册js"></a>注册js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 文本域变化事件</span></span><br><span class="line">    $(<span class="string">&#x27;#img_file&#x27;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 1.先生成文件阅读器对象</span></span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">FileReaderObj</span> = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">        <span class="comment">// 2.获取用户上传的头像文件</span></span><br><span class="line">        <span class="keyword">let</span> fileObj = $(<span class="variable language_">this</span>)[<span class="number">0</span>].<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 3.将文件对象交给阅读器对象 并且是异步操作 不会等待文件阅读完毕,会执行下一句代码</span></span><br><span class="line">        <span class="title class_">FileReaderObj</span>.<span class="title function_">readAsDataURL</span>(fileObj)</span><br><span class="line">        <span class="comment">// 4.利用文件阅读器对象将文件展示到前端页面  实质上是修改图片的src属性</span></span><br><span class="line">        <span class="comment">// 等待阅读器加载完毕后再执行</span></span><br><span class="line">        <span class="title class_">FileReaderObj</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;#img_avatar&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>,<span class="title class_">FileReaderObj</span>.<span class="property">result</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测用户名是否存在，当光标不在username控件上就会发送ajax请求去后台查询</span></span><br><span class="line">    $(<span class="string">&#x27;#id_username&#x27;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> _this = $(<span class="variable language_">this</span>);</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/check_username/&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:&#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>:$(<span class="string">&#x27;#id_username&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>:$(<span class="string">&quot;[name=csrfmiddlewaretoken]&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(args.<span class="property">code</span>!==<span class="number">1000</span>)&#123;</span><br><span class="line">                    _this.<span class="title function_">next</span>().<span class="title function_">text</span>(args.<span class="property">msg</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交注册请求</span></span><br><span class="line">    $(<span class="string">&#x27;#id_commit&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> formDataObj = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        <span class="comment">// 1.添加普通键值对数据</span></span><br><span class="line">        <span class="comment">// 数组套对象循环出来就是一个个对象</span></span><br><span class="line">        &#123;#<span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#form_data&#x27;</span>).<span class="title function_">serializeArray</span>());#&#125;</span><br><span class="line">        $.<span class="title function_">each</span>($(<span class="string">&#x27;#form_data&#x27;</span>).<span class="title function_">serializeArray</span>(),<span class="keyword">function</span> (<span class="params">index,obj</span>) &#123;</span><br><span class="line">            &#123;#<span class="variable language_">console</span>.<span class="title function_">log</span>(index,obj)#&#125;</span><br><span class="line">            formDataObj.<span class="title function_">append</span>(obj.<span class="property">name</span>,obj.<span class="property">value</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 2.添加文件数据</span></span><br><span class="line">        formDataObj.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, $(<span class="string">&#x27;#img_file&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 3.发送Ajax请求</span></span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:formDataObj,</span><br><span class="line">            <span class="attr">contentType</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">processData</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(args.<span class="property">code</span>==<span class="number">1000</span>)&#123;</span><br><span class="line">                    <span class="comment">// 跳转到登录页</span></span><br><span class="line">                    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = args.<span class="property">url</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    $.<span class="title function_">each</span>(args.<span class="property">msg</span>,<span class="keyword">function</span> (<span class="params">index,obj</span>) &#123;</span><br><span class="line">                        &#123;#<span class="variable language_">console</span>.<span class="title function_">log</span>(index,obj)  <span class="comment">// username [&#x27;用户名不能为空&#x27;]#&#125;</span></span><br><span class="line">                        <span class="keyword">let</span> targetId = <span class="string">&#x27;#id_&#x27;</span> + index</span><br><span class="line">                        $(targetId).<span class="title function_">next</span>().<span class="title function_">text</span>(obj[<span class="number">0</span>]).<span class="title function_">parent</span>().<span class="title function_">addClass</span>(<span class="string">&#x27;has-error&#x27;</span>)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给所有的input框绑定获取焦点事件</span></span><br><span class="line">    $(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">focus</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 将input下面的span标签内容置空和input外的div标签修改内容及属性</span></span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">next</span>().<span class="title function_">text</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">parent</span>().<span class="title function_">removeClass</span>(<span class="string">&#x27;has-error&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询用户是否已经注册</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_username</span>(<span class="params">request</span>):</span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        count = UserInfo.objects.<span class="built_in">filter</span>(username=username).count()</span><br><span class="line">        <span class="keyword">if</span> count:</span><br><span class="line">            back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">2000</span></span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;该用户已存在&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(back_dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">request</span>):</span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    form_obj = RegisterForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        form_obj = RegisterForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form_obj.is_valid():</span><br><span class="line">            <span class="comment"># 将校验通过的数据赋值给一个变量</span></span><br><span class="line">            cleaned_data = form_obj.cleaned_data</span><br><span class="line">            cleaned_data.pop(<span class="string">&#x27;confirm_password&#x27;</span>)</span><br><span class="line">            file_obj = request.FILES.get(<span class="string">&#x27;avatar&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> file_obj:</span><br><span class="line">                cleaned_data[<span class="string">&#x27;avatar&#x27;</span>] = file_obj</span><br><span class="line">            models.UserInfo.objects.create_user(**cleaned_data)</span><br><span class="line">            back_dic[<span class="string">&#x27;url&#x27;</span>] = <span class="string">&#x27;/login/&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">2000</span></span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = form_obj.errors</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dic)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;register.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h2 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h2><h3 id="随机生成三基色"><a href="#随机生成三基色" class="headerlink" title="随机生成三基色"></a>随机生成三基色</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_random</span>():</span><br><span class="line">    <span class="keyword">return</span> random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br></pre></td></tr></table></figure><h3 id="生成随机验证码"><a href="#生成随机验证码" class="headerlink" title="生成随机验证码"></a>生成随机验证码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_code</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 生成图片验证码对象</span></span><br><span class="line">    img_obj = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">300</span>, <span class="number">35</span>), get_random())</span><br><span class="line">    <span class="comment"># 画笔</span></span><br><span class="line">    img_draw = ImageDraw.Draw(img_obj)</span><br><span class="line">    img_font = ImageFont.truetype(<span class="string">&#x27;static/font/msyh.ttf&#x27;</span>, <span class="number">30</span>)  <span class="comment"># 字体样式 大小</span></span><br><span class="line">    <span class="comment"># 随机验证码</span></span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        random_lower = <span class="built_in">chr</span>(random.randint(<span class="number">97</span>, <span class="number">122</span>))</span><br><span class="line">        random_int = <span class="built_in">str</span>(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">        tmp = random.choice([random_lower, random_int])</span><br><span class="line">        <span class="comment"># 通过画笔对象进行书写</span></span><br><span class="line">        img_draw.text((i * <span class="number">75</span>, <span class="number">0</span>), tmp, get_random(), img_font)  <span class="comment"># 坐标 文本内容 三基色 字体样式</span></span><br><span class="line">        code += tmp</span><br><span class="line">    <span class="built_in">print</span>(code)</span><br><span class="line">    <span class="comment"># 随机验证码在登录的时候需要做校验，找个地方存起来并且其他视图函数能拿到例如session</span></span><br><span class="line">    request.session[<span class="string">&#x27;code&#x27;</span>] = code</span><br><span class="line">    io_obj = BytesIO()</span><br><span class="line">    img_obj.save(io_obj, <span class="string">&#x27;png&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(io_obj.getvalue())</span><br></pre></td></tr></table></figure><h3 id="登录HTML"><a href="#登录HTML" class="headerlink" title="登录HTML"></a>登录HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form_data&quot;</span>&gt;</span></span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;id_username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;id_password&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;id_code&quot;</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;code&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_code&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-offset-5&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/get_code/&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;35&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_img&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success text-center&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_commit&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: darkred&quot;</span> <span class="attr">id</span>=<span class="string">&quot;error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="登录js"><a href="#登录js" class="headerlink" title="登录js"></a>登录js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&#x27;#id_img&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在点击事件中位img的src重新赋值，主动朝目标url发送get请求，实现方式拼接时间戳即可</span></span><br><span class="line">        <span class="keyword">let</span> cur_time = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;/get_code/?&#x27;</span> + cur_time)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&#x27;#id_commit&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> formDataObj = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        $.<span class="title function_">each</span>($(<span class="string">&#x27;#form_data&#x27;</span>).<span class="title function_">serializeArray</span>(),<span class="keyword">function</span> (<span class="params">index,obj</span>) &#123;</span><br><span class="line">            formDataObj.<span class="title function_">append</span>(obj.<span class="property">name</span>,obj.<span class="property">value</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="attr">data</span>:&#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>:$(<span class="string">&#x27;#id_username&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>:$(<span class="string">&#x27;#id_password&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="string">&#x27;code&#x27;</span>:$(<span class="string">&#x27;#id_code&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                &#123;#<span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>:$(<span class="string">&quot;[name=csrfmiddlewaretoken]&quot;</span>).<span class="title function_">val</span>(),#&#125;</span><br><span class="line">                <span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>:<span class="string">&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(args.<span class="property">code</span>==<span class="number">1000</span>)&#123;</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = args.<span class="property">url</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $(<span class="string">&#x27;#error&#x27;</span>).<span class="title function_">text</span>(args.<span class="property">msg</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="首页搭建"><a href="#首页搭建" class="headerlink" title="首页搭建"></a>首页搭建</h2><h3 id="首页HTML"><a href="#首页HTML" class="headerlink" title="首页HTML"></a>首页HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>BBS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>博客 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>更多 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;navbar-form navbar-left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">          &#123;% if request.user.is_authenticated %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; request.user.username &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; request.user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>更多操作 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;.bs-example-modal-lg&quot;</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/set/avatar/&quot;</span>&gt;</span>修改头像<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/backend/&quot;</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout/&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          &#123;% else %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;register&#x27; %&#125;&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;login&#x27; %&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade bs-example-modal-lg&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myLargeModalLabel&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog modal-lg&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; request.user.username &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>原密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;old_password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_old_password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>新密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;new_password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_new_password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;confirm_password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_confirm_password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;password_error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_edit&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>AMD-YYDS<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            苏妈放大招啦</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-danger&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>烤全羊好吃吗<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            我的回答是太好吃啦</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>Intel-牙膏厂<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            牙膏厂的参数</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;media-list&quot;</span>&gt;</span></span><br><span class="line">          &#123;% for article_obj in article_queryset %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;media&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;media-heading&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; article_obj.blog.userinfo_set.first.username &#125;&#125;/article/&#123;&#123; article_obj.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; article_obj.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;media-left&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;media-object&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/media/&#123;&#123; article_obj.blog.userinfo_set.first.avatar &#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> <span class="attr">width</span>=<span class="string">&quot;75px&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;media-body&quot;</span>&gt;</span></span><br><span class="line">                  &#123;&#123; article_obj.desc &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; article_obj.blog.userinfo_set.first.username &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; article_obj.blog.userinfo_set.first.username&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>发布于<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; article_obj.create_time|date:&#x27;Y-m-d&#x27; &#125;&#125;<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-comment&quot;</span>&gt;</span>评论数(&#123;&#123; article_obj.comment_num &#125;&#125;)<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-thumbs-up&quot;</span>&gt;</span>点赞数(&#123;&#123; article_obj.up_num &#125;&#125;)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">        &#123;&#123; page_obj.page_html|safe &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>快乐是什么<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            吃饭睡觉</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>自由是什么<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            想不干嘛就不干</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-info&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>何为智慧<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            知行合一</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改密码js"><a href="#修改密码js" class="headerlink" title="修改密码js"></a>修改密码js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&#x27;#id_edit&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;/set_password/&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:&#123;</span><br><span class="line">                <span class="string">&#x27;old_password&#x27;</span>:$(<span class="string">&#x27;#id_old_password&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="string">&#x27;new_password&#x27;</span>:$(<span class="string">&#x27;#id_new_password&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="string">&#x27;confirm_password&#x27;</span>:$(<span class="string">&#x27;#id_confirm_password&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>:<span class="string">&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(args.<span class="property">code</span> ==<span class="number">1000</span>)&#123;</span><br><span class="line">                    <span class="title function_">alert</span>(args.<span class="property">msg</span>)</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>()</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    $(<span class="string">&#x27;#password_error&#x27;</span>).<span class="title function_">text</span>(args.<span class="property">msg</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="获取首页内容"><a href="#获取首页内容" class="headerlink" title="获取首页内容"></a>获取首页内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 带分页</span></span><br><span class="line">    article_list = models.Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    current_page = request.GET.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    all_count = article_list.count()</span><br><span class="line">    page_obj = Pagination(current_page=current_page, all_count=all_count)</span><br><span class="line">    article_queryset = article_list[page_obj.start:page_obj.end]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;home.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pagination</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, current_page, all_count, per_page_num=<span class="number">2</span>, pager_count=<span class="number">11</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        封装分页相关数据</span></span><br><span class="line"><span class="string">        :param current_page: 当前页</span></span><br><span class="line"><span class="string">        :param all_count:    数据库中的数据总条数</span></span><br><span class="line"><span class="string">        :param per_page_num: 每页显示的数据条数</span></span><br><span class="line"><span class="string">        :param pager_count:  最多显示的页码个数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            current_page = <span class="built_in">int</span>(current_page)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            current_page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current_page &lt; <span class="number">1</span>:</span><br><span class="line">            current_page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.current_page = current_page</span><br><span class="line"></span><br><span class="line">        self.all_count = all_count</span><br><span class="line">        self.per_page_num = per_page_num</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 总页码</span></span><br><span class="line">        all_pager, tmp = <span class="built_in">divmod</span>(all_count, per_page_num)</span><br><span class="line">        <span class="keyword">if</span> tmp:</span><br><span class="line">            all_pager += <span class="number">1</span></span><br><span class="line">        self.all_pager = all_pager</span><br><span class="line"></span><br><span class="line">        self.pager_count = pager_count</span><br><span class="line">        self.pager_count_half = <span class="built_in">int</span>((pager_count - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将方法伪装成属性，不用加括号也可以运行</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.current_page - <span class="number">1</span>) * self.per_page_num</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.current_page * self.per_page_num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 如果总页码 &lt; 11个：</span></span><br><span class="line">        <span class="keyword">if</span> self.all_pager &lt;= self.pager_count:</span><br><span class="line">            pager_start = <span class="number">1</span></span><br><span class="line">            pager_end = self.all_pager + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 总页码  &gt; 11</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 当前页如果&lt;=11/2(页面上最多显示11/2个页码)</span></span><br><span class="line">            <span class="keyword">if</span> self.current_page &lt;= self.pager_count_half:</span><br><span class="line">                pager_start = <span class="number">1</span></span><br><span class="line">                pager_end = self.pager_count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前页大于5</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 页码翻到最后 如果当前页加页码个数一半大于总页数则  起始页=总页数-页码数+1</span></span><br><span class="line">                <span class="keyword">if</span> (self.current_page + self.pager_count_half) &gt; self.all_pager:</span><br><span class="line">                    pager_end = self.all_pager + <span class="number">1</span></span><br><span class="line">                    pager_start = self.all_pager - self.pager_count + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pager_start = self.current_page - self.pager_count_half</span><br><span class="line">                    pager_end = self.current_page + self.pager_count_half + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        page_html_list = []</span><br><span class="line">        <span class="comment"># 添加前面的nav和ul标签</span></span><br><span class="line">        page_html_list.append(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                    &lt;nav aria-label=&#x27;Page navigation&gt;&#x27;</span></span><br><span class="line"><span class="string">                    &lt;ul class=&#x27;pagination&#x27;&gt;</span></span><br><span class="line"><span class="string">                &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        first_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (<span class="number">1</span>)</span><br><span class="line">        page_html_list.append(first_page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.current_page &lt;= <span class="number">1</span>:</span><br><span class="line">            prev_page = <span class="string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.current_page - <span class="number">1</span>,)</span><br><span class="line"></span><br><span class="line">        page_html_list.append(prev_page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pager_start, pager_end):</span><br><span class="line">            <span class="keyword">if</span> i == self.current_page:</span><br><span class="line">                temp = <span class="string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (i, i,)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (i, i,)</span><br><span class="line">            page_html_list.append(temp)</span><br><span class="line">        <span class="comment"># 判断是否还有下一页</span></span><br><span class="line">        <span class="keyword">if</span> self.current_page &gt;= self.all_pager:</span><br><span class="line">            next_page = <span class="string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            next_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.current_page + <span class="number">1</span>,)</span><br><span class="line">        page_html_list.append(next_page)</span><br><span class="line"></span><br><span class="line">        last_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.all_pager,)</span><br><span class="line">        page_html_list.append(last_page)</span><br><span class="line">        <span class="comment"># 尾部添加标签</span></span><br><span class="line">        page_html_list.append(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                                           &lt;/nav&gt;</span></span><br><span class="line"><span class="string">                                           &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                                       &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(page_html_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改密码后台"><a href="#修改密码后台" class="headerlink" title="修改密码后台"></a>修改密码后台</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_password</span>(<span class="params">request</span>):</span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        old_password = request.POST.get(<span class="string">&#x27;old_password&#x27;</span>)</span><br><span class="line">        new_password = request.POST.get(<span class="string">&#x27;new_password&#x27;</span>)</span><br><span class="line">        confirm_password = request.POST.get(<span class="string">&#x27;confirm_password&#x27;</span>)</span><br><span class="line">        is_right = request.user.check_password(old_password)</span><br><span class="line">        <span class="keyword">if</span> is_right:</span><br><span class="line">            <span class="keyword">if</span> new_password == confirm_password:</span><br><span class="line">                request.user.set_password(new_password)</span><br><span class="line">                request.user.save() </span><br><span class="line">                back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;修改成功&#x27;</span></span><br><span class="line">                back_dic[<span class="string">&#x27;url&#x27;</span>] = <span class="string">&#x27;/login/&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">2000</span></span><br><span class="line">                back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;两次密码不一致&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">3000</span></span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;原密码错误&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(back_dic)</span><br></pre></td></tr></table></figure><h3 id="注销登录"><a href="#注销登录" class="headerlink" title="注销登录"></a>注销登录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>(<span class="params">request</span>):</span><br><span class="line">    auth.logout(request)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/home/&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="admin后台管理"><a href="#admin后台管理" class="headerlink" title="admin后台管理"></a>admin后台管理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">django给你提供了一个可视化的界面用来让你方便的对你的模型表进行数据的增删改查操作</span><br><span class="line"></span><br><span class="line">如果使用amdin后台管理操作模型表;需要先注册模型表告诉admin需要操作哪些表;去应用下的admin.py中注册模型表</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line">admin.site.register(models.UserInfo)</span><br><span class="line">admin.site.register(models.Blog)</span><br><span class="line">admin.site.register(models.Category)</span><br><span class="line">admin.site.register(models.Tag)</span><br><span class="line">admin.site.register(models.Article)</span><br><span class="line">admin.site.register(models.ArticleToTag)</span><br><span class="line">admin.site.register(models.UpAndDown)</span><br><span class="line">admin.site.register(models.Comment)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.数据绑定尤其需要注意的是用户和个人站点不要忘记绑定了</span></span><br></pre></td></tr></table></figure><h2 id="用户头像展示"><a href="#用户头像展示" class="headerlink" title="用户头像展示"></a>用户头像展示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py  配置用户上传的文件存储位置</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR,<span class="string">&#x27;media&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line">url(<span class="string">r&#x27;^media/(?P&lt;path&gt;.*)&#x27;</span>,serve,&#123;<span class="string">&#x27;document_root&#x27;</span>:settings.MEDIA_ROOT&#125;)</span><br></pre></td></tr></table></figure><h2 id="图片防盗链"><a href="#图片防盗链" class="headerlink" title="图片防盗链"></a>图片防盗链</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改请求头refer</span><br></pre></td></tr></table></figure><h2 id="个人站点"><a href="#个人站点" class="headerlink" title="个人站点"></a>个人站点</h2><h3 id="模板base-html"><a href="#模板base-html" class="headerlink" title="模板base.html"></a>模板base.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;js/jquery-3.6.4.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/css/bootstrap.min.css&#x27; %&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/media/css/&#123;&#123; blog.site_theme &#125;&#125;/&quot;</span>&gt;</span></span><br><span class="line">    &#123;% block css %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;&#123; blog.site_title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>博客 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>更多 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;navbar-form navbar-left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">          &#123;% if request.user.is_authenticated %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; request.user.username &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; request.user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/home/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>更多操作 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/set/avatar/&quot;</span>&gt;</span>修改头像<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/backend/&quot;</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout/&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          &#123;% else %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;register&#x27; %&#125;&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;login&#x27; %&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">            &#123;% load mytag %&#125;</span><br><span class="line">            &#123;% left_menu username %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="个人站点HTML"><a href="#个人站点HTML" class="headerlink" title="个人站点HTML"></a>个人站点HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;media-list&quot;</span>&gt;</span></span><br><span class="line">          &#123;% for article_obj in article_list %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;media&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;media-heading&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; username &#125;&#125;/article/&#123;&#123; article_obj.id &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; article_obj.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;media-left&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;media-object&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/media/&#123;&#123; article_obj.blog.userinfo_set.first.avatar &#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> <span class="attr">width</span>=<span class="string">&quot;75px&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;media-body&quot;</span>&gt;</span></span><br><span class="line">                  &#123;&#123; article_obj.desc &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>posted <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; article_obj.create_time|date:&#x27;Y-m-d H:i:s&#x27; &#125;&#125;<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; article_obj.blog.userinfo_set.first.username&#125;&#125;<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-comment&quot;</span>&gt;</span>评论数(&#123;&#123; article_obj.comment_num &#125;&#125;)<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-thumbs-up&quot;</span>&gt;</span>点赞数(&#123;&#123; article_obj.up_num &#125;&#125;)<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="未找到用户错误页面"><a href="#未找到用户错误页面" class="headerlink" title="未找到用户错误页面"></a>未找到用户错误页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;utf-8&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://img-blog.csdnimg.cn/img_convert/54a9969a8f2a11014d9fddf7ac2083ce.png&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404_页面不存在<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&#x27;text/css&#x27;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">8%</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">min-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;PingFang SC&#x27;</span>, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, <span class="string">&#x27;Helvetica Neue&#x27;</span>, <span class="string">&#x27;Helvetica&#x27;</span>, <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#555</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#404040</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;/home/&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;/static/img/django_pic.png&#x27;</span> <span class="attr">alt</span>=<span class="string">&#x27;BBS&#x27;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>404.<span class="tag">&lt;/<span class="name">b</span>&gt;</span> 抱歉，您访问的资源不存在。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;d&#x27;</span>&gt;</span>请确认您输入的网址是否正确，如果问题持续存在，请发邮件至 contact<span class="symbol">&amp;#64;</span>python666.com 与我们联系。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;/home/&#x27;</span>&gt;</span>返回网站首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="侧边栏及筛选功能"><a href="#侧边栏及筛选功能" class="headerlink" title="侧边栏及筛选功能"></a>侧边栏及筛选功能</h2><h3 id="制作侧边栏"><a href="#制作侧边栏" class="headerlink" title="制作侧边栏"></a>制作侧边栏</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app下创建templatetags文件夹,创建mytag.py</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line"><span class="keyword">from</span> django.db.models.functions <span class="keyword">import</span> TruncMonth</span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register.inclusion_tag(<span class="params"><span class="string">&#x27;left_menu.html&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left_menu</span>(<span class="params">username</span>):</span><br><span class="line">    user_obj = models.UserInfo.objects.<span class="built_in">filter</span>(username=username).first()</span><br><span class="line">    blog = user_obj.blog</span><br><span class="line">    <span class="comment"># 1.查询当前用户所有的分类及分类下的文章数量</span></span><br><span class="line">    <span class="comment"># 分组统计个数 先从分类表中过滤出分类 聚合函数  models后面点什么 就是按什么分组</span></span><br><span class="line">    category_list = models.Category.objects.<span class="built_in">filter</span>(blog=blog) \</span><br><span class="line">        .annotate(article_num=Count(<span class="string">&#x27;article__pk&#x27;</span>)).values(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;article_num&#x27;</span>, <span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.查询当前用户所有的标签及标签下的文章数  查询的结果为标签名字及文章数量</span></span><br><span class="line">    tag_list = models.Tag.objects.<span class="built_in">filter</span>(blog=blog).annotate(count_num=Count(<span class="string">&#x27;article__pk&#x27;</span>)) \</span><br><span class="line">        .values_list(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;count_num&#x27;</span>, <span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 3.按照年月统计所有的文章 会创建出一张虚拟表</span></span><br><span class="line">    date_list = models.Article.objects.<span class="built_in">filter</span>(blog=blog).annotate(month=TruncMonth(<span class="string">&#x27;create_date&#x27;</span>)) \</span><br><span class="line">        .values(<span class="string">&#x27;month&#x27;</span>).annotate(count_num=Count(<span class="string">&#x27;id&#x27;</span>)).values_list(<span class="string">&#x27;month&#x27;</span>, <span class="string">&#x27;count_num&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">locals</span>()</span><br><span class="line"></span><br><span class="line">使用方式：</span><br><span class="line">&#123;% load mytag %&#125;</span><br><span class="line">    &#123;% left_menu username %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># left_menu.html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>文章分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                &#123;% for category in category_list %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; username &#125;&#125;/category/&#123;&#123; category.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; category.name &#125;&#125;(&#123;&#123; category.article_num &#125;&#125;)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-danger&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>文章标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for tag in tag_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; username &#125;&#125;/tag/&#123;&#123; tag.2 &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; tag.0 &#125;&#125;(&#123;&#123; tag.1 &#125;&#125;)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>日期归档<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for date_obj in date_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; username &#125;&#125;/archive/&#123;&#123; date_obj.0|date:&#x27;Y-m&#x27; &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; date_obj.0|date:&#x27;Y年m月&#x27; &#125;&#125;(&#123;&#123; date_obj.1 &#125;&#125;)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="筛选功能"><a href="#筛选功能" class="headerlink" title="筛选功能"></a>筛选功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由：url(r&#x27;^(?P&lt;username&gt;\w+)/(?P&lt;condition&gt;category|tag|archive)/(?P&lt;param&gt;.*)/&#x27;, views.site)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">site</span>(<span class="params">request, username, **kwargs</span>):</span><br><span class="line">    <span class="comment"># 先校验当前用户名对应的个人站点是否存在</span></span><br><span class="line">    user_obj = models.UserInfo.objects.<span class="built_in">filter</span>(username=username).first()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user_obj:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;errors.html&#x27;</span>)</span><br><span class="line">    blog = user_obj.blog</span><br><span class="line">    <span class="comment"># 查询当前个人站点下的所有文章</span></span><br><span class="line">    article_list = models.Article.objects.<span class="built_in">filter</span>(blog=blog)</span><br><span class="line">    <span class="keyword">if</span> kwargs:</span><br><span class="line">        condition = kwargs.get(<span class="string">&#x27;condition&#x27;</span>)</span><br><span class="line">        param = kwargs.get(<span class="string">&#x27;param&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断用户想按照那个条件进行筛选</span></span><br><span class="line">        <span class="keyword">if</span> condition == <span class="string">&#x27;category&#x27;</span>:</span><br><span class="line">            <span class="comment"># 查询分类主键为param的文章</span></span><br><span class="line">            article_list = article_list.<span class="built_in">filter</span>(category_id=param)</span><br><span class="line">        <span class="keyword">elif</span> condition == <span class="string">&#x27;tag&#x27;</span>:</span><br><span class="line">            article_list = article_list.<span class="built_in">filter</span>(tag__id=param)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            year, month = param.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            article_list = article_list.<span class="built_in">filter</span>(create_date__year=year, create_date__month=month)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;site.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h2 id="文章详情页"><a href="#文章详情页" class="headerlink" title="文章详情页"></a>文章详情页</h2><h3 id="详情页HTML"><a href="#详情页HTML" class="headerlink" title="详情页HTML"></a>详情页HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block css %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#div_digg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">128px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.diggit</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">46px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">52px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;/static/img/upup.gif&#x27;</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buryit</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">46px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">52px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;/static/img/downdown.gif&#x27;</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.clear</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.diggword</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#808080</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; article_obj.title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article_content&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; article_obj.content|safe &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--点赞点踩开始--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div_digg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;diggit action&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;diggnum&quot;</span> <span class="attr">id</span>=<span class="string">&quot;digg_count&quot;</span>&gt;</span>&#123;&#123; article_obj.up_num &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buryit action&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;burynum&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bury_count&quot;</span>&gt;</span>&#123;&#123; article_obj.down_num &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;diggword&quot;</span> <span class="attr">id</span>=<span class="string">&quot;digg_tips&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--点赞点踩结束--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--评论楼渲染开始--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #2aabd2&quot;</span>&gt;</span>文章评论<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">          &#123;% for comment in comment_list %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>#&#123;&#123; forloop.counter &#125;&#125;楼<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; comment.comment_time|date:&#x27;Y-m-d H:i:s&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; comment.user.username &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; comment.user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;pull-right reply&quot;</span> <span class="attr">username</span>=<span class="string">&quot;&#123;&#123; comment.user.username &#125;&#125;&quot;</span> <span class="attr">comment_id</span>=<span class="string">&quot;&#123;&#123; comment.id &#125;&#125;&quot;</span>&gt;</span>回复<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    &#123;% if comment.parent_comment %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; comment.parent_comment.user.username &#125;&#125;/&quot;</span>&gt;</span>@&#123;&#123; comment.parent_comment.user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                    &#123;&#123; comment.content &#125;&#125;</span><br><span class="line">                  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--评论楼渲染结束--&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% if request.user.is_authenticated %&#125;</span><br><span class="line">    <span class="comment">&lt;!--文章评论开始--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-comment&quot;</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_comment&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_submit&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;error&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: orangered&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;register&#x27; %&#125;&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;login&#x27; %&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="comment">&lt;!--文章评论结束--&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="详情页js"><a href="#详情页js" class="headerlink" title="详情页js"></a>详情页js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="string">&#x27;.action&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            &#123;#<span class="title function_">alert</span>($(<span class="variable language_">this</span>).<span class="title function_">hasClass</span>(<span class="string">&#x27;diggit&#x27;</span>))#&#125;</span><br><span class="line">            <span class="keyword">let</span> is_Up = $(<span class="variable language_">this</span>).<span class="title function_">hasClass</span>(<span class="string">&#x27;diggit&#x27;</span>);</span><br><span class="line">            <span class="keyword">let</span> parent_tag = $(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="comment">// 朝后端发送ajax请求</span></span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;/up_or_down/&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;article_id&#x27;</span>: <span class="string">&#x27;&#123;&#123; article_obj.id &#125;&#125;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;is_up&#x27;</span>: is_Up,</span><br><span class="line">                    <span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>: <span class="string">&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (args.<span class="property">code</span> == <span class="number">1000</span>) &#123;</span><br><span class="line">                        $(<span class="string">&#x27;#digg_tips&#x27;</span>).<span class="title function_">text</span>(args.<span class="property">msg</span>)</span><br><span class="line">                        <span class="comment">// window.location.reload()</span></span><br><span class="line">                        <span class="comment">// 先获取到之前的数字</span></span><br><span class="line">                        <span class="keyword">let</span> old_num = parent_tag.<span class="title function_">children</span>().<span class="title function_">text</span>();</span><br><span class="line">                        parent_tag.<span class="title function_">children</span>().<span class="title function_">text</span>(<span class="title class_">Number</span>(old_num)+<span class="number">1</span>);</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="keyword">if</span>(args.<span class="property">code</span>==<span class="number">2000</span>)&#123;</span><br><span class="line">                        <span class="keyword">let</span> old_num = parent_tag.<span class="title function_">children</span>().<span class="title function_">text</span>();</span><br><span class="line">                        $(<span class="string">&#x27;#digg_tips&#x27;</span>).<span class="title function_">html</span>(args.<span class="property">msg</span>);</span><br><span class="line">                        parent_tag.<span class="title function_">children</span>().<span class="title function_">text</span>(<span class="title class_">Number</span>(old_num)-<span class="number">1</span>);</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="keyword">if</span>(args.<span class="property">code</span>==<span class="number">3000</span>)&#123;</span><br><span class="line">                        $(<span class="string">&#x27;#digg_tips&#x27;</span>).<span class="title function_">text</span>(args.<span class="property">msg</span>)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        $(<span class="string">&#x27;#digg_tips&#x27;</span>).<span class="title function_">html</span>(args.<span class="property">msg</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置一个全局parentId</span></span><br><span class="line">        <span class="keyword">let</span> parentId = <span class="literal">null</span>;</span><br><span class="line">        $(<span class="string">&#x27;#id_submit&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> content = $(<span class="string">&#x27;#id_comment&#x27;</span>).<span class="title function_">val</span>();</span><br><span class="line">            <span class="comment">// 先判断是否为子评论</span></span><br><span class="line">            <span class="keyword">if</span>(parentId)&#123;</span><br><span class="line">                <span class="keyword">let</span> indexNum = content.<span class="title function_">indexOf</span>(<span class="string">&#x27;\n&#x27;</span>) + <span class="number">1</span></span><br><span class="line">                <span class="comment">// 将索引之前的所有数据切除，只保留后面一部分</span></span><br><span class="line">                content = content.<span class="title function_">slice</span>(indexNum);</span><br><span class="line">            &#125;</span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>:<span class="string">&#x27;/comment/&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>:&#123;</span><br><span class="line">                    <span class="string">&#x27;article_id&#x27;</span>:<span class="string">&#x27;&#123;&#123; article_id &#125;&#125;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;parent_id&#x27;</span>:parentId,</span><br><span class="line">                    <span class="string">&#x27;content&#x27;</span>:content,</span><br><span class="line">                    <span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>:<span class="string">&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                    $(<span class="string">&#x27;#error&#x27;</span>).<span class="title function_">text</span>(args.<span class="property">msg</span>);</span><br><span class="line">                    <span class="comment">// 将评论里面的内容清空</span></span><br><span class="line">                    $(<span class="string">&#x27;#id_comment&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                    <span class="comment">// 临时渲染评论楼</span></span><br><span class="line">                    <span class="keyword">let</span> userName = <span class="string">&#x27;&#123;&#123; request.user.username &#125;&#125;&#x27;</span>;</span><br><span class="line">                    <span class="keyword">let</span> temp = <span class="string">`</span></span><br><span class="line"><span class="string">                    &lt;span&gt;<span class="subst">$&#123;userName&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                    &lt;span&gt;&lt;a href=&quot;#&quot; class=&quot;pull-right&quot;&gt;回复&lt;/a&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;</span></span><br><span class="line"><span class="string">                      <span class="subst">$&#123;content&#125;</span></span></span><br><span class="line"><span class="string">                      &lt;hr&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;`</span></span><br><span class="line">                    $(<span class="string">&#x27;.panel-body&#x27;</span>).<span class="title function_">append</span>(temp);</span><br><span class="line">                    parentId = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 给回复按钮绑定点击事件</span></span><br><span class="line">        $(<span class="string">&#x27;.reply&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 需要获取对应的评论人姓名还需要评论的主键值</span></span><br><span class="line">            <span class="comment">// 获取用户名，主键值</span></span><br><span class="line">            <span class="keyword">let</span> commentUserName = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">            parentId = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;comment_id&#x27;</span>);</span><br><span class="line">            <span class="comment">// 拼接信息塞给评论框</span></span><br><span class="line">            $(<span class="string">&#x27;#id_comment&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;@&#x27;</span>+commentUserName+<span class="string">&#x27;\n&#x27;</span>).<span class="title function_">focus</span>();</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="comment">// 子评论需要做的事情 评论框自动聚焦，将回复按钮所在哪一行的评论人的用户名拼接成@username 评论框自动换行</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h2 id="文章点赞点踩"><a href="#文章点赞点踩" class="headerlink" title="文章点赞点踩"></a>文章点赞点踩</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">up_or_down</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 先检验用户是否登录，判断文章是否为自己点的，判断当前用户是否已经点过了后操作数据库</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="keyword">if</span> request.user.is_authenticated():</span><br><span class="line">            article_id = request.POST.get(<span class="string">&#x27;article_id&#x27;</span>)</span><br><span class="line">            is_up = request.POST.get(<span class="string">&#x27;is_up&#x27;</span>)</span><br><span class="line">            is_up = json.loads(is_up)</span><br><span class="line">            <span class="built_in">print</span>(is_up)</span><br><span class="line">            <span class="comment"># 根据文章id查询文章对象，根据文章对象查询作者，作者与request.user做比较</span></span><br><span class="line">            article_obj = models.Article.objects.<span class="built_in">filter</span>(pk=article_id).first()</span><br><span class="line">            <span class="comment"># 注意跨表查询是有多个对象时需要加_set.first()才是查询出来的用户对象</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> article_obj.blog.userinfo_set.first() == request.user:</span><br><span class="line">                <span class="comment"># print(article_obj.blog.userinfo_set.first(), request.user)</span></span><br><span class="line">                <span class="comment"># 根据点赞点踩表查询用户是否点赞  同步增加文章表中的普通字段</span></span><br><span class="line">                is_click = models.UpAndDown.objects.<span class="built_in">filter</span>(user=request.user, article=article_obj)</span><br><span class="line">                <span class="built_in">print</span>(is_click)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> is_click:</span><br><span class="line">                    <span class="comment"># 点赞</span></span><br><span class="line">                    <span class="keyword">if</span> is_up:</span><br><span class="line">                        models.Article.objects.<span class="built_in">filter</span>(pk=article_id).update(up_num=F(<span class="string">&#x27;up_num&#x27;</span>) + <span class="number">1</span>)</span><br><span class="line">                        back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;推荐成功&#x27;</span></span><br><span class="line">                    <span class="comment"># 点踩</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        models.Article.objects.<span class="built_in">filter</span>(pk=article_id).update(down_num=F(<span class="string">&#x27;down_num&#x27;</span>) + <span class="number">1</span>)</span><br><span class="line">                        back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;反对成功&#x27;</span></span><br><span class="line">                    models.UpAndDown.objects.create(user=request.user, article=article_obj, is_up=is_up)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="string">&#x27;2000&#x27;</span></span><br><span class="line">                    <span class="keyword">if</span> is_up:</span><br><span class="line">                        models.Article.objects.<span class="built_in">filter</span>(pk=article_id).update(up_num=F(<span class="string">&#x27;up_num&#x27;</span>) - <span class="number">1</span>)</span><br><span class="line">                        back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;取消推荐&#x27;</span></span><br><span class="line">                    <span class="comment"># 点踩</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        models.Article.objects.<span class="built_in">filter</span>(pk=article_id).update(down_num=F(<span class="string">&#x27;down_num&#x27;</span>) - <span class="number">1</span>)</span><br><span class="line">                        back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;取消反对&#x27;</span></span><br><span class="line">                    models.UpAndDown.objects.<span class="built_in">filter</span>(user=request.user, article=article_obj).delete()</span><br><span class="line">                <span class="comment"># back_dic[&#x27;code&#x27;] = &#x27;2000&#x27;</span></span><br><span class="line">                <span class="comment"># back_dic[&#x27;msg&#x27;] = &#x27;取消成功&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="string">&#x27;3000&#x27;</span></span><br><span class="line">                back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;不能给自己的文章点喔&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="string">&#x27;4000&#x27;</span></span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;请先&lt;a href=&quot;/login/&quot;&gt;登录&lt;/a&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dic)</span><br></pre></td></tr></table></figure><h2 id="文章评论"><a href="#文章评论" class="headerlink" title="文章评论"></a>文章评论</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">comment</span>(<span class="params">request</span>):</span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="keyword">if</span> request.user.is_authenticated():</span><br><span class="line">            article_id = request.POST.get(<span class="string">&#x27;article_id&#x27;</span>)</span><br><span class="line">            content = request.POST.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">            parent_id = request.POST.get(<span class="string">&#x27;parent_id&#x27;</span>)</span><br><span class="line">            <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">                models.Article.objects.<span class="built_in">filter</span>(pk=article_id).update(comment_num=F(<span class="string">&#x27;comment_num&#x27;</span>) + <span class="number">1</span>)</span><br><span class="line">                models.Comment.objects.create(user=request.user, article_id=article_id, content=content,</span><br><span class="line">                                              parent_comment_id=parent_id)</span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;评论成功&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">2000</span></span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;用户未登录&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dic)</span><br></pre></td></tr></table></figure><h2 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h2><h3 id="前端模板backend-base-html"><a href="#前端模板backend-base-html" class="headerlink" title="前端模板backend_base.html"></a>前端模板backend_base.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;js/jquery-3.6.4.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/css/bootstrap.min.css&#x27; %&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    &#123;% block css %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">data-target</span>=<span class="string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;&#123; request.user.blog.site_title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>博客<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>更多 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;navbar-form navbar-left&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">                &#123;% if request.user.is_authenticated %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; request.user.username &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; request.user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>更多操作 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;.bs-example-modal-lg&quot;</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>修改头像<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/backend/&quot;</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout/&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;register&#x27; %&#125;&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;login&#x27; %&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade bs-example-modal-lg&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myLargeModalLabel&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog modal-lg&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; request.user.username &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                                           <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>原密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;old_password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_old_password&quot;</span></span></span><br><span class="line"><span class="tag">                                           <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>新密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;new_password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_new_password&quot;</span></span></span><br><span class="line"><span class="tag">                                           <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;confirm_password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_confirm_password&quot;</span></span></span><br><span class="line"><span class="tag">                                           <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;password_error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_edit&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-group&quot;</span> <span class="attr">id</span>=<span class="string">&quot;accordion&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tablist&quot;</span> <span class="attr">aria-multiselectable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">id</span>=<span class="string">&quot;headingOne&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-parent</span>=<span class="string">&quot;#accordion&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#collapseOne&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">aria-expanded</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;collapseOne&quot;</span>&gt;</span></span><br><span class="line">                                更多操作</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;collapseOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;panel-collapse collapse in&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">aria-labelledby</span>=<span class="string">&quot;headingOne&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/add/article/&quot;</span>&gt;</span>添加文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>添加随笔<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>草稿箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- Nav tabs --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tablist&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#home&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;home&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span></span></span><br><span class="line"><span class="tag">                                                              <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#profile&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;profile&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span></span></span><br><span class="line"><span class="tag">                                               <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>随笔<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#messages&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;messages&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span></span></span><br><span class="line"><span class="tag">                                               <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>草稿<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#file&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;file&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#settings&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;settings&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span></span></span><br><span class="line"><span class="tag">                                               <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>设置<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane active&quot;</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">                        &#123;% block article_page %&#125;</span><br><span class="line"></span><br><span class="line">                        &#123;% endblock %&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;profile&quot;</span>&gt;</span>随笔页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span>草稿页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;settings&quot;</span>&gt;</span>设置页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="backend-x2F-backend-html"><a href="#backend-x2F-backend-html" class="headerlink" title="backend&#x2F;backend.html"></a>backend&#x2F;backend.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;backend/backend_base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block article_page %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-hover&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>评论数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>点赞数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        &#123;% for article in article_queryset %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123; request.user.username &#125;&#125;/article/&#123;&#123; article.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; article.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; article.comment_num &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; article.up_num &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger del&quot;</span> <span class="attr">del_id</span>=<span class="string">&quot;&#123;&#123; article.id &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">id</span>=<span class="string">&quot;del_&#123;&#123; article.id &#125;&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; page_obj.page_html|safe &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;layer/layer.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        $(&#x27;.del&#x27;).click(function () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            let id = $(this).attr(&#x27;del_id&#x27;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            let currentButton = $(this)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            layer.confirm(&#x27;您确定要删除吗？&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                btn: [&#x27;确定&#x27;, &#x27;取消&#x27;]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;, function () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                $.ajax(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    url: &#x27;&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    type: &#x27;post&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    data: &#123;&#x27;id&#x27;: id, &#x27;csrfmiddlewaretoken&#x27;: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">csrf_token</span> &#125;&#125;</span><span class="language-xml">&#x27;&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    success: function (args) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        if (args.code == 1000) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            layer.msg(args.msg, &#123;icon: 1&#125;, function () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                                window.location.reload();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            // 2.利用DOM操作 动态刷新tr标签</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            &#123;#layer.msg(args.msg,&#123;icon:1&#125;)#&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            &#123;#currentButton.parent().parent().remove()#&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            layer.msg(args.msg)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;, function () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                layer.msg(&#x27;取消删除&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="后端逻辑"><a href="#后端逻辑" class="headerlink" title="后端逻辑"></a>后端逻辑</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backend</span>(<span class="params">request</span>):</span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;1000&#x27;</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功&#x27;</span>&#125;</span><br><span class="line">    article_list = models.Article.objects.<span class="built_in">filter</span>(blog=request.user.blog)</span><br><span class="line">    page_obj = Pagination(current_page=request.GET.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>), all_count=article_list.count())</span><br><span class="line">    article_queryset = article_list[page_obj.start:page_obj.end]</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        article_id = request.POST.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        models.ArticleToTag.objects.<span class="built_in">filter</span>(article_id=article_id).delete()</span><br><span class="line">        models.Article.objects.<span class="built_in">filter</span>(pk=article_id).delete()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dic)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;backend/backend.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h2 id="富文本编辑器上传图片"><a href="#富文本编辑器上传图片" class="headerlink" title="富文本编辑器上传图片"></a>富文本编辑器上传图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">image_upload</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    //成功时 url当前文件所在的后端路径</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">        &quot;error&quot; : 0,</span></span><br><span class="line"><span class="string">        &quot;url&quot; : &quot;http://www.example.com/path/to/file.ext&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//失败时</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">        &quot;error&quot; : 1,</span></span><br><span class="line"><span class="string">        &quot;message&quot; : &quot;错误信息&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;error&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># imgFile: 文件form名称</span></span><br><span class="line">        <span class="comment"># print(request.FILES)</span></span><br><span class="line">        file_obj = request.FILES.get(<span class="string">&#x27;imgFile&#x27;</span>)</span><br><span class="line">        <span class="comment"># 后手动拼接存储文件的路径</span></span><br><span class="line">        file_dir = os.path.join(BASE_DIR, <span class="string">&#x27;media&#x27;</span>, <span class="string">&#x27;article_img&#x27;</span>)</span><br><span class="line">        <span class="comment"># 优化操作，优先判断文件夹是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(file_dir):</span><br><span class="line">            os.mkdir(file_dir)  <span class="comment"># 只会创建一层目录结构</span></span><br><span class="line">            <span class="comment"># 拼接图片的完整路径</span></span><br><span class="line">        <span class="comment"># 做一个唯一标识的拼接</span></span><br><span class="line">        img_name = <span class="built_in">str</span>(uuid4()) + <span class="string">&#x27;-&#x27;</span> + file_obj.name</span><br><span class="line">        file_path = os.path.join(file_dir, img_name)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> file_obj:</span><br><span class="line">                f.write(data)</span><br><span class="line">        back_dic[<span class="string">&#x27;url&#x27;</span>] = <span class="string">f&#x27;/media/article_img/<span class="subst">&#123;img_name&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(back_dic)</span><br></pre></td></tr></table></figure><h3 id="add-article-html"><a href="#add-article-html" class="headerlink" title="add_article.html"></a>add_article.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;backend/backend_base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block article_page %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>添加文章<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_content&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;% for category in category_list %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span><span class="attr">name</span>=<span class="string">&quot;category&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; category.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; category.name &#125;&#125;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;% for tag in tag_list %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; tag.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; tag.name &#125;&#125;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info btn-block&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;kindeditor/kindeditor-all.js&#x27;%&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;kindeditor/lang/zh-CN.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">KindEditor</span>.<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params">K</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">editor</span> = K.<span class="title function_">create</span>(<span class="string">&#x27;#id_content&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">width</span>:<span class="string">&#x27;100%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">height</span>:<span class="string">&#x27;400px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">resizeType</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                uploadJson : <span class="string">&#x27;/image_upload/&#x27;</span>,  <span class="comment">// 上传图片的后端接口路由</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 需要提交额外的参数</span></span></span><br><span class="line"><span class="language-javascript">                extraFileUploadParams : &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>:<span class="string">&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="add-article-request"><a href="#add-article-request" class="headerlink" title="add_article(request)"></a>add_article(request)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_article</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.POST.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        content = request.POST.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">        category_id = request.POST.get(<span class="string">&#x27;category&#x27;</span>)</span><br><span class="line">        tag_id_list = request.POST.getlist(<span class="string">&#x27;tag&#x27;</span>)</span><br><span class="line">        <span class="comment"># 使用模块防范xss攻击</span></span><br><span class="line">        soup = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        <span class="comment"># 获取所有标签</span></span><br><span class="line">        tags = soup.find_all()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">            <span class="built_in">print</span>(tag.name)</span><br><span class="line">            <span class="keyword">if</span> tag.name == <span class="string">&#x27;script&#x27;</span>:</span><br><span class="line">                <span class="comment"># 删除标签</span></span><br><span class="line">                tag.decompose()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 文章简介，先暴力截取</span></span><br><span class="line">        <span class="comment"># desc = content[0:150]</span></span><br><span class="line">        desc = soup.text[<span class="number">0</span>:<span class="number">150</span>]</span><br><span class="line">        <span class="comment"># 保存处理之后的结果字符</span></span><br><span class="line">        article_obj = models.Article.objects.create(title=title, desc=desc, content=<span class="built_in">str</span>(soup),</span><br><span class="line">                                                    blog=request.user.blog, category_id=category_id)</span><br><span class="line">        <span class="comment"># 自己操作关系表，一次性可能插入多条数据，使用批量插入bulk_creat</span></span><br><span class="line">        article_obj_list = []</span><br><span class="line">        <span class="keyword">for</span> tag_id <span class="keyword">in</span> tag_id_list:</span><br><span class="line">            article_tag_obj = models.ArticleToTag(article=article_obj, tag_id=tag_id)</span><br><span class="line">            article_obj_list.append(article_tag_obj)</span><br><span class="line">            <span class="comment"># article_obj_list.append(models.ArticleToTag(article=article_obj, tag_id=tag_id))</span></span><br><span class="line">        <span class="comment"># 批量插入数据</span></span><br><span class="line">        models.ArticleToTag.objects.bulk_create(article_obj_list)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/backend/&#x27;</span>)</span><br><span class="line">    <span class="comment"># 查询当前用户创建的所有分类和标签</span></span><br><span class="line">    category_list = models.Category.objects.<span class="built_in">filter</span>(blog=request.user.blog)</span><br><span class="line">    tag_list = models.Tag.objects.<span class="built_in">filter</span>(blog=request.user.blog)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;backend/add_article.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h2 id="修改用户头像"><a href="#修改用户头像" class="headerlink" title="修改用户头像"></a>修改用户头像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_avatar</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        file_obj = request.FILES.get(<span class="string">&#x27;avatar&#x27;</span>)</span><br><span class="line">        <span class="comment"># 错误写法;会省略media文件前缀</span></span><br><span class="line">        <span class="comment"># models.UserInfo.objects.filter(pk=request.user.id).update(avatar=file_obj)</span></span><br><span class="line">        <span class="comment"># 1.手动拼接</span></span><br><span class="line">        <span class="comment"># 2.换一种更新方式.</span></span><br><span class="line">        user_obj = request.user</span><br><span class="line">        user_obj.avatar = file_obj</span><br><span class="line">        user_obj.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/home/&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;set_avatar.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h3 id="set-avatar-html"><a href="#set-avatar-html" class="headerlink" title="set_avatar.html"></a>set_avatar.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;js/jquery-3.6.4.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/css/bootstrap.min.css&#x27; %&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/set/avatar/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            原头像:</span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/media/&#123;&#123; request.user.avatar &#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;img_file&quot;</span>&gt;</span>新头像</span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;img/default.png&#x27; %&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img_avatar&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 20px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img_file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 文本域变化事件</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#img_file&#x27;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.先生成文件阅读器对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> <span class="title class_">FileReaderObj</span> = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.获取用户上传的头像文件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> fileObj = $(<span class="variable language_">this</span>)[<span class="number">0</span>].<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.将文件对象交给阅读器对象 并且是异步操作 不会等待文件阅读完毕,会执行下一句代码</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">FileReaderObj</span>.<span class="title function_">readAsDataURL</span>(fileObj)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4.利用文件阅读器对象将文件展示到前端页面  实质上是修改图片的src属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 等待阅读器加载完毕后再执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">FileReaderObj</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#img_avatar&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, <span class="title class_">FileReaderObj</span>.<span class="property">result</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">主要功能总结</span><br><span class="line"><span class="code">表设计开发流程(流程粗糙|可以细化)</span></span><br><span class="line"><span class="code">  注册功能</span></span><br><span class="line"><span class="code">  forms组件使用</span></span><br><span class="line"><span class="code">    头像动态展示</span></span><br><span class="line"><span class="code">    错误信息提示</span></span><br><span class="line"><span class="code">  登陆功能</span></span><br><span class="line"><span class="code">  图片验证码</span></span><br><span class="line"><span class="code">  首页展示</span></span><br><span class="line"><span class="code">  media配置</span></span><br><span class="line"><span class="code">    主动暴露任意资源接口</span></span><br><span class="line"><span class="code">  个人站点展示</span></span><br><span class="line"><span class="code">  侧边栏展示</span></span><br><span class="line"><span class="code">    侧边栏筛选</span></span><br><span class="line"><span class="code">    侧边栏inclusion_tag</span></span><br><span class="line"><span class="code">  文章详情页</span></span><br><span class="line"><span class="code">  点赞点踩</span></span><br><span class="line"><span class="code">    评论</span></span><br><span class="line"><span class="code">  后台管理</span></span><br><span class="line"><span class="code">  增加文章</span></span><br><span class="line"><span class="code">  更换头像</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django统筹</title>
      <link href="/2022/07/28/Django%E7%BB%9F%E7%AD%B9/"/>
      <url>/2022/07/28/Django%E7%BB%9F%E7%AD%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="Django阶段"><a href="#Django阶段" class="headerlink" title="Django阶段"></a>Django阶段</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RBAC-Django缓存</title>
      <link href="/2022/07/24/RBAC-Django%E7%BC%93%E5%AD%98/"/>
      <url>/2022/07/24/RBAC-Django%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="基于角色的权限控制（django内置auth体系）"><a href="#基于角色的权限控制（django内置auth体系）" class="headerlink" title="基于角色的权限控制（django内置auth体系）"></a>基于角色的权限控制（django内置auth体系）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RBAC :是基于角色的访问控制(Role-Based Access Control)</span></span><br><span class="line"><span class="comment"># django的auth就是内置了一套基于RBAC的权限系统</span></span><br><span class="line"><span class="comment"># django中</span></span><br><span class="line">user表</span><br><span class="line">    permssion表</span><br><span class="line">    group表</span><br><span class="line">    user_groups表是user和group的中间表</span><br><span class="line">    group_permissions表是group和permssion中间表</span><br><span class="line">    user_user_permissions表是user和permission中间表</span><br></pre></td></tr></table></figure><h2 id="前后台权限控制"><a href="#前后台权限控制" class="headerlink" title="前后台权限控制"></a>前后台权限控制</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）后台用户对各表操作，是后台项目完成的，我们可以直接借助admin后台项目（Django自带的）</span><br><span class="line"></span><br><span class="line">2）前台用户的权限管理如何处理</span><br><span class="line"><span class="code">    定义了一堆数据接口的视图类，不同的登录用户是否能访问这些视图类，能就代表有权限，不能就代表无权限</span></span><br><span class="line"><span class="code">    前台用户权限用drf框架的 三大认证(认证、权限、频率)</span></span><br></pre></td></tr></table></figure><h2 id="权限三表"><a href="#权限三表" class="headerlink" title="权限三表"></a>权限三表</h2><p><img src="/2022/07/24/RBAC-Django%E7%BC%93%E5%AD%98/1.jpg" alt="1"></p><h2 id="权限六表"><a href="#权限六表" class="headerlink" title="权限六表"></a>权限六表</h2><p><img src="/2022/07/24/RBAC-Django%E7%BC%93%E5%AD%98/2.jpg" alt="2"></p><h2 id="实操案例"><a href="#实操案例" class="headerlink" title="实操案例"></a>实操案例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.username</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.admin <span class="keyword">import</span> UserAdmin <span class="keyword">as</span> DjangoUserAdmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义User表后，admin界面管理User类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserAdmin</span>(<span class="title class_ inherited__">DjangoUserAdmin</span>):</span><br><span class="line">    <span class="comment"># 添加用户可操作字段</span></span><br><span class="line">    add_fieldsets = (</span><br><span class="line">        (<span class="literal">None</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;classes&#x27;</span>: (<span class="string">&#x27;wide&#x27;</span>,),</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password1&#x27;</span>, <span class="string">&#x27;password2&#x27;</span>, <span class="string">&#x27;is_staff&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>, <span class="string">&#x27;groups&#x27;</span>, <span class="string">&#x27;user_permissions&#x27;</span>),</span><br><span class="line">        &#125;),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 展示用户呈现的字段</span></span><br><span class="line">    list_display = (<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>, <span class="string">&#x27;is_staff&#x27;</span>, <span class="string">&#x27;is_active&#x27;</span>, <span class="string">&#x27;is_superuser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">admin.site.register(models.User, UserAdmin)</span><br><span class="line">admin.site.register(models.Book)</span><br><span class="line">admin.site.register(models.Car)</span><br><span class="line"><span class="comment"># 登陆到admin后台进行操作</span></span><br></pre></td></tr></table></figure><h2 id="Django缓存"><a href="#Django缓存" class="headerlink" title="Django缓存"></a>Django缓存</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前端混合开发缓存的使用</span></span><br><span class="line">-缓存的位置，通过配置文件来操作（以文件为例）</span><br><span class="line">    -缓存的粒度：</span><br><span class="line">    -全站缓存</span><br><span class="line">        中间件</span><br><span class="line">            MIDDLEWARE = [</span><br><span class="line">                <span class="comment"># 最上面，响应中间件执行顺序由下往上</span></span><br><span class="line">                <span class="string">&#x27;django.middleware.cache.UpdateCacheMiddleware&#x27;</span>,</span><br><span class="line">                ...</span><br><span class="line">                <span class="comment"># 最下面，请求中间件执行顺序从上往下</span></span><br><span class="line">                <span class="string">&#x27;django.middleware.cache.FetchFromCacheMiddleware&#x27;</span>,</span><br><span class="line">            ]</span><br><span class="line">            CACHE_MIDDLEWARE_SECONDS=<span class="number">10</span>  <span class="comment"># 全站缓存时间</span></span><br><span class="line">        -单页面缓存</span><br><span class="line">        在视图函数上加装饰器</span><br><span class="line">            <span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="meta">            @cache_page(<span class="params"><span class="number">5</span></span>)  </span><span class="comment"># 缓存5s钟</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">test_cache</span>(<span class="params">request</span>):</span><br><span class="line">                <span class="keyword">import</span> time</span><br><span class="line">                ctime=time.time()</span><br><span class="line">                <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,context=&#123;<span class="string">&#x27;ctime&#x27;</span>:ctime&#125;)</span><br><span class="line">        </span><br><span class="line">        -页面局部缓存</span><br><span class="line">        &#123;% load cache %&#125;</span><br><span class="line">            &#123;% cache <span class="number">5</span> <span class="string">&#x27;name&#x27;</span> %&#125;  <span class="comment"># 5表示5s钟，name是唯一key值</span></span><br><span class="line">             &#123;&#123; ctime &#125;&#125;</span><br><span class="line">            &#123;% endcache %&#125;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 前后端分离缓存的使用</span></span><br><span class="line">- 如何使用</span><br><span class="line">        <span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line">        cache.<span class="built_in">set</span>(<span class="string">&#x27;key&#x27;</span>,value可以是任意数据类型)</span><br><span class="line">        cache.get(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">    -应用场景：</span><br><span class="line">    -第一次查询所有图书，你通过多表联查序列化之后的数据，直接缓存起来</span><br><span class="line">        -后续，直接先去缓存查，如果有直接返回，没有，再去连表查，返回之前再缓存</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django中auth组件的使用</title>
      <link href="/2022/07/22/Django%E4%B8%ADauth%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/22/Django%E4%B8%ADauth%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Auth模块"><a href="#Auth模块" class="headerlink" title="Auth模块"></a>Auth模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">其实在创建好一个django项目之后,直接执行数据库迁移命令会自动生成很多表</span></span><br><span class="line"><span class="string">django_session</span></span><br><span class="line"><span class="string">auth_user</span></span><br><span class="line"><span class="string">django在启动之后就可以直接访问admin路由，需要输入用户名和密码，数据参考的就是auth_user表,并且还必须是管理员用户才能进入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建超级用户(管理员)</span></span><br><span class="line"><span class="string">python3 manage.py createsuperuser</span></span><br><span class="line"><span class="string">依赖于auth_user表完成用户相关的所有功能</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.比对用户名和密码是否正确</span></span><br><span class="line">user_obj = auth.authenticate(request,username=username,password=password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 括号内必须同时传入用户名和密码</span></span><br><span class="line"><span class="built_in">print</span>(user_obj)  <span class="comment"># 用户对象  jason   数据不符合则返回None</span></span><br><span class="line"><span class="built_in">print</span>(user_obj.username)  <span class="comment"># jason</span></span><br><span class="line"><span class="built_in">print</span>(user_obj.password)  <span class="comment"># 密文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.保存用户状态</span></span><br><span class="line">auth.login(request,user_obj)  <span class="comment"># 类似于request.session[key] = user_obj</span></span><br><span class="line"><span class="comment"># 主要执行了该方法 你就可以在任何地方通过request.user获取到当前登陆的用户对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.判断当前用户是否登陆</span></span><br><span class="line">request.user.is_authenticated()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取当前登陆用户</span></span><br><span class="line">request.user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.校验用户是否登陆装饰器</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="comment"># 局部配置</span></span><br><span class="line"><span class="meta">@login_required(<span class="params">login_url=<span class="string">&#x27;/login/&#x27;</span></span>) </span></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">LOGIN_URL = <span class="string">&#x27;/login/&#x27;</span></span><br><span class="line"><span class="number">1.</span>如果局部和全局都有 该听谁的?</span><br><span class="line">    局部 &gt; 全局</span><br><span class="line"><span class="number">2.</span>局部和全局哪个好呢?全局的好处在于无需重复写代码 但是跳转的页面却很单一</span><br><span class="line">    局部的好处在于不同的视图函数在用户没有登陆的情况下可以跳转到不同的页面</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.比对原密码</span></span><br><span class="line">request.user.check_password(old_password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.修改密码</span></span><br><span class="line">request.user.set_password(new_password)  <span class="comment"># 仅仅是在修改对象的属性</span></span><br><span class="line">request.user.save()  <span class="comment"># 这一步才是真正的操作数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.注销</span></span><br><span class="line">auth.logout(request) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.注册</span></span><br><span class="line"><span class="comment"># 操作auth_user表写入数据</span></span><br><span class="line">User.objects.create(username=username,password=password)  <span class="comment"># 写入数据  不能用create 密码没有加密处理</span></span><br><span class="line"><span class="comment"># 创建普通用户</span></span><br><span class="line">User.objects.create_user(username=username,password=password)</span><br><span class="line"><span class="comment"># 创建超级用户(了解):使用代码创建超级用户 邮箱是必填的 而用命令创建则可以不填</span></span><br><span class="line">User.objects.create_superuser(username=username,email=<span class="string">&#x27;123@qq.com&#x27;</span>,password=password)</span><br></pre></td></tr></table></figure><h3 id="如何扩展auth-user表"><a href="#如何扩展auth-user表" class="headerlink" title="如何扩展auth_user表"></a>如何扩展auth_user表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User,AbstractUser</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一种:一对一关系  不推荐</span></span><br><span class="line"><span class="comment"># class UserDetail(models.Model):</span></span><br><span class="line"><span class="comment">#     phone = models.BigIntegerField()</span></span><br><span class="line"><span class="comment">#     user = models.OneToOneField(to=&#x27;User&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种:面向对象的继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    phone = models.BigIntegerField()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    如果继承了AbstractUser</span></span><br><span class="line"><span class="string">    那么在执行数据库迁移命令的时候auth_user表就不会再创建出来了</span></span><br><span class="line"><span class="string">    而UserInfo表中会出现auth_user所有的字段外加自己扩展的字段</span></span><br><span class="line"><span class="string">    这么做的好处在于你能够直接点击你自己的表更加快速的完成操作及扩展</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    前提:</span></span><br><span class="line"><span class="string">        1.在继承之前没有执行过数据库迁移命令</span></span><br><span class="line"><span class="string">            auth_user没有被创建，如果当前库已经创建了那么你就重新换一个库</span></span><br><span class="line"><span class="string">        2.继承的类里面不要覆盖AbstractUser里面的字段名</span></span><br><span class="line"><span class="string">            表里面有的字段都不要动，只扩展额外字段即可</span></span><br><span class="line"><span class="string">        3.需要在配置文件中告诉django你要用UserInfo替代auth_user(******)</span></span><br><span class="line"><span class="string">            AUTH_USER_MODEL = &#x27;app01.UserInfo&#x27;  &#x27;应用名.表名&#x27;</span></span><br><span class="line"><span class="string">你如果自己写表替代了auth_user那么</span></span><br><span class="line"><span class="string">auth模块的功能还是照常使用，参考的表页由原来的auth_user变成了UserInfo</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django中间件及思想</title>
      <link href="/2022/07/17/Django%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E6%80%9D%E6%83%B3/"/>
      <url>/2022/07/17/Django%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="django中间件"><a href="#django中间件" class="headerlink" title="django中间件"></a>django中间件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">django中间件是django的门户</span><br><span class="line"><span class="number">1.</span>请求来的时候需要先经过中间件才能到达真正的django后端</span><br><span class="line"><span class="number">2.</span>响应走的时候最后也需要经过中间件才能发送出去</span><br><span class="line">django自带七个中间件</span><br><span class="line">研究django中间件代码规律</span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SessionMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)</span><br><span class="line">        request.session = self.SessionStore(session_key)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CsrfViewMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        csrf_token = self._get_token(request)</span><br><span class="line">        <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># Use same token next time.</span></span><br><span class="line">            request.META[<span class="string">&#x27;CSRF_COOKIE&#x27;</span>] = csrf_token</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, callback, callback_args, callback_kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> self._accept(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthenticationMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        request.user = SimpleLazyObject(<span class="keyword">lambda</span>: get_user(request))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">django支持程序员自定义中间件并且暴露五个可以自定义的方法</span></span><br><span class="line"><span class="string">1.必须掌握</span></span><br><span class="line"><span class="string">process_request</span></span><br><span class="line"><span class="string">process_response</span></span><br><span class="line"><span class="string">2.了解即可</span></span><br><span class="line"><span class="string">process_view</span></span><br><span class="line"><span class="string">process_template_response</span></span><br><span class="line"><span class="string">process_exception</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="如何自定义中间件"><a href="#如何自定义中间件" class="headerlink" title="如何自定义中间件"></a>如何自定义中间件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.在项目名或者应用名下创建一个任意名称的文件夹</span></span><br><span class="line"><span class="string">2.在该文件夹内创建一个任意名称的py文件</span></span><br><span class="line"><span class="string">3.在该py文件内需要书写类(这个类必须继承MiddlewareMixin)</span></span><br><span class="line"><span class="string">然后在这个类里面就可以自定义五个方法了</span></span><br><span class="line"><span class="string">4.需要将类的路径以字符串的形式注册到配置文件中才能生效</span></span><br><span class="line"><span class="string">MIDDLEWARE = [</span></span><br><span class="line"><span class="string">    &#x27;django.middleware.security.SecurityMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.middleware.common.CommonMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;你自己写的中间件的路径1&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;你自己写的中间件的路径2&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;你自己写的中间件的路径3&#x27;,</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">1.必须掌握</span></span><br><span class="line"><span class="string">process_request </span></span><br><span class="line"><span class="string">1.请求来的时候需要经过每一个中间件里面的process_request方法</span></span><br><span class="line"><span class="string">结果的顺序是按照配置文件中注册的中间件从上往下的顺序依次执行</span></span><br><span class="line"><span class="string">2.如果中间件里面没有定义该方法，那么直接跳过执行下一个中间件</span></span><br><span class="line"><span class="string">3.如果该方法返回了HttpResponse对象，那么请求将不再继续往后执行</span></span><br><span class="line"><span class="string">而是直接原路返回(校验失败不允许访问...)</span></span><br><span class="line"><span class="string">process_request方法就是用来做全局相关的所有限制功能</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">process_response</span></span><br><span class="line"><span class="string">1.响应走的时候需要结果每一个中间件里面的process_response方法</span></span><br><span class="line"><span class="string">该方法有两个额外的参数request,response</span></span><br><span class="line"><span class="string">2.该方法必须返回一个HttpResponse对象</span></span><br><span class="line"><span class="string">1.默认返回的就是形参response</span></span><br><span class="line"><span class="string">2.你也可以自己返回自己的</span></span><br><span class="line"><span class="string">3.顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">如果你没有定义的话 直接跳过执行下一个</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">研究如果在第一个process_request方法就已经返回了HttpResponse对象，那么响应走的时候是经过所有的中间件里面的process_response还是有其他情况</span></span><br><span class="line"><span class="string">是其他情况</span></span><br><span class="line"><span class="string">就是会直接走同级别（自定义中间件类）的process_reponse返回</span></span><br><span class="line"><span class="string">2.了解即可</span></span><br><span class="line"><span class="string">process_view</span></span><br><span class="line"><span class="string">路由匹配成功之后执行视图函数之前，会自动执行中间件里面的该放法</span></span><br><span class="line"><span class="string">顺序是按照配置文件中注册的中间件从上往下的顺序依次执行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">process_template_response</span></span><br><span class="line"><span class="string">返回的HttpResponse对象有render属性的时候才会触发</span></span><br><span class="line"><span class="string">顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">process_exception</span></span><br><span class="line"><span class="string">当视图函数中出现异常的情况下触发</span></span><br><span class="line"><span class="string">顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="csrf跨站请求伪造"><a href="#csrf跨站请求伪造" class="headerlink" title="csrf跨站请求伪造"></a>csrf跨站请求伪造</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">钓鱼网站</span></span><br><span class="line"><span class="string">我搭建一个跟正规网站一模一样的界面(中国银行)</span></span><br><span class="line"><span class="string">用户不小心进入到了我们的网站，用户给某个人打钱</span></span><br><span class="line"><span class="string">打钱的操作确确实实是提交给了中国银行的系统，用户的钱也确确实实减少了</span></span><br><span class="line"><span class="string">但是唯一不同的是打钱的账户不是用户想要打的账户变成了一个莫名其妙的账户</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">内部本质</span></span><br><span class="line"><span class="string">我们在钓鱼网站的页面 针对对方账户 只给用户提供一个没有name属性的普通input框</span></span><br><span class="line"><span class="string">然后我们在内部隐藏一个已经写好name和value的input框</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">规避上述问题:csrf跨站请求伪造校验</span></span><br><span class="line"><span class="string">网站在给用户返回一个具有提交数据功能页面的时候会给这个页面加一个唯一标识</span></span><br><span class="line"><span class="string">当这个页面朝后端发送post请求的时候 我的后端会先校验唯一标识，如果唯一标识不对直接拒绝(403forbbiden)如果成功则正常执行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="如何符合校验"><a href="#如何符合校验" class="headerlink" title="如何符合校验"></a>如何符合校验</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># form表单如何符合校验</span></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;p&gt;username:&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;target_user:&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;target_user&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;money:&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;money&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ajax如何符合校验</span></span><br><span class="line">// 第一种 利用标签查找获取页面上的随机字符串</span><br><span class="line">&#123;<span class="comment">#data:&#123;&quot;username&quot;:&#x27;jason&#x27;,&#x27;csrfmiddlewaretoken&#x27;:$(&#x27;[name=csrfmiddlewaretoken]&#x27;).val()&#125;,#&#125;</span></span><br><span class="line">// 第二种 利用模版语法提供的快捷书写</span><br><span class="line">&#123;<span class="comment">#data:&#123;&quot;username&quot;:&#x27;jason&#x27;,&#x27;csrfmiddlewaretoken&#x27;:&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;&#125;,#&#125;</span></span><br><span class="line">// 第三种 通用方式直接拷贝js代码并应用到自己的html页面上即可</span><br><span class="line">data:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&#x27;jason&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> cookieValue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">cookie</span> &amp;&amp; <span class="variable language_">document</span>.<span class="property">cookie</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookies = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cookies.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> cookie = jQuery.<span class="title function_">trim</span>(cookies[i]);</span><br><span class="line">            <span class="comment">// Does this cookie string begin with the name we want?</span></span><br><span class="line">            <span class="keyword">if</span> (cookie.<span class="title function_">substring</span>(<span class="number">0</span>, name.<span class="property">length</span> + <span class="number">1</span>) === (name + <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line">                cookieValue = <span class="built_in">decodeURIComponent</span>(cookie.<span class="title function_">substring</span>(name.<span class="property">length</span> + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> csrftoken = <span class="title function_">getCookie</span>(<span class="string">&#x27;csrftoken&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">csrfSafeMethod</span>(<span class="params">method</span>) &#123;</span><br><span class="line">  <span class="comment">// these HTTP methods do not require CSRF protection</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="regexp">/^(GET|HEAD|OPTIONS|TRACE)$/</span>.<span class="title function_">test</span>(method));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajaxSetup</span>(&#123;</span><br><span class="line">  <span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params">xhr, settings</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">csrfSafeMethod</span>(settings.<span class="property">type</span>) &amp;&amp; !<span class="variable language_">this</span>.<span class="property">crossDomain</span>) &#123;</span><br><span class="line">      xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;X-CSRFToken&quot;</span>, csrftoken);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="csrf相关装饰器"><a href="#csrf相关装饰器" class="headerlink" title="csrf相关装饰器"></a>csrf相关装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.网站整体都不校验csrf，就单单几个视图函数需要校验</span></span><br><span class="line"><span class="string">2.网站整体都校验csrf，就单单几个视图函数不校验</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_protect,csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">csrf_protect  需要校验</span></span><br><span class="line"><span class="string">    针对csrf_protect符合我们之前所学的装饰器的三种玩法</span></span><br><span class="line"><span class="string">csrf_exempt   忽视校验</span></span><br><span class="line"><span class="string">    针对csrf_exempt只能给dispatch方法加才有效</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># @csrf_exempt</span></span><br><span class="line"><span class="comment"># @csrf_protect</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transfer</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        target_user = request.POST.get(<span class="string">&#x27;target_user&#x27;</span>)</span><br><span class="line">        money = request.POST.get(<span class="string">&#x27;money&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s给%s转了%s元&#x27;</span>%(username,target_user,money))</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;transfer.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment"># @method_decorator(csrf_protect,name=&#x27;post&#x27;)  # 针对csrf_protect 第二种方式可以</span></span><br><span class="line"><span class="comment"># @method_decorator(csrf_exempt,name=&#x27;post&#x27;)  # 针对csrf_exempt 第二种方式不可以</span></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">csrf_exempt,name=<span class="string">&#x27;dispatch&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCsrfToken</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="comment"># @method_decorator(csrf_protect)  # 针对csrf_protect 第三种方式可以</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_exempt)  # 针对csrf_exempt 第三种方式可以</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(MyCsrfToken, self).dispatch(request,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_protect)  # 针对csrf_protect 第一种方式可以</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_exempt)  # 针对csrf_exempt 第一种方式不可以</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块:importlib</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">res = <span class="string">&#x27;myfile.b&#x27;</span></span><br><span class="line">ret = importlib.import_module(res)  <span class="comment"># from myfile import b</span></span><br><span class="line"><span class="comment"># 该方法最小只能到py文件名</span></span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure><h3 id="重要思想"><a href="#重要思想" class="headerlink" title="重要思想"></a>重要思想</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings文件</span></span><br><span class="line">NOTIFY_LIST = [</span><br><span class="line">    <span class="string">&#x27;notify.email.Email&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;notify.wechat.Wechat&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;notify.qq.QQ&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># wechat.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechat</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信通知:%s&#x27;</span> % content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__init__文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_all</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">for</span> path_str <span class="keyword">in</span> settings.NOTIFY_LIST:  <span class="comment">#&#x27;notify.email.Email&#x27;</span></span><br><span class="line">        module_path,class_name = path_str.rsplit(<span class="string">&#x27;.&#x27;</span>,maxsplit=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># module_path = &#x27;notify.email&#x27;  class_name = &#x27;Email&#x27;</span></span><br><span class="line">        <span class="comment"># 1 利用字符串导入模块</span></span><br><span class="line">        module = importlib.import_module(module_path)  <span class="comment"># from notify import email</span></span><br><span class="line">        <span class="comment"># 2 利用反射获取类名</span></span><br><span class="line">        cls = <span class="built_in">getattr</span>(module,class_name)  <span class="comment"># Email、QQ、Wechat</span></span><br><span class="line">        <span class="comment"># 3 生成类的对象</span></span><br><span class="line">        obj = cls()</span><br><span class="line">        <span class="comment"># 4 利用鸭子类型直接调用send方法</span></span><br><span class="line">        obj.send(content)</span><br><span class="line">通过注释或者启用哪个类实现django的中间件思想       </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django之cookie与session</title>
      <link href="/2022/07/15/Django%E4%B9%8Bcookie%E4%B8%8Esession/"/>
      <url>/2022/07/15/Django%E4%B9%8Bcookie%E4%B8%8Esession/</url>
      
        <content type="html"><![CDATA[<h3 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">发展史</span></span><br><span class="line"><span class="string">1.网站都没有保存用户功能的需求 所有用户访问返回的结果都是一样的</span></span><br><span class="line"><span class="string">eg:新闻、博客、文章</span></span><br><span class="line"><span class="string">2.出现了一些需要保存用户信息的网站</span></span><br><span class="line"><span class="string">eg:淘宝、支付宝、京东</span></span><br><span class="line"><span class="string">以登陆功能为例:如果不保存用户登陆状态 也就意味着用户每次访问网站都需要重复的输入用户名和密码(你觉得这样的网站你还想用吗？)</span></span><br><span class="line"><span class="string">当用户第一次登陆成功之后 将用户的用户名密码返回给用户浏览器 让用户浏览器保存在本地，之后访问网站的时候浏览器自动将保存在浏览器上的用户名和密码发送给服务端，服务端获取之后自动验证</span></span><br><span class="line"><span class="string">早期这种方式具有非常大的安全隐患</span></span><br><span class="line"><span class="string">优化:</span></span><br><span class="line"><span class="string">当用户登陆成功之后，服务端产生一个随机字符串(在服务端保存数据,用kv键值对的形式)，交由客户端浏览器保存</span></span><br><span class="line"><span class="string">随机字符串1:用户1相关信息</span></span><br><span class="line"><span class="string">随机字符串2:用户2相关信息</span></span><br><span class="line"><span class="string">随机字符串3:用户3相关信息</span></span><br><span class="line"><span class="string">之后访问服务端的时候，都带着该随机字符串，服务端去数据库中比对是否有对应的随机字符串从而获取到对应的用户信息</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">但是如果你截获到了该随机字符串，那么你就可以冒充当前用户 其实还是有安全隐患的</span></span><br><span class="line"><span class="string">web领域没有绝对的安全也没有绝对的不安全</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">cookie</span><br><span class="line">服务端保存在客户端浏览器上的信息都可以称之为cookie</span><br><span class="line">    它的表现形式一般都是k:v键值对(可以有多个)</span><br><span class="line">session</span><br><span class="line">数据是保存在服务端的并且它的表现形式一般也是k:v键值对(可以有多个)</span><br><span class="line">token</span><br><span class="line">session虽然数据是保存在服务端的 但是禁不住数据量大</span><br><span class="line">  服务端不再保存数据</span><br><span class="line">  登陆成功之后 将一段用户信息进行加密处理(加密算法)</span><br><span class="line">    将加密之后的结果拼接在信息后面 整体返回给浏览器保存 </span><br><span class="line">    浏览器下次访问的时候带着该信息 服务端自动切去前面一段信息再次使用自己的加密算法</span><br><span class="line">    跟浏览器尾部的密文进行比对</span><br><span class="line">jwt认证：三段信息 （先提一嘴后续DRF再续前缘）</span><br><span class="line">总结:</span><br><span class="line">  <span class="number">1.</span>cookie就是保存在客户端浏览器上的信息</span><br><span class="line">    <span class="number">2.</span>session就是保存在服务端上的信息</span><br><span class="line">    <span class="number">3.</span>session是基于cookie工作的(其实大部分的保存用户状态的操作都需要使用到cookie)</span><br></pre></td></tr></table></figure><h3 id="Cookie操作"><a href="#Cookie操作" class="headerlink" title="Cookie操作"></a>Cookie操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虽然cookie是服务端告诉客户端浏览器需要保存内容</span></span><br><span class="line"><span class="comment"># 但是客户端浏览器可以选择拒绝保存 如果禁止了 那么只要是需要记录用户状态的网站登陆功能都无法使用了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图函数的返回值</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse()</span><br><span class="line"><span class="keyword">return</span> render()</span><br><span class="line"><span class="keyword">return</span> redirect()</span><br><span class="line"></span><br><span class="line">obj1 = HttpResponse()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj1</span><br><span class="line"></span><br><span class="line">obj2 = render()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj2</span><br><span class="line"></span><br><span class="line">obj3 = redirect()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj3</span><br><span class="line"><span class="comment"># 如果你想要操作cookie，你就不得不利用obj对象</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">设置cookie</span></span><br><span class="line"><span class="string">obj.set_cookie(key,value)</span></span><br><span class="line"><span class="string">获取cookie</span></span><br><span class="line"><span class="string">request.COOKIES.get(key)</span></span><br><span class="line"><span class="string">在设置cookie的时候可以添加一个超时时间</span></span><br><span class="line"><span class="string">obj.set_cookie(&#x27;username&#x27;, &#x27;jason666&#x27;,max_age=3,expires=3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">max_age</span></span><br><span class="line"><span class="string">expires</span></span><br><span class="line"><span class="string">两者都是设置超时时间的 并且都是以秒为单位</span></span><br><span class="line"><span class="string">需要注意的是 针对IE浏览器需要使用expires</span></span><br><span class="line"><span class="string">主动删除cookie(注销功能)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 我们完成一个真正的登陆功能</span></span><br><span class="line"><span class="comment"># 校验用户是否登陆的装饰器</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用户如果在没有登陆的情况下想访问一个需要登陆的页面</span></span><br><span class="line"><span class="string">那么先跳转到登陆页面 当用户输入正确的用户名和密码之后</span></span><br><span class="line"><span class="string">应该跳转到用户之前想要访问的页面去 而不是直接写死</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_auth</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">request,*args,**kwargs</span>):</span><br><span class="line">        <span class="comment"># print(request.path_info)</span></span><br><span class="line">        <span class="comment"># print(request.get_full_path())  # 能够获取到用户上一次想要访问的url</span></span><br><span class="line">        target_url = request.get_full_path()</span><br><span class="line">        <span class="keyword">if</span> request.COOKIES.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request,*args,**kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/?next=%s&#x27;</span>%target_url)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取用户上一次想要访问的url</span></span><br><span class="line">            target_url = request.GET.get(<span class="string">&#x27;next&#x27;</span>)  <span class="comment"># 这个结果可能是None</span></span><br><span class="line">            <span class="keyword">if</span> target_url:</span><br><span class="line">                obj = redirect(target_url)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 保存用户登陆状态</span></span><br><span class="line">                obj = redirect(<span class="string">&#x27;/home/&#x27;</span>)</span><br><span class="line">            <span class="comment"># 让浏览器记录cookie数据</span></span><br><span class="line">            obj.set_cookie(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;jason666&#x27;</span>)</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            浏览器不单单会帮你存</span></span><br><span class="line"><span class="string">            而且后面每次访问你的时候还会带着它过来</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 跳转到一个需要用户登陆之后才能看的页面</span></span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_auth</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 获取cookie信息 判断你有没有</span></span><br><span class="line">    <span class="comment"># if request.COOKIES.get(&#x27;username&#x27;) == &#x27;jason666&#x27;:</span></span><br><span class="line">    <span class="comment">#     return HttpResponse(&quot;我是home页面，只有登陆的用户才能进来哟~&quot;)</span></span><br><span class="line">    <span class="comment"># # 没有登陆应该跳转到登陆页面</span></span><br><span class="line">    <span class="comment"># return redirect(&#x27;/login/&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;我是home页面，只有登陆的用户才能进来哟~&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="session操作"><a href="#session操作" class="headerlink" title="session操作"></a>session操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">session数据是保存在服务端的，给客户端返回的是一个随机字符串</span></span><br><span class="line"><span class="string">sessionid:随机字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.在默认情况下操作session的时候需要django默认的一张django_session表</span></span><br><span class="line"><span class="string">数据库迁移命令</span></span><br><span class="line"><span class="string">django会自己创建很多表django_session就是其中的一张</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django默认session的过期时间是14天 但是你也可以人为的修改它</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">设置session：request.session[&#x27;key&#x27;] = value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">获取session：request.session.get(&#x27;key&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">设置过期时间：request.session.set_expiry()</span></span><br><span class="line"><span class="string">括号内可以放四种类型的参数</span></span><br><span class="line"><span class="string">1.整数多少秒</span></span><br><span class="line"><span class="string">2.日期对象      到指定日期就失效</span></span><br><span class="line"><span class="string">3.0  一旦当前浏览器窗口关闭立刻失效</span></span><br><span class="line"><span class="string">4.不写 失效时间就取决于django内部全局session默认的失效时间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">清除session</span></span><br><span class="line"><span class="string">request.session.delete()  # 只删服务端的 客户端的不删</span></span><br><span class="line"><span class="string">request.session.flush()  # 浏览器和服务端都清空(推荐使用)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session是保存在服务端的 但是session的保存位置可以有多种选择</span></span><br><span class="line"><span class="string">1.MySQL</span></span><br><span class="line"><span class="string">2.文件</span></span><br><span class="line"><span class="string">3.redis</span></span><br><span class="line"><span class="string">4.memcache</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django_session表中的数据条数是取决于浏览器的</span></span><br><span class="line"><span class="string">同一个计算机上(IP地址)同一个浏览器只会有一条数据生效</span></span><br><span class="line"><span class="string">(当session过期的时候可能会出现多条数据对应一个浏览器，但是该现象不会持续很久，内部会自动识别过期的数据清除 你也可以通过代码清除)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">request.session[<span class="string">&#x27;hobby&#x27;</span>] = <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    内部发送了那些事</span></span><br><span class="line"><span class="string">        1.django内部会自动帮你生成一个随机字符串</span></span><br><span class="line"><span class="string">        2.django内部自动将随机字符串和对应的数据存储到django_session表中</span></span><br><span class="line"><span class="string">            2.1先在内存中产生操作数据的缓存</span></span><br><span class="line"><span class="string">            2.2在响应结果django中间件的时候才真正的操作数据库</span></span><br><span class="line"><span class="string">        3.将产生的随机字符串返回给客户端浏览器保存</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">request.session.get(<span class="string">&#x27;hobby&#x27;</span>)</span><br><span class="line"></span><br><span class="line">内部发生了什么事</span><br><span class="line">      <span class="number">1.</span>自动从浏览器请求中获取sessionid对应的随机字符串</span><br><span class="line">      <span class="number">2.</span>拿着该随机字符串去django_session表中查找对应的数据</span><br><span class="line">      <span class="number">3.</span> 如果比对上了 则将对应的数据取出并以字典的形式封装到request.session中</span><br><span class="line">         如果比对不上 则request.session.get()返回的是<span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django的forms组件</title>
      <link href="/2022/07/11/Django%E7%9A%84forms%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/07/11/Django%E7%9A%84forms%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">写一个注册功能</span></span><br><span class="line"><span class="string">获取用户名和密码 利用form表单提交数据</span></span><br><span class="line"><span class="string">在后端判断用户名和密码是否符合一定的条件</span></span><br><span class="line"><span class="string">用户名中不能含有草</span></span><br><span class="line"><span class="string">密码不能少于三位</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如何符合条件需要你将提示信息展示到前端页面</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_form</span>(<span class="params">request</span>):</span><br><span class="line">    back_dic = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;草&#x27;</span> <span class="keyword">in</span> username:</span><br><span class="line">            back_dic[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;不符合社会主义核心价值观&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(password) &lt; <span class="number">3</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;password&#x27;</span>] = <span class="string">&#x27;不能太短 不安全!&#x27;</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    无论是post请求还是get请求</span></span><br><span class="line"><span class="string">    页面都能够获取到字典 只不过get请求来的时候 字典值都是空的</span></span><br><span class="line"><span class="string">    而post请求来之后 字典可能有值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;ab_form.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;username:</span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color: red&quot;</span>&gt;&#123;&#123; back_dic.username &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;password:</span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color: red&quot;</span>&gt;&#123;&#123; back_dic.password &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.手动书写前端获取用户数据的html代码 渲染html代码</span></span><br><span class="line"><span class="string">2.后端对用户数据进行校验校验数据</span></span><br><span class="line"><span class="string">3.对不符合要求的数据进行前端提示  展示提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">forms组件</span></span><br><span class="line"><span class="string">能够完成的事情</span></span><br><span class="line"><span class="string">1.渲染html代码</span></span><br><span class="line"><span class="string">2.校验数据</span></span><br><span class="line"><span class="string">3.展示提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span>(forms.Form):</span><br><span class="line">    <span class="comment"># username字符串类型最小3位最大8位</span></span><br><span class="line">    username = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># password字符串类型最小3位最大8位</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># email字段必须符合邮箱格式  xxx@xx.com</span></span><br><span class="line">    email = forms.EmailField()</span><br></pre></td></tr></table></figure><h3 id="校验数据"><a href="#校验数据" class="headerlink" title="校验数据"></a>校验数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="comment"># 1 将带校验的数据组织成字典的形式传入即可</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 2 判断数据是否合法注意该方法只有在所有的数据全部合法的情况下才会返回True</span></span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="comment"># 3 查看所有校验通过的数据</span></span><br><span class="line">form_obj.cleaned_data</span><br><span class="line">&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 4 查看所有不符合校验规则以及不符合的原因</span></span><br><span class="line">form_obj.errors</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;email&#x27;</span>: [<span class="string">&#x27;Enter a valid email address.&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 5 校验数据只校验类中出现的字段 多传不影响 多传的字段直接忽略</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="string">&#x27;hobby&#x27;</span>:<span class="string">&#x27;study&#x27;</span>&#125;)</span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 6 校验数据 默认情况下 类里面所有的字段都必须传值</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;)</span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">也就意味着校验数据的时候 默认情况下数据可以多传但是绝不可能少传</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="渲染标签"><a href="#渲染标签" class="headerlink" title="渲染标签"></a>渲染标签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">forms组件只会自动帮你渲染获取用户输入的标签(input select radio checkbox)</span></span><br><span class="line"><span class="string">不能帮你渲染提交按钮</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 1 先产生一个空对象</span></span><br><span class="line">    form_obj = MyForm()</span><br><span class="line">    <span class="comment"># 2 直接将该空对象传递给html页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端利用空对象做操作</span></span><br><span class="line">    &lt;p&gt;第一种渲染方式:代码书写极少，封装程度太高 不便于后续的扩展 一般情况下只在本地测试使用&lt;/p&gt;</span><br><span class="line">    &#123;&#123; form_obj.as_p &#125;&#125;</span><br><span class="line">    &#123;&#123; form_obj.as_ul &#125;&#125;</span><br><span class="line">    &#123;&#123; form_obj.as_table &#125;&#125;</span><br><span class="line">    &lt;p&gt;第二种渲染方式:可扩展性很强 但是需要书写的代码太多  一般情况下不用&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.username.label &#125;&#125;:&#123;&#123; form_obj.username &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.password.label &#125;&#125;:&#123;&#123; form_obj.password &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.email.label &#125;&#125;:&#123;&#123; form_obj.email &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;第三种渲染方式(推荐使用):代码书写简单 并且扩展性也高&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> form <span class="keyword">in</span> form_obj %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; form.label &#125;&#125;:&#123;&#123; form &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">label属性默认展示的是类中定义的字段首字母大写的形式</span></span><br><span class="line"><span class="string">也可以自己修改 直接给字段对象加label属性即可</span></span><br><span class="line"><span class="string">username = forms.CharField(min_length=3,max_length=8,label=&#x27;用户名&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="展示提示信息"><a href="#展示提示信息" class="headerlink" title="展示提示信息"></a>展示提示信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">浏览器会自动帮你校验数据 但是前端的校验弱不禁风</span></span><br><span class="line"><span class="string">如何让浏览器不做校验</span></span><br><span class="line"><span class="string">&lt;form action=&quot;&quot; method=&quot;post&quot; novalidate&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 1 先产生一个空对象</span></span><br><span class="line">    form_obj = MyForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 2.获取用户数据并且校验</span></span><br><span class="line">        form_obj = MyForm(request.POST)</span><br><span class="line">        <span class="comment"># 3.判断数据是否合法</span></span><br><span class="line">        <span class="keyword">if</span> form_obj.is_valid():</span><br><span class="line">            <span class="comment"># 4.如果合法 操作数据库存储数据</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">        <span class="comment"># 5.不合法 有错误</span></span><br><span class="line">    <span class="comment"># 2 直接将该空对象传递给html页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> form <span class="keyword">in</span> form_obj %&#125;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &#123;&#123; form.label &#125;&#125;:&#123;&#123; form &#125;&#125;</span><br><span class="line">            &lt;span style=<span class="string">&quot;color: red&quot;</span>&gt;&#123;&#123; form.errors<span class="number">.0</span> &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对错误的提示信息还可以自己自定制</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span>(forms.Form):</span><br><span class="line">    <span class="comment"># username字符串类型最小3位最大8位</span></span><br><span class="line">    username = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">                               error_messages=&#123;</span><br><span class="line">                                   <span class="string">&#x27;min_length&#x27;</span>:<span class="string">&#x27;用户名最少3位&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;max_length&#x27;</span>:<span class="string">&#x27;用户名最大8位&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;required&#x27;</span>:<span class="string">&quot;用户名不能为空&quot;</span></span><br><span class="line">                               &#125;</span><br><span class="line">                               )</span><br><span class="line">    <span class="comment"># password字符串类型最小3位最大8位</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">                               error_messages=&#123;</span><br><span class="line">                                   <span class="string">&#x27;min_length&#x27;</span>: <span class="string">&#x27;密码最少3位&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;密码最大8位&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;required&#x27;</span>: <span class="string">&quot;密码不能为空&quot;</span></span><br><span class="line">                               &#125;</span><br><span class="line">                               )</span><br><span class="line">    <span class="comment"># email字段必须符合邮箱格式  xxx@xx.com</span></span><br><span class="line">    email = forms.EmailField(label=<span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">                             error_messages=&#123;</span><br><span class="line">                                 <span class="string">&#x27;invalid&#x27;</span>:<span class="string">&#x27;邮箱格式不正确&#x27;</span>,</span><br><span class="line">                                 <span class="string">&#x27;required&#x27;</span>: <span class="string">&quot;邮箱不能为空&quot;</span></span><br><span class="line">                             &#125;</span><br><span class="line">                             )</span><br></pre></td></tr></table></figure><h3 id="钩子函数-HOOK"><a href="#钩子函数-HOOK" class="headerlink" title="钩子函数(HOOK)"></a>钩子函数(HOOK)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在特定的节点自动触发完成响应操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">钩子函数在forms组件中就类似于第二道关卡，能够让我们自定义校验规则</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在forms组件中有两类钩子</span></span><br><span class="line"><span class="string">1.局部钩子</span></span><br><span class="line"><span class="string">当你需要给单个字段增加校验规则的时候可以使用</span></span><br><span class="line"><span class="string">2.全局钩子</span></span><br><span class="line"><span class="string">  当你需要给多个字段增加校验规则的时候可以使用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 实际案例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.校验用户名中不能含有666只是校验username字段  局部钩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.校验密码和确认密码是否一致password confirm两个字段全局钩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 钩子函数  在类里面书写方法即可</span></span><br><span class="line">    <span class="comment"># 局部钩子</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_username</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取到用户名</span></span><br><span class="line">        username = self.cleaned_data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;666&#x27;</span> <span class="keyword">in</span> username:</span><br><span class="line">            <span class="comment"># 提示前端展示错误信息</span></span><br><span class="line">            self.add_error(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;光喊666是不行滴～&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将钩子函数钩去出来数据再放回去</span></span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局钩子</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean</span>(<span class="params">self</span>):</span><br><span class="line">        password = self.cleaned_data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        confirm_password = self.cleaned_data.get(<span class="string">&#x27;confirm_password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> confirm_password == password:</span><br><span class="line">            self.add_error(<span class="string">&#x27;confirm_password&#x27;</span>,<span class="string">&#x27;两次密码不一致&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将钩子函数钩出来数据再放回去</span></span><br><span class="line">        <span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure><h3 id="forms组件其他参数及补充知识点"><a href="#forms组件其他参数及补充知识点" class="headerlink" title="forms组件其他参数及补充知识点"></a>forms组件其他参数及补充知识点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">label字段名</span><br><span class="line">error_messages  自定义报错信息</span><br><span class="line">initial  默认值</span><br><span class="line">required  控制字段是否必填</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.字段没有样式</span></span><br><span class="line"><span class="string">2.针对不同类型的input如何修改</span></span><br><span class="line"><span class="string">text</span></span><br><span class="line"><span class="string">password</span></span><br><span class="line"><span class="string">date</span></span><br><span class="line"><span class="string">radio</span></span><br><span class="line"><span class="string">checkbox</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">widget=forms.widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;form-control c1 c2&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 多个属性值的话 直接空格隔开即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一道关卡里面还支持正则校验</span></span><br><span class="line">validators=[</span><br><span class="line">            RegexValidator(<span class="string">r&#x27;^[0-9]+$&#x27;</span>, <span class="string">&#x27;请输入数字&#x27;</span>),</span><br><span class="line">            RegexValidator(<span class="string">r&#x27;^159[0-9]+$&#x27;</span>, <span class="string">&#x27;数字必须以159开头&#x27;</span>)</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>其他类型渲染</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># radio</span></span><br><span class="line">    gender = forms.ChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">&quot;男&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;女&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;保密&quot;</span>)),</span><br><span class="line">        label=<span class="string">&quot;性别&quot;</span>,</span><br><span class="line">        initial=<span class="number">3</span>,</span><br><span class="line">        widget=forms.widgets.RadioSelect()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># select</span></span><br><span class="line">    hobby = forms.ChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">&quot;篮球&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;足球&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;双色球&quot;</span>),),</span><br><span class="line">        label=<span class="string">&quot;爱好&quot;</span>,</span><br><span class="line">        initial=<span class="number">3</span>,</span><br><span class="line">        widget=forms.widgets.Select()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 多选</span></span><br><span class="line">    hobby1 = forms.MultipleChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">&quot;篮球&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;足球&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;双色球&quot;</span>),),</span><br><span class="line">        label=<span class="string">&quot;爱好&quot;</span>,</span><br><span class="line">        initial=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">        widget=forms.widgets.SelectMultiple()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 单选checkbox</span></span><br><span class="line">    keep = forms.ChoiceField(</span><br><span class="line">        label=<span class="string">&quot;是否记住密码&quot;</span>,</span><br><span class="line">        initial=<span class="string">&quot;checked&quot;</span>,</span><br><span class="line">        widget=forms.widgets.CheckboxInput()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 多选checkbox</span></span><br><span class="line">    hobby2 = forms.MultipleChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">&quot;篮球&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;足球&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;双色球&quot;</span>),),</span><br><span class="line">        label=<span class="string">&quot;爱好&quot;</span>,</span><br><span class="line">        initial=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">        widget=forms.widgets.CheckboxSelectMultiple()</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="forms组件源码"><a href="#forms组件源码" class="headerlink" title="forms组件源码"></a>forms组件源码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">切入点:</span></span><br><span class="line"><span class="string">form_obj.is_valid()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">self</span>):</span><br><span class="line">        </span><br><span class="line">   <span class="keyword">return</span> self.is_bound <span class="keyword">and</span> <span class="keyword">not</span> self.errors</span><br><span class="line">   <span class="comment"># 如果is_valid要返回True的话 那么self.is_bound要为True self.errors要为Flase</span></span><br><span class="line">  </span><br><span class="line">self.is_bound = data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> files <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>  <span class="comment"># 只要你传值了肯定为True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">errors</span>(<span class="params">self</span>):       </span><br><span class="line">        <span class="keyword">if</span> self._errors <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.full_clean()</span><br><span class="line">        <span class="keyword">return</span> self._errors</span><br><span class="line"></span><br><span class="line"><span class="comment"># forms组件所有的功能基本都出自于该方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">full_clean</span>(<span class="params">self</span>):</span><br><span class="line">  self._clean_fields()  <span class="comment"># 校验字段 + 局部钩子</span></span><br><span class="line">    self._clean_form()  <span class="comment"># 全局钩子</span></span><br><span class="line">    self._post_clean()  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django自定义分页器与批量插入</title>
      <link href="/2022/07/06/Django%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5%E5%99%A8%E4%B8%8E%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/"/>
      <url>/2022/07/06/Django%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5%E5%99%A8%E4%B8%8E%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="分页器简单逻辑"><a href="#分页器简单逻辑" class="headerlink" title="分页器简单逻辑"></a>分页器简单逻辑</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">per_page_num = 10</span></span><br><span class="line"><span class="string">current_page    start_page  end_page</span></span><br><span class="line"><span class="string">1                0          10</span></span><br><span class="line"><span class="string">2                10          20</span></span><br><span class="line"><span class="string">起始页，终止页与数量的关系</span></span><br><span class="line"><span class="string">start_page = (current_page-1)*per_page_num</span></span><br><span class="line"><span class="string">end_page = current_page*per_page_num</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pagination</span>(<span class="params">request</span>):</span><br><span class="line">    book_list = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 想访问哪一页</span></span><br><span class="line">    current_page = request.GET.get(<span class="string">&#x27;page&#x27;</span>,<span class="number">1</span>)  <span class="comment"># 如果获取不到当前页码 就展示第一页</span></span><br><span class="line">    <span class="comment"># 数据类型转换</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        current_page = <span class="built_in">int</span>(current_page)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        current_page = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 每页展示多少条</span></span><br><span class="line">    per_page_num = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 起始位置</span></span><br><span class="line">    start_page = (current_page - <span class="number">1</span>) * per_page_num</span><br><span class="line">    <span class="comment"># 终止位置</span></span><br><span class="line">    end_page = current_page * per_page_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算出到底需要多少页</span></span><br><span class="line">    all_count = book_list.count()</span><br><span class="line"></span><br><span class="line">    page_count, more = <span class="built_in">divmod</span>(all_count, per_page_num)</span><br><span class="line">    <span class="keyword">if</span> more:</span><br><span class="line">        page_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    page_html = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    xxx = current_page</span><br><span class="line">    <span class="keyword">if</span> current_page &lt; <span class="number">6</span>:</span><br><span class="line">        current_page = <span class="number">6</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(current_page-<span class="number">5</span>,current_page+<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> xxx == i:</span><br><span class="line">            page_html += <span class="string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span>%(i,i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            page_html += <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span>%(i,i)</span><br><span class="line">    book_queryset = book_list[start_page:end_page]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;ab_batch.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h3 id="自定义分页器封装"><a href="#自定义分页器封装" class="headerlink" title="自定义分页器封装"></a>自定义分页器封装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pagination</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, current_page, all_count, per_page_num=<span class="number">6</span>, pager_count=<span class="number">11</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        封装分页相关数据</span></span><br><span class="line"><span class="string">        :param current_page: 当前页</span></span><br><span class="line"><span class="string">        :param all_count:    数据库中的数据总条数</span></span><br><span class="line"><span class="string">        :param per_page_num: 每页显示的数据条数</span></span><br><span class="line"><span class="string">        :param pager_count:  最多显示的页码个数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            current_page = <span class="built_in">int</span>(current_page)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            current_page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current_page &lt; <span class="number">1</span>:</span><br><span class="line">            current_page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.current_page = current_page</span><br><span class="line"></span><br><span class="line">        self.all_count = all_count</span><br><span class="line">        self.per_page_num = per_page_num</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 总页码</span></span><br><span class="line">        all_pager, tmp = <span class="built_in">divmod</span>(all_count, per_page_num)</span><br><span class="line">        <span class="keyword">if</span> tmp:</span><br><span class="line">            all_pager += <span class="number">1</span></span><br><span class="line">        self.all_pager = all_pager</span><br><span class="line"></span><br><span class="line">        self.pager_count = pager_count</span><br><span class="line">        self.pager_count_half = <span class="built_in">int</span>((pager_count - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将方法伪装成属性，不用加括号也可以运行</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.current_page - <span class="number">1</span>) * self.per_page_num</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.current_page * self.per_page_num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 如果总页码 &lt; 11个：</span></span><br><span class="line">        <span class="keyword">if</span> self.all_pager &lt;= self.pager_count:</span><br><span class="line">            pager_start = <span class="number">1</span></span><br><span class="line">            pager_end = self.all_pager + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 总页码  &gt; 11</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 当前页如果&lt;=11/2(页面上最多显示11/2个页码)</span></span><br><span class="line">            <span class="keyword">if</span> self.current_page &lt;= self.pager_count_half:</span><br><span class="line">                pager_start = <span class="number">1</span></span><br><span class="line">                pager_end = self.pager_count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前页大于5</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 页码翻到最后 如果当前页加页码个数一半大于总页数则  起始页=总页数-页码数+1</span></span><br><span class="line">                <span class="keyword">if</span> (self.current_page + self.pager_count_half) &gt; self.all_pager:</span><br><span class="line">                    pager_end = self.all_pager + <span class="number">1</span></span><br><span class="line">                    pager_start = self.all_pager - self.pager_count + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pager_start = self.current_page - self.pager_count_half</span><br><span class="line">                    pager_end = self.current_page + self.pager_count_half + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        page_html_list = []</span><br><span class="line">        <span class="comment"># 添加前面的nav和ul标签</span></span><br><span class="line">        page_html_list.append(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                    &lt;nav aria-label=&#x27;Page navigation&gt;&#x27;</span></span><br><span class="line"><span class="string">                    &lt;ul class=&#x27;pagination&#x27;&gt;</span></span><br><span class="line"><span class="string">                &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        first_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (<span class="number">1</span>)</span><br><span class="line">        page_html_list.append(first_page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.current_page &lt;= <span class="number">1</span>:</span><br><span class="line">            prev_page = <span class="string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.current_page - <span class="number">1</span>,)</span><br><span class="line"></span><br><span class="line">        page_html_list.append(prev_page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pager_start, pager_end):</span><br><span class="line">            <span class="keyword">if</span> i == self.current_page:</span><br><span class="line">                temp = <span class="string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (i, i,)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (i, i,)</span><br><span class="line">            page_html_list.append(temp)</span><br><span class="line">        <span class="comment"># 判断是否还有下一页</span></span><br><span class="line">        <span class="keyword">if</span> self.current_page &gt;= self.all_pager:</span><br><span class="line">            next_page = <span class="string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            next_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.current_page + <span class="number">1</span>,)</span><br><span class="line">        page_html_list.append(next_page)</span><br><span class="line"></span><br><span class="line">        last_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.all_pager,)</span><br><span class="line">        page_html_list.append(last_page)</span><br><span class="line">        <span class="comment"># 尾部添加标签</span></span><br><span class="line">        page_html_list.append(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                                           &lt;/nav&gt;</span></span><br><span class="line"><span class="string">                                           &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                                       &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(page_html_list)</span><br></pre></td></tr></table></figure><h3 id="自定义分页器的拷贝及使用"><a href="#自定义分页器的拷贝及使用" class="headerlink" title="自定义分页器的拷贝及使用"></a>自定义分页器的拷贝及使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">自定义的分页器是基于bootstrap样式来的 所以需要提前导入bootstrap,jquery</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_pagination</span>(<span class="params">request</span>):</span><br><span class="line">    book_queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    current_page = request.GET.get(<span class="string">&#x27;page&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    all_count = book_queryset.count()</span><br><span class="line">    <span class="comment"># 1 传值生成对象</span></span><br><span class="line">    page_obj = Pagination(current_page=current_page,all_count=all_count)</span><br><span class="line">    <span class="comment"># 2 直接对总数据进行切片操作</span></span><br><span class="line">    page_queryset = book_queryset[page_obj.start:page_obj.end]</span><br><span class="line">    <span class="comment"># 3 将page_queryset传递到页面 替换之前的book_queryset</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;pagination.html&#x27;</span>, <span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&#123;% <span class="keyword">for</span> book_obj <span class="keyword">in</span> page_queryset %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; book_obj.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;<span class="comment">#利用自定义分页器直接显示分页器样式#&#125;</span></span><br><span class="line">&#123;&#123; page_obj.page_html|safe &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ab_batch</span>(<span class="params">request</span>):</span><br><span class="line">    book_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="comment"># models.Book.objects.create(title=f&#x27;第&#123;i&#125;本书&#x27;)</span></span><br><span class="line">        book_list.append(models.Book(title=<span class="string">f&#x27;第<span class="subst">&#123;i&#125;</span>本书&#x27;</span>))</span><br><span class="line">    <span class="comment"># 一次性插入减少数据库资源消耗</span></span><br><span class="line">    models.Book.objects.bulk_create(book_list)</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django之Ajax操作</title>
      <link href="/2022/07/03/Django%E4%B9%8BAjax%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/07/03/Django%E4%B9%8BAjax%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">异步提交</span></span><br><span class="line"><span class="string">局部刷新</span></span><br><span class="line"><span class="string">例子:github注册,动态获取用户名实时的跟后端确认并实时展示的前端(局部刷新)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">朝后端发送请求的方式</span></span><br><span class="line"><span class="string">1.浏览器地址栏直接输入url回车    GET请求</span></span><br><span class="line"><span class="string">2.a标签href属性  GET请求</span></span><br><span class="line"><span class="string">3.form表单  GET请求/POST请求</span></span><br><span class="line"><span class="string">    4.ajax       GET请求/POST请求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。（这一特点给用户的感受是在不知不觉中完成请求和响应过程）Ajax我们只使用jQuery封装之后的版本</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="小栗子"><a href="#小栗子" class="headerlink" title="小栗子"></a>小栗子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">页面上有三个input框</span></span><br><span class="line"><span class="string">在前两个框中输入数字 点击按钮 朝后端发送ajax请求</span></span><br><span class="line"><span class="string">后端计算出结果 再返回给前端动态展示的到第三个input框中</span></span><br><span class="line"><span class="string">(整个过程页面不准有刷新,也不能在前端计算)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">$(<span class="string">&#x27;#btn&#x27;</span>).click(function () &#123;</span><br><span class="line">        // 朝后端发送ajax请求</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            // <span class="number">1.</span>指定朝哪个后端发送ajax请求</span><br><span class="line">            url:<span class="string">&#x27;&#x27;</span>, // 不写就是朝当前地址提交</span><br><span class="line">            // <span class="number">2.</span>请求方式</span><br><span class="line">            <span class="built_in">type</span>:<span class="string">&#x27;post&#x27;</span>,  // 不指定默认就是get 都是小写</span><br><span class="line">            // <span class="number">3.</span>数据</span><br><span class="line">            &#123;<span class="comment">#data:&#123;&#x27;username&#x27;:&#x27;jason&#x27;,&#x27;password&#x27;:123&#125;,#&#125;</span></span><br><span class="line">            data:&#123;<span class="string">&#x27;i1&#x27;</span>:$(<span class="string">&#x27;#d1&#x27;</span>).val(),<span class="string">&#x27;i2&#x27;</span>:$(<span class="string">&#x27;#d2&#x27;</span>).val()&#125;,</span><br><span class="line">            // <span class="number">4.</span>回调函数:当后端给你返回结果的时候会自动触发 args接受后端的返回结果</span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">                &#123;<span class="comment">#alert(args)  // 通过DOM操作动态渲染到第三个input里面#&#125;</span></span><br><span class="line">                &#123;<span class="comment">#$(&#x27;#d3&#x27;).val(args)#&#125;</span></span><br><span class="line">                console.log(typeof args)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">                        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">针对后端如果是用HttpResponse返回的数据 回调函数不会自动帮你反序列化</span></span><br><span class="line"><span class="string">如果后端直接用的是JsonResponse返回的数据 回调函数会自动帮你反序列化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">HttpResponse解决方式</span></span><br><span class="line"><span class="string">1.自己在前端利用JSON.parse()</span></span><br><span class="line"><span class="string">2.在ajax里面配置一个参数 dataType:&#x27;JSON&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="前后端传输数据的编码格式-contentType"><a href="#前后端传输数据的编码格式-contentType" class="headerlink" title="前后端传输数据的编码格式(contentType)"></a>前后端传输数据的编码格式(contentType)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们主要研究post请求数据的编码格式</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">get请求数据就是直接放在url后面的</span></span><br><span class="line"><span class="string">url?username=jason&amp;password=123</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 可以朝后端发送post请求的方式</span></span><br><span class="line"><span class="string">1.form表单</span></span><br><span class="line"><span class="string">2.ajax请求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">前后端传输数据的编码格式</span></span><br><span class="line"><span class="string">urlencoded</span></span><br><span class="line"><span class="string">formdata</span></span><br><span class="line"><span class="string">json</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 研究form表单</span></span><br><span class="line">默认的数据编码格式是urlencoded</span><br><span class="line">  数据格式:username=jason&amp;password=<span class="number">123</span></span><br><span class="line">  django后端针对符合urlencoded编码格式的数据都会自动帮你解析封装到request.POST中</span><br><span class="line">  username=jason&amp;password=<span class="number">123</span>&gt;&gt;&gt; request.POST</span><br><span class="line">  </span><br><span class="line">如果把编码格式改成formdata，那么针对普通的键值对还是解析到request.POST中将文件解析到request.FILES中</span><br><span class="line">form表单是没有办法发送json格式数据的</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 研究ajax</span></span><br><span class="line">默认的编码格式也是urlencoded 数据格式:username=jason&amp;age=<span class="number">20</span></span><br><span class="line">django后端针对符合urlencoded编码格式的数据都会自动帮你解析封装到request.POST中</span><br><span class="line">username=jason&amp;age=<span class="number">20</span>&gt;&gt;&gt; request.POST</span><br></pre></td></tr></table></figure><h3 id="ajax发送json格式数据"><a href="#ajax发送json格式数据" class="headerlink" title="ajax发送json格式数据"></a>ajax发送json格式数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">前后端传输数据的时候一定要确保编码格式跟数据真正的格式是一致的</span></span><br><span class="line"><span class="string">&#123;&quot;username&quot;:&quot;jason&quot;,&quot;age&quot;:25&#125;  </span></span><br><span class="line"><span class="string">在request.POST里面肯定找不到；django针对json格式的数据 不会做任何的处理 </span></span><br><span class="line"><span class="string">request对象方法补充</span></span><br><span class="line"><span class="string">request.is_ajax()</span></span><br><span class="line"><span class="string">判断当前请求是否是ajax请求 返回布尔值</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&#x27;#d1&#x27;</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="built_in">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            data:JSON.stringify(&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">25</span>&#125;),</span><br><span class="line">            contentType:<span class="string">&#x27;application/json&#x27;</span>,  // 指定编码格式</span><br><span class="line">            success:function () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        json_bytes = request.body</span><br><span class="line">        json_str = json_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        json_dict = json.loads(json_str)</span><br><span class="line">        <span class="comment"># json.loads括号内如果传入了一个二进制格式的数据那么内部自动解码再反序列化</span></span><br><span class="line">        json_dict = json.loads(json_bytes)</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ajax发送json格式数据需要注意点</span></span><br><span class="line"><span class="string">1.contentType参数指定成:application/json</span></span><br><span class="line"><span class="string">2.数据是真正的json格式数据</span></span><br><span class="line"><span class="string">3.django后端不会帮你处理json格式数据需要你自己去request.body获取并处理</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ajax发送文件"><a href="#ajax发送文件" class="headerlink" title="ajax发送文件"></a>ajax发送文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ajax发送文件需要借助于js内置对象FormData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 点击按钮朝后端发送普通键值对和文件数据</span><br><span class="line">    $(<span class="string">&#x27;#d4&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>,function () &#123;</span><br><span class="line">        // <span class="number">1</span> 需要先利用FormData内置对象</span><br><span class="line">        let formDateObj = new FormData();</span><br><span class="line">        // <span class="number">2</span> 添加普通的键值对</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;username&#x27;</span>,$(<span class="string">&#x27;#d1&#x27;</span>).val());</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;password&#x27;</span>,$(<span class="string">&#x27;#d2&#x27;</span>).val());</span><br><span class="line">        // <span class="number">3</span> 添加文件对象</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;myfile&#x27;</span>,$(<span class="string">&#x27;#d3&#x27;</span>)[<span class="number">0</span>].files[<span class="number">0</span>])</span><br><span class="line">        // <span class="number">4</span> 将对象基于ajax发送给后端</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="built_in">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            data:formDateObj,  // 直接将对象放在data后面即可</span><br><span class="line">            // ajax发送文件必须要指定的两个参数</span><br><span class="line">            contentType:false,  // 不需使用任何编码 django后端能够自动识别formdata对象</span><br><span class="line">            processData:false,  // 告诉你的浏览器不要对你的数据进行任何处理</span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_file</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(request.POST)</span><br><span class="line">            <span class="built_in">print</span>(request.FILES)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;ab_file.html&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">总结:</span><br><span class="line"><span class="number">1.</span>需要利用内置对象FormData</span><br><span class="line">// <span class="number">2</span> 添加普通的键值对</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;username&#x27;</span>,$(<span class="string">&#x27;#d1&#x27;</span>).val());</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;password&#x27;</span>,$(<span class="string">&#x27;#d2&#x27;</span>).val());</span><br><span class="line">        // <span class="number">3</span> 添加文件对象</span><br><span class="line">        formDateObj.append(<span class="string">&#x27;myfile&#x27;</span>,$(<span class="string">&#x27;#d3&#x27;</span>)[<span class="number">0</span>].files[<span class="number">0</span>])</span><br><span class="line"><span class="number">2.</span>需要指定两个关键性的参数</span><br><span class="line">contentType:false,  // 不需使用任何编码 django后端能够自动识别formdata对象</span><br><span class="line">        processData:false,  // 告诉你的浏览器不要对你的数据进行任何处理</span><br><span class="line"><span class="number">3.</span>django后端能够直接识别到formdata对象并且能够将内部的普通键值自动解析并封装到request.POST中 文件数据自动解析并封装到request.FILES中</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="django自带的序列化组件-drf做铺垫"><a href="#django自带的序列化组件-drf做铺垫" class="headerlink" title="django自带的序列化组件(drf做铺垫)"></a>django自带的序列化组件(drf做铺垫)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需求:在前端给我获取到后端用户表里面所有的数据 并且要是列表套字典</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_ser</span>(<span class="params">request</span>):</span><br><span class="line">    user_queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    user_list = []</span><br><span class="line">    <span class="comment"># 数据格式[&#123;&#125;,&#123;&#125;,&#123;&#125;……]</span></span><br><span class="line">    <span class="keyword">for</span> user_obj <span class="keyword">in</span> user_queryset:</span><br><span class="line">        tmp = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: user_obj.<span class="built_in">id</span>,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: user_obj.name,</span><br><span class="line">            <span class="string">&#x27;age&#x27;</span>: user_obj.age,</span><br><span class="line">            <span class="string">&#x27;gender&#x27;</span>:user_obj.get_gender_display()</span><br><span class="line">        &#125;</span><br><span class="line">        user_list.append(tmp)</span><br><span class="line">    <span class="comment"># 默认只能序列化字典 序列化其他需要加safe参数</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(user_list, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 序列化</span></span><br><span class="line">    res = serializers.serialize(<span class="string">&#x27;json&#x27;</span>,user_queryset)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;会自动帮你将数据变成json格式的字符串 并且内部非常的全面&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string"> &#123;&quot;pk&quot;: 1, &quot;username&quot;: &quot;jason&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;male&quot;&#125;, </span></span><br><span class="line"><span class="string"> &#123;&quot;pk&quot;: 2, &quot;username&quot;: &quot;egon&quot;, &quot;age&quot;: 31, &quot;gender&quot;: &quot;female&quot;&#125;,</span></span><br><span class="line"><span class="string"> &#123;&quot;pk&quot;: 3, &quot;username&quot;: &quot;kevin&quot;, &quot;age&quot;: 32, &quot;gender&quot;: &quot;others&quot;&#125;, </span></span><br><span class="line"><span class="string"> &#123;&quot;pk&quot;: 4, &quot;username&quot;: &quot;tank&quot;, &quot;age&quot;: 40, &quot;gender&quot;: 4&#125;</span></span><br><span class="line"><span class="string"> ]</span></span><br><span class="line"><span class="string">              </span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">&#123;   &quot;model&quot;: &quot;app01.user&quot;, </span></span><br><span class="line"><span class="string">    &quot;pk&quot;: 1, </span></span><br><span class="line"><span class="string">    &quot;fields&quot;: &#123;&quot;username&quot;: &quot;jason&quot;, &quot;age&quot;: 25, &quot;gender&quot;: 1&#125;&#125;, </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#123;   &quot;model&quot;: &quot;app01.user&quot;, </span></span><br><span class="line"><span class="string">    &quot;pk&quot;: 2, </span></span><br><span class="line"><span class="string">    &quot;fields&quot;: &#123;&quot;username&quot;: &quot;egon&quot;, &quot;age&quot;: 31, &quot;gender&quot;: 2&#125;&#125;, </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#123;   &quot;model&quot;: &quot;app01.user&quot;, </span></span><br><span class="line"><span class="string">    &quot;pk&quot;: 3, </span></span><br><span class="line"><span class="string">    &quot;fields&quot;: &#123;&quot;username&quot;: &quot;kevin&quot;, &quot;age&quot;: 32, &quot;gender&quot;: 3&#125;&#125;,</span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">&#123;   &quot;model&quot;: &quot;app01.user&quot;, </span></span><br><span class="line"><span class="string">    &quot;pk&quot;: 4, </span></span><br><span class="line"><span class="string">    &quot;fields&quot;: &#123;&quot;username&quot;: &quot;tank&quot;, &quot;age&quot;: 40, &quot;gender&quot;: 4&#125;&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ajax结合layer实现删除弹窗"><a href="#ajax结合layer实现删除弹窗" class="headerlink" title="ajax结合layer实现删除弹窗"></a>ajax结合layer实现删除弹窗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">userlist</span>(<span class="params">request</span>):</span><br><span class="line">    user_queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    back_dict = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="built_in">id</span> = request.POST.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        models.User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="built_in">id</span>).delete()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dict)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;userlist.html&#x27;</span>, <span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">        &lt;table <span class="keyword">class</span>=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;name&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;age&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;gender&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">            &#123;% <span class="keyword">for</span> user_obj <span class="keyword">in</span> user_queryset %&#125;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; user_obj.<span class="built_in">id</span> &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; user_obj.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; user_obj.age &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; user_obj.gender &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;a href=<span class="string">&quot;javascript:;&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;btn btn-danger del&quot;</span> del_id=<span class="string">&quot;&#123;&#123; user_obj.id &#125;&#125;&quot;</span></span><br><span class="line">                           <span class="built_in">id</span>=<span class="string">&quot;del_&#123;&#123; user_obj.id &#125;&#125;&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ajax</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&#x27;.del&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> id = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;del_id&#x27;</span>)</span><br><span class="line">        <span class="keyword">var</span> currentBtn = $(<span class="variable language_">this</span>)</span><br><span class="line">        <span class="comment">// alert(id)</span></span><br><span class="line">        layer.<span class="title function_">confirm</span>(<span class="string">&#x27;您确定要删除吗？&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">btn</span>: [<span class="string">&#x27;确定&#x27;</span>, <span class="string">&#x27;取消&#x27;</span>] <span class="comment">//按钮</span></span><br><span class="line">        &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: &#123;<span class="string">&#x27;id&#x27;</span>: id&#125;,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (args.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="comment">// layer.msg(args.msg, &#123;icon: 1&#125;, function () &#123;</span></span><br><span class="line">                            <span class="comment">// location.reload()</span></span><br><span class="line">                        <span class="comment">// &#125;)</span></span><br><span class="line">                        <span class="comment">// 2.利用DOM操作 动态刷新tr标签</span></span><br><span class="line">                        layer.<span class="title function_">msg</span>(args.<span class="property">msg</span>,&#123;<span class="attr">icon</span>:<span class="number">1</span>&#125;)</span><br><span class="line">                        <span class="comment">// $(this).parent().parent().remove()此时this指向当前函数</span></span><br><span class="line">                        currentBtn.<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">remove</span>()</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        layer.<span class="title function_">msg</span>(args.<span class="property">msg</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            layer.<span class="title function_">msg</span>(<span class="string">&#x27;取消删除&#x27;</span>, &#123;</span><br><span class="line">                <span class="comment">// time: 20000, //20s后自动关闭</span></span><br><span class="line">                <span class="comment">// btn: [&#x27;明白了&#x27;, &#x27;知道了&#x27;]</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>刷新页面 location.reload()</span><br><span class="line"><span class="number">2.</span>利用DOM操作 动态刷新tr标签 currentBtn.parent().parent().remove()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORM案例及多对多关系创建</title>
      <link href="/2022/06/30/Django%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/"/>
      <url>/2022/06/30/Django%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/</url>
      
        <content type="html"><![CDATA[<h3 id="图书管理的增删改查"><a href="#图书管理的增删改查" class="headerlink" title="图书管理的增删改查"></a>图书管理的增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect,HttpResponse</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># 首页</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;home.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先查询出所有的书籍信息 传递给html页面</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_list</span>(<span class="params">request</span>):</span><br><span class="line">    book_queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;book_list.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 获取前端提交过来的所有数据</span></span><br><span class="line">        title = request.POST.get(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">        price = request.POST.get(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">        publish_date = request.POST.get(<span class="string">&quot;publish_date&quot;</span>)</span><br><span class="line">        publish_id = request.POST.get(<span class="string">&quot;publish&quot;</span>)</span><br><span class="line">        authors_list = request.POST.getlist(<span class="string">&quot;authors&quot;</span>)  <span class="comment"># [1,2,3,4,]</span></span><br><span class="line">        <span class="comment"># 操作数据库存储数据</span></span><br><span class="line">        book_obj = models.Book.objects.create(title=title,price=price,publish_date=publish_date,publish_id=publish_id)</span><br><span class="line">        <span class="comment"># 书籍与作者的关系表</span></span><br><span class="line">        book_obj.authors.add(*authors_list)</span><br><span class="line">        <span class="comment"># 跳转到书籍的展示页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;book_list&#x27;</span>)</span><br><span class="line">    <span class="comment"># 先获取当前系统中所有的出版社信息和作者信息</span></span><br><span class="line">    publish_queryset = models.Publish.objects.<span class="built_in">all</span>()</span><br><span class="line">    author_queryset = models.Author.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;book_add.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_edit</span>(<span class="params">request,edit_id</span>):</span><br><span class="line">    <span class="comment"># 获取当前用户想要编辑的书籍对象 展示给用户看</span></span><br><span class="line">    edit_obj = models.Book.objects.<span class="built_in">filter</span>(pk=edit_id).first()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.POST.get(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">        price = request.POST.get(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">        publish_date = request.POST.get(<span class="string">&quot;publish_date&quot;</span>)</span><br><span class="line">        publish_id = request.POST.get(<span class="string">&quot;publish&quot;</span>)</span><br><span class="line">        authors_list = request.POST.getlist(<span class="string">&quot;authors&quot;</span>)  <span class="comment"># [1,2,3,4,]</span></span><br><span class="line">        models.Book.objects.<span class="built_in">filter</span>(pk=edit_id).update(title=title,price=price,</span><br><span class="line">        publish_date=publish_date,publish_id=publish_id)</span><br><span class="line">        <span class="comment"># 该第三张关系表</span></span><br><span class="line">        edit_obj.authors.<span class="built_in">set</span>(authors_list)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;book_list&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    publish_queryset = models.Publish.objects.<span class="built_in">all</span>()</span><br><span class="line">    author_queryset = models.Author.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;book_edit.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_delete</span>(<span class="params">request,delete_id</span>):</span><br><span class="line">    <span class="comment"># 简单粗暴 直接删除</span></span><br><span class="line">    models.Book.objects.<span class="built_in">filter</span>(pk=delete_id).delete()</span><br><span class="line">    <span class="comment"># 直接跳转到展示页</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;book_list&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="choices参数-数据库字段设计常见"><a href="#choices参数-数据库字段设计常见" class="headerlink" title="choices参数(数据库字段设计常见)"></a>choices参数(数据库字段设计常见)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 针对某个可以列举完全的可能性字段，我们应该如何存储</span></span><br><span class="line"><span class="comment"># 只要某个字段的可能性是可以列举完全的，那么一般情况下都会采用choices参数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    <span class="comment"># 性别</span></span><br><span class="line">    gender_choices = (</span><br><span class="line">        (<span class="number">1</span>,<span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>,<span class="string">&#x27;其他&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    gender = models.IntegerField(choices=gender_choices)</span><br><span class="line">    </span><br><span class="line">    score_choices = (</span><br><span class="line">        (<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;优秀&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;良好&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;及格&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;不合格&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 保证字段类型跟列举出来的元祖第一个数据类型一致即可</span></span><br><span class="line">    score = models.CharField(choices=score_choices,null=<span class="literal">True</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.gender字段存的数字不在上述元祖列举的范围内容</span></span><br><span class="line"><span class="string">    2.如果在 如何获取对应的中文信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">    <span class="comment"># models.User.objects.create(username=&#x27;jason&#x27;,age=18,gender=1)</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username=&#x27;egon&#x27;,age=85,gender=2)</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username=&#x27;tank&#x27;,age=40,gender=3)</span></span><br><span class="line">    <span class="comment"># 存的时候 没有列举出来的数字也能存（范围还是按照字段类型决定）</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username=&#x27;tony&#x27;,age=45,gender=4)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># print(user_obj.gender)</span></span><br><span class="line">    <span class="comment"># 只要是choices参数的字段 如果你想要获取对应信息 固定写法 get_字段名_display()</span></span><br><span class="line">    <span class="comment"># print(user_obj.get_gender_display())</span></span><br><span class="line"></span><br><span class="line">    user_obj = models.User.objects.<span class="built_in">filter</span>(pk=<span class="number">4</span>).first()</span><br><span class="line">    <span class="comment"># 如果没有对应关系 那么字段是什么还是展示什么</span></span><br><span class="line">    <span class="built_in">print</span>(user_obj.get_gender_display())  <span class="comment"># 4</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="MTV与MVC模型"><a href="#MTV与MVC模型" class="headerlink" title="MTV与MVC模型"></a>MTV与MVC模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MTV:Django号称是MTV模型</span></span><br><span class="line">M:models</span><br><span class="line">T:templates</span><br><span class="line">V:views</span><br><span class="line">    </span><br><span class="line"><span class="comment"># MVC:其实django本质也是MVC</span></span><br><span class="line">M:models</span><br><span class="line">V:views</span><br><span class="line">C:controller</span><br><span class="line">  </span><br><span class="line"><span class="comment"># vue框架:MVVM模型</span></span><br></pre></td></tr></table></figure><h3 id="多对多三种创建方式"><a href="#多对多三种创建方式" class="headerlink" title="多对多三种创建方式"></a>多对多三种创建方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全自动:利用orm自动帮我们创建第三张关系表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">优点:代码不需要你写 非常的方便 还支持orm提供操作第三张关系表的方法...</span></span><br><span class="line"><span class="string">不足之处:第三张关系表的扩展性极差(没有办法额外添加字段...)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 纯手动</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Book2Author</span>(models.Model):</span><br><span class="line">    book_id = models.ForeignKey(to=<span class="string">&#x27;Book&#x27;</span>)</span><br><span class="line">    author_id = models.ForeignKey(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  优点:第三张表完全取决于你自己进行额外的扩展</span></span><br><span class="line"><span class="string">  不足之处:需要写的代码较多，不能够再使用orm提供的简单的方法;</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 半自动</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>,</span><br><span class="line">                                     through=<span class="string">&#x27;Book2Author&#x27;</span>,</span><br><span class="line">                                     through_fields=(<span class="string">&#x27;book&#x27;</span>,<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">                                     )</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># books = models.ManyToManyField(to=&#x27;Book&#x27;,</span></span><br><span class="line">    <span class="comment">#                                  through=&#x27;Book2Author&#x27;,</span></span><br><span class="line">    <span class="comment">#                                  through_fields=(&#x27;author&#x27;,&#x27;book&#x27;)</span></span><br><span class="line">    <span class="comment">#                                  )</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book2Author</span>(models.Model):</span><br><span class="line">    book = models.ForeignKey(to=<span class="string">&#x27;Book&#x27;</span>)</span><br><span class="line">    author = models.ForeignKey(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">through_fields字段先后顺序</span></span><br><span class="line"><span class="string">    判断的本质：</span></span><br><span class="line"><span class="string">        通过第三张表查询对应的表 需要用到哪个字段就把哪个字段放前面</span></span><br><span class="line"><span class="string">    你也可以简化判断</span></span><br><span class="line"><span class="string">        当前表是谁 就把对应的关联字段放前面</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">半自动:可以使用orm的正反向查询 但是没法使用add,set,remove,clear这四个方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">什么时候用自动，什么时候用手动？第三张表只有关联字段，用自动  第三张表有扩展字段，需要手动写</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django模型层</title>
      <link href="/2022/06/26/Django%E6%A8%A1%E5%9E%8B%E5%B1%82/"/>
      <url>/2022/06/26/Django%E6%A8%A1%E5%9E%8B%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="单表查询与外键操作"><a href="#单表查询与外键操作" class="headerlink" title="单表查询与外键操作"></a>单表查询与外键操作</h2><h3 id="单表操作"><a href="#单表操作" class="headerlink" title="单表操作"></a>单表操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django自带的sqlite3数据库对日期格式不是很敏感 处理的时候容易出错</span></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.create(name=&#x27;jason&#x27;,age=18,register_time=&#x27;2002-1-21&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># import datetime</span></span><br><span class="line">    <span class="comment"># ctime = datetime.datetime.now()</span></span><br><span class="line">    <span class="comment"># user_obj = models.User(name=&#x27;keven&#x27;,age=84,register_time=ctime)</span></span><br><span class="line">    <span class="comment"># user_obj.save()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=2).delete()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    pk会自动查找到当前表的主键字段 指代的就是当前表的主键字段</span></span><br><span class="line"><span class="string">    用了pk之后 你就不需要指代当前表的主键字段到底叫什么了</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># user_obj.delete()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># models.User.objects.filter(pk=4).update(name=&#x27;egonDSB&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.get(pk=4)</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=6)</span></span><br><span class="line">    <span class="comment"># get方法返回的直接就是当前数据对象但是该方法不推荐使用 一旦数据不存在该方法会直接报错而filter则不会</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># user_obj.name = &#x27;PPP&#x27;</span></span><br><span class="line">    <span class="comment"># user_obj.save()</span></span><br></pre></td></tr></table></figure><h3 id="必知必会13条"><a href="#必知必会13条" class="headerlink" title="必知必会13条"></a>必知必会13条</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必知必会13条</span></span><br><span class="line">    <span class="comment"># 1.all()  查询所有数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.filter()     带有过滤条件的查询</span></span><br><span class="line">    <span class="comment"># 3.get()        直接拿数据对象 但是条件不存在直接报错</span></span><br><span class="line">    <span class="comment"># 4.first()      拿queryset里面第一个元素</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all().first()</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># 5.last()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all().last()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 6.values()  可以指定获取的数据字段  select name,age from ...     列表套字典</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values(&#x27;name&#x27;,&#x27;age&#x27;)  # &lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;jason&#x27;, &#x27;age&#x27;: 18&#125;, &#123;&#x27;name&#x27;: &#x27;egonPPP&#x27;, &#x27;age&#x27;: 84&#125;]&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7.values_list()  列表套元祖</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values_list(&#x27;name&#x27;,&#x27;age&#x27;)  # &lt;QuerySet [(&#x27;jason&#x27;, 18), (&#x27;egonPPP&#x27;, 84)]&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#  # 查看内部封装的sql语句</span></span><br><span class="line">    <span class="comment">#  上述查看sql语句的方式  只能用于queryset对象</span></span><br><span class="line">    <span class="comment">#  只有queryset对象才能够点击query查看内部的sql语句</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8.distinct()  去重</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values(&#x27;name&#x27;,&#x27;age&#x27;).distinct()</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    去重一定要是一模一样的数据</span></span><br><span class="line"><span class="string">    如果带有主键那么肯定不一样 你在往后的查询中一定不要忽略主键</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 9.order_by()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.order_by(&#x27;age&#x27;)  # 默认升序</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.order_by(&#x27;-age&#x27;)  # 降序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 10.reverse()  反转的前提是 数据已经排过序了  order_by()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all()</span></span><br><span class="line">    <span class="comment"># res1 = models.User.objects.order_by(&#x27;age&#x27;).reverse()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 11.count()  统计当前数据的个数</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.count()</span></span><br><span class="line">    <span class="comment"># 12.exclude()  排除在外</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.exclude(name=&#x27;jason&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 13.exists()  基本用不到因为数据本身就自带布尔值  返回的是布尔值</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=10).exists()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">当你只是想测试django中的某一个py文件内容 那么你可以不用书写前后端交互的形式</span></span><br><span class="line"><span class="string">而是直接写一个测试脚本即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">脚本代码无论是写在应用下的tests.py还是自己单独开设py文件都可以</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 测试环境的准备 去manage.py中拷贝前四行代码 然后自己写两行</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;day64.settings&quot;</span>)</span><br><span class="line">    <span class="keyword">import</span> django</span><br><span class="line">    django.setup()</span><br><span class="line">    <span class="comment"># 在这个代码块的下面就可以测试django里面的单个py文件了</span></span><br></pre></td></tr></table></figure><h3 id="查看内部sql语句的方式"><a href="#查看内部sql语句的方式" class="headerlink" title="查看内部sql语句的方式"></a>查看内部sql语句的方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">res = models.User.objects.values_list(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)  <span class="comment"># &lt;QuerySet [(&#x27;jason&#x27;, 18), (&#x27;egonPPP&#x27;, 84)]&gt;</span></span><br><span class="line"><span class="built_in">print</span>(res.query)</span><br><span class="line">queryset对象才能够点击query查看内部的sql语句</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2:所有的sql语句都能查看</span></span><br><span class="line"><span class="comment"># 去配置文件中配置一下即可</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;django.db.backends&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="神奇的双下划线查询"><a href="#神奇的双下划线查询" class="headerlink" title="神奇的双下划线查询"></a>神奇的双下划线查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 年龄大于35岁的数据</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__gt=35)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 年龄小于35岁的数据</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__lt=35)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大于等于 小于等于</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__gte=32)</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__lte=32)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 年龄是18 或者 32 或者40</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__in=[18,32,40])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 年龄在18到40岁之间的  首尾都要</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(age__range=[18,40])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询出名字里面含有s的数据  模糊查询</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(name__contains=&#x27;s&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否区分大小写  查询出名字里面含有p的数据  区分大小写</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(name__contains=&#x27;p&#x27;)</span></span><br><span class="line"><span class="comment"># 忽略大小写</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(name__icontains=&#x27;p&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(name__startswith=&#x27;j&#x27;)</span></span><br><span class="line"><span class="comment"># res1 = models.User.objects.filter(name__endswith=&#x27;j&#x27;)</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查询出注册时间是 2020 1月</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(register_time__month=&#x27;1&#x27;)</span></span><br><span class="line"><span class="comment"># res = models.User.objects.filter(register_time__year=&#x27;2020&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="一对多外键增删改查"><a href="#一对多外键增删改查" class="headerlink" title="一对多外键增删改查"></a>一对多外键增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line"><span class="comment"># 1  直接写实际字段 id</span></span><br><span class="line"><span class="comment"># models.Book.objects.create(title=&#x27;论语&#x27;,price=899.23,publish_id=1)</span></span><br><span class="line"><span class="comment"># models.Book.objects.create(title=&#x27;聊斋&#x27;,price=444.23,publish_id=2)</span></span><br><span class="line"><span class="comment"># models.Book.objects.create(title=&#x27;老子&#x27;,price=333.66,publish_id=1)</span></span><br><span class="line"><span class="comment"># 2  虚拟字段 对象</span></span><br><span class="line"><span class="comment"># publish_obj = models.Publish.objects.filter(pk=2).first()</span></span><br><span class="line"><span class="comment"># models.Book.objects.create(title=&#x27;红楼梦&#x27;,price=666.23,publish=publish_obj)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line"><span class="comment"># models.Publish.objects.filter(pk=1).delete()  # 级联删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line"><span class="comment"># models.Book.objects.filter(pk=1).update(publish_id=2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># publish_obj = models.Publish.objects.filter(pk=1).first()</span></span><br><span class="line"><span class="comment"># models.Book.objects.filter(pk=1).update(publish=publish_obj)</span></span><br></pre></td></tr></table></figure><h3 id="多对多外键增删改查"><a href="#多对多外键增删改查" class="headerlink" title="多对多外键增删改查"></a>多对多外键增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何给书籍添加作者？</span></span><br><span class="line">    book_obj = models.Book.objects.<span class="built_in">filter</span>(pk=<span class="number">1</span>).first()</span><br><span class="line">    <span class="comment"># print(book_obj.authors)  # 就类似于你已经到了第三张关系表了</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(1)  # 书籍id为1的书籍绑定一个主键为1 的作者</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(2,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj2 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj1,author_obj2)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    add给第三张关系表添加数据</span></span><br><span class="line"><span class="string">        括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(2)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(1,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(author_obj,author_obj1)</span></span><br><span class="line">    <span class="comment"># remove方法括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([1,2])  # 括号内必须给一个可迭代对象</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([3])  # 括号内必须给一个可迭代对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># set括号内必须传一个可迭代对象，该对象内既可以数字也可以对象 并且都支持多个</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([author_obj,author_obj1])  # 括号内必须给一个可迭代对象</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 清空 在第三张关系表中清空某个书籍与作者的绑定关系 clear括号内不要加任何参数</span></span><br><span class="line">    book_obj.authors.clear()</span><br></pre></td></tr></table></figure><h3 id="正反向的概念"><a href="#正反向的概念" class="headerlink" title="正反向的概念"></a>正反向的概念</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正向</span></span><br><span class="line"><span class="comment"># 反向</span></span><br><span class="line">外键字段在我手上那么，我查你就是正向;外键字段如果不在手上，我查你就是反向</span><br><span class="line">  book &gt;&gt;&gt;外键字段在书那儿(正向)&gt;&gt;&gt; publish</span><br><span class="line">  publish&gt;&gt;&gt;外键字段在书那儿(反向)&gt;&gt;&gt;book</span><br><span class="line">  一对一和多对多正反向的判断也是如此</span><br><span class="line">  </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">正向查询按字段   当你的结果可能有多个的时候就需要加.all()</span></span><br><span class="line"><span class="string">反向查询按表名小写 加_set</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="子查询-基于对象的跨表查询"><a href="#子查询-基于对象的跨表查询" class="headerlink" title="子查询(基于对象的跨表查询)"></a>子查询(基于对象的跨表查询)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查询书籍主键为1的出版社</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># # 书查出版社 正向</span></span><br><span class="line">    <span class="comment"># res = book_obj.publish</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.查询书籍主键为2的作者</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># # 书查作者 正向</span></span><br><span class="line">    <span class="comment"># # res = book_obj.authors  # app01.Author.None</span></span><br><span class="line">    <span class="comment"># res = book_obj.authors.all()  # &lt;QuerySet [&lt;Author: Author object&gt;, &lt;Author: Author object&gt;]&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.查询作者jason的电话号码</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name=&#x27;jason&#x27;).first()</span></span><br><span class="line">    <span class="comment"># res = author_obj.author_detail</span></span><br><span class="line">    <span class="comment"># print(res.phone)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    正向什么时候需要加.all()</span></span><br><span class="line"><span class="string">        当你的结果可能有多个的时候就需要加.all()</span></span><br><span class="line"><span class="string">        如果是一个则直接拿到数据对象</span></span><br><span class="line"><span class="string">            book_obj.publish</span></span><br><span class="line"><span class="string">            book_obj.authors.all()</span></span><br><span class="line"><span class="string">            author_obj.author_detail</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 4.查询出版社是东方出版社出版的书</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(name=&#x27;东方出版社&#x27;).first()</span></span><br><span class="line">    <span class="comment"># 出版社查书  反向</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set.all()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.查询作者是jason写过的书</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name=&#x27;jason&#x27;).first()</span></span><br><span class="line">    <span class="comment"># 作者查书      反向</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set.all()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6.查询手机号是110的作者姓名</span></span><br><span class="line">    <span class="comment"># author_detail_obj = models.AuthorDetail.objects.filter(phone=110).first()</span></span><br><span class="line">    <span class="comment"># res = author_detail_obj.author</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    基于对象,反向查询的时候:</span></span><br><span class="line"><span class="string">            当你的查询结果可以有多个的时候 就必须加_set.all()</span></span><br><span class="line"><span class="string">            当你的结果只有一个的时候 不需要加_set.all()</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="联表查询-基于双下划线的跨表查询"><a href="#联表查询-基于双下划线的跨表查询" class="headerlink" title="联表查询(基于双下划线的跨表查询)"></a>联表查询(基于双下划线的跨表查询)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于双下划线的跨表查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.查询jason的手机号和作者姓名</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(name=&#x27;jason&#x27;).values(&#x27;author_detail__phone&#x27;,&#x27;name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.AuthorDetail.objects.filter(author__name=&#x27;jason&#x27;).values(&#x27;phone&#x27;,&#x27;author__name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.查询书籍主键为1的出版社名称和书的名称</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values(&#x27;title&#x27;,&#x27;publish__name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.Publish.objects.filter(book__id=1).values(&#x27;name&#x27;,&#x27;book__title&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.查询书籍主键为1的作者姓名</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values(&#x27;authors__name&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(book__id=1).values(&#x27;name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询书籍主键是1的作者的手机号</span></span><br><span class="line">    <span class="comment"># book author authordetail</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values(&#x27;authors__author_detail__phone&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="ORM中的其他方法及参数"><a href="#ORM中的其他方法及参数" class="headerlink" title="ORM中的其他方法及参数"></a>ORM中的其他方法及参数</h2><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 聚合查询      aggregate</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    聚合查询通常情况下都是配合分组一起使用的</span></span><br><span class="line"><span class="string">    只要是跟数据库相关的模块 </span></span><br><span class="line"><span class="string">        基本上都在django.db.models里面</span></span><br><span class="line"><span class="string">        如果上述没有那么应该在django.db里面</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max,Min,Sum,Count,Avg</span><br><span class="line">    <span class="comment"># 1 所有书的平均价格</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.aggregate(Avg(&#x27;price&#x27;))</span></span><br><span class="line">    <span class="comment"># 2.上述方法一次性使用</span></span><br><span class="line">    res = models.Book.objects.aggregate(Max(<span class="string">&#x27;price&#x27;</span>),Min(<span class="string">&#x27;price&#x27;</span>),Sum(<span class="string">&#x27;price&#x27;</span>),Count(<span class="string">&#x27;pk&#x27;</span>),Avg(<span class="string">&#x27;price&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分组查询  annotate</span></span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max, Min, Sum, Count, Avg</span><br><span class="line">    <span class="comment"># 1.统计每一本书的作者个数</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate()  # models后面点什么 就是按什么分组</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate(author_num=Count(&#x27;authors&#x27;)).values(&#x27;title&#x27;,&#x27;author_num&#x27;)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    author_num是我们自己定义的字段 用来存储统计出来的每本书对应的作者个数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># res1 = models.Book.objects.annotate(author_num=Count(&#x27;authors__id&#x27;)).values(&#x27;title&#x27;,&#x27;author_num&#x27;)</span></span><br><span class="line">    <span class="comment"># print(res,res1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.统计每个出版社卖的最便宜的书的价格(作业:复习原生SQL语句 写出来)</span></span><br><span class="line">    <span class="comment"># res = models.Publish.objects.annotate(min_price=Min(&#x27;book__price&#x27;)).values(&#x27;name&#x27;,&#x27;min_price&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.统计不止一个作者的图书</span></span><br><span class="line">        <span class="comment"># 1.先按照图书分组 求每一本书对应的作者个数</span></span><br><span class="line">        <span class="comment"># 2.过滤出不止一个作者的图书</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate(author_num=Count(&#x27;authors&#x27;)).filter(author_num__gt=1).values(&#x27;title&#x27;,&#x27;author_num&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4.查询每个作者出的书的总价格</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.annotate(sum_price=Sum(&#x27;book__price&#x27;)).values(&#x27;name&#x27;,&#x27;sum_price&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    如果我想按照指定的字段分组该如何处理呢？</span></span><br><span class="line"><span class="string">        models.Book.objects.values(&#x27;price&#x27;).annotate()</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="F与Q查询"><a href="#F与Q查询" class="headerlink" title="F与Q查询"></a>F与Q查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># F查询能够帮助你直接获取到表中某个字段对应的数据</span></span><br><span class="line"><span class="comment"># 1.查询卖出数大于库存数的书籍</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"><span class="comment"># res = models.Book.objects.filter(maichu__gt=F(&#x27;kucun&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.将所有书籍的价格提升500块</span></span><br><span class="line"><span class="comment"># models.Book.objects.update(price=F(&#x27;price&#x27;) + 500)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.将所有书的名称后面加上爆款两个字</span></span><br><span class="line"><span class="comment"># 在操作字符类型的数据的时候 F不能够直接做到字符串的拼接</span></span><br><span class="line"><span class="keyword">from</span> django.db.models.functions <span class="keyword">import</span> Concat</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Value</span><br><span class="line">models.Book.objects.update(title=Concat(F(<span class="string">&#x27;title&#x27;</span>), Value(<span class="string">&#x27;爆款&#x27;</span>)))</span><br><span class="line"><span class="comment"># models.Book.objects.update(title=F(&#x27;title&#x27;) + &#x27;爆款&#x27;)  </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Q查询</span></span><br><span class="line">   <span class="comment"># 1.查询卖出数大于100或者价格小于600的书籍</span></span><br><span class="line">   <span class="comment"># res = models.Book.objects.filter(maichu__gt=100,price__lt=600)</span></span><br><span class="line">   <span class="string">&quot;&quot;&quot;filter括号内多个参数是and关系&quot;&quot;&quot;</span></span><br><span class="line">   <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">   <span class="comment"># res = models.Book.objects.filter(Q(maichu__gt=100),Q(price__lt=600))  # Q包裹逗号分割 还是and关系</span></span><br><span class="line">   <span class="comment"># res = models.Book.objects.filter(Q(maichu__gt=100)|Q(price__lt=600))  # | or关系</span></span><br><span class="line">   <span class="comment"># res = models.Book.objects.filter(~Q(maichu__gt=100)|Q(price__lt=600))  # ~ not关系</span></span><br><span class="line">   <span class="comment"># print(res)  # &lt;QuerySet []&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># Q的高阶用法  能够将查询条件的左边也变成字符串的形式</span></span><br><span class="line">   q = Q()</span><br><span class="line">   q.connector = <span class="string">&#x27;or&#x27;</span></span><br><span class="line">   q.children.append((<span class="string">&#x27;maichu__gt&#x27;</span>,<span class="number">100</span>))</span><br><span class="line">   q.children.append((<span class="string">&#x27;price__lt&#x27;</span>,<span class="number">600</span>))</span><br><span class="line">   res = models.Book.objects.<span class="built_in">filter</span>(q)  <span class="comment"># 默认还是and关系</span></span><br><span class="line">   <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="django中如何开启事务"><a href="#django中如何开启事务" class="headerlink" title="django中如何开启事务"></a>django中如何开启事务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">事务</span></span><br><span class="line"><span class="string">ACID</span></span><br><span class="line"><span class="string">原子性</span></span><br><span class="line"><span class="string">不可分割的最小单位</span></span><br><span class="line"><span class="string">一致性</span></span><br><span class="line"><span class="string">跟原子性是相辅相成</span></span><br><span class="line"><span class="string">隔离性</span></span><br><span class="line"><span class="string">事务之间互相不干扰</span></span><br><span class="line"><span class="string">持久性</span></span><br><span class="line"><span class="string">事务一旦确认永久生效</span></span><br><span class="line"><span class="string">事务的回滚 </span></span><br><span class="line"><span class="string">rollback</span></span><br><span class="line"><span class="string">事务的确认</span></span><br><span class="line"><span class="string">commit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 目前你只需要掌握Django中如何简单的开启事务</span></span><br><span class="line">    <span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">            <span class="comment"># sql1</span></span><br><span class="line">            <span class="comment"># sql2</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="comment"># 在with代码快内书写的所有orm操作都是属于同一个事务</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行其他操作&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="orm中常用字段及参数"><a href="#orm中常用字段及参数" class="headerlink" title="orm中常用字段及参数"></a>orm中常用字段及参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">AutoField</span><br><span class="line">主键字段 primary_key=<span class="literal">True</span></span><br><span class="line">  </span><br><span class="line">CharFieldvarchar</span><br><span class="line">verbose_name字段的注释</span><br><span class="line">max_length长度</span><br><span class="line">  </span><br><span class="line">IntegerField<span class="built_in">int</span></span><br><span class="line">BigIntegerFieldbigint</span><br><span class="line"></span><br><span class="line">DecimalField</span><br><span class="line">max_digits=<span class="number">8</span></span><br><span class="line">    decimal_places=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">EmailFiledvarchar(<span class="number">254</span>)</span><br><span class="line"></span><br><span class="line">DateFielddate</span><br><span class="line">DateTimeFielddatetime</span><br><span class="line"></span><br><span class="line">auto_now:每次修改数据的时候都会自动更新当前时间</span><br><span class="line">auto_now_add:只在创建数据的时候记录创建时间后续不会自动修改了</span><br><span class="line">    </span><br><span class="line">BooleanField(Field)- 布尔值类型</span><br><span class="line">该字段传布尔值(<span class="literal">False</span>/<span class="literal">True</span>) 数据库里面存<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">TextField(Field)- 文本类型</span><br><span class="line">该字段可以用来存大段内容(文章、博客...)  没有字数限制</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FileField(Field)- 字符类型</span><br><span class="line">   upload_to = <span class="string">&quot;/data&quot;</span></span><br><span class="line">  给该字段传一个文件对象，会自动将文件保存到/data目录下然后将文件路径保存到数据库中,例如/data/a.txt</span><br><span class="line"></span><br><span class="line">直接参考博客:https://www.cnblogs.com/Dominic-Ji/p/<span class="number">9203990.</span>html</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># django除了给你提供了很多字段类型之外 还支持你自定义字段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCharField</span>(models.Field):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,max_length,*args,**kwargs</span>):</span><br><span class="line">        self.max_length = max_length</span><br><span class="line">        <span class="comment"># 调用父类的init方法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(max_length=max_length,*args,**kwargs)  <span class="comment"># 一定要是关键字的形式传入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">db_type</span>(<span class="params">self, connection</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        返回真正的数据类型及各种约束条件</span></span><br><span class="line"><span class="string">        :param connection:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;char(%s)&#x27;</span>%self.max_length</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义字段使用</span></span><br><span class="line">myfield = MyCharField(max_length=<span class="number">16</span>,null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 外键字段及参数</span></span><br><span class="line">unique=<span class="literal">True</span></span><br><span class="line">ForeignKey(unique=<span class="literal">True</span>)   ===OneToOneField()</span><br><span class="line">  <span class="comment"># 你在用前面字段创建一对一 orm会有一个提示信息 orm推荐你使用后者但是前者也能用</span></span><br><span class="line">  </span><br><span class="line">db_index</span><br><span class="line">如果db_index=<span class="literal">True</span> 则代表着为此字段设置索引</span><br><span class="line"></span><br><span class="line">to_field</span><br><span class="line">设置要关联的表的字段  默认不写关联的就是另外一张的主键字段</span><br><span class="line"></span><br><span class="line">on_delete</span><br><span class="line">当删除关联表中的数据时，当前表与其关联的行的行为。</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  django2.X及以上版本 需要你自己指定外键字段的级联更新级联删除</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="数据库查询优化"><a href="#数据库查询优化" class="headerlink" title="数据库查询优化"></a>数据库查询优化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">only与defer</span><br><span class="line">select_related与prefetch_related</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">orm语句的特点:</span></span><br><span class="line"><span class="string">惰性查询</span></span><br><span class="line"><span class="string">如果你仅仅只是书写了orm语句 在后面根本没有用到该语句所查询出来的参数</span></span><br><span class="line"><span class="string">那么orm会自动识别 直接不执行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># only与defer</span></span><br><span class="line"><span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># print(res)  # 要用数据了才会走数据库</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 想要获取书籍表中所有数的名字</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.values(&#x27;title&#x27;)</span></span><br><span class="line">    <span class="comment"># for d in res:</span></span><br><span class="line">    <span class="comment">#     print(d.get(&#x27;title&#x27;))</span></span><br><span class="line">    <span class="comment"># 你给我实现获取到的是一个数据对象 然后点title就能够拿到书名 并且没有其他字段</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.only(&#x27;title&#x27;)</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># print(res)  # &lt;QuerySet [&lt;Book: 三国演义爆款&gt;, &lt;Book: 红楼梦爆款&gt;, &lt;Book: 论语爆款&gt;, &lt;Book: 聊斋爆款&gt;, &lt;Book: 老子爆款&gt;]&gt;</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">        <span class="comment"># print(i.title)  # 点击only括号内的字段 不会走数据库</span></span><br><span class="line">        <span class="comment"># print(i.price)  # 点击only括号内没有的字段 会重新走数据库查询而all不需要走了</span></span><br><span class="line"></span><br><span class="line">    res = models.Book.objects.defer(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 对象除了没有title属性之外其他的都有</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(i.price)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    defer与only刚好相反</span></span><br><span class="line"><span class="string">        defer括号内放的字段不在查询出来的对象里面 查询该字段需要重新走数据</span></span><br><span class="line"><span class="string">        而如果查询的是非括号内的字段 则不需要走数据库了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># select_related与prefetch_related</span></span><br><span class="line"><span class="comment"># select_related与prefetch_related  跟跨表操作有关</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">    <span class="comment">#     print(i.publish.name)  # 每循环一次就要走一次数据库查询</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># res = models.Book.objects.select_related(&#x27;authors&#x27;)  # INNER JOIN</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    select_related内部直接先将book与publish连起来 然后一次性将大表里面的所有数据</span></span><br><span class="line"><span class="string">    全部封装给查询出来的对象</span></span><br><span class="line"><span class="string">        这个时候对象无论是点击book表的数据还是publish的数据都无需再走数据库查询了</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    select_related括号内只能放外键字段    一对多 一对一 多对多不行</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">    <span class="comment">#     print(i.publish.name)  # 每循环一次就要走一次数据库查询</span></span><br><span class="line"></span><br><span class="line">    res = models.Book.objects.prefetch_related(<span class="string">&#x27;publish&#x27;</span>)  <span class="comment"># 子查询</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    prefetch_related该方法内部其实就是子查询</span></span><br><span class="line"><span class="string">        将子查询查询出来的所有结果也给你封装到对象中,给你的感觉好像也是一次性搞定的</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(i.publish.name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django模板层</title>
      <link href="/2022/06/23/Django%E6%A8%A1%E6%9D%BF%E5%B1%82/"/>
      <url>/2022/06/23/Django%E6%A8%A1%E6%9D%BF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h3 id="模版语法传值"><a href="#模版语法传值" class="headerlink" title="模版语法传值"></a>模版语法传值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">在模板会经常看到这两个：&#123;&#123;&#125;&#125;:变量相关；&#123;%%&#125;:逻辑相关 django取值是 .取值</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 模版语法可以传递的后端python数据类型</span></span><br><span class="line">    n = <span class="number">123</span></span><br><span class="line">    f = <span class="number">11.11</span></span><br><span class="line">    s = <span class="string">&#x27;我也想睡觉&#x27;</span></span><br><span class="line">    b = <span class="literal">True</span></span><br><span class="line">    l = [<span class="string">&#x27;小红&#x27;</span>,<span class="string">&#x27;姗姗&#x27;</span>,<span class="string">&#x27;花花&#x27;</span>,<span class="string">&#x27;茹茹&#x27;</span>]</span><br><span class="line">    t = (<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>)</span><br><span class="line">    d = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;info&#x27;</span>:<span class="string">&#x27;这个人有点意思&#x27;</span>&#125;</span><br><span class="line">    se = &#123;<span class="string">&#x27;晶晶&#x27;</span>,<span class="string">&#x27;洋洋&#x27;</span>,<span class="string">&#x27;哈哈&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我被执行了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;睡觉了&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_self</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;self&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @staticmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_func</span>():</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;func&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_class</span>(<span class="params">cls</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;cls&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对象被展示到html页面上 就类似于执行了打印操作也会触发__str__方法</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;到底会不会？&#x27;</span>  </span><br><span class="line">        </span><br><span class="line">    obj = MyClass()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return render(request,&#x27;index.html&#x27;,&#123;&#125;)  # 一个个传</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; n &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; f &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; s &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; b &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; l &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; d &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; t &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; se &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;传递函数名会自动加括号调用 但是模版语法不支持给函数传额外的参数:&#123;&#123; func &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;传类名的时候也会自动加括号调用(实例化)&#123;&#123; MyClass &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;内部能够自动判断出当前的变量名是否可以加括号调用 如果可以就会自动执行  针对的是函数名和类名&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_self &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_func &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_class &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># django模版语法的取值 是固定的格式 只能采用“句点符” .</span></span><br><span class="line">&lt;p&gt;&#123;&#123; d.username &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; l<span class="number">.0</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; d.hobby<span class="number">.3</span>.info &#125;&#125;&lt;/p&gt;</span><br><span class="line"><span class="comment"># 即可以点键也可以点索引 还可以两者混用</span></span><br></pre></td></tr></table></figure><h3 id="过滤器-过滤器只能最多有两个参数"><a href="#过滤器-过滤器只能最多有两个参数" class="headerlink" title="过滤器(过滤器只能最多有两个参数)"></a>过滤器(过滤器只能最多有两个参数)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤器就类似于是模版语法内置的 内置方法</span></span><br><span class="line">基本语法：&#123;&#123;数据|过滤器:参数&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义</span></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">|safe</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line">res = mark_safe(<span class="string">&#x27;&lt;h1&gt;新新&lt;/h1&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;过滤器&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;统计长度:&#123;&#123; s|length &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;默认值(第一个参数布尔值是<span class="literal">True</span>就展示第一个参数的值否在展示冒号后面的值):&#123;&#123; b|default:<span class="string">&#x27;啥也不是&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;文件大小:&#123;&#123; file_size|filesizeformat &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;日期格式化:&#123;&#123; current_time|date:<span class="string">&#x27;Y-m-d H:i:s&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切片操作(支持步长):&#123;&#123; l|<span class="built_in">slice</span>:<span class="string">&#x27;0:4:2&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取字符(包含三个点):&#123;&#123; info|truncatechars:<span class="number">9</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取单词(不包含三个点 按照空格切):&#123;&#123; egl|truncatewords:<span class="number">9</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取单词(不包含三个点 按照空格切):&#123;&#123; info|truncatewords:<span class="number">9</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;移除特定的字符:&#123;&#123; msg|cut:<span class="string">&#x27; &#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作:&#123;&#123; l|join:<span class="string">&#x27;$&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作(加法):&#123;&#123; n|add:<span class="number">10</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作(加法):&#123;&#123; s|add:msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; hhh|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; sss|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; res &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for循环</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> l %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; forloop &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;  一个个元素</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">  &#123;<span class="string">&#x27;parentloop&#x27;</span>: &#123;&#125;, <span class="string">&#x27;counter0&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;counter&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;revcounter&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;revcounter0&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;first&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;last&#x27;</span>: <span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># if判断</span></span><br><span class="line">&#123;% <span class="keyword">if</span> b %&#125;</span><br><span class="line">    &lt;p&gt;baby&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">elif</span> s%&#125;</span><br><span class="line">    &lt;p&gt;都来&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;p&gt;哈哈&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for与if混合使用</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> lll %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> forloop.first %&#125;</span><br><span class="line">        &lt;p&gt;这是第一次&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">elif</span> forloop.last %&#125;</span><br><span class="line">        &lt;p&gt;这是最后一次啊&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        &lt;p&gt;<span class="keyword">for</span>循环的可迭代对象内部没有元素 根本没法循环&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理字典其他方法</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.keys %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.values %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.items %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># with起别名</span></span><br><span class="line">&#123;% <span class="keyword">with</span> d.hobby<span class="number">.3</span>.info <span class="keyword">as</span> nb  %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; nb &#125;&#125;&lt;/p&gt;</span><br><span class="line">    在<span class="keyword">with</span>语法内就可以通过<span class="keyword">as</span>后面的别名快速的使用到前面非常复杂获取数据的方式</span><br><span class="line">    &lt;p&gt;&#123;&#123; d.hobby<span class="number">.3</span>.info &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义过滤器、标签、inclusion-tag"><a href="#自定义过滤器、标签、inclusion-tag" class="headerlink" title="自定义过滤器、标签、inclusion_tag"></a>自定义过滤器、标签、inclusion_tag</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">三步走</span></span><br><span class="line"><span class="string">1.在应用下创建一个名字”必须“叫templatetags文件夹</span></span><br><span class="line"><span class="string">2.在该文件夹内创建“任意”名称的py文件 eg:tag_utils.py</span></span><br><span class="line"><span class="string">3.在该py文件内&quot;必须&quot;先书写下面两句话(单词一个都不能错)</span></span><br><span class="line"><span class="string">from django import template</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">register = template.Library()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义过滤器</span></span><br><span class="line"><span class="meta">@register.filter(<span class="params">name=<span class="string">&#x27;baby&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_sum</span>(<span class="params">v1, v2</span>):</span><br><span class="line">    <span class="keyword">return</span> v1 + v2</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">&#123;% load mytag %&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; n|baby:<span class="number">666</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义标签(参数可以有多个)类似于自定义函数</span></span><br><span class="line"><span class="meta">@register.simple_tag(<span class="params">name=<span class="string">&#x27;plus&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">a,b,c,d</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;%s-%s-%s-%s&#x27;</span>%(a,b,c,d)</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">标签多个参数彼此之间空格隔开</span><br><span class="line">&lt;p&gt;&#123;% plus <span class="string">&#x27;jason&#x27;</span> <span class="number">123</span> <span class="number">123</span> <span class="number">123</span> %&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义inclusion_tag</span></span><br><span class="line"><span class="meta">@register.inclusion_tag(<span class="params"><span class="string">&#x27;left_menu.html&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left</span>(<span class="params">n</span>):</span><br><span class="line">    data = [<span class="string">&#x27;第&#123;&#125;项&#x27;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="comment"># 第一种</span></span><br><span class="line">    <span class="comment"># return &#123;&#x27;data&#x27;:data&#125;  # 将data传递给left_menu.html</span></span><br><span class="line">    <span class="comment"># 第二种</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">locals</span>()  <span class="comment"># 将data传递给left_menu.html</span></span><br><span class="line">  </span><br><span class="line">&#123;% left <span class="number">5</span> %&#125;</span><br><span class="line"><span class="comment"># 总结:当html页面某一个地方的页面需要传参数才能够动态的渲染出来，并且在多个页面上都需要使用到该局部 那么就考虑将该局部页面做成inclusion_tag形式</span></span><br></pre></td></tr></table></figure><h3 id="模版的继承"><a href="#模版的继承" class="headerlink" title="模版的继承"></a>模版的继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模版的继承 你自己先选好一个你要想继承的模版页面</span></span><br><span class="line">&#123;% extends <span class="string">&#x27;home.html&#x27;</span> %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承了之后子页面跟模版页面长的是一模一样的 你需要在模版页面上提前划定可以被修改的区域</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">模版内容</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子页面就可以声明想要修改哪块划定了的区域</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">子页面内容</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般情况下模版页面上应该至少有三块可以被修改的区域</span></span><br><span class="line">  <span class="number">1.</span>css区域</span><br><span class="line">  <span class="number">2.</span>html区域</span><br><span class="line">  <span class="number">3.j</span>s区域</span><br><span class="line">    &#123;% block css %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">  </span><br><span class="line">  &#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">  </span><br><span class="line">  &#123;% block js %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">  <span class="comment"># 每一个子页面就都可以有自己独有的css代码 html代码 js代码</span></span><br></pre></td></tr></table></figure><h3 id="模版的导入"><a href="#模版的导入" class="headerlink" title="模版的导入"></a>模版的导入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将页面的某一个局部当成模块的形式哪个地方需要就可以直接导入使用即可</span><br><span class="line">&#123;% include <span class="string">&#x27;wasai.html&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视图层</title>
      <link href="/2022/06/19/Django%E8%A7%86%E5%9B%BE%E5%B1%82/"/>
      <url>/2022/06/19/Django%E8%A7%86%E5%9B%BE%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h3 id="三板斧"><a href="#三板斧" class="headerlink" title="三板斧"></a>三板斧</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">HttpResponse</span></span><br><span class="line"><span class="string">返回字符串类型</span></span><br><span class="line"><span class="string">render</span></span><br><span class="line"><span class="string">返回html页面 并且在返回给浏览器之前还可以给html文件传值</span></span><br><span class="line"><span class="string">redirect</span></span><br><span class="line"><span class="string">重定向</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 视图函数必须要返回一个HttpResponse对象  正确   研究三者的源码即可得处结论</span></span><br><span class="line"><span class="comment"># render简单内部原理</span></span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Template,Context</span><br><span class="line">    res = Template(<span class="string">&#x27;&lt;h1&gt;&#123;&#123; user &#125;&#125;&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">    con = Context(&#123;<span class="string">&#x27;user&#x27;</span>:&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="number">123</span>&#125;&#125;)</span><br><span class="line">    ret = res.render(con)</span><br><span class="line">    <span class="built_in">print</span>(ret)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(ret)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JsonResponse对象"><a href="#JsonResponse对象" class="headerlink" title="JsonResponse对象"></a>JsonResponse对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">json格式的数据有什么用？</span></span><br><span class="line"><span class="string">前后端数据交互需要使用到json作为过渡 实现跨语言传输数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">前端序列化</span></span><br><span class="line"><span class="string">JSON.stringify()json.dumps()</span></span><br><span class="line"><span class="string">JSON.parse()json.loads()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_json</span>(<span class="params">request</span>):</span><br><span class="line">    user_dict = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line">    l = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line">    <span class="comment"># 先转成json格式字符串</span></span><br><span class="line">    <span class="comment"># json_str = json.dumps(user_dict,ensure_ascii=False)</span></span><br><span class="line">    <span class="comment"># 将该字符串返回</span></span><br><span class="line">    <span class="comment"># return HttpResponse(json_str)</span></span><br><span class="line">    <span class="comment"># 读源码掌握用法</span></span><br><span class="line">    <span class="comment"># return JsonResponse(user_dict,json_dumps_params=&#123;&#x27;ensure_ascii&#x27;:False&#125;)</span></span><br><span class="line">   <span class="comment"># In order to allow non-dict objects to be serialized set the safe parameter to False.</span></span><br><span class="line">    <span class="comment"># 默认只能序列化字典 序列化其他需要加safe参数</span></span><br><span class="line">    <span class="comment"># return JsonResponse(l,safe=False)  </span></span><br></pre></td></tr></table></figure><h3 id="form表单上传文件及后端如何操作"><a href="#form表单上传文件及后端如何操作" class="headerlink" title="form表单上传文件及后端如何操作"></a>form表单上传文件及后端如何操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">form表单上传文件类型的数据</span></span><br><span class="line"><span class="string">1.method必须指定成post</span></span><br><span class="line"><span class="string">2.enctype必须换成formdata</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_file</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># print(request.POST)  # 只能获取普通的简直对数据 文件不行</span></span><br><span class="line">        <span class="built_in">print</span>(request.FILES)  <span class="comment"># 获取文件数据</span></span><br><span class="line">        <span class="comment"># &lt;MultiValueDict: &#123;&#x27;file&#x27;: [&lt;InMemoryUploadedFile: u=1288812541,1979816195&amp;fm=26&amp;gp=0.jpg (image/jpeg)&gt;]&#125;&gt;</span></span><br><span class="line">        file_obj = request.FILES.get(<span class="string">&#x27;file&#x27;</span>)  <span class="comment"># 文件对象</span></span><br><span class="line">        <span class="built_in">print</span>(file_obj.name)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_obj.name,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj.chunks():  <span class="comment"># 推荐加上chunks方法</span></span><br><span class="line">                f.write(line)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;form.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="request对象方法"><a href="#request对象方法" class="headerlink" title="request对象方法"></a>request对象方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">request.method</span></span><br><span class="line"><span class="string">request.POST</span></span><br><span class="line"><span class="string">request.GET</span></span><br><span class="line"><span class="string">request.FILES</span></span><br><span class="line"><span class="string">request.body  # 原生的浏览器发过来的二进制数据  </span></span><br><span class="line"><span class="string">request.path </span></span><br><span class="line"><span class="string">request.path_info</span></span><br><span class="line"><span class="string">request.get_full_path()  能过获取完整的url及问号后面的参数 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(request.path)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">    <span class="built_in">print</span>(request.path_info)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">    <span class="built_in">print</span>(request.get_full_path())  <span class="comment"># /app01/ab_file/?username=jason</span></span><br></pre></td></tr></table></figure><h3 id="FBV与CBV"><a href="#FBV与CBV" class="headerlink" title="FBV与CBV"></a>FBV与CBV</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视图函数既可以是函数也可以是类</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CBV</span></span><br><span class="line">    <span class="comment"># CBV路由</span></span><br><span class="line">    url(<span class="string">r&#x27;^login/&#x27;</span>,views.MyLogin.as_view())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLogin</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;form.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post方法&#x27;</span>)</span><br><span class="line">      </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">FBV和CBV各有千秋</span></span><br><span class="line"><span class="string">CBV特点</span></span><br><span class="line"><span class="string">能够直接根据请求方式的不同直接匹配到对应的方法执行</span></span><br><span class="line"><span class="string">内部到底是怎么实现的？</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="CBV源码剖析"><a href="#CBV源码剖析" class="headerlink" title="CBV源码剖析"></a>CBV源码剖析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 突破口在urls.py</span></span><br><span class="line">url(<span class="string">r&#x27;^login/&#x27;</span>,views.MyLogin.as_view())</span><br><span class="line"><span class="comment"># url(r&#x27;^login/&#x27;,views.view)  FBV一模一样</span></span><br><span class="line"><span class="comment"># CBV与FBV在路由匹配上本质是一样的 都是路由 对应 函数内存地址</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">函数名/方法名 加括号执行优先级最高</span></span><br><span class="line"><span class="string">猜测as_view()要么是被@staicmethod修饰的静态方法；要么是被@classmethod修饰的类方法  正确</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    @classonlymethod</span></span><br><span class="line"><span class="string">    def as_view(cls, **initkwargs):</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classonlymethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">as_view</span>(<span class="params">cls, **initkwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        cls就是我们自己写的类 类方法会自动将类传入，</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">            self = cls(**initkwargs)  <span class="comment"># cls是我们自己写的类</span></span><br><span class="line">            <span class="comment"># self = MyLogin(**initkwargs)  产生一个我们自己写的类的对象</span></span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            经常需要看源码 在看python源码的时候 一定要时刻提醒自己面向对象属性方法查找顺序</span></span><br><span class="line"><span class="string">                先从对象自己找--》再去产生对象的类里面找--》之后再去父类找--》</span></span><br><span class="line"><span class="string">            总结:看源码只要看到了self 一定要问你自己当前这个self到底是谁</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 返回的还是内层view方法</span></span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">      </span><br><span class="line">    <span class="comment"># CBV的精髓</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取当前请求的小写格式 然后比对当前请求方式是否合法</span></span><br><span class="line">        <span class="comment"># get请求为例</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = <span class="built_in">getattr</span>(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        反射:通过字符串来操作对象的属性或者方法</span></span><br><span class="line"><span class="string">         handler = getattr(自己写的类产生的对象,&#x27;get&#x27;,当找不到get属性或者方法的时候就会用第三个参数)</span></span><br><span class="line"><span class="string">         handler = 我们自己写的类里面的get方法</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="keyword">return</span> handler(request, *args, **kwargs)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        自动调用get方法</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="CBV如何添加装饰器"><a href="#CBV如何添加装饰器" class="headerlink" title="CBV如何添加装饰器"></a>CBV如何添加装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name=&#x27;get&#x27;)  # 方式2(可以添加多个针对不同的方法加不同的装饰器)</span></span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name=&#x27;post&#x27;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLogin</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line"><span class="meta">    @method_decorator(<span class="params">login_auth</span>)  </span><span class="comment"># 方式3:它会直接作用于当前类里面的所有的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().dispatch(request,*args,**kwargs)</span><br><span class="line">    <span class="comment"># @method_decorator(login_auth)  # 方式1:指名道姓</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;get请求&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post请求&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django路由层</title>
      <link href="/2022/06/17/Django%E8%B7%AF%E7%94%B1%E5%B1%82/"/>
      <url>/2022/06/17/Django%E8%B7%AF%E7%94%B1%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h3 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由匹配</span></span><br><span class="line">url(<span class="string">r&#x27;test&#x27;</span>,views.test),</span><br><span class="line">url(<span class="string">r&#x27;testadd&#x27;</span>,views.testadd)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">url方法第一个参数是正则表达式(1.x)</span></span><br><span class="line"><span class="string">只要第一个参数正则表达式能够匹配到内容 那么就会立刻停止往下匹配直接执行对应的视图函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你在输入url的时候会默认加斜杠</span></span><br><span class="line"><span class="string">django内部帮你做到重定向,一次匹配不行,url后面加斜杠再来一次</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 取消自动加斜杠</span></span><br><span class="line">APPEND_SLASH = <span class="literal">False</span>/<span class="literal">True</span><span class="comment"># 默认是自动加斜杠的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 首页</span></span><br><span class="line">    url(<span class="string">r&#x27;^$&#x27;</span>,views.home),</span><br><span class="line">    <span class="comment"># 路由匹配</span></span><br><span class="line">    url(<span class="string">r&#x27;^test/$&#x27;</span>,views.test),</span><br><span class="line">    url(<span class="string">r&#x27;^testadd/$&#x27;</span>,views.testadd),</span><br><span class="line">    <span class="comment"># 尾页(了解)</span></span><br><span class="line">    url(<span class="string">r&#x27;&#x27;</span>,views.error),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="无名分组"><a href="#无名分组" class="headerlink" title="无名分组"></a>无名分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分组:就是给某一段正则表达式用小括号扩起来</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">url(<span class="string">r&#x27;^test/(\d+)/&#x27;</span>,views.test)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">request,xx</span>):</span><br><span class="line">    <span class="built_in">print</span>(xx)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 无名分组就是将括号内正则表达式匹配到的内容当作位置参数传递给后面的视图函数</span></span><br></pre></td></tr></table></figure><h3 id="有名分组"><a href="#有名分组" class="headerlink" title="有名分组"></a>有名分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可以给正则表达式起一个别名</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">url(<span class="string">r&#x27;^testadd/(?P&lt;year&gt;\d+)&#x27;</span>,views.testadd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testadd</span>(<span class="params">request,year</span>):</span><br><span class="line">    <span class="built_in">print</span>(year)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;testadd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有名分组就是将括号内正则表达式匹配到的内容当作关键字参数传递给后面的视图函数</span></span><br></pre></td></tr></table></figure><h3 id="无名有名是否可以混合使用"><a href="#无名有名是否可以混合使用" class="headerlink" title="无名有名是否可以混合使用"></a>无名有名是否可以混合使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不能混用,但是同一个分组可以使用N多次</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个的分组可以使用多次</span></span><br><span class="line">url(<span class="string">r&#x27;^index/(\d+)/(\d+)/(\d+)/&#x27;</span>,views.index),</span><br><span class="line">url(<span class="string">r&#x27;^index/(?P&lt;year&gt;\d+)/(?P&lt;age&gt;\d+)/(?P&lt;month&gt;\d+)/&#x27;</span>,views.index),</span><br></pre></td></tr></table></figure><h3 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过一些方法得到一个结果 该结果可以直接访问对应的url触发视图函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先给路由与视图函数起一个别名</span></span><br><span class="line">url(<span class="string">r&#x27;^func_kkk/&#x27;</span>,views.func,name=<span class="string">&#x27;ooo&#x27;</span>)</span><br><span class="line"><span class="comment"># 反向解析</span></span><br><span class="line"><span class="comment"># 后端反向解析</span></span><br><span class="line">  <span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse,redirect,reverse</span><br><span class="line">  reverse(<span class="string">&#x27;ooo&#x27;</span>)</span><br><span class="line">  <span class="comment"># 前端反向解析</span></span><br><span class="line">  &lt;a href=<span class="string">&quot;&#123;% url &#x27;ooo&#x27; %&#125;&quot;</span>&gt;这是一个超链接&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="无名有名分组反向解析"><a href="#无名有名分组反向解析" class="headerlink" title="无名有名分组反向解析"></a>无名有名分组反向解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无名分组反向解析</span></span><br><span class="line"><span class="comment"># 路由</span></span><br><span class="line">url(<span class="string">r&#x27;^index/(\d+)/&#x27;</span>,views.index,name=<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&#123;% url <span class="string">&#x27;xxx&#x27;</span> <span class="number">123</span> %&#125;</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">reverse(<span class="string">&#x27;xxx&#x27;</span>, args=(<span class="number">1</span>,))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这个数字写视图代码的时候应该放什么</span></span><br><span class="line"><span class="string">数字一般情况下放的是数据的主键值  数据的编辑和删除</span></span><br><span class="line"><span class="string">url(r&#x27;^edit/(\d+)/&#x27;,views.edit,name=&#x27;xxx&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def edit(request,edit_id):</span></span><br><span class="line"><span class="string">reverse(&#x27;xxx&#x27;,args=(edit_id,))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;%for user_obj in user_queryset%&#125;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;&#123;% url &#x27;xxx&#x27; user_obj.id %&#125;&quot;&gt;编辑&lt;/a&gt;</span></span><br><span class="line"><span class="string">&#123;%endfor%&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 有名分组反向解析</span></span><br><span class="line">   url(<span class="string">r&#x27;^func/(?P&lt;year&gt;\d+)/&#x27;</span>,views.func,name=<span class="string">&#x27;ooo&#x27;</span>)</span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;% url &#x27;ooo&#x27; year=123 %&#125;&quot;</span>&gt;<span class="number">111</span>&lt;/a&gt;  了解</span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;% url &#x27;ooo&#x27; 123 %&#125;&quot;</span>&gt;<span class="number">222</span>&lt;/a&gt;  记忆</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="comment"># 有名分组反向解析 写法1  了解</span></span><br><span class="line">   <span class="built_in">print</span>(reverse(<span class="string">&#x27;ooo&#x27;</span>,kwargs=&#123;<span class="string">&#x27;year&#x27;</span>:<span class="number">123</span>&#125;))</span><br><span class="line">   <span class="comment"># 简便的写法  减少你的脑容量消耗 记跟无名一样的操作即可</span></span><br><span class="line">   <span class="built_in">print</span>(reverse(<span class="string">&#x27;ooo&#x27;</span>,args=(<span class="number">111</span>,)))</span><br><span class="line">    名称空间反向解析需要加上名称空间的名字</span><br></pre></td></tr></table></figure><h3 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">当一个django项目中的url特别多的时候 总路由urls.py代码非常冗余不好维护，这个时候也可以利用路由分发来减轻总路由的压力。利用路由分发之后 总路由不再干路由与视图函数的直接对应关系,而是做一个分发处理识别当前url是属于哪个应用下的 直接分发给对应的应用去处理.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> urls <span class="keyword">as</span> app01_urls</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> urls <span class="keyword">as</span> app02_urls</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 1.路由分发</span></span><br><span class="line">    url(<span class="string">r&#x27;^app01/&#x27;</span>,include(app01_urls)),  <span class="comment"># 只要url前缀是app01开头 全部交给app01处理</span></span><br><span class="line">    url(<span class="string">r&#x27;^app02/&#x27;</span>,include(app02_urls))   <span class="comment"># 只要url前缀是app02开头 全部交给app02处理</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 2.项目写法  推荐使用</span></span><br><span class="line">    url(<span class="string">r&#x27;^app01/&#x27;</span>,include(<span class="string">&#x27;app01.urls&#x27;</span>)),</span><br><span class="line">    url(<span class="string">r&#x27;^app02/&#x27;</span>,include(<span class="string">&#x27;app02.urls&#x27;</span>))</span><br><span class="line">    <span class="comment"># 注意事项:总路由里面的url千万不能加$结尾</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子路由</span></span><br><span class="line"><span class="comment"># app01 urls.py</span></span><br><span class="line">  <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">  <span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">  urlpatterns = [</span><br><span class="line">      url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg)</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment"># app02 urls.py</span></span><br><span class="line">  <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">  <span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">  urlpatterns = [</span><br><span class="line">      url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h3 id="名称空间-了解"><a href="#名称空间-了解" class="headerlink" title="名称空间(了解)"></a>名称空间(了解)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当多个应用出现了相同的别名 我们研究反向解析会不会自动识别应用前缀</span></span><br><span class="line"><span class="comment"># 正常情况下的反向解析是没有办法自动识别前缀的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 名称空间</span></span><br><span class="line"><span class="comment"># 总路由</span></span><br><span class="line">    url(<span class="string">r&#x27;^app01/&#x27;</span>,include(<span class="string">&#x27;app01.urls&#x27;</span>,namespace=<span class="string">&#x27;app01&#x27;</span>)),</span><br><span class="line">    url(<span class="string">r&#x27;^app02/&#x27;</span>,include(<span class="string">&#x27;app02.urls&#x27;</span>,namespace=<span class="string">&#x27;app02&#x27;</span>))</span><br><span class="line">  <span class="comment"># 解析的时候</span></span><br><span class="line">  <span class="comment"># app01</span></span><br><span class="line">  urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg,name=<span class="string">&#x27;reg&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">    <span class="comment"># app02</span></span><br><span class="line">    urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg,name=<span class="string">&#x27;reg&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">    </span><br><span class="line">  reverse(<span class="string">&#x27;app01:reg&#x27;</span>)</span><br><span class="line">    reverse(<span class="string">&#x27;app02:reg&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    &#123;% url <span class="string">&#x27;app01:reg&#x27;</span> %&#125;</span><br><span class="line">    &#123;% url <span class="string">&#x27;app02:reg&#x27;</span> %&#125;</span><br><span class="line"><span class="comment"># 其实只要保证名字不冲突 就没有必要使用名称空间</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一般情况下 有多个app的时候我们在起别名的时候会加上app的前缀</span></span><br><span class="line"><span class="string">这样的话就能够确保多个app之间名字不冲突的问题</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg,name=<span class="string">&#x27;app01_reg&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg/&#x27;</span>,views.reg,name=<span class="string">&#x27;app02_reg&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="伪静态-了解"><a href="#伪静态-了解" class="headerlink" title="伪静态(了解)"></a>伪静态(了解)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">伪静态</span></span><br><span class="line"><span class="string">将一个动态网页伪装成静态网页</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">为什么要伪装呢？</span></span><br><span class="line"><span class="string">https://www.cnblogs.com/xxxx.html</span></span><br><span class="line"><span class="string">伪装的目的在于增大本网站的seo查询力度并且增加搜索引擎收藏本网上的概率</span></span><br><span class="line"><span class="string">搜索引擎本质上就是一个巨大的爬虫程序</span></span><br><span class="line"><span class="string">总结:</span></span><br><span class="line"><span class="string">无论你怎么优化 怎么处理,始终还是干不过RMB玩家</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^reg.html&#x27;</span>,views.reg,name=<span class="string">&#x27;app02_reg&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="虚拟环境-了解"><a href="#虚拟环境-了解" class="headerlink" title="虚拟环境(了解)"></a>虚拟环境(了解)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="django版本区别"><a href="#django版本区别" class="headerlink" title="django版本区别"></a>django版本区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在正常开发中 我们会给每一个项目配备一个该项目独有的解释器环境</span></span><br><span class="line"><span class="string">该环境内只有该项目用到的模块 用不到一概不装</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.django1.X路由层使用的是url方法</span></span><br><span class="line"><span class="string">而在django2.Xhe3.X版本中路由层使用的是path方法</span></span><br><span class="line"><span class="string">url()第一个参数支持正则</span></span><br><span class="line"><span class="string">path()第一个参数是不支持正则的 写什么就匹配什么</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果你习惯使用path那么也给你提供了另外一个方法</span></span><br><span class="line"><span class="string">from django.urls import path, re_path</span></span><br><span class="line"><span class="string">from django.conf.urls import url</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">re_path(r&#x27;^index/&#x27;,index),</span></span><br><span class="line"><span class="string">    url(r&#x27;^login/&#x27;,login)</span></span><br><span class="line"><span class="string">  2.X和3.X里面的re_path就等价于1.X里面的url</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">2.虽然path不支持正则 但是它的内部支持五种转换器</span></span><br><span class="line"><span class="string">path(&#x27;index/&lt;int:id&gt;/&#x27;,index)</span></span><br><span class="line"><span class="string"># 将第二个路由里面的内容先转成整型然后以关键字的形式传递给后面的视图函数</span></span><br><span class="line"><span class="string">def index(request,id):</span></span><br><span class="line"><span class="string">        print(id,type(id))</span></span><br><span class="line"><span class="string">        return HttpResponse(&#x27;index&#x27;)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    str,匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式</span></span><br><span class="line"><span class="string">int,匹配正整数，包含0。</span></span><br><span class="line"><span class="string">slug,匹配字母、数字以及横杠、下划线组成的字符串。</span></span><br><span class="line"><span class="string">uuid,匹配格式化的uuid，如 075194d3-6885-417e-a8a8-6c931e272f00。</span></span><br><span class="line"><span class="string">path,匹配任何非空字符串，包含了路径分隔符（/）（不能用？）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.除了有默认的五个转换器之外 还支持自定义转换器(了解)</span></span><br><span class="line"><span class="string">class MonthConverter:</span></span><br><span class="line"><span class="string">    regex=&#x27;\d&#123;2&#125;&#x27; # 属性名必须为regex</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def to_python(self, value):</span></span><br><span class="line"><span class="string">        return int(value)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def to_url(self, value):</span></span><br><span class="line"><span class="string">        return value # 匹配的regex是两个数字，返回的结果也必须是两个数字</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from django.urls import path,register_converter</span></span><br><span class="line"><span class="string">from app01.path_converts import MonthConverter</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 先注册转换器</span></span><br><span class="line"><span class="string">register_converter(MonthConverter,&#x27;mon&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from app01 import views</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">urlpatterns = [</span></span><br><span class="line"><span class="string">    path(&#x27;articles/&lt;int:year&gt;/&lt;mon:month&gt;/&lt;slug:other&gt;/&#x27;, views.article_detail, name=&#x27;aaa&#x27;),</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4.模型层里面1.X外键默认都是级联更新删除的</span></span><br><span class="line"><span class="string">但是到了2.X和3.X中需要你自己手动配置参数</span></span><br><span class="line"><span class="string">models.ForeignKey(to=&#x27;Publish&#x27;)</span></span><br><span class="line"><span class="string">models.ForeignKey(to=&#x27;Publish&#x27;,on_delete=models.CASCADE...)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django初使用</title>
      <link href="/2022/06/12/Django%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/06/12/Django%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我们将html文件默认都放在templates文件夹下</span></span><br><span class="line"><span class="string">我们将网站所使用的静态文件默认都放在static文件夹下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">静态文件:前端已经写好了的 能够直接调用使用的文件</span></span><br><span class="line"><span class="string">网站写好的js文件</span></span><br><span class="line"><span class="string">网站写好的css文件</span></span><br><span class="line"><span class="string">网站用到的图片文件</span></span><br><span class="line"><span class="string">第三方前端框架</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># django默认是不会自动帮你创建static文件夹 需要你自己手动创建</span></span><br><span class="line">一般情况下我们在static文件夹内还会做进一步的划分处理</span><br><span class="line">-static</span><br><span class="line">  --js</span><br><span class="line">    --css</span><br><span class="line">    --img</span><br><span class="line">    其他第三方文件</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在浏览器中输入url能够看到对应的资源是因为后端提前开设了该资源的接口</span></span><br><span class="line"><span class="string">STATIC_URL = &#x27;/static/&#x27;</span></span><br><span class="line"><span class="string">STATICFILES_DIRS = os.path.join(BASE_DIR, &#x27;static&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://127.0.0.1:8000/static/bootstrap-3.4.1-dist/css/bootstrap.min.css</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 静态文件配置</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">****************************************************************</span></span><br><span class="line"><span class="string">当你在写django项目的时候 可能会出现后端代码修改了但是前端页面没有变化的情况</span></span><br><span class="line"><span class="string">1.你在同一个端口开了好几个django项目 </span></span><br><span class="line"><span class="string">一直在跑的其实是第一个django项目</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.浏览器缓存的问题</span></span><br><span class="line"><span class="string">settings</span></span><br><span class="line"><span class="string">network</span></span><br><span class="line"><span class="string">disable cache 勾选上</span></span><br><span class="line"><span class="string">*****************************************************************</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/ooo/&#x27;</span>  <span class="comment"># 类似于访问静态文件的令牌</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;如果你想要访问静态文件 你就必须以static开头&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">/static/bootstrap-3.4.1-dist/js/bootstrap.min.js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/static/令牌</span></span><br><span class="line"><span class="string">取列表里面从上往下依次查找</span></span><br><span class="line"><span class="string">    bootstrap-3.4.1-dist/js/bootstrap.min.js</span></span><br><span class="line"><span class="string">    都没有才会报错</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 多个静态文件配置</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static&#x27;</span>),</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static1&#x27;</span>),</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static2&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态文件动态解析</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;&#123;% static &#x27;bootstrap-3.4.1-dist/css/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;&#123;% static &#x27;bootstrap-3.4.1-dist/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># form表单默认是get请求数据</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/login/?username=jason&amp;password=<span class="number">123</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">form表单action参数</span></span><br><span class="line"><span class="string">1.不写 默认朝当前所在的url提交数据</span></span><br><span class="line"><span class="string">2.全写 指名道姓</span></span><br><span class="line"><span class="string">3.只写后缀 /login/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在前期我们使用django提交post请求的时候 需要取配置文件中注释掉一行代码</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="request对象方法初识"><a href="#request对象方法初识" class="headerlink" title="request对象方法初识"></a>request对象方法初识</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">request.method <span class="comment"># 返回请求方式 并且是全大写的字符串形式  &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">request.POST  <span class="comment"># 获取用户post请求提交的普通数据不包含文件</span></span><br><span class="line">request.POST.get()  <span class="comment"># 只获取列表最后一个元素</span></span><br><span class="line">request.POST.getlist()  <span class="comment"># 直接将列表取出</span></span><br><span class="line">request.GET  <span class="comment"># 获取用户提交的get请求数据</span></span><br><span class="line">request.GET.get()  <span class="comment"># 只获取列表最后一个元素</span></span><br><span class="line">request.GET.getlist()  <span class="comment"># 直接将列表取出</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">get请求携带的数据是有大小限制的 大概好像只有4KB左右,而post请求则没有限制</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 返回一个登陆界面</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    get请求和post请求应该有不同的处理机制</span></span><br><span class="line"><span class="string">    :param request: 请求相关的数据对象 里面有很多简易的方法</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print(type(request.method))  # 返回请求方式 并且是全大写的字符串形式  &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">    <span class="comment"># if request.method == &#x27;GET&#x27;:</span></span><br><span class="line">    <span class="comment">#     print(&#x27;hello&#x27;)</span></span><br><span class="line">    <span class="comment">#     return render(request,&#x27;login.html&#x27;)</span></span><br><span class="line">    <span class="comment"># elif request.method == &#x27;POST&#x27;:</span></span><br><span class="line">    <span class="comment">#     return HttpResponse(&quot;收到了&quot;)</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;收到了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="django链接数据库-MySQL"><a href="#django链接数据库-MySQL" class="headerlink" title="django链接数据库(MySQL)"></a>django链接数据库(MySQL)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认用的是sqkite3</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># django链接MySQL</span></span><br><span class="line"><span class="number">1.</span>第一步配置文件中配置</span><br><span class="line">  DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;数据库名&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>:<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">        <span class="string">&#x27;CHARSET&#x27;</span>:<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="number">2.</span>代码声明</span><br><span class="line">  django默认用的是mysqldb模块链接MySQL</span><br><span class="line">    但是该模块的兼容性不好 需要手动改为用pymysql链接你需要告诉django不要用默认的mysqldb还是用pymysql</span><br><span class="line">    <span class="comment"># 在项目名下的init或者任意的应用名下的init文件中书写以下代码都可以</span></span><br><span class="line">    <span class="keyword">import</span> pymysql</span><br><span class="line">    pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h3 id="Django-ORM初次体验"><a href="#Django-ORM初次体验" class="headerlink" title="Django ORM初次体验"></a>Django ORM初次体验</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ORM. 对象关系映射</span></span><br><span class="line"><span class="string">作用:能够让一个不用sql语句的小白也能够通过python 面向对象的代码简单快捷的操作数据库</span></span><br><span class="line"><span class="string">不足之处:封装程度太高 有时候sql语句的效率偏低 需要你自己写SQL语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">类表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象   记录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象属性  记录某个字段对应的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">应用下面的models.py文件</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 先去models.py中书写一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="comment"># id int primary_key auto_increment</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField()</span><br><span class="line"></span><br><span class="line">*************************<span class="comment"># 2 数据库迁移命令*************************</span></span><br><span class="line">python3 manage.py makemigrations(操作记录记录在migrations文件夹)</span><br><span class="line"></span><br><span class="line">python3 manage.py migrate  将操作真正的同步到数据库中</span><br><span class="line"><span class="comment"># 只要你修改了models.py中跟数据库相关的代码 就必须重新执行上述的两条命令</span></span><br><span class="line">******************************************************************</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>,verbose_name=<span class="string">&#x27;主键&#x27;</span>)</span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    CharField必须要指定max_length参数 不指定会直接报错</span></span><br><span class="line"><span class="string">    verbose_name该参数是所有字段都有的 就是用来对字段的解释</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    password = models.IntegerField(verbose_name=<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    <span class="comment"># 由于一张表中必须要有一个主键字段 并且一般情况下都叫id字段所以orm当你不定义主键字段的时候 orm会自动帮你创建一个名为id主键字段</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.IntegerField()</span><br></pre></td></tr></table></figure><h3 id="字段的增删改查"><a href="#字段的增删改查" class="headerlink" title="字段的增删改查"></a>字段的增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字段的增加</span></span><br><span class="line">  <span class="number">1.</span>可以在终端内直接给出默认值</span><br><span class="line">  <span class="number">2.</span>该字段可以为空</span><br><span class="line">    info = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">&#x27;个人简介&#x27;</span>,null=<span class="literal">True</span>)</span><br><span class="line">  <span class="number">3.</span>直接给字段设置默认值</span><br><span class="line">    hobby = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">&#x27;兴趣爱好&#x27;</span>,default=<span class="string">&#x27;study&#x27;</span>)</span><br><span class="line"><span class="comment"># 字段的修改</span></span><br><span class="line">直接修改代码然后执行数据库迁移的两条命令即可！</span><br><span class="line"><span class="comment"># 字段的删</span></span><br><span class="line"> 直接注释对应的字段然后执行数据库迁移的两条命令即可！</span><br><span class="line"> 执行完毕之后字段对应的数据也都没有了</span><br><span class="line">  </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在操作models.py的时候一定要细心，千万不要注释一些字段，执行迁移命令之前最好先检查一下自己写的代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="数据的增删改查"><a href="#数据的增删改查" class="headerlink" title="数据的增删改查"></a>数据的增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">res = models.User.objects.<span class="built_in">filter</span>(username=username)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">返回值你先看成是列表套数据对象的格式它也支持索引取值（不推荐） 切片操作 </span></span><br><span class="line"><span class="string">user_obj = models.User.objects.filter(username=username).first()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">filter</span>括号内可以携带多个参数 参数与参数之间默认是<span class="keyword">and</span>关系，可以把<span class="built_in">filter</span>联想成where记忆</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">res = models.User.objects.create(username=username,password=password)</span><br><span class="line"><span class="comment"># 返回值就是当前被创建的对象本身</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种增加</span></span><br><span class="line">user_obj = models.User(username=username,password=password)</span><br><span class="line">user_obj.save()  <span class="comment"># 保存数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先将数据库中的数据全部展示到前端 然后给每一个数据两个按钮 一个编辑一个删除</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">userlist</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 查询出用户表里面所有的数据</span></span><br><span class="line">    <span class="comment"># 方式1</span></span><br><span class="line">    <span class="comment"># data = models.User.objects.filter()</span></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="comment"># 方式2</span></span><br><span class="line">    user_queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># return render(request,&#x27;userlist.html&#x27;,&#123;&#x27;user_queryset&#x27;:user_queryset&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;userlist.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑功能（改）</span></span><br><span class="line"><span class="comment"># 点击编辑按钮朝后端发送编辑数据的请求</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  如何告诉后端用户想要编辑哪条数据?</span></span><br><span class="line"><span class="string">  将编辑按钮所在的那一行数据的主键值发送给后端，利用url问号后面携带参数的方式</span></span><br><span class="line"><span class="string">  &#123;% for user_obj in user_queryset %&#125;</span></span><br><span class="line"><span class="string">           &lt;tr&gt;</span></span><br><span class="line"><span class="string">              &lt;td&gt;&#123;&#123; user_obj.id &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;&lt;a href=&quot;/edit_user/?user_id=&#123;&#123; user_obj.id &#125;&#125;&quot;class=&quot;btn btn-primary btn-xs&quot;&gt;编辑&lt;/a&gt;</span></span><br><span class="line"><span class="string">             &lt;a href=&quot;&quot; class=&quot;btn btn-danger btn-xs&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 后端查询出用户想要编辑的数据对象 展示到前端页面供用户查看和编辑</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">edit_user</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 获取url问号后面的参数</span></span><br><span class="line">    edit_id = request.GET.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 查询当前用户想要编辑的数据对象</span></span><br><span class="line">    edit_obj = models.User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=edit_id).first()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="comment"># 去数据库中修改对应的数据内容</span></span><br><span class="line">        <span class="comment"># 修改数据方式1</span></span><br><span class="line">       models.User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=edit_id).update(username=username,password=password)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            将filter查询出来的列表中所有的对象全部更新            批量更新操作</span></span><br><span class="line"><span class="string">            只修改被修改的字段</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改数据方式2</span></span><br><span class="line">        edit_obj.username = username</span><br><span class="line">        edit_obj.password= password</span><br><span class="line">        edit_obj.save()</span><br><span class="line">     <span class="comment">#上述方法当字段特别多的时候效率会非常低 从头到尾将数据的所有字段全部更新一边 无论该字段是否被修改</span></span><br><span class="line">        <span class="comment"># 跳转到数据的展示页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/userlist/&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将数据对象展示到页面上</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;edit_user.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line"><span class="comment"># 删除功能</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">def delete_user(request):</span></span><br><span class="line"><span class="string">    # 获取用户想要删除的数据id值</span></span><br><span class="line"><span class="string">    delete_id = request.GET.get(&#x27;user_id&#x27;)</span></span><br><span class="line"><span class="string">    # 直接去数据库中找到对应的数据删除即可</span></span><br><span class="line"><span class="string">    models.User.objects.filter(id=delete_id).delete()</span></span><br><span class="line"><span class="string">    # 跳转到展示页面</span></span><br><span class="line"><span class="string">    return redirect(&#x27;/userlist/&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 真正的删除功能应该需要二次确认 </span></span><br><span class="line"><span class="comment"># 删除数据内部其实并不是真正的删除 我们会给数据添加一个标识字段用来表示当前数据是否被删除了，如果数据被删了仅仅只是讲字段修改一个状态</span></span><br><span class="line">  username    password    is_delete</span><br><span class="line">  jason<span class="number">123</span><span class="number">0</span></span><br><span class="line">  egon<span class="number">123</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="django-orm中如何创建表关系"><a href="#django-orm中如何创建表关系" class="headerlink" title="django orm中如何创建表关系"></a>django orm中如何创建表关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">表与表之间的关系：一对多，多对多，一对一，没有关系；判断表关系的方法:换位思考</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 例如有以下表:图书表, 出版社表, 作者表, 作者详情表</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">图书和出版社是一对多的关系 外键字段建在多的那一方 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">图书和作者是多对多的关系 需要创建第三张表来专门存储</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">作者与作者详情表是一对一</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表关系  先将基表创建出来 然后再添加外键字段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">8</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 总共八位 小数点后面占两位</span></span><br><span class="line">    <span class="comment"># 图书和出版社是一对多 并且书是多的一方 所以外键字段放在书表里面</span></span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">&#x27;Publish&#x27;</span>)  <span class="comment"># 默认就是与出版社表的主键字段做外键关联</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图书和作者是多对多的关系 外键字段建在任意一方均可 但是推荐你建在查询频率较高的一方</span></span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    authors是一个虚拟字段 主要是用来告诉orm 书籍表和作者表是多对多关系</span></span><br><span class="line"><span class="string">    让orm自动帮你创建第三张关系表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Publish</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作者与作者详情是一对一的关系 外键字段建在任意一方都可以 但是推荐你建在查询频率较高的表中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">&#x27;AuthorDetail&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorDetail</span>(models.Model):</span><br><span class="line">    phone = models.BigIntegerField()  <span class="comment"># 或者直接字符类型</span></span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">orm中如何定义三种关系</span></span><br><span class="line"><span class="string">publish = models.ForeignKey(to=&#x27;Publish&#x27;)  # 默认就是与出版社表的主键字段做外键关联</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">authors = models.ManyToManyField(to=&#x27;Author&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">author_detail = models.OneToOneField(to=&#x27;AuthorDetail&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ForeignKey</span></span><br><span class="line"><span class="string">OneToOneField</span></span><br><span class="line"><span class="string">会自动在字段后面加_id后缀</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在django1.X版本中外键默认都是级联更新删除的,2.x,3.x需要指定on_delete参数</span></span><br><span class="line"><span class="comment"># 多对多的表关系可以有好几种创建方式 这里先介绍一种自动创建</span></span><br><span class="line"><span class="comment"># 针对外键字段里面的其他参数 后续遇到百度一下</span></span><br></pre></td></tr></table></figure><h3 id="django请求生命周期流程图-必会"><a href="#django请求生命周期流程图-必会" class="headerlink" title="django请求生命周期流程图(必会)"></a>django请求生命周期流程图(必会)</h3><p><img src="/2022/06/12/Django%E4%BD%BF%E7%94%A8/1686663111551.png" alt="1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">缓存数据库:提前已经将你想要的数据准备好了 你来直接拿就可以,提高效率和响应时间.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django框架前置知识</title>
      <link href="/2022/06/09/Django%E6%A1%86%E6%9E%B6%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/06/09/Django%E6%A1%86%E6%9E%B6%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Django前置知识"><a href="#Django前置知识" class="headerlink" title="Django前置知识"></a>Django前置知识</h2><h3 id="软件开发架构"><a href="#软件开发架构" class="headerlink" title="软件开发架构"></a>软件开发架构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cs架构</span><br><span class="line">bs架构(本质bs也是cs)</span><br></pre></td></tr></table></figure><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">网络协议</span></span><br><span class="line"><span class="string">    HTTP协议数据传输是明文</span></span><br><span class="line"><span class="string">    HTTPS协议数据传输是密文</span></span><br><span class="line"><span class="string">    websocket协议      数据传输是密文</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">四大特性</span></span><br><span class="line"><span class="string">1.基于请求响应</span></span><br><span class="line"><span class="string">2.基于TCP、IP作用于应用层之上的协议</span></span><br><span class="line"><span class="string">3.无状态</span></span><br><span class="line"><span class="string">4.短/无链接</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">数据格式</span></span><br><span class="line"><span class="string">请求首行</span></span><br><span class="line"><span class="string">请求头</span></span><br><span class="line"><span class="string">此处为/r/n</span></span><br><span class="line"><span class="string">请求体</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">响应状态码</span></span><br><span class="line"><span class="string">1XX</span></span><br><span class="line"><span class="string">2XX200</span></span><br><span class="line"><span class="string">3XX</span></span><br><span class="line"><span class="string">4XX403 404</span></span><br><span class="line"><span class="string">5XX500</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 简单服务端撰写</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, addr = server.accept()</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    data = data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    conn.send(<span class="string">b&#x27;HTTP/1.1 200 ok \r\n\r\n&#x27;</span>)</span><br><span class="line">    current_path = data.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> current_path == <span class="string">&#x27;/index&#x27;</span>:</span><br><span class="line">        conn.send(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> current_path == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        conn.send(<span class="string">b&#x27;login&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        conn.send(<span class="string">b&#x27;hello web&#x27;</span>)</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不足之处</span></span><br><span class="line"><span class="number">1.</span>代码重复(服务端代码所有人都要重复写)</span><br><span class="line"><span class="number">2.</span>手动处理http格式的数据 并且只能拿到url后缀 其他数据获取繁琐(数据格式一样处理的代码其实也大致一样 重复写)</span><br><span class="line"><span class="number">3.</span>并发的问题</span><br></pre></td></tr></table></figure><h3 id="借助于wsgiref模块"><a href="#借助于wsgiref模块" class="headerlink" title="借助于wsgiref模块"></a>借助于wsgiref模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照功能的不同拆分之后 后续添加功能只需要在urls.py书写对应关系然后取views.py书写业务逻辑即可</span></span><br><span class="line">urls.py路由与视图函数对应关系</span><br><span class="line">views.py视图函数(后端业务逻辑)</span><br><span class="line">templates文件夹  专门用来存储html文件</span><br></pre></td></tr></table></figure><h3 id="动静态网页"><a href="#动静态网页" class="headerlink" title="动静态网页"></a>动静态网页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">静态网页</span></span><br><span class="line"><span class="string">页面上的数据是直接写死的 亘古不变</span></span><br><span class="line"><span class="string">动态网页</span></span><br><span class="line"><span class="string">数据是实时获取的</span></span><br><span class="line"><span class="string">eg:</span></span><br><span class="line"><span class="string">1.后端获取当前时间展示到html页面上</span></span><br><span class="line"><span class="string">2.数据是从数据库中获取的展示到html页面上</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态网页制作</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_time</span>(<span class="params">env</span>):</span><br><span class="line">    current_time = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)</span><br><span class="line">    <span class="comment"># 如何将后端获取到的数据&quot;传递&quot;给html文件？</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;templates/get_time.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="comment"># data就是一堆字符串</span></span><br><span class="line">    data = data.replace(<span class="string">&#x27;dwadasdsadsadasdas&#x27;</span>,current_time)   <span class="comment"># 在后端将html页面处理好之后再返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个字典传递给html文件 并且可以在文件上方便快捷的操作字典数据</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dict</span>(<span class="params">env</span>):</span><br><span class="line">    user_dic = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;hobby&#x27;</span>:<span class="string">&#x27;read&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;templates/get_dict.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    tmp = Template(data)</span><br><span class="line">    res = tmp.render(user=user_dic)</span><br><span class="line">    <span class="comment"># 给get_dict.html传递了一个值 页面上通过变量名user就能够拿到user_dict</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端获取数据库中数据展示到前端页面</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模版语法之Jinja2模块"><a href="#模版语法之Jinja2模块" class="headerlink" title="模版语法之Jinja2模块"></a>模版语法之Jinja2模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">安装：pip3 install jinja2</span><br><span class="line"><span class="string">&quot;&quot;&quot;模版语法是在后端起作用的&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模版语法(非常贴近python语法)</span></span><br><span class="line">&#123;&#123; user &#125;&#125;</span><br><span class="line">&#123;&#123; user.get(<span class="string">&#x27;username&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123; user.age &#125;&#125;</span><br><span class="line">&#123;&#123; user[<span class="string">&#x27;hobby&#x27;</span>] &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>循环</span><br><span class="line">&#123;% <span class="keyword">for</span> user_dict <span class="keyword">in</span> user_list %&#125;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.<span class="built_in">id</span>&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.username&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.password&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.hobby&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">&#123;% endfor%&#125;</span><br></pre></td></tr></table></figure><h3 id="基于wsgiref的简易版本web框架请求流程"><a href="#基于wsgiref的简易版本web框架请求流程" class="headerlink" title="基于wsgiref的简易版本web框架请求流程"></a>基于wsgiref的简易版本web框架请求流程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.请求来的时候解析http格式的数据 封装成大字典 env</span></span><br><span class="line"><span class="string">2.响应走的时候给数据打包成符合http格式 再返回给浏览器 response</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="python三大主流web框架"><a href="#python三大主流web框架" class="headerlink" title="python三大主流web框架"></a>python三大主流web框架</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">django</span></span><br><span class="line"><span class="string">特点:大而全 自带的功能特别特别特别的多 类似于航空母舰</span></span><br><span class="line"><span class="string">不足之处:</span></span><br><span class="line"><span class="string">有时候过于笨重</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">flask</span></span><br><span class="line"><span class="string">特点:小而精  自带的功能特别特别特别的少 类似于游骑兵</span></span><br><span class="line"><span class="string">第三方的模块特别特别特别的多，如果将flask第三方的模块加起来完全可以盖过django</span></span><br><span class="line"><span class="string">并且也越来越像django</span></span><br><span class="line"><span class="string">不足之处:</span></span><br><span class="line"><span class="string">比较依赖于第三方的开发者</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tornado</span></span><br><span class="line"><span class="string">特点:异步非阻塞 支持高并发</span></span><br><span class="line"><span class="string">牛逼到甚至可以开发游戏服务器</span></span><br><span class="line"><span class="string">不足之处:</span></span><br><span class="line"><span class="string">暂时你不会</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">A:socket部分</span><br><span class="line">B:路由与视图函数对应关系(路由匹配)</span><br><span class="line">C:模版语法</span><br><span class="line"></span><br><span class="line">django</span><br><span class="line">  A用的是别人的wsgiref模块</span><br><span class="line">  B用的是自己的</span><br><span class="line">  C用的是自己的(dtl没有jinja2好用 但是也很方便)</span><br><span class="line"></span><br><span class="line">flask</span><br><span class="line">  A用的是别人的werkzeug(内部还是wsgiref模块)</span><br><span class="line">  B自己写的</span><br><span class="line">  C用的别人的(jinja2)</span><br><span class="line"></span><br><span class="line">tornado</span><br><span class="line">A，B，C都是自己写的(性能无敌)</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何让你的计算机能够正常的启动django项目</span></span><br><span class="line">  <span class="number">1.</span>计算机的名称不能有中文</span><br><span class="line">  <span class="number">2.</span>一个pycharm窗口只开一个项目</span><br><span class="line">  <span class="number">3.</span>项目里面所有的文件也尽量不要出现中文</span><br><span class="line">  <span class="number">4.</span>python解释器尽量使用<span class="number">3.4</span>~<span class="number">3.6</span>之间的版本</span><br><span class="line">  (如果你的项目报错 你点击最后一个报错信息</span><br><span class="line">    去源码中把逗号删掉)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># django版本问题</span></span><br><span class="line"><span class="number">1.</span>X <span class="number">2.</span>X <span class="number">3.</span>X</span><br><span class="line">    pip3 install django==<span class="number">1.11</span><span class="number">.29</span>(版本视个人而定习惯了url写法，虽然re_path也一样)</span><br><span class="line">    pip3 install django==<span class="number">2.2</span><span class="number">.2</span>  (请一直<span class="number">2</span>下去url变成re_path,支持内置转换器嘎嘎好用)</span><br><span class="line">    pip3 install django==<span class="number">3.2</span><span class="number">.5</span>   (支持异步，性能提升)</span><br><span class="line">  终端输入django-admin look look</span><br></pre></td></tr></table></figure><h3 id="django基本操作"><a href="#django基本操作" class="headerlink" title="django基本操作"></a>django基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行操作</span></span><br><span class="line"><span class="comment"># 1.创建django项目</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  你可以先切换到对应的D盘 然后再创建</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  django-admin startproject mysite</span><br><span class="line">    </span><br><span class="line">    mysite文件夹</span><br><span class="line">      manage.py</span><br><span class="line">      mysite文件夹</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">          urls.py</span><br><span class="line">          wsgi.py</span><br><span class="line"> <span class="comment"># 2.启动django项目</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一定要先切换到项目目录下</span></span><br><span class="line"><span class="string">cd /mysite</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">  python3 manage.py runserver </span><br><span class="line">  后面可加端口号</span><br><span class="line">  例如：python3 manage.py runserver <span class="number">8001</span> </span><br><span class="line">  <span class="comment"># http://127.0.0.1:8000/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.创建应用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Next, start your first app by running python manage.py startapp [app_label].</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">python manage.py startapp firstapp</span><br><span class="line">    应用名应该做到见名知意</span><br><span class="line">      user</span><br><span class="line">      order</span><br><span class="line">      web</span><br><span class="line">      ...</span><br><span class="line">django启动：</span><br><span class="line">    <span class="number">1.</span>pycharm提供的终端直接输入完整命令</span><br><span class="line">    <span class="number">2.</span>pycharm </span><br><span class="line">    tools </span><br><span class="line">    run manage.py task提示(前期别多用 背一下完整命令) </span><br><span class="line">    </span><br><span class="line">django必吃三碗饭    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">HttpResponse</span></span><br><span class="line"><span class="string">返回字符串类型的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">render</span></span><br><span class="line"><span class="string">返回html文件的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">redirect</span></span><br><span class="line"><span class="string">重定向</span></span><br><span class="line"><span class="string">  return redirect(&#x27;https://www.mzitu.com/&#x27;)</span></span><br><span class="line"><span class="string">    return redirect(&#x27;/home/&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>   </span><br></pre></td></tr></table></figure><h3 id="主要文件介绍"><a href="#主要文件介绍" class="headerlink" title="主要文件介绍"></a>主要文件介绍</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-mysite项目文件夹</span><br><span class="line">--mysite文件夹</span><br><span class="line">  ---settings.py配置文件</span><br><span class="line">    ---urls.py路由与视图函数对应关系(路由层)</span><br><span class="line">    ---wsgi.pywsgiref模块(不考虑)</span><br><span class="line">  --manage.pydjango的入口文件</span><br><span class="line">  --db.sqlite3django自带的sqlite3数据库(小型数据库 功能不是很多还有bug)</span><br><span class="line">  --firstapp文件夹</span><br><span class="line">  ---admin.pydjango后台管理</span><br><span class="line">    ---apps.py注册使用</span><br><span class="line">    ---migrations文件夹数据库迁移记录</span><br><span class="line">    ---models.py数据库相关的 模型类(orm)</span><br><span class="line">  ---tests.py测试文件</span><br><span class="line">    ---views.py视图函数(视图层)</span><br></pre></td></tr></table></figure><h3 id="应用-app"><a href="#应用-app" class="headerlink" title="应用(app)"></a>应用(app)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">django是一款专门用来开发app的web框架</span></span><br><span class="line"><span class="string">比如开发淘宝</span></span><br><span class="line"><span class="string">订单相关</span></span><br><span class="line"><span class="string">用户相关</span></span><br><span class="line"><span class="string">投诉相关</span></span><br><span class="line"><span class="string">创建不同的app对应不同的功能</span></span><br><span class="line"><span class="string">一个app就是一个独立的功能模块</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">***********************创建的应用一定要去配置文件中注册**********************</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;firstapp.apps.firstappConfig&#x27;</span>,  <span class="comment"># 全写</span></span><br><span class="line">  <span class="string">&#x27;firstapp&#x27;</span>, <span class="comment"># 简写</span></span><br><span class="line">]</span><br><span class="line">ps:你在用pycharm创建项目的时候 pycharm可以帮你创建一个app并且自动注册</span><br><span class="line">***********************************************************************</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python发送邮件</title>
      <link href="/2022/05/15/Python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2022/05/15/Python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="使用SMTP模块发送邮件"><a href="#使用SMTP模块发送邮件" class="headerlink" title="使用SMTP模块发送邮件"></a>使用SMTP模块发送邮件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.header import Header</span><br><span class="line">msg_from = &#x27;***@qq.com&#x27;  # 发送方邮箱</span><br><span class="line">passwd = &#x27;****&#x27;  # 填入发送方邮箱的授权码(填入自己的授权码，相当于邮箱密码)</span><br><span class="line">msg_to = [&#x27;****@qq.com&#x27;,&#x27;**@163.com&#x27;,&#x27;*****@163.com&#x27;]  # 收件人邮箱</span><br><span class="line"># msg_to = &#x27;616564099@qq.com&#x27;  # 收件人邮箱</span><br><span class="line"></span><br><span class="line">subject = &quot;邮件标题&quot;  # 主题</span><br><span class="line">content = &quot;邮件内容，我是邮件内容，哈哈哈&quot;</span><br><span class="line"># 生成一个MIMEText对象（还有一些其它参数）</span><br><span class="line">msg = MIMEText(content)</span><br><span class="line"># 放入邮件主题</span><br><span class="line">msg[&#x27;Subject&#x27;] = subject</span><br><span class="line"># 也可以这样传参</span><br><span class="line"># msg[&#x27;Subject&#x27;] = Header(subject, &#x27;utf-8&#x27;)</span><br><span class="line"># 放入发件人</span><br><span class="line">msg[&#x27;From&#x27;] = msg_from</span><br><span class="line"># 放入收件人</span><br><span class="line"># msg[&#x27;To&#x27;] = &#x27;616564099@qq.com&#x27;</span><br><span class="line"># msg[&#x27;To&#x27;] = &#x27;发给你的邮件啊&#x27;</span><br><span class="line">try:</span><br><span class="line">    # 通过ssl方式发送，服务器地址，端口</span><br><span class="line">    s = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)</span><br><span class="line">    # 登录到邮箱</span><br><span class="line">    s.login(msg_from, passwd)</span><br><span class="line">    # 发送邮件：发送方，收件方，要发送的消息</span><br><span class="line">    s.sendmail(msg_from, msg_to, msg.as_string())</span><br><span class="line">    print(&#x27;成功&#x27;)</span><br><span class="line">except s.SMTPException as e:</span><br><span class="line">    print(e)</span><br><span class="line">finally:</span><br><span class="line">    s.quit()</span><br></pre></td></tr></table></figure><h2 id="发送html格式邮件"><a href="#发送html格式邮件" class="headerlink" title="发送html格式邮件"></a>发送html格式邮件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.header import Header</span><br><span class="line"></span><br><span class="line">msg_from = &#x27;306334678@qq.com&#x27;  # 发送方邮箱</span><br><span class="line">passwd = &#x27;ldoetnwqdjqqbjjj&#x27;  # 填入发送方邮箱的授权码(填入自己的授权码，相当于邮箱密码)</span><br><span class="line">msg_to = [&#x27;616564099@qq.com&#x27;]  # 收件人邮箱</span><br><span class="line"># msg_to = &#x27;616564099@qq.com&#x27;  # 收件人邮箱</span><br><span class="line"></span><br><span class="line">subject = &quot;邮件标题&quot;  # 主题</span><br><span class="line"># *************发送html的邮件**********</span><br><span class="line">content = &#x27;&#x27;&#x27;</span><br><span class="line">&lt;p&gt;Python 邮件发送测试...&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;这是一个链接&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"># 生成一个MIMEText对象</span><br><span class="line">msg = MIMEText(content)</span><br><span class="line"># 放入邮件主题</span><br><span class="line">msg[&#x27;Subject&#x27;] = subject</span><br><span class="line"># 也可以这样传参</span><br><span class="line"># msg[&#x27;Subject&#x27;] = Header(subject, &#x27;utf-8&#x27;)</span><br><span class="line"># 放入发件人</span><br><span class="line">msg[&#x27;From&#x27;] = msg_from</span><br><span class="line"># 放入收件人</span><br><span class="line"># msg[&#x27;To&#x27;] = &#x27;616564099@qq.com&#x27;</span><br><span class="line"># msg[&#x27;To&#x27;] = &#x27;发给你的邮件啊&#x27;</span><br><span class="line">try:</span><br><span class="line">    # 通过ssl方式发送</span><br><span class="line">    s = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)</span><br><span class="line">    # 登录到邮箱</span><br><span class="line">    s.login(msg_from, passwd)</span><br><span class="line">    # 发送邮件：发送方，收件方，要发送的消息</span><br><span class="line">    s.sendmail(msg_from, msg_to, msg.as_string())</span><br><span class="line">    print(&#x27;成功&#x27;)</span><br><span class="line">except s.SMTPException as e:</span><br><span class="line">    print(e)</span><br><span class="line">finally:</span><br><span class="line">    s.quit()</span><br></pre></td></tr></table></figure><h2 id="发送带附件的邮件"><a href="#发送带附件的邮件" class="headerlink" title="发送带附件的邮件"></a>发送带附件的邮件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.header import Header</span><br><span class="line">from email.mime.multipart import MIMEMultipart</span><br><span class="line">from email.mime.base import MIMEBase</span><br><span class="line">from email.mime.image import MIMEImage</span><br><span class="line">from email import  encoders</span><br><span class="line">msg_from = &#x27;306334678@qq.com&#x27;  # 发送方邮箱</span><br><span class="line">passwd = &#x27;***&#x27;  # 填入发送方邮箱的授权码(填入自己的授权码，相当于邮箱密码)</span><br><span class="line">msg_to = [&#x27;616564099@qq.com&#x27;]  # 收件人邮箱</span><br><span class="line"></span><br><span class="line">subject = &quot;邮件标题&quot;  # 主题</span><br><span class="line"># 创建一个带附件的实例</span><br><span class="line">msg = MIMEMultipart()</span><br><span class="line"># 放入邮件主题</span><br><span class="line">msg[&#x27;Subject&#x27;] = subject</span><br><span class="line"># 也可以这样传参</span><br><span class="line"># msg[&#x27;Subject&#x27;] = Header(subject, &#x27;utf-8&#x27;)</span><br><span class="line"># 放入发件人</span><br><span class="line">msg[&#x27;From&#x27;] = msg_from</span><br><span class="line"></span><br><span class="line"># 邮件正文内容</span><br><span class="line">msg.attach(MIMEText(&#x27;Python 邮件发送测试……&#x27;, &#x27;plain&#x27;, &#x27;utf-8&#x27;))</span><br><span class="line"></span><br><span class="line"># 构造附件1，传送当前目录下的 test.txt 文件</span><br><span class="line">att1 = MIMEText(open(&#x27;test.txt&#x27;, &#x27;rb&#x27;).read(), &#x27;base64&#x27;, &#x27;utf-8&#x27;)</span><br><span class="line">att1[&quot;Content-Type&quot;] = &#x27;application/octet-stream&#x27;</span><br><span class="line"># 这里的filename可以任意写，写什么名字，邮件中显示什么名字</span><br><span class="line">att1[&quot;Content-Disposition&quot;] = &#x27;attachment; filename=&quot;test.txt&quot;&#x27;</span><br><span class="line">msg.attach(att1)</span><br><span class="line"></span><br><span class="line"># 构造附件2，</span><br><span class="line">with open(&#x27;test.png&#x27;, &#x27;rb&#x27;) as f:</span><br><span class="line">    # 设置附件的MIME和文件名，这里是png类型:</span><br><span class="line">    mime = MIMEBase(&#x27;image&#x27;, &#x27;png&#x27;, filename=&#x27;test.png&#x27;)</span><br><span class="line">    # 加上必要的头信息:</span><br><span class="line">    mime.add_header(&#x27;Content-Disposition&#x27;, &#x27;attachment&#x27;, filename=&#x27;test.png&#x27;)</span><br><span class="line">    mime.add_header(&#x27;Content-ID&#x27;, &#x27;&lt;0&gt;&#x27;)</span><br><span class="line">    mime.add_header(&#x27;X-Attachment-Id&#x27;, &#x27;0&#x27;)</span><br><span class="line">    # 把附件的内容读进来:</span><br><span class="line">    mime.set_payload(f.read())</span><br><span class="line">    # 用Base64编码:</span><br><span class="line">    encoders.encode_base64(mime)</span><br><span class="line">    # 添加到MIMEMultipart:</span><br><span class="line">    msg.attach(mime)</span><br><span class="line"># 构造附件3，图片格式</span><br><span class="line">fp = open(&#x27;test.png&#x27;, &#x27;rb&#x27;)</span><br><span class="line">msgImage = MIMEImage(fp.read())</span><br><span class="line">fp.close()</span><br><span class="line"># 定义图片 ID，在 HTML 文本中引用</span><br><span class="line">msgImage.add_header(&#x27;Content-ID&#x27;, &#x27;&lt;image1&gt;&#x27;)</span><br><span class="line">msg.attach(msgImage)</span><br><span class="line">try:</span><br><span class="line">    # 通过ssl方式发送</span><br><span class="line">    s = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)</span><br><span class="line">    # 登录到邮箱</span><br><span class="line">    s.login(msg_from, passwd)</span><br><span class="line">    # 发送邮件：发送方，收件方，要发送的消息</span><br><span class="line">    s.sendmail(msg_from, msg_to, msg.as_string())</span><br><span class="line">    print(&#x27;成功&#x27;)</span><br><span class="line">except s.SMTPException as e:</span><br><span class="line">    print(e)</span><br><span class="line">finally:</span><br><span class="line">    s.quit()</span><br></pre></td></tr></table></figure><h2 id="Django发送邮件"><a href="#Django发送邮件" class="headerlink" title="Django发送邮件"></a>Django发送邮件</h2><h4 id="在setting中配置"><a href="#在setting中配置" class="headerlink" title="在setting中配置"></a>在setting中配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># EMAIL_BACKEND = &#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</span><br><span class="line">EMAIL_HOST = &#x27;smtp.qq.com&#x27;  # 如果是 163 改成 smtp.163.com</span><br><span class="line">EMAIL_PORT = 465</span><br><span class="line">EMAIL_HOST_USER = &#x27;306334678@qq.com&#x27;  # 帐号</span><br><span class="line">EMAIL_HOST_PASSWORD = &#x27;***&#x27;  # 密码</span><br><span class="line">DEFAULT_FROM_EMAIL = EMAIL_HOST_USER</span><br><span class="line">#这样收到的邮件，收件人处就会这样显示</span><br><span class="line">#DEFAULT_FROM_EMAIL = &#x27;lqz&lt;&#x27;306334678@qq.com&gt;&#x27;</span><br><span class="line">EMAIL_USE_SSL = True   #使用ssl</span><br><span class="line">#EMAIL_USE_TLS = False # 使用tls</span><br><span class="line"></span><br><span class="line">#EMAIL_USE_SSL 和 EMAIL_USE_TLS 是互斥的，即只能有一个为 True</span><br></pre></td></tr></table></figure><h4 id="view视图函数"><a href="#view视图函数" class="headerlink" title="view视图函数"></a>view视图函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.core.mail import send_mail</span><br><span class="line">import threading</span><br><span class="line">from mybbs import settings</span><br><span class="line"></span><br><span class="line">t = threading.Thread(target=send_mail, args=(&quot;您的文章%s新增了一条评论内容&quot; ,</span><br><span class="line">                                             &#x27;ddd&#x27;,</span><br><span class="line">                                             settings.EMAIL_HOST_USER,</span><br><span class="line">                                             [&quot;616564099@qq.com&quot;])</span><br><span class="line">                     )</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><h4 id="一次性发多封邮件"><a href="#一次性发多封邮件" class="headerlink" title="一次性发多封邮件"></a>一次性发多封邮件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from django.core.mail import send_mass_mail</span><br><span class="line"></span><br><span class="line">message1 = (&#x27;第一封邮件标题&#x27;, &#x27;这是邮件内容&#x27;, &#x27;from@example.com&#x27;, [&#x27;first@example.com&#x27;, &#x27;other@example.com&#x27;])</span><br><span class="line">message2 = (&#x27;第二封邮件标题&#x27;, &#x27;这是邮件内容&#x27;, &#x27;from@example.com&#x27;, [&#x27;second@test.com&#x27;])</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">fail_silently: （可选）布尔值。为 False 时， send_mail 会抛出 smtplib.SMTPException 异常。smtplib 文档列出了所有可能的异常。 这些异常都是 SMTPException 的子类</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">send_mass_mail((message1, message2), fail_silently=False)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">send_mail 每次发邮件都会建立一个连接，发多封邮件时建立多个连接。而 send_mass_mail 是建立单个连接发送多封邮件，所以一次性发送多封邮件时 send_mass_mail 要优于 send_mail。</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h4 id="携带附件或发送html（需要接收方支持）"><a href="#携带附件或发送html（需要接收方支持）" class="headerlink" title="携带附件或发送html（需要接收方支持）"></a>携带附件或发送html（需要接收方支持）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.core.mail import EmailMultiAlternatives</span><br><span class="line"># subject 主题 content 内容 to_addr 是一个列表，发送给哪些人</span><br><span class="line">msg = EmailMultiAlternatives(&#x27;邮件标题&#x27;, &#x27;邮件内容&#x27;, &#x27;发送方&#x27;, [&#x27;接收方&#x27;])</span><br><span class="line">msg.content_subtype = &quot;html&quot;</span><br><span class="line"># 添加附件（可选）</span><br><span class="line">msg.attach_file(&#x27;test.txt&#x27;)</span><br><span class="line"># 发送</span><br><span class="line">msg.send()</span><br></pre></td></tr></table></figure><p>备注：send_mail 每次发邮件都会建立一个连接，发多封邮件时建立多个连接。而 send_mass_mail 是建立单个连接发送多封邮件，所以一次性发送多封邮件时 send_mass_mail 要优于 send_mail。</p><h2 id="各大邮箱smtp服务器及端口"><a href="#各大邮箱smtp服务器及端口" class="headerlink" title="各大邮箱smtp服务器及端口"></a>各大邮箱smtp服务器及端口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">新浪邮箱smtp服务器</span><br><span class="line">外发服务器:smtp.vip.sina.com</span><br><span class="line">收件服务器:pop3.vip.sina.com</span><br><span class="line">新浪免费邮件</span><br><span class="line">外发服务器:smtp.sina.com.cn</span><br><span class="line">收件服务器:pop3.sina.com.cn</span><br><span class="line">163邮箱smtp服务器</span><br><span class="line">pop： pop.163.com</span><br><span class="line">smtp： smtp.163.com</span><br><span class="line">QQ邮箱smtp服务器及端口</span><br><span class="line">接收邮件服务器：imap.exmail.qq.com，使用SSL，端口号993</span><br><span class="line">发送邮件服务器：smtp.exmail.qq.com，使用SSL，端口号465或587</span><br><span class="line">yahoo邮箱smtp服务器</span><br><span class="line">接：pop.mail.yahoo.com.cn</span><br><span class="line">发：smtp.mail.yahoo.com</span><br><span class="line">126邮箱smtp服务器</span><br><span class="line">pop： pop.126.com</span><br><span class="line">smtp： smtp.126.com</span><br><span class="line">新浪免费邮箱</span><br><span class="line">POP3：pop.sina.com</span><br><span class="line">SMTP：smtp.sina.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">新浪VIP邮箱</span><br><span class="line">POP3：pop3.vip.sina.com</span><br><span class="line">SMTP：smtp.vip.sina.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">新浪企业邮箱</span><br><span class="line">POP3：pop.sina.com</span><br><span class="line">SMTP：smtp.sina.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">雅虎邮箱</span><br><span class="line">POP3：pop.mail.yahoo.cn</span><br><span class="line">SMTP：smtp.mail.yahoo.cn</span><br><span class="line">SMTP端口号：25</span><br><span class="line">搜狐邮箱</span><br><span class="line">POP3：pop3.sohu.com</span><br><span class="line">SMTP：smtp.sohu.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">TOM邮箱</span><br><span class="line">POP3：pop.tom.com</span><br><span class="line">SMTP：smtp.tom.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">Gmail邮箱</span><br><span class="line">POP3：pop.gmail.com</span><br><span class="line">SMTP：smtp.gmail.com</span><br><span class="line">SMTP端口号：587 或 25</span><br><span class="line">QQ邮箱</span><br><span class="line">POP3：pop.exmail.qq.com</span><br><span class="line">SMTP：smtp.exmail.qq.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">263邮箱</span><br><span class="line">域名：263.net</span><br><span class="line">POP3：263.net</span><br><span class="line">SMTP：smtp.263.net</span><br><span class="line">SMTP端口号：25</span><br><span class="line">域名：x263.net</span><br><span class="line">POP3：pop.x263.net</span><br><span class="line">SMTP：smtp.x263.net</span><br><span class="line">SMTP端口号：25</span><br><span class="line">域名：263.net.cn</span><br><span class="line">POP3：263.net.cn</span><br><span class="line">SMTP：263.net.cn</span><br><span class="line">SMTP端口号：25</span><br><span class="line">域名：炫我型</span><br><span class="line">POP3：pop.263xmail.com</span><br><span class="line">SMTP：smtp.263xmail.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">21CN 免费邮箱</span><br><span class="line">POP3：pop.21cn.com</span><br><span class="line">SMTP：smtp.21cn.com</span><br><span class="line">IMAP：imap.21cn.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">21CN 经济邮邮箱</span><br><span class="line">POP3：pop.21cn.com</span><br><span class="line">SMTP：smtp.21cn.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">21CN 商务邮邮箱</span><br><span class="line">POP3：pop.21cn.net</span><br><span class="line">SMTP：smtp.21cn.net</span><br><span class="line">SMTP端口号：25</span><br><span class="line">21CN 快感邮箱</span><br><span class="line">POP3：vip.21cn.com</span><br><span class="line">SMTP：vip.21cn.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">21CN Y邮箱</span><br><span class="line">POP3：pop.y.vip.21cn.com</span><br><span class="line">SMTP：smtp.y.vip.21cn.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">中华网任我邮邮箱</span><br><span class="line">POP3：rwpop.china.com</span><br><span class="line">SMTP：rwsmtp.china.com</span><br><span class="line">SMTP端口号：25</span><br><span class="line">中华网时尚、商务邮箱</span><br><span class="line">POP3：pop.china.com</span><br><span class="line">SMTP：smtp.china.com</span><br><span class="line">SMTP端口号：25</span><br></pre></td></tr></table></figure><h2 id="qq邮箱配置smtp"><a href="#qq邮箱配置smtp" class="headerlink" title="qq邮箱配置smtp"></a>qq邮箱配置smtp</h2><p>点击账户,开启IMAP&#x2F;SMTP服务即可.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再论元类</title>
      <link href="/2022/05/08/%E5%86%8D%E8%AE%BA%E5%85%83%E7%B1%BB/"/>
      <url>/2022/05/08/%E5%86%8D%E8%AE%BA%E5%85%83%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="元类介绍"><a href="#元类介绍" class="headerlink" title="元类介绍"></a>元类介绍</h1><p>什么是元类呢？一切源自于一句话：python中一切皆为对象。让我们先定义一个类，然后逐步分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure><p>所有的对象都是实例化或者说调用类而得到的（调用类的过程称为类的实例化），比如对象t1是调用类StanfordTeacher得到的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1)) <span class="comment">#查看对象t1的类是&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>如果一切皆为对象，那么类StanfordTeacher本质也是一个对象，既然所有的对象都是调用类得到的，那么StanfordTeacher必然也是调用了一个类得到的，这个类称为元类</p><p><strong>于是我们可以推导出&#x3D;&#x3D;&#x3D;&gt;产生StanfordTeacher的过程一定发生了：StanfordTeacher&#x3D;元类(…)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(StanfordTeacher)) <span class="comment"># 结果为&lt;class &#x27;type&#x27;&gt;，证明是调用了type这个元类而产生的StanfordTeacher，即默认的元类为type</span></span><br></pre></td></tr></table></figure><p><img src="/2022/05/08/%E5%86%8D%E8%AE%BA%E5%85%83%E7%B1%BB/1.jpg" alt="1"></p><h1 id="class关键字创建类的流程分析"><a href="#class关键字创建类的流程分析" class="headerlink" title="class关键字创建类的流程分析"></a>class关键字创建类的流程分析</h1><p>上文我们基于python中一切皆为对象的概念分析出：我们用class关键字定义的类本身也是一个对象，负责产生该对象的类称之为元类（元类可以简称为类的类），内置的元类为type</p><p>class关键字在帮我们创建类时，必然帮我们调用了元类StanfordTeacher&#x3D;type(…)，那调用type时传入的参数是什么呢？必然是类的关键组成部分，一个类有三大组成部分，分别是</p><p>1、类名class_name&#x3D;’StanfordTeacher’</p><p>2、基类们class_bases&#x3D;(object,)</p><p>3、类的名称空间class_dic，类的名称空间是执行类体代码而得到的</p><p>调用type时会依次传入以上三个参数</p><p>综上，class关键字帮我们创建一个类应该细分为以下四个过程</p><p><img src="/2022/05/08/%E5%86%8D%E8%AE%BA%E5%85%83%E7%B1%BB/2.jpg" alt="2"></p><p>补充：exec的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#exec：三个参数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#参数一：包含一系列python代码的字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#参数二：全局作用域（字典形式），如果不指定，默认为globals()</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#参数三：局部作用域（字典形式），如果不指定，默认为locals()</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#可以把exec命令的执行当成是一个函数的执行，会将执行期间产生的名字存放于局部名称空间中</span></span><br><span class="line">g=&#123;</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">l=&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">global x,z</span></span><br><span class="line"><span class="string">x=100</span></span><br><span class="line"><span class="string">z=200</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">m=300</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>,g,l)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(g) <span class="comment">#&#123;&#x27;x&#x27;: 100, &#x27;y&#x27;: 2,&#x27;z&#x27;:200,......&#125;</span></span><br><span class="line"><span class="built_in">print</span>(l) <span class="comment">#&#123;&#x27;m&#x27;: 300&#125;</span></span><br></pre></td></tr></table></figure><h1 id="自定义元类控制类StanfordTeacher的创建"><a href="#自定义元类控制类StanfordTeacher的创建" class="headerlink" title="自定义元类控制类StanfordTeacher的创建"></a>自定义元类控制类StanfordTeacher的创建</h1><p>一个类没有声明自己的元类，默认他的元类就是type，除了使用内置元类type，我们也可以通过继承type来自定义元类，然后使用metaclass关键字参数为一个类指定元类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># StanfordTeacher=Mymeta(&#x27;StanfordTeacher&#x27;,(object),&#123;...&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta): </span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure><p>自定义元类可以控制类的产生过程，类的产生过程其实就是元类的调用过程,即StanfordTeacher&#x3D;Mymeta(‘StanfordTeacher’,(object),{…})，调用Mymeta会先产生一个空对象StanfordTeacher，然后连同调用Mymeta括号内的参数一同传给Mymeta下的__init__方法，完成初始化，于是我们可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,class_name,class_bases,class_dic</span>):</span><br><span class="line">        <span class="comment"># print(self) #&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="comment"># print(class_bases) #(&lt;class &#x27;object&#x27;&gt;,)</span></span><br><span class="line">        <span class="comment"># print(class_dic) #&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__qualname__&#x27;: &#x27;StanfordTeacher&#x27;, &#x27;school&#x27;: &#x27;Stanford&#x27;, &#x27;__init__&#x27;: &lt;function StanfordTeacher.__init__ at 0x102b95ae8&gt;, &#x27;say&#x27;: &lt;function StanfordTeacher.say at 0x10621c6a8&gt;&#125;</span></span><br><span class="line">        <span class="built_in">super</span>(Mymeta, self).__init__(class_name, class_bases, class_dic)  <span class="comment"># 重用父类的功能</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> class_name.islower():</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;类名%s请修改为驼峰体&#x27;</span> %class_name)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;__doc__&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> class_dic <span class="keyword">or</span> <span class="built_in">len</span>(class_dic[<span class="string">&#x27;__doc__&#x27;</span>].strip(<span class="string">&#x27; \n&#x27;</span>)) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;类中必须有文档注释，并且文档注释不能为空&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># StanfordTeacher=Mymeta(&#x27;StanfordTeacher&#x27;,(object),&#123;...&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    类StanfordTeacher的文档注释</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure><h1 id="自定义元类控制类StanfordTeacher的调用"><a href="#自定义元类控制类StanfordTeacher的调用" class="headerlink" title="自定义元类控制类StanfordTeacher的调用"></a>自定义元类控制类StanfordTeacher的调用</h1><p>储备知识：<strong>call</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        <span class="built_in">print</span>(args)</span><br><span class="line">        <span class="built_in">print</span>(kwargs)</span><br><span class="line"> </span><br><span class="line">obj=Foo()</span><br><span class="line"><span class="comment">#1、要想让obj这个对象变成一个可调用的对象，需要在该对象的类中定义一个方法__call__方法，该方法会在调用对象时自动触发</span></span><br><span class="line"><span class="comment">#2、调用obj的返回值就是__call__方法的返回值</span></span><br><span class="line">res=obj(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,x=<span class="number">1</span>,y=<span class="number">2</span>) </span><br></pre></td></tr></table></figure><p>由上例得知，调用一个对象，就是触发对象所在类中的__call__方法的执行，如果把StanfordTeacher也当做一个对象，那么在StanfordTeacher这个对象的类中也必然存在一个__call__方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(self) <span class="comment">#&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(args) <span class="comment">#(&#x27;lili&#x27;, 18)</span></span><br><span class="line">        <span class="built_in">print</span>(kwargs) <span class="comment">#&#123;&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta):</span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用StanfordTeacher就是在调用StanfordTeacher类中的__call__方法</span></span><br><span class="line"><span class="comment"># 然后将StanfordTeacher传给self,溢出的位置参数传给*，溢出的关键字参数传给**</span></span><br><span class="line"><span class="comment"># 调用StanfordTeacher的返回值就是调用__call__的返回值</span></span><br><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(t1) <span class="comment">#123</span></span><br></pre></td></tr></table></figure><p>默认地，调用t1&#x3D;StanfordTeacher(‘lili’,18)会做三件事</p><p>1、产生一个空对象obj</p><p>2、调用__init__方法初始化对象obj</p><p>3、返回初始化好的obj</p><p>对应着，StanfordTeacher类中的__call__方法也应该做这三件事</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="comment">#1、调用__new__产生一个空对象obj</span></span><br><span class="line">        obj=self.__new__(self) <span class="comment"># 此处的self是类OldoyTeacher，必须传参，代表创建一个StanfordTeacher的对象obj</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">#2、调用__init__初始化空对象obj</span></span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#3、返回初始化好的对象obj</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta):</span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(t1.__dict__) <span class="comment">#&#123;&#x27;name&#x27;: &#x27;lili&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上例的__call__相当于一个模板，我们可以在该基础上改写__call__的逻辑从而控制调用StanfordTeacher的过程，比如将StanfordTeacher的对象的所有属性都变成私有的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="comment">#1、调用__new__产生一个空对象obj</span></span><br><span class="line">        obj=self.__new__(self) <span class="comment"># 此处的self是类StanfordTeacher，必须传参，代表创建一个StanfordTeacher的对象obj</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">#2、调用__init__初始化空对象obj</span></span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 在初始化之后，obj.__dict__里就有值了</span></span><br><span class="line">        obj.__dict__=&#123;<span class="string">&#x27;_%s__%s&#x27;</span> %(self.__name__,k):v <span class="keyword">for</span> k,v <span class="keyword">in</span> obj.__dict__.items()&#125;</span><br><span class="line">        <span class="comment">#3、返回初始化好的对象obj</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta):</span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(t1.__dict__) <span class="comment">#&#123;&#x27;_StanfordTeacher__name&#x27;: &#x27;lili&#x27;, &#x27;_StanfordTeacher__age&#x27;: 18&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上例中涉及到查找属性的问题，比如self.__new__，请看下一小节</p><h1 id="再看属性查找"><a href="#再看属性查找" class="headerlink" title="再看属性查找"></a>再看属性查找</h1><p>结合python继承的实现原理+元类重新看属性的查找应该是什么样子呢？？？</p><p>在学习完元类后，其实我们用class自定义的类也全都是对象（包括object类本身也是元类type的 一个实例，可以用type(object)查看），我们学习过继承的实现原理，如果把类当成对象去看，将下述继承应该说成是：对象StanfordTeacher继承对象Foo，对象Foo继承对象Bar，对象Bar继承对象object</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    n=<span class="number">444</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        obj=self.__new__(self)</span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    n=<span class="number">333</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">Bar</span>):</span><br><span class="line">    n=<span class="number">222</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(Foo,metaclass=Mymeta):</span><br><span class="line">    n=<span class="number">111</span></span><br><span class="line"> </span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(StanfordTeacher.n) <span class="comment">#自下而上依次注释各个类中的n=xxx，然后重新运行程序，发现n的查找顺序为StanfordTeacher-&gt;Foo-&gt;Bar-&gt;object-&gt;Mymeta-&gt;type</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>于是属性查找应该分成两层，一层是对象层（基于c3算法的MRO）的查找，另外一个层则是类层（即元类层）的查找</p><p><img src="/2022/05/08/%E5%86%8D%E8%AE%BA%E5%85%83%E7%B1%BB/3.jpg" alt="3"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找顺序：</span></span><br><span class="line"><span class="comment">#1、先对象层：StanfordTeacher-&gt;Foo-&gt;Bar-&gt;object</span></span><br><span class="line"><span class="comment">#2、然后元类层：Mymeta-&gt;type</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>依据上述总结，我们来分析下元类Mymeta中__call__里的self.__new__的查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): </span><br><span class="line">    n=<span class="number">444</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        obj=self.__new__(self)</span><br><span class="line">        <span class="built_in">print</span>(self.__new__ <span class="keyword">is</span> <span class="built_in">object</span>.__new__) <span class="comment">#True</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    n=<span class="number">333</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Bar.__new__&#x27;)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">Bar</span>):</span><br><span class="line">    n=<span class="number">222</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Foo.__new__&#x27;)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(Foo,metaclass=Mymeta):</span><br><span class="line">    n=<span class="number">111</span></span><br><span class="line"> </span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;StanfordTeacher.__new__&#x27;)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>) <span class="comment">#触发StanfordTeacher的类中的__call__方法的执行，进而执行self.__new__开始查找 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结，Mymeta下的__call__里的self.<strong>new__在StanfordTeacher、Foo、Bar里都没有找到__new__的情况下，会去找object里的__new__，而object下默认就有一个__new__，所以即便是之前的类均未实现__new</strong>,也一定会在object中找到一个，根本不会、也根本没必要再去找元类Mymeta-&gt;type中查找__new__</p><p>我们在元类的__call__中也可以用object.<strong>new</strong>(self)去造对象</p><p><img src="/2022/05/08/%E5%86%8D%E8%AE%BA%E5%85%83%E7%B1%BB/4.jpg" alt="4"></p><p><strong>但我们还是推荐在__call__中使用self.<strong>new</strong>(self)去创造空对象，因为这种方式会检索三个类StanfordTeacher-&gt;Foo-&gt;Bar,而object.__new__则是直接跨过了他们三个</strong></p><p>最后说明一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    n=<span class="number">444</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        obj=<span class="built_in">type</span>.__new__(cls,*args,**kwargs) <span class="comment"># 必须按照这种传值方式</span></span><br><span class="line">        <span class="built_in">print</span>(obj.__dict__)</span><br><span class="line">        <span class="comment"># return obj # 只有在返回值是type的对象时，才会触发下面的__init__</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,class_name,class_bases,class_dic</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run。。。&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta): <span class="comment">#StanfordTeacher=Mymeta(&#x27;StanfordTeacher&#x27;,(object),&#123;...&#125;)</span></span><br><span class="line">    n=<span class="number">111</span></span><br><span class="line"> </span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Mymeta)) <span class="comment">#&lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 产生类StanfordTeacher的过程就是在调用Mymeta，而Mymeta也是type类的一个对象，那么Mymeta之所以可以调用，一定是在元类type中有一个__call__方法</span></span><br><span class="line"><span class="comment"># 该方法中同样需要做至少三件事：</span></span><br><span class="line"><span class="comment"># class type:</span></span><br><span class="line"><span class="comment">#     def __call__(self, *args, **kwargs): #self=&lt;class &#x27;__main__.Mymeta&#x27;&gt;</span></span><br><span class="line"><span class="comment">#         obj=self.__new__(self,*args,**kwargs) # 产生Mymeta的一个对象</span></span><br><span class="line"><span class="comment">#         self.__init__(obj,*args,**kwargs) </span></span><br><span class="line"><span class="comment">#         return obj</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p><strong>1、在元类中控制把自定义类的数据属性都变成大写</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls,name,bases,attrs</span>):</span><br><span class="line">        update_attrs=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">callable</span>(v) <span class="keyword">and</span> <span class="keyword">not</span> k.startswith(<span class="string">&#x27;__&#x27;</span>):</span><br><span class="line">                update_attrs[k.upper()]=v</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                update_attrs[k]=v</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls,name,bases,update_attrs)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>(metaclass=Mymetaclass):</span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    tag=<span class="string">&#x27;Legend of the Dragon&#x27;</span> <span class="comment">#龙的传人</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is walking&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(Chinese.__dict__)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;COUNTRY&#x27;: &#x27;China&#x27;, </span></span><br><span class="line"><span class="string"> &#x27;TAG&#x27;: &#x27;Legend of the Dragon&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;walk&#x27;: &lt;function Chinese.walk at 0x0000000001E7B950&gt;,</span></span><br><span class="line"><span class="string"> &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;Chinese&#x27; objects&gt;,                                         </span></span><br><span class="line"><span class="string"> &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;Chinese&#x27; objects&gt;,</span></span><br><span class="line"><span class="string"> &#x27;__doc__&#x27;: None&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2、在元类中控制自定义的类无需__init__方法</strong></p><p> 1.元类帮其完成创建对象，以及初始化操作；</p><p>　　2.要求实例化时传参必须为关键字形式，否则抛出异常TypeError: must use keyword argument</p><p>　　3.key作为用户自定义类产生对象的属性，且所有属性变成大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="comment"># def __new__(cls,name,bases,attrs):</span></span><br><span class="line">    <span class="comment">#     update_attrs=&#123;&#125;</span></span><br><span class="line">    <span class="comment">#     for k,v in attrs.items():</span></span><br><span class="line">    <span class="comment">#         if not callable(v) and not k.startswith(&#x27;__&#x27;):</span></span><br><span class="line">    <span class="comment">#             update_attrs[k.upper()]=v</span></span><br><span class="line">    <span class="comment">#         else:</span></span><br><span class="line">    <span class="comment">#             update_attrs[k]=v</span></span><br><span class="line">    <span class="comment">#     return type.__new__(cls,name,bases,update_attrs)</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> args:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;must use keyword argument for key function&#x27;</span>)</span><br><span class="line">        obj = <span class="built_in">object</span>.__new__(self) <span class="comment">#创建对象，self为类Foo</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            obj.__dict__[k.upper()]=v</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>(metaclass=Mymetaclass):</span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    tag=<span class="string">&#x27;Legend of the Dragon&#x27;</span> <span class="comment">#龙的传人</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is walking&#x27;</span> %self.name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">p=Chinese(name=<span class="string">&#x27;lili&#x27;</span>,age=<span class="number">18</span>,sex=<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.__dict__)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3、在元类中控制自定义的类产生的对象相关的属性全部为隐藏属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,class_name,class_bases,class_dic</span>):</span><br><span class="line">        <span class="comment">#控制类Foo的创建</span></span><br><span class="line">        <span class="built_in">super</span>(Mymeta,self).__init__(class_name,class_bases,class_dic)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment">#控制Foo的调用过程，即Foo对象的产生过程</span></span><br><span class="line">        obj = self.__new__(self)</span><br><span class="line">        self.__init__(obj, *args, **kwargs)</span><br><span class="line">        obj.__dict__=&#123;<span class="string">&#x27;_%s__%s&#x27;</span> %(self.__name__,k):v <span class="keyword">for</span> k,v <span class="keyword">in</span> obj.__dict__.items()&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="built_in">object</span>,metaclass=Mymeta):  <span class="comment"># Foo=Mymeta(...)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age,sex</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">obj=Foo(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obj.__dict__)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4、基于元类实现单例模式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#步骤五：基于元类实现单例模式</span></span><br><span class="line"><span class="comment"># 单例：即单个实例，指的是同一个类实例化多次的结果指向同一个对象，用于节省内存空间</span></span><br><span class="line"><span class="comment"># 如果我们从配置文件中读取配置来进行实例化，在配置相同的情况下，就没必要重复产生对象浪费内存了</span></span><br><span class="line"><span class="comment">#settings.py文件内容如下</span></span><br><span class="line">HOST=<span class="string">&#x27;1.1.1.1&#x27;</span></span><br><span class="line">PORT=<span class="number">3306</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#方式一:定义一个类方法实现单例模式</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mysql</span>:</span><br><span class="line">    __instance=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port</span>):</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.__instance:</span><br><span class="line">            cls.__instance=cls(settings.HOST,settings.PORT)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"> </span><br><span class="line">obj1=Mysql(<span class="string">&#x27;1.1.1.2&#x27;</span>,<span class="number">3306</span>)</span><br><span class="line">obj2=Mysql(<span class="string">&#x27;1.1.1.3&#x27;</span>,<span class="number">3307</span>)</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2) <span class="comment">#False</span></span><br><span class="line"> </span><br><span class="line">obj3=Mysql.singleton()</span><br><span class="line">obj4=Mysql.singleton()</span><br><span class="line"><span class="built_in">print</span>(obj3 <span class="keyword">is</span> obj4) <span class="comment">#True</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#方式二：定制元类实现单例模式</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,bases,dic</span>): <span class="comment">#定义类Mysql时就触发</span></span><br><span class="line">        <span class="comment"># 事先先从配置文件中取配置来造一个Mysql的实例出来</span></span><br><span class="line">        self.__instance = <span class="built_in">object</span>.__new__(self)  <span class="comment"># 产生对象</span></span><br><span class="line">        self.__init__(self.__instance, settings.HOST, settings.PORT)  <span class="comment"># 初始化对象</span></span><br><span class="line">        <span class="comment"># 上述两步可以合成下面一步</span></span><br><span class="line">        <span class="comment"># self.__instance=super().__call__(*args,**kwargs)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name,bases,dic)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#Mysql(...)时触发</span></span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">or</span> kwargs: <span class="comment"># args或kwargs内有值</span></span><br><span class="line">            obj=<span class="built_in">object</span>.__new__(self)</span><br><span class="line">            self.__init__(obj,*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">        <span class="keyword">return</span> self.__instance</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mysql</span>(metaclass=Mymeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port</span>):</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"> </span><br><span class="line">obj1=Mysql() <span class="comment"># 没有传值则默认从配置文件中读配置来实例化，所有的实例应该指向一个内存地址</span></span><br><span class="line">obj2=Mysql()</span><br><span class="line">obj3=Mysql()</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2 <span class="keyword">is</span> obj3)</span><br><span class="line">obj4=Mysql(<span class="string">&#x27;1.1.1.4&#x27;</span>,<span class="number">3307</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#方式三:定义一个装饰器实现单例模式</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>): <span class="comment">#cls=Mysql</span></span><br><span class="line">    _instance=cls(settings.HOST,settings.PORT)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">or</span> kwargs:</span><br><span class="line">            obj=cls(*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">        <span class="keyword">return</span> _instance</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@singleton </span><span class="comment"># Mysql=singleton(Mysql)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mysql</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port</span>):</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"> </span><br><span class="line">obj1=Mysql()</span><br><span class="line">obj2=Mysql()</span><br><span class="line">obj3=Mysql()</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2 <span class="keyword">is</span> obj3) <span class="comment">#True</span></span><br><span class="line"> </span><br><span class="line">obj4=Mysql(<span class="string">&#x27;1.1.1.3&#x27;</span>,<span class="number">3307</span>)</span><br><span class="line">obj5=Mysql(<span class="string">&#x27;1.1.1.4&#x27;</span>,<span class="number">3308</span>)</span><br><span class="line"><span class="built_in">print</span>(obj3 <span class="keyword">is</span> obj4) <span class="comment">#False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元类</title>
      <link href="/2022/04/08/%E5%85%83%E7%B1%BB/"/>
      <url>/2022/04/08/%E5%85%83%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><p>基于python的宗旨:一切皆对象。而对象都是由类实例化得到的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JasonBroTeacher</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    school = <span class="string">&#x27;JasonBro&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span>%self.name)</span><br><span class="line">t1 = JasonBroTeacher(<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line"><span class="comment"># 对象t1是由类JasonBroTeacher实例化得到</span></span><br></pre></td></tr></table></figure><p>那么类也是对象，它又是谁实例化得到的呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分别查看对象t1和JasonBroTeacher的类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(JasonBroTeacher))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果为:</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.JasonBroTeacher&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;type&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>结论1：元类就是产生类的类，默认情况下type就是所有类的元类</p><h2 id="不依赖于class关键字创建类"><a href="#不依赖于class关键字创建类" class="headerlink" title="不依赖于class关键字创建类"></a>不依赖于class关键字创建类</h2><p>根据第一个结论我们能理出两条对应关系</p><p>　　1.调用元类得到自定义的类</p><p>　　2.调用自定义的类得到自定义的类的对象</p><p>现在我们来看第一对关系，调用元类来得到自定义的类，都需要哪些参数(JasonBroTeacher&#x3D;type(…),括号内传什么？)</p><p>我们自定义一个类的时候都有哪些关键的组成部分：</p><p>　　1.类名</p><p>　　2.类的父类</p><p>　　3.类的名称空间</p><p>就以第一阶段的JasonBroTeacher类为例，calss关键字创建自定义类的步骤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.获取类名(JasonBroTeacher)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.获取类的父类(object,)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.执行类体代码获取产生的名称空间(如何获取???)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4.调用元类得到自定义类JasonBroTeacher = type(class_name,class_bases,&#123;...&#125;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h3><p>如何执行一段字符串内部的代码并将产生的名称空间交给对应的参数？　　&gt;&gt;&gt;　　 <strong>exec()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class_body = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">school = &#x27;JasonBro&#x27;</span></span><br><span class="line"><span class="string">def __init__(self,name):</span></span><br><span class="line"><span class="string">      self.name = name</span></span><br><span class="line"><span class="string">def run(self):</span></span><br><span class="line"><span class="string">      print(&#x27;%s is running&#x27;%self.name)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">class_dic = &#123;&#125;</span><br><span class="line">class_global = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(class_body,class_global,class_dic)</span><br><span class="line"><span class="comment"># class_global一般情况下都为空，除非在字符串代码内部用global关键字声明，才会将产生的名字丢到class_global全局名称空间中</span></span><br><span class="line"><span class="built_in">print</span>(class_dic)</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;school&#x27;</span>: <span class="string">&#x27;JasonBro&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>: &lt;function __init__ at <span class="number">0x000000B5D2771EA0</span>&gt;, <span class="string">&#x27;run&#x27;</span>: &lt;function run at <span class="number">0x000000B5DB5B7400</span>&gt;&#125;</span><br></pre></td></tr></table></figure><p>有了这个exec方法后，我们就可以不依赖于calss关键字创建自定义类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类名</span></span><br><span class="line">class_name = <span class="string">&#x27;OldgirlTeacher&#x27;</span></span><br><span class="line"><span class="comment"># 类的父类</span></span><br><span class="line">class_bases = (<span class="built_in">object</span>,)  <span class="comment"># 注意必须是元祖，逗号不能忘</span></span><br><span class="line"><span class="comment"># 名称空间</span></span><br><span class="line">class_body = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">school = &#x27;oldgirl&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def __init__(self,name):</span></span><br><span class="line"><span class="string">    self.name = name</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def run(self):</span></span><br><span class="line"><span class="string">    print(self.name)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">class_dic = &#123;&#125;</span><br><span class="line"><span class="built_in">exec</span>(class_body,&#123;&#125;,class_dic)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用元类创建自定义类</span></span><br><span class="line">OldgirlTeacher = <span class="built_in">type</span>(class_name,class_bases,class_dic)</span><br><span class="line"><span class="built_in">print</span>(OldgirlTeacher)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果为:&lt;class &#x27;__main__.OldgirlTeacher&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并且它可以访问自身的属性和方法，并实例化产生对象</span></span><br><span class="line"><span class="built_in">print</span>(OldgirlTeacher.school)</span><br><span class="line"><span class="built_in">print</span>(OldgirlTeacher.run)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果为:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">oldgirl</span></span><br><span class="line"><span class="string">&lt;function run at 0x000000229B157378&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">obj = OldgirlTeacher(<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obj.school)</span><br><span class="line">obj.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">oldgirl</span></span><br><span class="line"><span class="string">jason</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="自定义元类控制类的创建过程"><a href="#自定义元类控制类的创建过程" class="headerlink" title="自定义元类控制类的创建过程"></a>自定义元类控制类的创建过程</h2><p><strong>1.如何自定义元类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):  <span class="comment"># 必须是继承了type的类才是自定义元类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JasonBroTeacher</span>(metaclass=Mymeta):  <span class="comment"># 通过metaclass可以指定类的元类</span></span><br><span class="line">    school = <span class="string">&#x27;JasonBro&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span>%self.name)</span><br></pre></td></tr></table></figure><p><strong>2.<strong>call</strong></strong></p><p>思考:一个类的对象加括号调用会执行该对象父类中的__call__方法，那么类也是对象，它在加括号实例化对象的时候，是不是也应该走它父类的__call_方法？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        <span class="built_in">print</span>(args)</span><br><span class="line">        <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JasonBroTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta):</span><br><span class="line">    school = <span class="string">&#x27;JasonBro&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span>%self.name)</span><br><span class="line">obj = JasonBroTeacher(<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">打印结果:</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.JasonBroTeacher&#x27;&gt;</span></span><br><span class="line"><span class="string">(&#x27;jason&#x27;,)</span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>思考:类加括号实例化对象的时候，有哪几个步骤？</p><p>　　1.创建一个该类的空对象</p><p>　　2.实例化该空对象</p><p>　　3.将实例化完成的空对象返回给调用者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也就是说__call__里面需要做三件事</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 1.产生空对象</span></span><br><span class="line">        <span class="comment"># 2.初始化对象</span></span><br><span class="line">        <span class="comment"># 3.返回该对象</span></span><br><span class="line">        <span class="comment"># 那我先做最后一件事，返回一个123，发现</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">obj = JasonBroTeacher(<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obj)  </span><br><span class="line"><span class="comment"># 结果就是123    </span></span><br></pre></td></tr></table></figure><p>那接下来就需要我手动去干这三件事了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):　　</span><br><span class="line">　　<span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 1.产生一个空对象</span></span><br><span class="line">        obj = self.__new__(self)</span><br><span class="line">        <span class="comment"># 2.实例化该对象</span></span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line">        <span class="comment"># 3.返回该对象</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"><span class="comment"># 关于这个__new__,我们是不是不知道是个啥，我这里直接告诉你，它就是用来创建空对象的</span></span><br></pre></td></tr></table></figure><p>思考:这是类加括号产生对象的过程，那么我元类加括号产生类的过程是不是也应该是这个三步</p><p>　　1.产生一个空对象(指类)</p><p>　　2.实例化该空对象(实例化类)</p><p>　　3.将实例化完成的类对象返回</p><p>那依据上面的推导，self.__new__就是关键了，我可以在我的自定义元类里面定义一个__new__方法，看看它到底是个啥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br><span class="line">        <span class="built_in">print</span>(args)</span><br><span class="line">        <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JasonBroTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta):</span><br><span class="line">    school = <span class="string">&#x27;JasonBro&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.Mymeta&#x27;&gt;</span></span><br><span class="line"><span class="string">(&#x27;JasonBroTeacher&#x27;, (object,), &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__qualname__&#x27;: &#x27;JasonBroTeacher&#x27;, &#x27;school&#x27;: &#x27;JasonBro&#x27;, &#x27;__init__&#x27;: &lt;function JasonBroTeacher.__init__ at 0x000000323CEB9510&gt;, &#x27;run&#x27;: &lt;function JasonBroTeacher.run at 0x000000323CEE7158&gt;&#125;)</span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>我们发现__new__里面的*args参数接收到了三个位置参数，并且很容易辨认它们对应的就是类名，类的父类，类体代码执行后的名称空间</p><p>那么我们可不可以将__new__()的形参换一种写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, class_name,class_bases,class_dic</span>):</span><br><span class="line">        <span class="built_in">print</span>(class_name)</span><br><span class="line">        <span class="built_in">print</span>(class_bases)</span><br><span class="line">        <span class="built_in">print</span>(class_dic)</span><br><span class="line">　　　　 <span class="comment"># 这里需要记住的是，必须在最后调用元类type中的__new__方法来产生该空对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls,class_name,class_bases,class_dic)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JasonBroTeacher</span>(metaclass=Mymeta):</span><br><span class="line">    school = <span class="string">&#x27;JasonBro&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span>%self.name)</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, class_name,class_bases,class_dic</span>):</span><br><span class="line">        <span class="built_in">print</span>(class_name)</span><br><span class="line">        <span class="built_in">print</span>(class_bases)</span><br><span class="line">        <span class="built_in">print</span>(class_dic)</span><br><span class="line">        class_dic[<span class="string">&#x27;xxx&#x27;</span>] = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;school&#x27;</span> <span class="keyword">in</span> class_dic:</span><br><span class="line">            class_dic[<span class="string">&#x27;school&#x27;</span>] = <span class="string">&#x27;DSB&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls,class_name,class_bases,class_dic)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JasonBroTeacher</span>(metaclass=Mymeta):</span><br><span class="line">    school = <span class="string">&#x27;JasonBro&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span>%self.name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(JasonBroTeacher.xxx)  <span class="comment"># 发现可以打印出来    123</span></span><br><span class="line"><span class="built_in">print</span>(JasonBroTeacher.school) <span class="comment"># DSB</span></span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>由此我们可以通过自定义元类，并重写__new__方法来拦截类的创建过程，在类被创建出来之前进行一系列其他操作</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/29/hello-world/"/>
      <url>/2022/03/29/hello-world/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line">$ hexo server</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
